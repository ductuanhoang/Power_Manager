
Power_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a220  0800a220  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a220  0800a220  0001a220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a228  0800a228  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a228  0800a228  0001a228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a22c  0800a22c  0001a22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000074  0800a2a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800a2a4  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad35  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d92  00000000  00000000  0003add1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c8f  00000000  00000000  00040fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197a1  00000000  00000000  00057c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e853  00000000  00000000  000713d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efc23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004944  00000000  00000000  000efc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d30 	.word	0x08009d30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08009d30 	.word	0x08009d30

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fc7b 	bl	8000b38 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbff 	bl	8000a50 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fc6d 	bl	8000b38 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fc63 	bl	8000b38 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fc0d 	bl	8000aa0 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fc03 	bl	8000aa0 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	1c08      	adds	r0, r1, #0
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff65 	.word	0xffffff65
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f846 	bl	8000368 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_lmul>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	0415      	lsls	r5, r2, #16
 80002ec:	0c2d      	lsrs	r5, r5, #16
 80002ee:	000f      	movs	r7, r1
 80002f0:	0001      	movs	r1, r0
 80002f2:	002e      	movs	r6, r5
 80002f4:	46c6      	mov	lr, r8
 80002f6:	4684      	mov	ip, r0
 80002f8:	0400      	lsls	r0, r0, #16
 80002fa:	0c14      	lsrs	r4, r2, #16
 80002fc:	0c00      	lsrs	r0, r0, #16
 80002fe:	0c09      	lsrs	r1, r1, #16
 8000300:	4346      	muls	r6, r0
 8000302:	434d      	muls	r5, r1
 8000304:	4360      	muls	r0, r4
 8000306:	4361      	muls	r1, r4
 8000308:	1940      	adds	r0, r0, r5
 800030a:	0c34      	lsrs	r4, r6, #16
 800030c:	1824      	adds	r4, r4, r0
 800030e:	b500      	push	{lr}
 8000310:	42a5      	cmp	r5, r4
 8000312:	d903      	bls.n	800031c <__aeabi_lmul+0x34>
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	0240      	lsls	r0, r0, #9
 8000318:	4680      	mov	r8, r0
 800031a:	4441      	add	r1, r8
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	186d      	adds	r5, r5, r1
 8000320:	4661      	mov	r1, ip
 8000322:	4359      	muls	r1, r3
 8000324:	437a      	muls	r2, r7
 8000326:	0430      	lsls	r0, r6, #16
 8000328:	1949      	adds	r1, r1, r5
 800032a:	0424      	lsls	r4, r4, #16
 800032c:	0c00      	lsrs	r0, r0, #16
 800032e:	1820      	adds	r0, r4, r0
 8000330:	1889      	adds	r1, r1, r2
 8000332:	bc80      	pop	{r7}
 8000334:	46b8      	mov	r8, r7
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000338 <__aeabi_f2uiz>:
 8000338:	219e      	movs	r1, #158	; 0x9e
 800033a:	b510      	push	{r4, lr}
 800033c:	05c9      	lsls	r1, r1, #23
 800033e:	1c04      	adds	r4, r0, #0
 8000340:	f7ff ffa8 	bl	8000294 <__aeabi_fcmpge>
 8000344:	2800      	cmp	r0, #0
 8000346:	d103      	bne.n	8000350 <__aeabi_f2uiz+0x18>
 8000348:	1c20      	adds	r0, r4, #0
 800034a:	f000 ff21 	bl	8001190 <__aeabi_f2iz>
 800034e:	bd10      	pop	{r4, pc}
 8000350:	219e      	movs	r1, #158	; 0x9e
 8000352:	1c20      	adds	r0, r4, #0
 8000354:	05c9      	lsls	r1, r1, #23
 8000356:	f000 fd53 	bl	8000e00 <__aeabi_fsub>
 800035a:	f000 ff19 	bl	8001190 <__aeabi_f2iz>
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	061b      	lsls	r3, r3, #24
 8000362:	469c      	mov	ip, r3
 8000364:	4460      	add	r0, ip
 8000366:	e7f2      	b.n	800034e <__aeabi_f2uiz+0x16>

08000368 <__udivmoddi4>:
 8000368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036a:	4657      	mov	r7, sl
 800036c:	464e      	mov	r6, r9
 800036e:	4645      	mov	r5, r8
 8000370:	46de      	mov	lr, fp
 8000372:	b5e0      	push	{r5, r6, r7, lr}
 8000374:	0004      	movs	r4, r0
 8000376:	000d      	movs	r5, r1
 8000378:	4692      	mov	sl, r2
 800037a:	4699      	mov	r9, r3
 800037c:	b083      	sub	sp, #12
 800037e:	428b      	cmp	r3, r1
 8000380:	d830      	bhi.n	80003e4 <__udivmoddi4+0x7c>
 8000382:	d02d      	beq.n	80003e0 <__udivmoddi4+0x78>
 8000384:	4649      	mov	r1, r9
 8000386:	4650      	mov	r0, sl
 8000388:	f002 fd12 	bl	8002db0 <__clzdi2>
 800038c:	0029      	movs	r1, r5
 800038e:	0006      	movs	r6, r0
 8000390:	0020      	movs	r0, r4
 8000392:	f002 fd0d 	bl	8002db0 <__clzdi2>
 8000396:	1a33      	subs	r3, r6, r0
 8000398:	4698      	mov	r8, r3
 800039a:	3b20      	subs	r3, #32
 800039c:	469b      	mov	fp, r3
 800039e:	d433      	bmi.n	8000408 <__udivmoddi4+0xa0>
 80003a0:	465a      	mov	r2, fp
 80003a2:	4653      	mov	r3, sl
 80003a4:	4093      	lsls	r3, r2
 80003a6:	4642      	mov	r2, r8
 80003a8:	001f      	movs	r7, r3
 80003aa:	4653      	mov	r3, sl
 80003ac:	4093      	lsls	r3, r2
 80003ae:	001e      	movs	r6, r3
 80003b0:	42af      	cmp	r7, r5
 80003b2:	d83a      	bhi.n	800042a <__udivmoddi4+0xc2>
 80003b4:	42af      	cmp	r7, r5
 80003b6:	d100      	bne.n	80003ba <__udivmoddi4+0x52>
 80003b8:	e078      	b.n	80004ac <__udivmoddi4+0x144>
 80003ba:	465b      	mov	r3, fp
 80003bc:	1ba4      	subs	r4, r4, r6
 80003be:	41bd      	sbcs	r5, r7
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	da00      	bge.n	80003c6 <__udivmoddi4+0x5e>
 80003c4:	e075      	b.n	80004b2 <__udivmoddi4+0x14a>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2300      	movs	r3, #0
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2301      	movs	r3, #1
 80003d0:	465a      	mov	r2, fp
 80003d2:	4093      	lsls	r3, r2
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2301      	movs	r3, #1
 80003d8:	4642      	mov	r2, r8
 80003da:	4093      	lsls	r3, r2
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	e028      	b.n	8000432 <__udivmoddi4+0xca>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	d9cf      	bls.n	8000384 <__udivmoddi4+0x1c>
 80003e4:	2200      	movs	r2, #0
 80003e6:	2300      	movs	r3, #0
 80003e8:	9200      	str	r2, [sp, #0]
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <__udivmoddi4+0x8e>
 80003f2:	601c      	str	r4, [r3, #0]
 80003f4:	605d      	str	r5, [r3, #4]
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	b003      	add	sp, #12
 80003fc:	bcf0      	pop	{r4, r5, r6, r7}
 80003fe:	46bb      	mov	fp, r7
 8000400:	46b2      	mov	sl, r6
 8000402:	46a9      	mov	r9, r5
 8000404:	46a0      	mov	r8, r4
 8000406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	4652      	mov	r2, sl
 8000410:	40da      	lsrs	r2, r3
 8000412:	4641      	mov	r1, r8
 8000414:	0013      	movs	r3, r2
 8000416:	464a      	mov	r2, r9
 8000418:	408a      	lsls	r2, r1
 800041a:	0017      	movs	r7, r2
 800041c:	4642      	mov	r2, r8
 800041e:	431f      	orrs	r7, r3
 8000420:	4653      	mov	r3, sl
 8000422:	4093      	lsls	r3, r2
 8000424:	001e      	movs	r6, r3
 8000426:	42af      	cmp	r7, r5
 8000428:	d9c4      	bls.n	80003b4 <__udivmoddi4+0x4c>
 800042a:	2200      	movs	r2, #0
 800042c:	2300      	movs	r3, #0
 800042e:	9200      	str	r2, [sp, #0]
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	4643      	mov	r3, r8
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0d9      	beq.n	80003ec <__udivmoddi4+0x84>
 8000438:	07fb      	lsls	r3, r7, #31
 800043a:	0872      	lsrs	r2, r6, #1
 800043c:	431a      	orrs	r2, r3
 800043e:	4646      	mov	r6, r8
 8000440:	087b      	lsrs	r3, r7, #1
 8000442:	e00e      	b.n	8000462 <__udivmoddi4+0xfa>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d101      	bne.n	800044c <__udivmoddi4+0xe4>
 8000448:	42a2      	cmp	r2, r4
 800044a:	d80c      	bhi.n	8000466 <__udivmoddi4+0xfe>
 800044c:	1aa4      	subs	r4, r4, r2
 800044e:	419d      	sbcs	r5, r3
 8000450:	2001      	movs	r0, #1
 8000452:	1924      	adds	r4, r4, r4
 8000454:	416d      	adcs	r5, r5
 8000456:	2100      	movs	r1, #0
 8000458:	3e01      	subs	r6, #1
 800045a:	1824      	adds	r4, r4, r0
 800045c:	414d      	adcs	r5, r1
 800045e:	2e00      	cmp	r6, #0
 8000460:	d006      	beq.n	8000470 <__udivmoddi4+0x108>
 8000462:	42ab      	cmp	r3, r5
 8000464:	d9ee      	bls.n	8000444 <__udivmoddi4+0xdc>
 8000466:	3e01      	subs	r6, #1
 8000468:	1924      	adds	r4, r4, r4
 800046a:	416d      	adcs	r5, r5
 800046c:	2e00      	cmp	r6, #0
 800046e:	d1f8      	bne.n	8000462 <__udivmoddi4+0xfa>
 8000470:	9800      	ldr	r0, [sp, #0]
 8000472:	9901      	ldr	r1, [sp, #4]
 8000474:	465b      	mov	r3, fp
 8000476:	1900      	adds	r0, r0, r4
 8000478:	4169      	adcs	r1, r5
 800047a:	2b00      	cmp	r3, #0
 800047c:	db24      	blt.n	80004c8 <__udivmoddi4+0x160>
 800047e:	002b      	movs	r3, r5
 8000480:	465a      	mov	r2, fp
 8000482:	4644      	mov	r4, r8
 8000484:	40d3      	lsrs	r3, r2
 8000486:	002a      	movs	r2, r5
 8000488:	40e2      	lsrs	r2, r4
 800048a:	001c      	movs	r4, r3
 800048c:	465b      	mov	r3, fp
 800048e:	0015      	movs	r5, r2
 8000490:	2b00      	cmp	r3, #0
 8000492:	db2a      	blt.n	80004ea <__udivmoddi4+0x182>
 8000494:	0026      	movs	r6, r4
 8000496:	409e      	lsls	r6, r3
 8000498:	0033      	movs	r3, r6
 800049a:	0026      	movs	r6, r4
 800049c:	4647      	mov	r7, r8
 800049e:	40be      	lsls	r6, r7
 80004a0:	0032      	movs	r2, r6
 80004a2:	1a80      	subs	r0, r0, r2
 80004a4:	4199      	sbcs	r1, r3
 80004a6:	9000      	str	r0, [sp, #0]
 80004a8:	9101      	str	r1, [sp, #4]
 80004aa:	e79f      	b.n	80003ec <__udivmoddi4+0x84>
 80004ac:	42a3      	cmp	r3, r4
 80004ae:	d8bc      	bhi.n	800042a <__udivmoddi4+0xc2>
 80004b0:	e783      	b.n	80003ba <__udivmoddi4+0x52>
 80004b2:	4642      	mov	r2, r8
 80004b4:	2320      	movs	r3, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	2200      	movs	r2, #0
 80004bc:	9100      	str	r1, [sp, #0]
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	40da      	lsrs	r2, r3
 80004c4:	9201      	str	r2, [sp, #4]
 80004c6:	e786      	b.n	80003d6 <__udivmoddi4+0x6e>
 80004c8:	4642      	mov	r2, r8
 80004ca:	2320      	movs	r3, #32
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	002a      	movs	r2, r5
 80004d0:	4646      	mov	r6, r8
 80004d2:	409a      	lsls	r2, r3
 80004d4:	0023      	movs	r3, r4
 80004d6:	40f3      	lsrs	r3, r6
 80004d8:	4644      	mov	r4, r8
 80004da:	4313      	orrs	r3, r2
 80004dc:	002a      	movs	r2, r5
 80004de:	40e2      	lsrs	r2, r4
 80004e0:	001c      	movs	r4, r3
 80004e2:	465b      	mov	r3, fp
 80004e4:	0015      	movs	r5, r2
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dad4      	bge.n	8000494 <__udivmoddi4+0x12c>
 80004ea:	4642      	mov	r2, r8
 80004ec:	002f      	movs	r7, r5
 80004ee:	2320      	movs	r3, #32
 80004f0:	0026      	movs	r6, r4
 80004f2:	4097      	lsls	r7, r2
 80004f4:	1a9b      	subs	r3, r3, r2
 80004f6:	40de      	lsrs	r6, r3
 80004f8:	003b      	movs	r3, r7
 80004fa:	4333      	orrs	r3, r6
 80004fc:	e7cd      	b.n	800049a <__udivmoddi4+0x132>
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fadd>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4646      	mov	r6, r8
 8000504:	46d6      	mov	lr, sl
 8000506:	464f      	mov	r7, r9
 8000508:	024d      	lsls	r5, r1, #9
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	b5c0      	push	{r6, r7, lr}
 800050e:	0a52      	lsrs	r2, r2, #9
 8000510:	0a6e      	lsrs	r6, r5, #9
 8000512:	0047      	lsls	r7, r0, #1
 8000514:	46b0      	mov	r8, r6
 8000516:	0e3f      	lsrs	r7, r7, #24
 8000518:	004e      	lsls	r6, r1, #1
 800051a:	0fc4      	lsrs	r4, r0, #31
 800051c:	00d0      	lsls	r0, r2, #3
 800051e:	4694      	mov	ip, r2
 8000520:	003b      	movs	r3, r7
 8000522:	4682      	mov	sl, r0
 8000524:	0e36      	lsrs	r6, r6, #24
 8000526:	0fc9      	lsrs	r1, r1, #31
 8000528:	09ad      	lsrs	r5, r5, #6
 800052a:	428c      	cmp	r4, r1
 800052c:	d06d      	beq.n	800060a <__aeabi_fadd+0x10a>
 800052e:	1bb8      	subs	r0, r7, r6
 8000530:	4681      	mov	r9, r0
 8000532:	2800      	cmp	r0, #0
 8000534:	dd4d      	ble.n	80005d2 <__aeabi_fadd+0xd2>
 8000536:	2e00      	cmp	r6, #0
 8000538:	d100      	bne.n	800053c <__aeabi_fadd+0x3c>
 800053a:	e088      	b.n	800064e <__aeabi_fadd+0x14e>
 800053c:	2fff      	cmp	r7, #255	; 0xff
 800053e:	d05a      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	04db      	lsls	r3, r3, #19
 8000544:	431d      	orrs	r5, r3
 8000546:	464b      	mov	r3, r9
 8000548:	2201      	movs	r2, #1
 800054a:	2b1b      	cmp	r3, #27
 800054c:	dc0a      	bgt.n	8000564 <__aeabi_fadd+0x64>
 800054e:	002b      	movs	r3, r5
 8000550:	464a      	mov	r2, r9
 8000552:	4649      	mov	r1, r9
 8000554:	40d3      	lsrs	r3, r2
 8000556:	2220      	movs	r2, #32
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	4095      	lsls	r5, r2
 800055c:	002a      	movs	r2, r5
 800055e:	1e55      	subs	r5, r2, #1
 8000560:	41aa      	sbcs	r2, r5
 8000562:	431a      	orrs	r2, r3
 8000564:	4653      	mov	r3, sl
 8000566:	1a9a      	subs	r2, r3, r2
 8000568:	0153      	lsls	r3, r2, #5
 800056a:	d400      	bmi.n	800056e <__aeabi_fadd+0x6e>
 800056c:	e0b9      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 800056e:	0192      	lsls	r2, r2, #6
 8000570:	0996      	lsrs	r6, r2, #6
 8000572:	0030      	movs	r0, r6
 8000574:	f002 fbfe 	bl	8002d74 <__clzsi2>
 8000578:	3805      	subs	r0, #5
 800057a:	4086      	lsls	r6, r0
 800057c:	4287      	cmp	r7, r0
 800057e:	dd00      	ble.n	8000582 <__aeabi_fadd+0x82>
 8000580:	e0d4      	b.n	800072c <__aeabi_fadd+0x22c>
 8000582:	0033      	movs	r3, r6
 8000584:	1bc7      	subs	r7, r0, r7
 8000586:	2020      	movs	r0, #32
 8000588:	3701      	adds	r7, #1
 800058a:	40fb      	lsrs	r3, r7
 800058c:	1bc7      	subs	r7, r0, r7
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1e56      	subs	r6, r2, #1
 8000594:	41b2      	sbcs	r2, r6
 8000596:	2700      	movs	r7, #0
 8000598:	431a      	orrs	r2, r3
 800059a:	0753      	lsls	r3, r2, #29
 800059c:	d004      	beq.n	80005a8 <__aeabi_fadd+0xa8>
 800059e:	230f      	movs	r3, #15
 80005a0:	4013      	ands	r3, r2
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fadd+0xa8>
 80005a6:	3204      	adds	r2, #4
 80005a8:	0153      	lsls	r3, r2, #5
 80005aa:	d400      	bmi.n	80005ae <__aeabi_fadd+0xae>
 80005ac:	e09c      	b.n	80006e8 <__aeabi_fadd+0x1e8>
 80005ae:	1c7b      	adds	r3, r7, #1
 80005b0:	2ffe      	cmp	r7, #254	; 0xfe
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xb6>
 80005b4:	e09a      	b.n	80006ec <__aeabi_fadd+0x1ec>
 80005b6:	0192      	lsls	r2, r2, #6
 80005b8:	0a52      	lsrs	r2, r2, #9
 80005ba:	4694      	mov	ip, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	05d8      	lsls	r0, r3, #23
 80005c0:	4663      	mov	r3, ip
 80005c2:	07e4      	lsls	r4, r4, #31
 80005c4:	4318      	orrs	r0, r3
 80005c6:	4320      	orrs	r0, r4
 80005c8:	bce0      	pop	{r5, r6, r7}
 80005ca:	46ba      	mov	sl, r7
 80005cc:	46b1      	mov	r9, r6
 80005ce:	46a8      	mov	r8, r5
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d049      	beq.n	800066a <__aeabi_fadd+0x16a>
 80005d6:	1bf3      	subs	r3, r6, r7
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d000      	beq.n	80005de <__aeabi_fadd+0xde>
 80005dc:	e0b6      	b.n	800074c <__aeabi_fadd+0x24c>
 80005de:	4652      	mov	r2, sl
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	d060      	beq.n	80006a6 <__aeabi_fadd+0x1a6>
 80005e4:	3b01      	subs	r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0xec>
 80005ea:	e0fc      	b.n	80007e6 <__aeabi_fadd+0x2e6>
 80005ec:	2eff      	cmp	r6, #255	; 0xff
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xf2>
 80005f0:	e0b4      	b.n	800075c <__aeabi_fadd+0x25c>
 80005f2:	000c      	movs	r4, r1
 80005f4:	4642      	mov	r2, r8
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d078      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 80005fa:	2080      	movs	r0, #128	; 0x80
 80005fc:	03c0      	lsls	r0, r0, #15
 80005fe:	4310      	orrs	r0, r2
 8000600:	0242      	lsls	r2, r0, #9
 8000602:	0a53      	lsrs	r3, r2, #9
 8000604:	469c      	mov	ip, r3
 8000606:	23ff      	movs	r3, #255	; 0xff
 8000608:	e7d9      	b.n	80005be <__aeabi_fadd+0xbe>
 800060a:	1bb9      	subs	r1, r7, r6
 800060c:	2900      	cmp	r1, #0
 800060e:	dd71      	ble.n	80006f4 <__aeabi_fadd+0x1f4>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d03f      	beq.n	8000694 <__aeabi_fadd+0x194>
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d0ee      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	04db      	lsls	r3, r3, #19
 800061c:	431d      	orrs	r5, r3
 800061e:	2201      	movs	r2, #1
 8000620:	291b      	cmp	r1, #27
 8000622:	dc07      	bgt.n	8000634 <__aeabi_fadd+0x134>
 8000624:	002a      	movs	r2, r5
 8000626:	2320      	movs	r3, #32
 8000628:	40ca      	lsrs	r2, r1
 800062a:	1a59      	subs	r1, r3, r1
 800062c:	408d      	lsls	r5, r1
 800062e:	1e6b      	subs	r3, r5, #1
 8000630:	419d      	sbcs	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	4452      	add	r2, sl
 8000636:	0153      	lsls	r3, r2, #5
 8000638:	d553      	bpl.n	80006e2 <__aeabi_fadd+0x1e2>
 800063a:	3701      	adds	r7, #1
 800063c:	2fff      	cmp	r7, #255	; 0xff
 800063e:	d055      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 8000640:	2301      	movs	r3, #1
 8000642:	497b      	ldr	r1, [pc, #492]	; (8000830 <__aeabi_fadd+0x330>)
 8000644:	4013      	ands	r3, r2
 8000646:	0852      	lsrs	r2, r2, #1
 8000648:	400a      	ands	r2, r1
 800064a:	431a      	orrs	r2, r3
 800064c:	e7a5      	b.n	800059a <__aeabi_fadd+0x9a>
 800064e:	2d00      	cmp	r5, #0
 8000650:	d02c      	beq.n	80006ac <__aeabi_fadd+0x1ac>
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	469c      	mov	ip, r3
 8000658:	44e1      	add	r9, ip
 800065a:	464b      	mov	r3, r9
 800065c:	2b00      	cmp	r3, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x162>
 8000660:	e0ad      	b.n	80007be <__aeabi_fadd+0x2be>
 8000662:	2fff      	cmp	r7, #255	; 0xff
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x168>
 8000666:	e76e      	b.n	8000546 <__aeabi_fadd+0x46>
 8000668:	e7c5      	b.n	80005f6 <__aeabi_fadd+0xf6>
 800066a:	20fe      	movs	r0, #254	; 0xfe
 800066c:	1c7e      	adds	r6, r7, #1
 800066e:	4230      	tst	r0, r6
 8000670:	d160      	bne.n	8000734 <__aeabi_fadd+0x234>
 8000672:	2f00      	cmp	r7, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fadd+0x178>
 8000676:	e093      	b.n	80007a0 <__aeabi_fadd+0x2a0>
 8000678:	4652      	mov	r2, sl
 800067a:	2a00      	cmp	r2, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x180>
 800067e:	e0b6      	b.n	80007ee <__aeabi_fadd+0x2ee>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d09c      	beq.n	80005be <__aeabi_fadd+0xbe>
 8000684:	1b52      	subs	r2, r2, r5
 8000686:	0150      	lsls	r0, r2, #5
 8000688:	d400      	bmi.n	800068c <__aeabi_fadd+0x18c>
 800068a:	e0c3      	b.n	8000814 <__aeabi_fadd+0x314>
 800068c:	4653      	mov	r3, sl
 800068e:	000c      	movs	r4, r1
 8000690:	1aea      	subs	r2, r5, r3
 8000692:	e782      	b.n	800059a <__aeabi_fadd+0x9a>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d009      	beq.n	80006ac <__aeabi_fadd+0x1ac>
 8000698:	3901      	subs	r1, #1
 800069a:	2900      	cmp	r1, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x1a0>
 800069e:	e08b      	b.n	80007b8 <__aeabi_fadd+0x2b8>
 80006a0:	2fff      	cmp	r7, #255	; 0xff
 80006a2:	d1bc      	bne.n	800061e <__aeabi_fadd+0x11e>
 80006a4:	e7a7      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80006a6:	000c      	movs	r4, r1
 80006a8:	4642      	mov	r2, r8
 80006aa:	0037      	movs	r7, r6
 80006ac:	2fff      	cmp	r7, #255	; 0xff
 80006ae:	d0a2      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 80006b0:	0252      	lsls	r2, r2, #9
 80006b2:	0a53      	lsrs	r3, r2, #9
 80006b4:	469c      	mov	ip, r3
 80006b6:	b2fb      	uxtb	r3, r7
 80006b8:	e781      	b.n	80005be <__aeabi_fadd+0xbe>
 80006ba:	21fe      	movs	r1, #254	; 0xfe
 80006bc:	3701      	adds	r7, #1
 80006be:	4239      	tst	r1, r7
 80006c0:	d165      	bne.n	800078e <__aeabi_fadd+0x28e>
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d17e      	bne.n	80007c4 <__aeabi_fadd+0x2c4>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d100      	bne.n	80006cc <__aeabi_fadd+0x1cc>
 80006ca:	e0aa      	b.n	8000822 <__aeabi_fadd+0x322>
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x1d2>
 80006d0:	e775      	b.n	80005be <__aeabi_fadd+0xbe>
 80006d2:	002a      	movs	r2, r5
 80006d4:	4452      	add	r2, sl
 80006d6:	2700      	movs	r7, #0
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d502      	bpl.n	80006e2 <__aeabi_fadd+0x1e2>
 80006dc:	4b55      	ldr	r3, [pc, #340]	; (8000834 <__aeabi_fadd+0x334>)
 80006de:	3701      	adds	r7, #1
 80006e0:	401a      	ands	r2, r3
 80006e2:	0753      	lsls	r3, r2, #29
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fadd+0x1e8>
 80006e6:	e75a      	b.n	800059e <__aeabi_fadd+0x9e>
 80006e8:	08d2      	lsrs	r2, r2, #3
 80006ea:	e7df      	b.n	80006ac <__aeabi_fadd+0x1ac>
 80006ec:	2200      	movs	r2, #0
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	4694      	mov	ip, r2
 80006f2:	e764      	b.n	80005be <__aeabi_fadd+0xbe>
 80006f4:	2900      	cmp	r1, #0
 80006f6:	d0e0      	beq.n	80006ba <__aeabi_fadd+0x1ba>
 80006f8:	1bf3      	subs	r3, r6, r7
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d03e      	beq.n	800077c <__aeabi_fadd+0x27c>
 80006fe:	2eff      	cmp	r6, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x204>
 8000702:	e777      	b.n	80005f4 <__aeabi_fadd+0xf4>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0001      	movs	r1, r0
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4311      	orrs	r1, r2
 800070c:	468a      	mov	sl, r1
 800070e:	2201      	movs	r2, #1
 8000710:	2b1b      	cmp	r3, #27
 8000712:	dc08      	bgt.n	8000726 <__aeabi_fadd+0x226>
 8000714:	4652      	mov	r2, sl
 8000716:	2120      	movs	r1, #32
 8000718:	4650      	mov	r0, sl
 800071a:	40da      	lsrs	r2, r3
 800071c:	1acb      	subs	r3, r1, r3
 800071e:	4098      	lsls	r0, r3
 8000720:	1e43      	subs	r3, r0, #1
 8000722:	4198      	sbcs	r0, r3
 8000724:	4302      	orrs	r2, r0
 8000726:	0037      	movs	r7, r6
 8000728:	1952      	adds	r2, r2, r5
 800072a:	e784      	b.n	8000636 <__aeabi_fadd+0x136>
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <__aeabi_fadd+0x334>)
 800072e:	1a3f      	subs	r7, r7, r0
 8000730:	4032      	ands	r2, r6
 8000732:	e732      	b.n	800059a <__aeabi_fadd+0x9a>
 8000734:	4653      	mov	r3, sl
 8000736:	1b5e      	subs	r6, r3, r5
 8000738:	0173      	lsls	r3, r6, #5
 800073a:	d42d      	bmi.n	8000798 <__aeabi_fadd+0x298>
 800073c:	2e00      	cmp	r6, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_fadd+0x242>
 8000740:	e717      	b.n	8000572 <__aeabi_fadd+0x72>
 8000742:	2200      	movs	r2, #0
 8000744:	2400      	movs	r4, #0
 8000746:	2300      	movs	r3, #0
 8000748:	4694      	mov	ip, r2
 800074a:	e738      	b.n	80005be <__aeabi_fadd+0xbe>
 800074c:	2eff      	cmp	r6, #255	; 0xff
 800074e:	d100      	bne.n	8000752 <__aeabi_fadd+0x252>
 8000750:	e74f      	b.n	80005f2 <__aeabi_fadd+0xf2>
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	4650      	mov	r0, sl
 8000756:	04d2      	lsls	r2, r2, #19
 8000758:	4310      	orrs	r0, r2
 800075a:	4682      	mov	sl, r0
 800075c:	2201      	movs	r2, #1
 800075e:	2b1b      	cmp	r3, #27
 8000760:	dc08      	bgt.n	8000774 <__aeabi_fadd+0x274>
 8000762:	4652      	mov	r2, sl
 8000764:	2420      	movs	r4, #32
 8000766:	4650      	mov	r0, sl
 8000768:	40da      	lsrs	r2, r3
 800076a:	1ae3      	subs	r3, r4, r3
 800076c:	4098      	lsls	r0, r3
 800076e:	1e43      	subs	r3, r0, #1
 8000770:	4198      	sbcs	r0, r3
 8000772:	4302      	orrs	r2, r0
 8000774:	000c      	movs	r4, r1
 8000776:	0037      	movs	r7, r6
 8000778:	1aaa      	subs	r2, r5, r2
 800077a:	e6f5      	b.n	8000568 <__aeabi_fadd+0x68>
 800077c:	2800      	cmp	r0, #0
 800077e:	d093      	beq.n	80006a8 <__aeabi_fadd+0x1a8>
 8000780:	3b01      	subs	r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d04f      	beq.n	8000826 <__aeabi_fadd+0x326>
 8000786:	2eff      	cmp	r6, #255	; 0xff
 8000788:	d1c1      	bne.n	800070e <__aeabi_fadd+0x20e>
 800078a:	4642      	mov	r2, r8
 800078c:	e733      	b.n	80005f6 <__aeabi_fadd+0xf6>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0ac      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 8000792:	4455      	add	r5, sl
 8000794:	086a      	lsrs	r2, r5, #1
 8000796:	e7a4      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 8000798:	4653      	mov	r3, sl
 800079a:	000c      	movs	r4, r1
 800079c:	1aee      	subs	r6, r5, r3
 800079e:	e6e8      	b.n	8000572 <__aeabi_fadd+0x72>
 80007a0:	4653      	mov	r3, sl
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d128      	bne.n	80007f8 <__aeabi_fadd+0x2f8>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x2ac>
 80007aa:	e722      	b.n	80005f2 <__aeabi_fadd+0xf2>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	03db      	lsls	r3, r3, #15
 80007b0:	469c      	mov	ip, r3
 80007b2:	2400      	movs	r4, #0
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	e702      	b.n	80005be <__aeabi_fadd+0xbe>
 80007b8:	002a      	movs	r2, r5
 80007ba:	4452      	add	r2, sl
 80007bc:	e73b      	b.n	8000636 <__aeabi_fadd+0x136>
 80007be:	4653      	mov	r3, sl
 80007c0:	1b5a      	subs	r2, r3, r5
 80007c2:	e6d1      	b.n	8000568 <__aeabi_fadd+0x68>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x2ca>
 80007c8:	e714      	b.n	80005f4 <__aeabi_fadd+0xf4>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x2d0>
 80007ce:	e712      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	03db      	lsls	r3, r3, #15
 80007d4:	421a      	tst	r2, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x2da>
 80007d8:	e70d      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007da:	4641      	mov	r1, r8
 80007dc:	4219      	tst	r1, r3
 80007de:	d000      	beq.n	80007e2 <__aeabi_fadd+0x2e2>
 80007e0:	e709      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007e2:	4642      	mov	r2, r8
 80007e4:	e707      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007e6:	000c      	movs	r4, r1
 80007e8:	0037      	movs	r7, r6
 80007ea:	1aaa      	subs	r2, r5, r2
 80007ec:	e6bc      	b.n	8000568 <__aeabi_fadd+0x68>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d013      	beq.n	800081a <__aeabi_fadd+0x31a>
 80007f2:	000c      	movs	r4, r1
 80007f4:	46c4      	mov	ip, r8
 80007f6:	e6e2      	b.n	80005be <__aeabi_fadd+0xbe>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2fe>
 80007fc:	e6fb      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	421a      	tst	r2, r3
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x308>
 8000806:	e6f6      	b.n	80005f6 <__aeabi_fadd+0xf6>
 8000808:	4640      	mov	r0, r8
 800080a:	4218      	tst	r0, r3
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x310>
 800080e:	e6f2      	b.n	80005f6 <__aeabi_fadd+0xf6>
 8000810:	000c      	movs	r4, r1
 8000812:	e6ef      	b.n	80005f4 <__aeabi_fadd+0xf4>
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x31a>
 8000818:	e763      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 800081a:	2200      	movs	r2, #0
 800081c:	2400      	movs	r4, #0
 800081e:	4694      	mov	ip, r2
 8000820:	e6cd      	b.n	80005be <__aeabi_fadd+0xbe>
 8000822:	46c4      	mov	ip, r8
 8000824:	e6cb      	b.n	80005be <__aeabi_fadd+0xbe>
 8000826:	002a      	movs	r2, r5
 8000828:	0037      	movs	r7, r6
 800082a:	4452      	add	r2, sl
 800082c:	e703      	b.n	8000636 <__aeabi_fadd+0x136>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	7dffffff 	.word	0x7dffffff
 8000834:	fbffffff 	.word	0xfbffffff

08000838 <__aeabi_fdiv>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	464f      	mov	r7, r9
 800083c:	4646      	mov	r6, r8
 800083e:	46d6      	mov	lr, sl
 8000840:	0245      	lsls	r5, r0, #9
 8000842:	b5c0      	push	{r6, r7, lr}
 8000844:	0047      	lsls	r7, r0, #1
 8000846:	1c0c      	adds	r4, r1, #0
 8000848:	0a6d      	lsrs	r5, r5, #9
 800084a:	0e3f      	lsrs	r7, r7, #24
 800084c:	0fc6      	lsrs	r6, r0, #31
 800084e:	2f00      	cmp	r7, #0
 8000850:	d066      	beq.n	8000920 <__aeabi_fdiv+0xe8>
 8000852:	2fff      	cmp	r7, #255	; 0xff
 8000854:	d06c      	beq.n	8000930 <__aeabi_fdiv+0xf8>
 8000856:	2300      	movs	r3, #0
 8000858:	00ea      	lsls	r2, r5, #3
 800085a:	2580      	movs	r5, #128	; 0x80
 800085c:	4699      	mov	r9, r3
 800085e:	469a      	mov	sl, r3
 8000860:	04ed      	lsls	r5, r5, #19
 8000862:	4315      	orrs	r5, r2
 8000864:	3f7f      	subs	r7, #127	; 0x7f
 8000866:	0260      	lsls	r0, r4, #9
 8000868:	0061      	lsls	r1, r4, #1
 800086a:	0a43      	lsrs	r3, r0, #9
 800086c:	4698      	mov	r8, r3
 800086e:	0e09      	lsrs	r1, r1, #24
 8000870:	0fe4      	lsrs	r4, r4, #31
 8000872:	2900      	cmp	r1, #0
 8000874:	d048      	beq.n	8000908 <__aeabi_fdiv+0xd0>
 8000876:	29ff      	cmp	r1, #255	; 0xff
 8000878:	d010      	beq.n	800089c <__aeabi_fdiv+0x64>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	00d8      	lsls	r0, r3, #3
 800087e:	04d2      	lsls	r2, r2, #19
 8000880:	4302      	orrs	r2, r0
 8000882:	4690      	mov	r8, r2
 8000884:	2000      	movs	r0, #0
 8000886:	397f      	subs	r1, #127	; 0x7f
 8000888:	464a      	mov	r2, r9
 800088a:	0033      	movs	r3, r6
 800088c:	1a7f      	subs	r7, r7, r1
 800088e:	4302      	orrs	r2, r0
 8000890:	496c      	ldr	r1, [pc, #432]	; (8000a44 <__aeabi_fdiv+0x20c>)
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	588a      	ldr	r2, [r1, r2]
 8000896:	4063      	eors	r3, r4
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4697      	mov	pc, r2
 800089c:	2b00      	cmp	r3, #0
 800089e:	d16d      	bne.n	800097c <__aeabi_fdiv+0x144>
 80008a0:	2002      	movs	r0, #2
 80008a2:	3fff      	subs	r7, #255	; 0xff
 80008a4:	e033      	b.n	800090e <__aeabi_fdiv+0xd6>
 80008a6:	2300      	movs	r3, #0
 80008a8:	4698      	mov	r8, r3
 80008aa:	0026      	movs	r6, r4
 80008ac:	4645      	mov	r5, r8
 80008ae:	4682      	mov	sl, r0
 80008b0:	4653      	mov	r3, sl
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fdiv+0x80>
 80008b6:	e07f      	b.n	80009b8 <__aeabi_fdiv+0x180>
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d100      	bne.n	80008be <__aeabi_fdiv+0x86>
 80008bc:	e094      	b.n	80009e8 <__aeabi_fdiv+0x1b0>
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d017      	beq.n	80008f2 <__aeabi_fdiv+0xba>
 80008c2:	0038      	movs	r0, r7
 80008c4:	307f      	adds	r0, #127	; 0x7f
 80008c6:	2800      	cmp	r0, #0
 80008c8:	dd5f      	ble.n	800098a <__aeabi_fdiv+0x152>
 80008ca:	076b      	lsls	r3, r5, #29
 80008cc:	d004      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008ce:	230f      	movs	r3, #15
 80008d0:	402b      	ands	r3, r5
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008d6:	3504      	adds	r5, #4
 80008d8:	012b      	lsls	r3, r5, #4
 80008da:	d503      	bpl.n	80008e4 <__aeabi_fdiv+0xac>
 80008dc:	0038      	movs	r0, r7
 80008de:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <__aeabi_fdiv+0x210>)
 80008e0:	3080      	adds	r0, #128	; 0x80
 80008e2:	401d      	ands	r5, r3
 80008e4:	28fe      	cmp	r0, #254	; 0xfe
 80008e6:	dc67      	bgt.n	80009b8 <__aeabi_fdiv+0x180>
 80008e8:	01ad      	lsls	r5, r5, #6
 80008ea:	0a6d      	lsrs	r5, r5, #9
 80008ec:	b2c0      	uxtb	r0, r0
 80008ee:	e002      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80008f0:	001e      	movs	r6, r3
 80008f2:	2000      	movs	r0, #0
 80008f4:	2500      	movs	r5, #0
 80008f6:	05c0      	lsls	r0, r0, #23
 80008f8:	4328      	orrs	r0, r5
 80008fa:	07f6      	lsls	r6, r6, #31
 80008fc:	4330      	orrs	r0, r6
 80008fe:	bce0      	pop	{r5, r6, r7}
 8000900:	46ba      	mov	sl, r7
 8000902:	46b1      	mov	r9, r6
 8000904:	46a8      	mov	r8, r5
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2b00      	cmp	r3, #0
 800090a:	d12b      	bne.n	8000964 <__aeabi_fdiv+0x12c>
 800090c:	2001      	movs	r0, #1
 800090e:	464a      	mov	r2, r9
 8000910:	0033      	movs	r3, r6
 8000912:	494e      	ldr	r1, [pc, #312]	; (8000a4c <__aeabi_fdiv+0x214>)
 8000914:	4302      	orrs	r2, r0
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	588a      	ldr	r2, [r1, r2]
 800091a:	4063      	eors	r3, r4
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4697      	mov	pc, r2
 8000920:	2d00      	cmp	r5, #0
 8000922:	d113      	bne.n	800094c <__aeabi_fdiv+0x114>
 8000924:	2304      	movs	r3, #4
 8000926:	4699      	mov	r9, r3
 8000928:	3b03      	subs	r3, #3
 800092a:	2700      	movs	r7, #0
 800092c:	469a      	mov	sl, r3
 800092e:	e79a      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d105      	bne.n	8000940 <__aeabi_fdiv+0x108>
 8000934:	2308      	movs	r3, #8
 8000936:	4699      	mov	r9, r3
 8000938:	3b06      	subs	r3, #6
 800093a:	27ff      	movs	r7, #255	; 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e792      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	27ff      	movs	r7, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e78c      	b.n	8000866 <__aeabi_fdiv+0x2e>
 800094c:	0028      	movs	r0, r5
 800094e:	f002 fa11 	bl	8002d74 <__clzsi2>
 8000952:	2776      	movs	r7, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409d      	lsls	r5, r3
 8000958:	2300      	movs	r3, #0
 800095a:	427f      	negs	r7, r7
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a3f      	subs	r7, r7, r0
 8000962:	e780      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000964:	0018      	movs	r0, r3
 8000966:	f002 fa05 	bl	8002d74 <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	2176      	movs	r1, #118	; 0x76
 8000970:	409a      	lsls	r2, r3
 8000972:	4249      	negs	r1, r1
 8000974:	1a09      	subs	r1, r1, r0
 8000976:	4690      	mov	r8, r2
 8000978:	2000      	movs	r0, #0
 800097a:	e785      	b.n	8000888 <__aeabi_fdiv+0x50>
 800097c:	21ff      	movs	r1, #255	; 0xff
 800097e:	2003      	movs	r0, #3
 8000980:	e782      	b.n	8000888 <__aeabi_fdiv+0x50>
 8000982:	001e      	movs	r6, r3
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	2500      	movs	r5, #0
 8000988:	e7b5      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 800098a:	2301      	movs	r3, #1
 800098c:	1a1b      	subs	r3, r3, r0
 800098e:	2b1b      	cmp	r3, #27
 8000990:	dcaf      	bgt.n	80008f2 <__aeabi_fdiv+0xba>
 8000992:	379e      	adds	r7, #158	; 0x9e
 8000994:	0029      	movs	r1, r5
 8000996:	40bd      	lsls	r5, r7
 8000998:	40d9      	lsrs	r1, r3
 800099a:	1e6a      	subs	r2, r5, #1
 800099c:	4195      	sbcs	r5, r2
 800099e:	430d      	orrs	r5, r1
 80009a0:	076b      	lsls	r3, r5, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fdiv+0x176>
 80009a4:	230f      	movs	r3, #15
 80009a6:	402b      	ands	r3, r5
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fdiv+0x176>
 80009ac:	3504      	adds	r5, #4
 80009ae:	016b      	lsls	r3, r5, #5
 80009b0:	d544      	bpl.n	8000a3c <__aeabi_fdiv+0x204>
 80009b2:	2001      	movs	r0, #1
 80009b4:	2500      	movs	r5, #0
 80009b6:	e79e      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	2500      	movs	r5, #0
 80009bc:	e79b      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009be:	2580      	movs	r5, #128	; 0x80
 80009c0:	2600      	movs	r6, #0
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	03ed      	lsls	r5, r5, #15
 80009c6:	e796      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009c8:	2300      	movs	r3, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	03c0      	lsls	r0, r0, #15
 80009d0:	4205      	tst	r5, r0
 80009d2:	d009      	beq.n	80009e8 <__aeabi_fdiv+0x1b0>
 80009d4:	4643      	mov	r3, r8
 80009d6:	4203      	tst	r3, r0
 80009d8:	d106      	bne.n	80009e8 <__aeabi_fdiv+0x1b0>
 80009da:	4645      	mov	r5, r8
 80009dc:	4305      	orrs	r5, r0
 80009de:	026d      	lsls	r5, r5, #9
 80009e0:	0026      	movs	r6, r4
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	e786      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	03c0      	lsls	r0, r0, #15
 80009ec:	4305      	orrs	r5, r0
 80009ee:	026d      	lsls	r5, r5, #9
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	0a6d      	lsrs	r5, r5, #9
 80009f4:	e77f      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009f6:	4641      	mov	r1, r8
 80009f8:	016a      	lsls	r2, r5, #5
 80009fa:	0148      	lsls	r0, r1, #5
 80009fc:	4282      	cmp	r2, r0
 80009fe:	d219      	bcs.n	8000a34 <__aeabi_fdiv+0x1fc>
 8000a00:	211b      	movs	r1, #27
 8000a02:	2500      	movs	r5, #0
 8000a04:	3f01      	subs	r7, #1
 8000a06:	2601      	movs	r6, #1
 8000a08:	0014      	movs	r4, r2
 8000a0a:	006d      	lsls	r5, r5, #1
 8000a0c:	0052      	lsls	r2, r2, #1
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	db01      	blt.n	8000a16 <__aeabi_fdiv+0x1de>
 8000a12:	4290      	cmp	r0, r2
 8000a14:	d801      	bhi.n	8000a1a <__aeabi_fdiv+0x1e2>
 8000a16:	1a12      	subs	r2, r2, r0
 8000a18:	4335      	orrs	r5, r6
 8000a1a:	3901      	subs	r1, #1
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d1f3      	bne.n	8000a08 <__aeabi_fdiv+0x1d0>
 8000a20:	1e50      	subs	r0, r2, #1
 8000a22:	4182      	sbcs	r2, r0
 8000a24:	0038      	movs	r0, r7
 8000a26:	307f      	adds	r0, #127	; 0x7f
 8000a28:	001e      	movs	r6, r3
 8000a2a:	4315      	orrs	r5, r2
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_fdiv+0x1fa>
 8000a30:	e74b      	b.n	80008ca <__aeabi_fdiv+0x92>
 8000a32:	e7aa      	b.n	800098a <__aeabi_fdiv+0x152>
 8000a34:	211a      	movs	r1, #26
 8000a36:	2501      	movs	r5, #1
 8000a38:	1a12      	subs	r2, r2, r0
 8000a3a:	e7e4      	b.n	8000a06 <__aeabi_fdiv+0x1ce>
 8000a3c:	01ad      	lsls	r5, r5, #6
 8000a3e:	2000      	movs	r0, #0
 8000a40:	0a6d      	lsrs	r5, r5, #9
 8000a42:	e758      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 8000a44:	08009f8c 	.word	0x08009f8c
 8000a48:	f7ffffff 	.word	0xf7ffffff
 8000a4c:	08009fcc 	.word	0x08009fcc

08000a50 <__eqsf2>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	024e      	lsls	r6, r1, #9
 8000a56:	004c      	lsls	r4, r1, #1
 8000a58:	0245      	lsls	r5, r0, #9
 8000a5a:	0a6d      	lsrs	r5, r5, #9
 8000a5c:	0e12      	lsrs	r2, r2, #24
 8000a5e:	0fc3      	lsrs	r3, r0, #31
 8000a60:	0a76      	lsrs	r6, r6, #9
 8000a62:	0e24      	lsrs	r4, r4, #24
 8000a64:	0fc9      	lsrs	r1, r1, #31
 8000a66:	2aff      	cmp	r2, #255	; 0xff
 8000a68:	d00f      	beq.n	8000a8a <__eqsf2+0x3a>
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d011      	beq.n	8000a92 <__eqsf2+0x42>
 8000a6e:	2001      	movs	r0, #1
 8000a70:	42a2      	cmp	r2, r4
 8000a72:	d000      	beq.n	8000a76 <__eqsf2+0x26>
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	42b5      	cmp	r5, r6
 8000a78:	d1fc      	bne.n	8000a74 <__eqsf2+0x24>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d00d      	beq.n	8000a9a <__eqsf2+0x4a>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d1f8      	bne.n	8000a74 <__eqsf2+0x24>
 8000a82:	0028      	movs	r0, r5
 8000a84:	1e45      	subs	r5, r0, #1
 8000a86:	41a8      	sbcs	r0, r5
 8000a88:	e7f4      	b.n	8000a74 <__eqsf2+0x24>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d1f1      	bne.n	8000a74 <__eqsf2+0x24>
 8000a90:	e7eb      	b.n	8000a6a <__eqsf2+0x1a>
 8000a92:	2001      	movs	r0, #1
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d1ed      	bne.n	8000a74 <__eqsf2+0x24>
 8000a98:	e7e9      	b.n	8000a6e <__eqsf2+0x1e>
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	e7ea      	b.n	8000a74 <__eqsf2+0x24>
 8000a9e:	46c0      	nop			; (mov r8, r8)

08000aa0 <__gesf2>:
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	0042      	lsls	r2, r0, #1
 8000aa4:	0246      	lsls	r6, r0, #9
 8000aa6:	024d      	lsls	r5, r1, #9
 8000aa8:	004c      	lsls	r4, r1, #1
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e12      	lsrs	r2, r2, #24
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	0e24      	lsrs	r4, r4, #24
 8000ab4:	0fc8      	lsrs	r0, r1, #31
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d01f      	beq.n	8000afa <__gesf2+0x5a>
 8000aba:	2cff      	cmp	r4, #255	; 0xff
 8000abc:	d010      	beq.n	8000ae0 <__gesf2+0x40>
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d11f      	bne.n	8000b02 <__gesf2+0x62>
 8000ac2:	4271      	negs	r1, r6
 8000ac4:	4171      	adcs	r1, r6
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d101      	bne.n	8000ace <__gesf2+0x2e>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d01e      	beq.n	8000b0c <__gesf2+0x6c>
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d10e      	bne.n	8000af0 <__gesf2+0x50>
 8000ad2:	4283      	cmp	r3, r0
 8000ad4:	d01e      	beq.n	8000b14 <__gesf2+0x74>
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	1e58      	subs	r0, r3, #1
 8000ada:	4008      	ands	r0, r1
 8000adc:	3801      	subs	r0, #1
 8000ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d126      	bne.n	8000b32 <__gesf2+0x92>
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	d1f4      	bne.n	8000ad2 <__gesf2+0x32>
 8000ae8:	4271      	negs	r1, r6
 8000aea:	4171      	adcs	r1, r6
 8000aec:	2900      	cmp	r1, #0
 8000aee:	d0f0      	beq.n	8000ad2 <__gesf2+0x32>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d1f4      	bne.n	8000ade <__gesf2+0x3e>
 8000af4:	2001      	movs	r0, #1
 8000af6:	4240      	negs	r0, r0
 8000af8:	e7f1      	b.n	8000ade <__gesf2+0x3e>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d119      	bne.n	8000b32 <__gesf2+0x92>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d0ee      	beq.n	8000ae0 <__gesf2+0x40>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d1e5      	bne.n	8000ad2 <__gesf2+0x32>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d1e3      	bne.n	8000ad2 <__gesf2+0x32>
 8000b0a:	e7e4      	b.n	8000ad6 <__gesf2+0x36>
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e5      	beq.n	8000ade <__gesf2+0x3e>
 8000b12:	e7e0      	b.n	8000ad6 <__gesf2+0x36>
 8000b14:	42a2      	cmp	r2, r4
 8000b16:	dc05      	bgt.n	8000b24 <__gesf2+0x84>
 8000b18:	dbea      	blt.n	8000af0 <__gesf2+0x50>
 8000b1a:	42ae      	cmp	r6, r5
 8000b1c:	d802      	bhi.n	8000b24 <__gesf2+0x84>
 8000b1e:	d3e7      	bcc.n	8000af0 <__gesf2+0x50>
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7dc      	b.n	8000ade <__gesf2+0x3e>
 8000b24:	4241      	negs	r1, r0
 8000b26:	4141      	adcs	r1, r0
 8000b28:	4248      	negs	r0, r1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4008      	ands	r0, r1
 8000b2e:	3801      	subs	r0, #1
 8000b30:	e7d5      	b.n	8000ade <__gesf2+0x3e>
 8000b32:	2002      	movs	r0, #2
 8000b34:	4240      	negs	r0, r0
 8000b36:	e7d2      	b.n	8000ade <__gesf2+0x3e>

08000b38 <__lesf2>:
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	0042      	lsls	r2, r0, #1
 8000b3c:	0246      	lsls	r6, r0, #9
 8000b3e:	024d      	lsls	r5, r1, #9
 8000b40:	004c      	lsls	r4, r1, #1
 8000b42:	0fc3      	lsrs	r3, r0, #31
 8000b44:	0a76      	lsrs	r6, r6, #9
 8000b46:	0e12      	lsrs	r2, r2, #24
 8000b48:	0a6d      	lsrs	r5, r5, #9
 8000b4a:	0e24      	lsrs	r4, r4, #24
 8000b4c:	0fc8      	lsrs	r0, r1, #31
 8000b4e:	2aff      	cmp	r2, #255	; 0xff
 8000b50:	d00d      	beq.n	8000b6e <__lesf2+0x36>
 8000b52:	2cff      	cmp	r4, #255	; 0xff
 8000b54:	d00f      	beq.n	8000b76 <__lesf2+0x3e>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d123      	bne.n	8000ba2 <__lesf2+0x6a>
 8000b5a:	4271      	negs	r1, r6
 8000b5c:	4171      	adcs	r1, r6
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d10f      	bne.n	8000b82 <__lesf2+0x4a>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d10d      	bne.n	8000b82 <__lesf2+0x4a>
 8000b66:	2000      	movs	r0, #0
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d014      	beq.n	8000b96 <__lesf2+0x5e>
 8000b6c:	e00d      	b.n	8000b8a <__lesf2+0x52>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d110      	bne.n	8000b94 <__lesf2+0x5c>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d115      	bne.n	8000ba2 <__lesf2+0x6a>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d10c      	bne.n	8000b94 <__lesf2+0x5c>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d103      	bne.n	8000b86 <__lesf2+0x4e>
 8000b7e:	4271      	negs	r1, r6
 8000b80:	4171      	adcs	r1, r6
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d108      	bne.n	8000b98 <__lesf2+0x60>
 8000b86:	4283      	cmp	r3, r0
 8000b88:	d010      	beq.n	8000bac <__lesf2+0x74>
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	1e58      	subs	r0, r3, #1
 8000b8e:	4008      	ands	r0, r1
 8000b90:	3801      	subs	r0, #1
 8000b92:	e000      	b.n	8000b96 <__lesf2+0x5e>
 8000b94:	2002      	movs	r0, #2
 8000b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d1fc      	bne.n	8000b96 <__lesf2+0x5e>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	4240      	negs	r0, r0
 8000ba0:	e7f9      	b.n	8000b96 <__lesf2+0x5e>
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d1ef      	bne.n	8000b86 <__lesf2+0x4e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1ed      	bne.n	8000b86 <__lesf2+0x4e>
 8000baa:	e7ee      	b.n	8000b8a <__lesf2+0x52>
 8000bac:	42a2      	cmp	r2, r4
 8000bae:	dc05      	bgt.n	8000bbc <__lesf2+0x84>
 8000bb0:	dbf2      	blt.n	8000b98 <__lesf2+0x60>
 8000bb2:	42ae      	cmp	r6, r5
 8000bb4:	d802      	bhi.n	8000bbc <__lesf2+0x84>
 8000bb6:	d3ef      	bcc.n	8000b98 <__lesf2+0x60>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ec      	b.n	8000b96 <__lesf2+0x5e>
 8000bbc:	4241      	negs	r1, r0
 8000bbe:	4141      	adcs	r1, r0
 8000bc0:	4248      	negs	r0, r1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4008      	ands	r0, r1
 8000bc6:	3801      	subs	r0, #1
 8000bc8:	e7e5      	b.n	8000b96 <__lesf2+0x5e>
 8000bca:	46c0      	nop			; (mov r8, r8)

08000bcc <__aeabi_fmul>:
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	4657      	mov	r7, sl
 8000bd0:	464e      	mov	r6, r9
 8000bd2:	4645      	mov	r5, r8
 8000bd4:	46de      	mov	lr, fp
 8000bd6:	0244      	lsls	r4, r0, #9
 8000bd8:	b5e0      	push	{r5, r6, r7, lr}
 8000bda:	0045      	lsls	r5, r0, #1
 8000bdc:	1c0f      	adds	r7, r1, #0
 8000bde:	0a64      	lsrs	r4, r4, #9
 8000be0:	0e2d      	lsrs	r5, r5, #24
 8000be2:	0fc6      	lsrs	r6, r0, #31
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d047      	beq.n	8000c78 <__aeabi_fmul+0xac>
 8000be8:	2dff      	cmp	r5, #255	; 0xff
 8000bea:	d04d      	beq.n	8000c88 <__aeabi_fmul+0xbc>
 8000bec:	2300      	movs	r3, #0
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	469b      	mov	fp, r3
 8000bf4:	00e4      	lsls	r4, r4, #3
 8000bf6:	04c0      	lsls	r0, r0, #19
 8000bf8:	4304      	orrs	r4, r0
 8000bfa:	3d7f      	subs	r5, #127	; 0x7f
 8000bfc:	0278      	lsls	r0, r7, #9
 8000bfe:	0a43      	lsrs	r3, r0, #9
 8000c00:	4699      	mov	r9, r3
 8000c02:	007a      	lsls	r2, r7, #1
 8000c04:	0ffb      	lsrs	r3, r7, #31
 8000c06:	4698      	mov	r8, r3
 8000c08:	0e12      	lsrs	r2, r2, #24
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	d044      	beq.n	8000c98 <__aeabi_fmul+0xcc>
 8000c0e:	2aff      	cmp	r2, #255	; 0xff
 8000c10:	d011      	beq.n	8000c36 <__aeabi_fmul+0x6a>
 8000c12:	00d8      	lsls	r0, r3, #3
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	18ad      	adds	r5, r5, r2
 8000c22:	4647      	mov	r7, r8
 8000c24:	4653      	mov	r3, sl
 8000c26:	4077      	eors	r7, r6
 8000c28:	1c69      	adds	r1, r5, #1
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d83f      	bhi.n	8000cae <__aeabi_fmul+0xe2>
 8000c2e:	4a72      	ldr	r2, [pc, #456]	; (8000df8 <__aeabi_fmul+0x22c>)
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	58d3      	ldr	r3, [r2, r3]
 8000c34:	469f      	mov	pc, r3
 8000c36:	35ff      	adds	r5, #255	; 0xff
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fmul+0x72>
 8000c3c:	e079      	b.n	8000d32 <__aeabi_fmul+0x166>
 8000c3e:	4652      	mov	r2, sl
 8000c40:	2302      	movs	r3, #2
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4692      	mov	sl, r2
 8000c46:	2002      	movs	r0, #2
 8000c48:	e7eb      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000c4a:	4647      	mov	r7, r8
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4683      	mov	fp, r0
 8000c50:	465b      	mov	r3, fp
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d028      	beq.n	8000ca8 <__aeabi_fmul+0xdc>
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0x90>
 8000c5a:	e0c6      	b.n	8000dea <__aeabi_fmul+0x21e>
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d14f      	bne.n	8000d00 <__aeabi_fmul+0x134>
 8000c60:	2000      	movs	r0, #0
 8000c62:	2400      	movs	r4, #0
 8000c64:	05c0      	lsls	r0, r0, #23
 8000c66:	07ff      	lsls	r7, r7, #31
 8000c68:	4320      	orrs	r0, r4
 8000c6a:	4338      	orrs	r0, r7
 8000c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c6e:	46bb      	mov	fp, r7
 8000c70:	46b2      	mov	sl, r6
 8000c72:	46a9      	mov	r9, r5
 8000c74:	46a0      	mov	r8, r4
 8000c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d171      	bne.n	8000d60 <__aeabi_fmul+0x194>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	469a      	mov	sl, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469b      	mov	fp, r3
 8000c86:	e7b9      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000c88:	2c00      	cmp	r4, #0
 8000c8a:	d163      	bne.n	8000d54 <__aeabi_fmul+0x188>
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	469a      	mov	sl, r3
 8000c90:	3b06      	subs	r3, #6
 8000c92:	25ff      	movs	r5, #255	; 0xff
 8000c94:	469b      	mov	fp, r3
 8000c96:	e7b1      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d150      	bne.n	8000d3e <__aeabi_fmul+0x172>
 8000c9c:	4652      	mov	r2, sl
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	4692      	mov	sl, r2
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	e7bc      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000ca8:	20ff      	movs	r0, #255	; 0xff
 8000caa:	2400      	movs	r4, #0
 8000cac:	e7da      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000cae:	4648      	mov	r0, r9
 8000cb0:	0c26      	lsrs	r6, r4, #16
 8000cb2:	0424      	lsls	r4, r4, #16
 8000cb4:	0c22      	lsrs	r2, r4, #16
 8000cb6:	0404      	lsls	r4, r0, #16
 8000cb8:	0c24      	lsrs	r4, r4, #16
 8000cba:	464b      	mov	r3, r9
 8000cbc:	0020      	movs	r0, r4
 8000cbe:	0c1b      	lsrs	r3, r3, #16
 8000cc0:	4350      	muls	r0, r2
 8000cc2:	4374      	muls	r4, r6
 8000cc4:	435a      	muls	r2, r3
 8000cc6:	435e      	muls	r6, r3
 8000cc8:	1912      	adds	r2, r2, r4
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	189b      	adds	r3, r3, r2
 8000cce:	429c      	cmp	r4, r3
 8000cd0:	d903      	bls.n	8000cda <__aeabi_fmul+0x10e>
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	0252      	lsls	r2, r2, #9
 8000cd6:	4694      	mov	ip, r2
 8000cd8:	4466      	add	r6, ip
 8000cda:	0400      	lsls	r0, r0, #16
 8000cdc:	041a      	lsls	r2, r3, #16
 8000cde:	0c00      	lsrs	r0, r0, #16
 8000ce0:	1812      	adds	r2, r2, r0
 8000ce2:	0194      	lsls	r4, r2, #6
 8000ce4:	1e60      	subs	r0, r4, #1
 8000ce6:	4184      	sbcs	r4, r0
 8000ce8:	0c1b      	lsrs	r3, r3, #16
 8000cea:	0e92      	lsrs	r2, r2, #26
 8000cec:	199b      	adds	r3, r3, r6
 8000cee:	4314      	orrs	r4, r2
 8000cf0:	019b      	lsls	r3, r3, #6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	d572      	bpl.n	8000dde <__aeabi_fmul+0x212>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	0863      	lsrs	r3, r4, #1
 8000cfc:	4004      	ands	r4, r0
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	0008      	movs	r0, r1
 8000d02:	307f      	adds	r0, #127	; 0x7f
 8000d04:	2800      	cmp	r0, #0
 8000d06:	dd3c      	ble.n	8000d82 <__aeabi_fmul+0x1b6>
 8000d08:	0763      	lsls	r3, r4, #29
 8000d0a:	d004      	beq.n	8000d16 <__aeabi_fmul+0x14a>
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	4023      	ands	r3, r4
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fmul+0x14a>
 8000d14:	3404      	adds	r4, #4
 8000d16:	0123      	lsls	r3, r4, #4
 8000d18:	d503      	bpl.n	8000d22 <__aeabi_fmul+0x156>
 8000d1a:	3180      	adds	r1, #128	; 0x80
 8000d1c:	0008      	movs	r0, r1
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <__aeabi_fmul+0x230>)
 8000d20:	401c      	ands	r4, r3
 8000d22:	28fe      	cmp	r0, #254	; 0xfe
 8000d24:	dcc0      	bgt.n	8000ca8 <__aeabi_fmul+0xdc>
 8000d26:	01a4      	lsls	r4, r4, #6
 8000d28:	0a64      	lsrs	r4, r4, #9
 8000d2a:	b2c0      	uxtb	r0, r0
 8000d2c:	e79a      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000d2e:	0037      	movs	r7, r6
 8000d30:	e78e      	b.n	8000c50 <__aeabi_fmul+0x84>
 8000d32:	4652      	mov	r2, sl
 8000d34:	2303      	movs	r3, #3
 8000d36:	431a      	orrs	r2, r3
 8000d38:	4692      	mov	sl, r2
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	e771      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	f002 f818 	bl	8002d74 <__clzsi2>
 8000d44:	464a      	mov	r2, r9
 8000d46:	1f43      	subs	r3, r0, #5
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	1a2d      	subs	r5, r5, r0
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	2000      	movs	r0, #0
 8000d50:	3d76      	subs	r5, #118	; 0x76
 8000d52:	e766      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000d54:	230c      	movs	r3, #12
 8000d56:	469a      	mov	sl, r3
 8000d58:	3b09      	subs	r3, #9
 8000d5a:	25ff      	movs	r5, #255	; 0xff
 8000d5c:	469b      	mov	fp, r3
 8000d5e:	e74d      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000d60:	0020      	movs	r0, r4
 8000d62:	f002 f807 	bl	8002d74 <__clzsi2>
 8000d66:	2576      	movs	r5, #118	; 0x76
 8000d68:	1f43      	subs	r3, r0, #5
 8000d6a:	409c      	lsls	r4, r3
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	426d      	negs	r5, r5
 8000d70:	469a      	mov	sl, r3
 8000d72:	469b      	mov	fp, r3
 8000d74:	1a2d      	subs	r5, r5, r0
 8000d76:	e741      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000d78:	2480      	movs	r4, #128	; 0x80
 8000d7a:	2700      	movs	r7, #0
 8000d7c:	20ff      	movs	r0, #255	; 0xff
 8000d7e:	03e4      	lsls	r4, r4, #15
 8000d80:	e770      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000d82:	2301      	movs	r3, #1
 8000d84:	1a1b      	subs	r3, r3, r0
 8000d86:	2b1b      	cmp	r3, #27
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_fmul+0x1c0>
 8000d8a:	e769      	b.n	8000c60 <__aeabi_fmul+0x94>
 8000d8c:	319e      	adds	r1, #158	; 0x9e
 8000d8e:	0020      	movs	r0, r4
 8000d90:	408c      	lsls	r4, r1
 8000d92:	40d8      	lsrs	r0, r3
 8000d94:	1e63      	subs	r3, r4, #1
 8000d96:	419c      	sbcs	r4, r3
 8000d98:	4304      	orrs	r4, r0
 8000d9a:	0763      	lsls	r3, r4, #29
 8000d9c:	d004      	beq.n	8000da8 <__aeabi_fmul+0x1dc>
 8000d9e:	230f      	movs	r3, #15
 8000da0:	4023      	ands	r3, r4
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fmul+0x1dc>
 8000da6:	3404      	adds	r4, #4
 8000da8:	0163      	lsls	r3, r4, #5
 8000daa:	d51a      	bpl.n	8000de2 <__aeabi_fmul+0x216>
 8000dac:	2001      	movs	r0, #1
 8000dae:	2400      	movs	r4, #0
 8000db0:	e758      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000db2:	2080      	movs	r0, #128	; 0x80
 8000db4:	03c0      	lsls	r0, r0, #15
 8000db6:	4204      	tst	r4, r0
 8000db8:	d009      	beq.n	8000dce <__aeabi_fmul+0x202>
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4203      	tst	r3, r0
 8000dbe:	d106      	bne.n	8000dce <__aeabi_fmul+0x202>
 8000dc0:	464c      	mov	r4, r9
 8000dc2:	4304      	orrs	r4, r0
 8000dc4:	0264      	lsls	r4, r4, #9
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	20ff      	movs	r0, #255	; 0xff
 8000dca:	0a64      	lsrs	r4, r4, #9
 8000dcc:	e74a      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dce:	2080      	movs	r0, #128	; 0x80
 8000dd0:	03c0      	lsls	r0, r0, #15
 8000dd2:	4304      	orrs	r4, r0
 8000dd4:	0264      	lsls	r4, r4, #9
 8000dd6:	0037      	movs	r7, r6
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a64      	lsrs	r4, r4, #9
 8000ddc:	e742      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dde:	0029      	movs	r1, r5
 8000de0:	e78e      	b.n	8000d00 <__aeabi_fmul+0x134>
 8000de2:	01a4      	lsls	r4, r4, #6
 8000de4:	2000      	movs	r0, #0
 8000de6:	0a64      	lsrs	r4, r4, #9
 8000de8:	e73c      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dea:	2080      	movs	r0, #128	; 0x80
 8000dec:	03c0      	lsls	r0, r0, #15
 8000dee:	4304      	orrs	r4, r0
 8000df0:	0264      	lsls	r4, r4, #9
 8000df2:	20ff      	movs	r0, #255	; 0xff
 8000df4:	0a64      	lsrs	r4, r4, #9
 8000df6:	e735      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000df8:	0800a00c 	.word	0x0800a00c
 8000dfc:	f7ffffff 	.word	0xf7ffffff

08000e00 <__aeabi_fsub>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	4646      	mov	r6, r8
 8000e04:	46d6      	mov	lr, sl
 8000e06:	464f      	mov	r7, r9
 8000e08:	0243      	lsls	r3, r0, #9
 8000e0a:	0a5b      	lsrs	r3, r3, #9
 8000e0c:	00da      	lsls	r2, r3, #3
 8000e0e:	4694      	mov	ip, r2
 8000e10:	024a      	lsls	r2, r1, #9
 8000e12:	b5c0      	push	{r6, r7, lr}
 8000e14:	0044      	lsls	r4, r0, #1
 8000e16:	0a56      	lsrs	r6, r2, #9
 8000e18:	1c05      	adds	r5, r0, #0
 8000e1a:	46b0      	mov	r8, r6
 8000e1c:	0e24      	lsrs	r4, r4, #24
 8000e1e:	004e      	lsls	r6, r1, #1
 8000e20:	0992      	lsrs	r2, r2, #6
 8000e22:	001f      	movs	r7, r3
 8000e24:	0020      	movs	r0, r4
 8000e26:	4692      	mov	sl, r2
 8000e28:	0fed      	lsrs	r5, r5, #31
 8000e2a:	0e36      	lsrs	r6, r6, #24
 8000e2c:	0fc9      	lsrs	r1, r1, #31
 8000e2e:	2eff      	cmp	r6, #255	; 0xff
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x34>
 8000e32:	e07f      	b.n	8000f34 <__aeabi_fsub+0x134>
 8000e34:	2201      	movs	r2, #1
 8000e36:	4051      	eors	r1, r2
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d051      	beq.n	8000ee0 <__aeabi_fsub+0xe0>
 8000e3c:	1ba2      	subs	r2, r4, r6
 8000e3e:	4691      	mov	r9, r2
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_fsub+0x46>
 8000e44:	e07e      	b.n	8000f44 <__aeabi_fsub+0x144>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x4c>
 8000e4a:	e099      	b.n	8000f80 <__aeabi_fsub+0x180>
 8000e4c:	2cff      	cmp	r4, #255	; 0xff
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_fsub+0x52>
 8000e50:	e08c      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	4652      	mov	r2, sl
 8000e56:	04db      	lsls	r3, r3, #19
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	4692      	mov	sl, r2
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	2301      	movs	r3, #1
 8000e60:	2a1b      	cmp	r2, #27
 8000e62:	dc08      	bgt.n	8000e76 <__aeabi_fsub+0x76>
 8000e64:	4653      	mov	r3, sl
 8000e66:	2120      	movs	r1, #32
 8000e68:	40d3      	lsrs	r3, r2
 8000e6a:	1a89      	subs	r1, r1, r2
 8000e6c:	4652      	mov	r2, sl
 8000e6e:	408a      	lsls	r2, r1
 8000e70:	1e51      	subs	r1, r2, #1
 8000e72:	418a      	sbcs	r2, r1
 8000e74:	4313      	orrs	r3, r2
 8000e76:	4662      	mov	r2, ip
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	015a      	lsls	r2, r3, #5
 8000e7c:	d400      	bmi.n	8000e80 <__aeabi_fsub+0x80>
 8000e7e:	e0f3      	b.n	8001068 <__aeabi_fsub+0x268>
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	099e      	lsrs	r6, r3, #6
 8000e84:	0030      	movs	r0, r6
 8000e86:	f001 ff75 	bl	8002d74 <__clzsi2>
 8000e8a:	3805      	subs	r0, #5
 8000e8c:	4086      	lsls	r6, r0
 8000e8e:	4284      	cmp	r4, r0
 8000e90:	dd00      	ble.n	8000e94 <__aeabi_fsub+0x94>
 8000e92:	e0f7      	b.n	8001084 <__aeabi_fsub+0x284>
 8000e94:	0032      	movs	r2, r6
 8000e96:	1b04      	subs	r4, r0, r4
 8000e98:	2020      	movs	r0, #32
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	40e2      	lsrs	r2, r4
 8000e9e:	1b04      	subs	r4, r0, r4
 8000ea0:	40a6      	lsls	r6, r4
 8000ea2:	0033      	movs	r3, r6
 8000ea4:	1e5e      	subs	r6, r3, #1
 8000ea6:	41b3      	sbcs	r3, r6
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	075a      	lsls	r2, r3, #29
 8000eae:	d004      	beq.n	8000eba <__aeabi_fsub+0xba>
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	2a04      	cmp	r2, #4
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0xba>
 8000eb8:	3304      	adds	r3, #4
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	d400      	bmi.n	8000ec0 <__aeabi_fsub+0xc0>
 8000ebe:	e0d6      	b.n	800106e <__aeabi_fsub+0x26e>
 8000ec0:	1c62      	adds	r2, r4, #1
 8000ec2:	2cfe      	cmp	r4, #254	; 0xfe
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0xc8>
 8000ec6:	e0da      	b.n	800107e <__aeabi_fsub+0x27e>
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	0a5f      	lsrs	r7, r3, #9
 8000ecc:	b2d0      	uxtb	r0, r2
 8000ece:	05c0      	lsls	r0, r0, #23
 8000ed0:	4338      	orrs	r0, r7
 8000ed2:	07ed      	lsls	r5, r5, #31
 8000ed4:	4328      	orrs	r0, r5
 8000ed6:	bce0      	pop	{r5, r6, r7}
 8000ed8:	46ba      	mov	sl, r7
 8000eda:	46b1      	mov	r9, r6
 8000edc:	46a8      	mov	r8, r5
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee0:	1ba2      	subs	r2, r4, r6
 8000ee2:	4691      	mov	r9, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	dd63      	ble.n	8000fb0 <__aeabi_fsub+0x1b0>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0xee>
 8000eec:	e099      	b.n	8001022 <__aeabi_fsub+0x222>
 8000eee:	2cff      	cmp	r4, #255	; 0xff
 8000ef0:	d03c      	beq.n	8000f6c <__aeabi_fsub+0x16c>
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	4652      	mov	r2, sl
 8000ef6:	04db      	lsls	r3, r3, #19
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	4692      	mov	sl, r2
 8000efc:	464a      	mov	r2, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	2a1b      	cmp	r2, #27
 8000f02:	dc08      	bgt.n	8000f16 <__aeabi_fsub+0x116>
 8000f04:	4653      	mov	r3, sl
 8000f06:	2120      	movs	r1, #32
 8000f08:	40d3      	lsrs	r3, r2
 8000f0a:	1a89      	subs	r1, r1, r2
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	408a      	lsls	r2, r1
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	418a      	sbcs	r2, r1
 8000f14:	4313      	orrs	r3, r2
 8000f16:	4463      	add	r3, ip
 8000f18:	015a      	lsls	r2, r3, #5
 8000f1a:	d400      	bmi.n	8000f1e <__aeabi_fsub+0x11e>
 8000f1c:	e0a4      	b.n	8001068 <__aeabi_fsub+0x268>
 8000f1e:	3401      	adds	r4, #1
 8000f20:	2cff      	cmp	r4, #255	; 0xff
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x126>
 8000f24:	e0ab      	b.n	800107e <__aeabi_fsub+0x27e>
 8000f26:	2201      	movs	r2, #1
 8000f28:	4997      	ldr	r1, [pc, #604]	; (8001188 <__aeabi_fsub+0x388>)
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	400b      	ands	r3, r1
 8000f30:	4313      	orrs	r3, r2
 8000f32:	e7bb      	b.n	8000eac <__aeabi_fsub+0xac>
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d032      	beq.n	8000f9e <__aeabi_fsub+0x19e>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d035      	beq.n	8000fa8 <__aeabi_fsub+0x1a8>
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	4252      	negs	r2, r2
 8000f40:	4691      	mov	r9, r2
 8000f42:	44a1      	add	r9, r4
 8000f44:	464a      	mov	r2, r9
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d051      	beq.n	8000fee <__aeabi_fsub+0x1ee>
 8000f4a:	1b30      	subs	r0, r6, r4
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d000      	beq.n	8000f52 <__aeabi_fsub+0x152>
 8000f50:	e09c      	b.n	800108c <__aeabi_fsub+0x28c>
 8000f52:	4663      	mov	r3, ip
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_fsub+0x15a>
 8000f58:	e0df      	b.n	800111a <__aeabi_fsub+0x31a>
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0x162>
 8000f60:	e0f7      	b.n	8001152 <__aeabi_fsub+0x352>
 8000f62:	2eff      	cmp	r6, #255	; 0xff
 8000f64:	d000      	beq.n	8000f68 <__aeabi_fsub+0x168>
 8000f66:	e099      	b.n	800109c <__aeabi_fsub+0x29c>
 8000f68:	000d      	movs	r5, r1
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_fsub+0x172>
 8000f70:	e085      	b.n	800107e <__aeabi_fsub+0x27e>
 8000f72:	2780      	movs	r7, #128	; 0x80
 8000f74:	03ff      	lsls	r7, r7, #15
 8000f76:	431f      	orrs	r7, r3
 8000f78:	027f      	lsls	r7, r7, #9
 8000f7a:	20ff      	movs	r0, #255	; 0xff
 8000f7c:	0a7f      	lsrs	r7, r7, #9
 8000f7e:	e7a6      	b.n	8000ece <__aeabi_fsub+0xce>
 8000f80:	4652      	mov	r2, sl
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d074      	beq.n	8001070 <__aeabi_fsub+0x270>
 8000f86:	2201      	movs	r2, #1
 8000f88:	4252      	negs	r2, r2
 8000f8a:	4690      	mov	r8, r2
 8000f8c:	44c1      	add	r9, r8
 8000f8e:	464a      	mov	r2, r9
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x196>
 8000f94:	e0c8      	b.n	8001128 <__aeabi_fsub+0x328>
 8000f96:	2cff      	cmp	r4, #255	; 0xff
 8000f98:	d000      	beq.n	8000f9c <__aeabi_fsub+0x19c>
 8000f9a:	e75f      	b.n	8000e5c <__aeabi_fsub+0x5c>
 8000f9c:	e7e6      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4051      	eors	r1, r2
 8000fa2:	42a9      	cmp	r1, r5
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0x1a8>
 8000fa6:	e749      	b.n	8000e3c <__aeabi_fsub+0x3c>
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	4252      	negs	r2, r2
 8000fac:	4691      	mov	r9, r2
 8000fae:	44a1      	add	r9, r4
 8000fb0:	464a      	mov	r2, r9
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d043      	beq.n	800103e <__aeabi_fsub+0x23e>
 8000fb6:	1b31      	subs	r1, r6, r4
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0x1be>
 8000fbc:	e08c      	b.n	80010d8 <__aeabi_fsub+0x2d8>
 8000fbe:	2eff      	cmp	r6, #255	; 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x1c4>
 8000fc2:	e092      	b.n	80010ea <__aeabi_fsub+0x2ea>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	4662      	mov	r2, ip
 8000fc8:	04db      	lsls	r3, r3, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	4694      	mov	ip, r2
 8000fce:	2301      	movs	r3, #1
 8000fd0:	291b      	cmp	r1, #27
 8000fd2:	dc09      	bgt.n	8000fe8 <__aeabi_fsub+0x1e8>
 8000fd4:	2020      	movs	r0, #32
 8000fd6:	4663      	mov	r3, ip
 8000fd8:	4662      	mov	r2, ip
 8000fda:	40cb      	lsrs	r3, r1
 8000fdc:	1a41      	subs	r1, r0, r1
 8000fde:	408a      	lsls	r2, r1
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	1e48      	subs	r0, r1, #1
 8000fe4:	4181      	sbcs	r1, r0
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	0034      	movs	r4, r6
 8000fea:	4453      	add	r3, sl
 8000fec:	e794      	b.n	8000f18 <__aeabi_fsub+0x118>
 8000fee:	22fe      	movs	r2, #254	; 0xfe
 8000ff0:	1c66      	adds	r6, r4, #1
 8000ff2:	4232      	tst	r2, r6
 8000ff4:	d164      	bne.n	80010c0 <__aeabi_fsub+0x2c0>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_fsub+0x1fc>
 8000ffa:	e082      	b.n	8001102 <__aeabi_fsub+0x302>
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d100      	bne.n	8001004 <__aeabi_fsub+0x204>
 8001002:	e0ab      	b.n	800115c <__aeabi_fsub+0x35c>
 8001004:	4653      	mov	r3, sl
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x20c>
 800100a:	e760      	b.n	8000ece <__aeabi_fsub+0xce>
 800100c:	4663      	mov	r3, ip
 800100e:	4652      	mov	r2, sl
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	015a      	lsls	r2, r3, #5
 8001014:	d400      	bmi.n	8001018 <__aeabi_fsub+0x218>
 8001016:	e0aa      	b.n	800116e <__aeabi_fsub+0x36e>
 8001018:	4663      	mov	r3, ip
 800101a:	4652      	mov	r2, sl
 800101c:	000d      	movs	r5, r1
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	e744      	b.n	8000eac <__aeabi_fsub+0xac>
 8001022:	4652      	mov	r2, sl
 8001024:	2a00      	cmp	r2, #0
 8001026:	d023      	beq.n	8001070 <__aeabi_fsub+0x270>
 8001028:	2201      	movs	r2, #1
 800102a:	4252      	negs	r2, r2
 800102c:	4690      	mov	r8, r2
 800102e:	44c1      	add	r9, r8
 8001030:	464a      	mov	r2, r9
 8001032:	2a00      	cmp	r2, #0
 8001034:	d075      	beq.n	8001122 <__aeabi_fsub+0x322>
 8001036:	2cff      	cmp	r4, #255	; 0xff
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0x23c>
 800103a:	e75f      	b.n	8000efc <__aeabi_fsub+0xfc>
 800103c:	e796      	b.n	8000f6c <__aeabi_fsub+0x16c>
 800103e:	26fe      	movs	r6, #254	; 0xfe
 8001040:	3401      	adds	r4, #1
 8001042:	4226      	tst	r6, r4
 8001044:	d153      	bne.n	80010ee <__aeabi_fsub+0x2ee>
 8001046:	2800      	cmp	r0, #0
 8001048:	d172      	bne.n	8001130 <__aeabi_fsub+0x330>
 800104a:	4663      	mov	r3, ip
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x252>
 8001050:	e093      	b.n	800117a <__aeabi_fsub+0x37a>
 8001052:	4653      	mov	r3, sl
 8001054:	2b00      	cmp	r3, #0
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x25a>
 8001058:	e739      	b.n	8000ece <__aeabi_fsub+0xce>
 800105a:	4463      	add	r3, ip
 800105c:	2400      	movs	r4, #0
 800105e:	015a      	lsls	r2, r3, #5
 8001060:	d502      	bpl.n	8001068 <__aeabi_fsub+0x268>
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <__aeabi_fsub+0x38c>)
 8001064:	3401      	adds	r4, #1
 8001066:	4013      	ands	r3, r2
 8001068:	075a      	lsls	r2, r3, #29
 800106a:	d000      	beq.n	800106e <__aeabi_fsub+0x26e>
 800106c:	e720      	b.n	8000eb0 <__aeabi_fsub+0xb0>
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	2cff      	cmp	r4, #255	; 0xff
 8001072:	d100      	bne.n	8001076 <__aeabi_fsub+0x276>
 8001074:	e77a      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	0a5f      	lsrs	r7, r3, #9
 800107a:	b2e0      	uxtb	r0, r4
 800107c:	e727      	b.n	8000ece <__aeabi_fsub+0xce>
 800107e:	20ff      	movs	r0, #255	; 0xff
 8001080:	2700      	movs	r7, #0
 8001082:	e724      	b.n	8000ece <__aeabi_fsub+0xce>
 8001084:	4b41      	ldr	r3, [pc, #260]	; (800118c <__aeabi_fsub+0x38c>)
 8001086:	1a24      	subs	r4, r4, r0
 8001088:	4033      	ands	r3, r6
 800108a:	e70f      	b.n	8000eac <__aeabi_fsub+0xac>
 800108c:	2eff      	cmp	r6, #255	; 0xff
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x292>
 8001090:	e76a      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	4662      	mov	r2, ip
 8001096:	04db      	lsls	r3, r3, #19
 8001098:	431a      	orrs	r2, r3
 800109a:	4694      	mov	ip, r2
 800109c:	2301      	movs	r3, #1
 800109e:	281b      	cmp	r0, #27
 80010a0:	dc09      	bgt.n	80010b6 <__aeabi_fsub+0x2b6>
 80010a2:	2420      	movs	r4, #32
 80010a4:	4663      	mov	r3, ip
 80010a6:	4662      	mov	r2, ip
 80010a8:	40c3      	lsrs	r3, r0
 80010aa:	1a20      	subs	r0, r4, r0
 80010ac:	4082      	lsls	r2, r0
 80010ae:	0010      	movs	r0, r2
 80010b0:	1e44      	subs	r4, r0, #1
 80010b2:	41a0      	sbcs	r0, r4
 80010b4:	4303      	orrs	r3, r0
 80010b6:	4652      	mov	r2, sl
 80010b8:	000d      	movs	r5, r1
 80010ba:	0034      	movs	r4, r6
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	e6dc      	b.n	8000e7a <__aeabi_fsub+0x7a>
 80010c0:	4663      	mov	r3, ip
 80010c2:	4652      	mov	r2, sl
 80010c4:	1a9e      	subs	r6, r3, r2
 80010c6:	0173      	lsls	r3, r6, #5
 80010c8:	d417      	bmi.n	80010fa <__aeabi_fsub+0x2fa>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d000      	beq.n	80010d0 <__aeabi_fsub+0x2d0>
 80010ce:	e6d9      	b.n	8000e84 <__aeabi_fsub+0x84>
 80010d0:	2500      	movs	r5, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	2700      	movs	r7, #0
 80010d6:	e6fa      	b.n	8000ece <__aeabi_fsub+0xce>
 80010d8:	4663      	mov	r3, ip
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d044      	beq.n	8001168 <__aeabi_fsub+0x368>
 80010de:	3901      	subs	r1, #1
 80010e0:	2900      	cmp	r1, #0
 80010e2:	d04c      	beq.n	800117e <__aeabi_fsub+0x37e>
 80010e4:	2eff      	cmp	r6, #255	; 0xff
 80010e6:	d000      	beq.n	80010ea <__aeabi_fsub+0x2ea>
 80010e8:	e771      	b.n	8000fce <__aeabi_fsub+0x1ce>
 80010ea:	4643      	mov	r3, r8
 80010ec:	e73e      	b.n	8000f6c <__aeabi_fsub+0x16c>
 80010ee:	2cff      	cmp	r4, #255	; 0xff
 80010f0:	d0c5      	beq.n	800107e <__aeabi_fsub+0x27e>
 80010f2:	4652      	mov	r2, sl
 80010f4:	4462      	add	r2, ip
 80010f6:	0853      	lsrs	r3, r2, #1
 80010f8:	e7b6      	b.n	8001068 <__aeabi_fsub+0x268>
 80010fa:	4663      	mov	r3, ip
 80010fc:	000d      	movs	r5, r1
 80010fe:	1ad6      	subs	r6, r2, r3
 8001100:	e6c0      	b.n	8000e84 <__aeabi_fsub+0x84>
 8001102:	4662      	mov	r2, ip
 8001104:	2a00      	cmp	r2, #0
 8001106:	d116      	bne.n	8001136 <__aeabi_fsub+0x336>
 8001108:	4653      	mov	r3, sl
 800110a:	2b00      	cmp	r3, #0
 800110c:	d000      	beq.n	8001110 <__aeabi_fsub+0x310>
 800110e:	e72b      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001110:	2780      	movs	r7, #128	; 0x80
 8001112:	2500      	movs	r5, #0
 8001114:	20ff      	movs	r0, #255	; 0xff
 8001116:	03ff      	lsls	r7, r7, #15
 8001118:	e6d9      	b.n	8000ece <__aeabi_fsub+0xce>
 800111a:	000d      	movs	r5, r1
 800111c:	4643      	mov	r3, r8
 800111e:	0034      	movs	r4, r6
 8001120:	e7a6      	b.n	8001070 <__aeabi_fsub+0x270>
 8001122:	4653      	mov	r3, sl
 8001124:	4463      	add	r3, ip
 8001126:	e6f7      	b.n	8000f18 <__aeabi_fsub+0x118>
 8001128:	4663      	mov	r3, ip
 800112a:	4652      	mov	r2, sl
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	e6a4      	b.n	8000e7a <__aeabi_fsub+0x7a>
 8001130:	4662      	mov	r2, ip
 8001132:	2a00      	cmp	r2, #0
 8001134:	d0d9      	beq.n	80010ea <__aeabi_fsub+0x2ea>
 8001136:	4652      	mov	r2, sl
 8001138:	2a00      	cmp	r2, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x33e>
 800113c:	e716      	b.n	8000f6c <__aeabi_fsub+0x16c>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d100      	bne.n	8001148 <__aeabi_fsub+0x348>
 8001146:	e711      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001148:	4640      	mov	r0, r8
 800114a:	4210      	tst	r0, r2
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x350>
 800114e:	e70d      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001150:	e70a      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001152:	4652      	mov	r2, sl
 8001154:	000d      	movs	r5, r1
 8001156:	0034      	movs	r4, r6
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	e68e      	b.n	8000e7a <__aeabi_fsub+0x7a>
 800115c:	4653      	mov	r3, sl
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <__aeabi_fsub+0x374>
 8001162:	000d      	movs	r5, r1
 8001164:	4647      	mov	r7, r8
 8001166:	e6b2      	b.n	8000ece <__aeabi_fsub+0xce>
 8001168:	4643      	mov	r3, r8
 800116a:	0034      	movs	r4, r6
 800116c:	e780      	b.n	8001070 <__aeabi_fsub+0x270>
 800116e:	2b00      	cmp	r3, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_fsub+0x374>
 8001172:	e779      	b.n	8001068 <__aeabi_fsub+0x268>
 8001174:	2500      	movs	r5, #0
 8001176:	2700      	movs	r7, #0
 8001178:	e6a9      	b.n	8000ece <__aeabi_fsub+0xce>
 800117a:	4647      	mov	r7, r8
 800117c:	e6a7      	b.n	8000ece <__aeabi_fsub+0xce>
 800117e:	4653      	mov	r3, sl
 8001180:	0034      	movs	r4, r6
 8001182:	4463      	add	r3, ip
 8001184:	e6c8      	b.n	8000f18 <__aeabi_fsub+0x118>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	7dffffff 	.word	0x7dffffff
 800118c:	fbffffff 	.word	0xfbffffff

08001190 <__aeabi_f2iz>:
 8001190:	0241      	lsls	r1, r0, #9
 8001192:	0042      	lsls	r2, r0, #1
 8001194:	0fc3      	lsrs	r3, r0, #31
 8001196:	0a49      	lsrs	r1, r1, #9
 8001198:	2000      	movs	r0, #0
 800119a:	0e12      	lsrs	r2, r2, #24
 800119c:	2a7e      	cmp	r2, #126	; 0x7e
 800119e:	d903      	bls.n	80011a8 <__aeabi_f2iz+0x18>
 80011a0:	2a9d      	cmp	r2, #157	; 0x9d
 80011a2:	d902      	bls.n	80011aa <__aeabi_f2iz+0x1a>
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <__aeabi_f2iz+0x3c>)
 80011a6:	1898      	adds	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	2080      	movs	r0, #128	; 0x80
 80011ac:	0400      	lsls	r0, r0, #16
 80011ae:	4301      	orrs	r1, r0
 80011b0:	2a95      	cmp	r2, #149	; 0x95
 80011b2:	dc07      	bgt.n	80011c4 <__aeabi_f2iz+0x34>
 80011b4:	2096      	movs	r0, #150	; 0x96
 80011b6:	1a82      	subs	r2, r0, r2
 80011b8:	40d1      	lsrs	r1, r2
 80011ba:	4248      	negs	r0, r1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f3      	bne.n	80011a8 <__aeabi_f2iz+0x18>
 80011c0:	0008      	movs	r0, r1
 80011c2:	e7f1      	b.n	80011a8 <__aeabi_f2iz+0x18>
 80011c4:	3a96      	subs	r2, #150	; 0x96
 80011c6:	4091      	lsls	r1, r2
 80011c8:	e7f7      	b.n	80011ba <__aeabi_f2iz+0x2a>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	7fffffff 	.word	0x7fffffff

080011d0 <__aeabi_i2f>:
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d013      	beq.n	80011fe <__aeabi_i2f+0x2e>
 80011d6:	17c3      	asrs	r3, r0, #31
 80011d8:	18c5      	adds	r5, r0, r3
 80011da:	405d      	eors	r5, r3
 80011dc:	0fc4      	lsrs	r4, r0, #31
 80011de:	0028      	movs	r0, r5
 80011e0:	f001 fdc8 	bl	8002d74 <__clzsi2>
 80011e4:	239e      	movs	r3, #158	; 0x9e
 80011e6:	0001      	movs	r1, r0
 80011e8:	1a1b      	subs	r3, r3, r0
 80011ea:	2b96      	cmp	r3, #150	; 0x96
 80011ec:	dc0f      	bgt.n	800120e <__aeabi_i2f+0x3e>
 80011ee:	2808      	cmp	r0, #8
 80011f0:	dd01      	ble.n	80011f6 <__aeabi_i2f+0x26>
 80011f2:	3908      	subs	r1, #8
 80011f4:	408d      	lsls	r5, r1
 80011f6:	026d      	lsls	r5, r5, #9
 80011f8:	0a6d      	lsrs	r5, r5, #9
 80011fa:	b2d8      	uxtb	r0, r3
 80011fc:	e002      	b.n	8001204 <__aeabi_i2f+0x34>
 80011fe:	2400      	movs	r4, #0
 8001200:	2000      	movs	r0, #0
 8001202:	2500      	movs	r5, #0
 8001204:	05c0      	lsls	r0, r0, #23
 8001206:	4328      	orrs	r0, r5
 8001208:	07e4      	lsls	r4, r4, #31
 800120a:	4320      	orrs	r0, r4
 800120c:	bd70      	pop	{r4, r5, r6, pc}
 800120e:	2b99      	cmp	r3, #153	; 0x99
 8001210:	dd0b      	ble.n	800122a <__aeabi_i2f+0x5a>
 8001212:	2205      	movs	r2, #5
 8001214:	002e      	movs	r6, r5
 8001216:	1a12      	subs	r2, r2, r0
 8001218:	40d6      	lsrs	r6, r2
 800121a:	0002      	movs	r2, r0
 800121c:	321b      	adds	r2, #27
 800121e:	4095      	lsls	r5, r2
 8001220:	0028      	movs	r0, r5
 8001222:	1e45      	subs	r5, r0, #1
 8001224:	41a8      	sbcs	r0, r5
 8001226:	0035      	movs	r5, r6
 8001228:	4305      	orrs	r5, r0
 800122a:	2905      	cmp	r1, #5
 800122c:	dd01      	ble.n	8001232 <__aeabi_i2f+0x62>
 800122e:	1f4a      	subs	r2, r1, #5
 8001230:	4095      	lsls	r5, r2
 8001232:	002a      	movs	r2, r5
 8001234:	4e08      	ldr	r6, [pc, #32]	; (8001258 <__aeabi_i2f+0x88>)
 8001236:	4032      	ands	r2, r6
 8001238:	0768      	lsls	r0, r5, #29
 800123a:	d009      	beq.n	8001250 <__aeabi_i2f+0x80>
 800123c:	200f      	movs	r0, #15
 800123e:	4028      	ands	r0, r5
 8001240:	2804      	cmp	r0, #4
 8001242:	d005      	beq.n	8001250 <__aeabi_i2f+0x80>
 8001244:	3204      	adds	r2, #4
 8001246:	0150      	lsls	r0, r2, #5
 8001248:	d502      	bpl.n	8001250 <__aeabi_i2f+0x80>
 800124a:	239f      	movs	r3, #159	; 0x9f
 800124c:	4032      	ands	r2, r6
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	0192      	lsls	r2, r2, #6
 8001252:	0a55      	lsrs	r5, r2, #9
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	e7d5      	b.n	8001204 <__aeabi_i2f+0x34>
 8001258:	fbffffff 	.word	0xfbffffff

0800125c <__aeabi_ui2f>:
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	1e05      	subs	r5, r0, #0
 8001260:	d00e      	beq.n	8001280 <__aeabi_ui2f+0x24>
 8001262:	f001 fd87 	bl	8002d74 <__clzsi2>
 8001266:	239e      	movs	r3, #158	; 0x9e
 8001268:	0004      	movs	r4, r0
 800126a:	1a1b      	subs	r3, r3, r0
 800126c:	2b96      	cmp	r3, #150	; 0x96
 800126e:	dc0c      	bgt.n	800128a <__aeabi_ui2f+0x2e>
 8001270:	2808      	cmp	r0, #8
 8001272:	dd01      	ble.n	8001278 <__aeabi_ui2f+0x1c>
 8001274:	3c08      	subs	r4, #8
 8001276:	40a5      	lsls	r5, r4
 8001278:	026d      	lsls	r5, r5, #9
 800127a:	0a6d      	lsrs	r5, r5, #9
 800127c:	b2d8      	uxtb	r0, r3
 800127e:	e001      	b.n	8001284 <__aeabi_ui2f+0x28>
 8001280:	2000      	movs	r0, #0
 8001282:	2500      	movs	r5, #0
 8001284:	05c0      	lsls	r0, r0, #23
 8001286:	4328      	orrs	r0, r5
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	2b99      	cmp	r3, #153	; 0x99
 800128c:	dd09      	ble.n	80012a2 <__aeabi_ui2f+0x46>
 800128e:	0002      	movs	r2, r0
 8001290:	0029      	movs	r1, r5
 8001292:	321b      	adds	r2, #27
 8001294:	4091      	lsls	r1, r2
 8001296:	1e4a      	subs	r2, r1, #1
 8001298:	4191      	sbcs	r1, r2
 800129a:	2205      	movs	r2, #5
 800129c:	1a12      	subs	r2, r2, r0
 800129e:	40d5      	lsrs	r5, r2
 80012a0:	430d      	orrs	r5, r1
 80012a2:	2c05      	cmp	r4, #5
 80012a4:	dd01      	ble.n	80012aa <__aeabi_ui2f+0x4e>
 80012a6:	1f62      	subs	r2, r4, #5
 80012a8:	4095      	lsls	r5, r2
 80012aa:	0029      	movs	r1, r5
 80012ac:	4e08      	ldr	r6, [pc, #32]	; (80012d0 <__aeabi_ui2f+0x74>)
 80012ae:	4031      	ands	r1, r6
 80012b0:	076a      	lsls	r2, r5, #29
 80012b2:	d009      	beq.n	80012c8 <__aeabi_ui2f+0x6c>
 80012b4:	200f      	movs	r0, #15
 80012b6:	4028      	ands	r0, r5
 80012b8:	2804      	cmp	r0, #4
 80012ba:	d005      	beq.n	80012c8 <__aeabi_ui2f+0x6c>
 80012bc:	3104      	adds	r1, #4
 80012be:	014a      	lsls	r2, r1, #5
 80012c0:	d502      	bpl.n	80012c8 <__aeabi_ui2f+0x6c>
 80012c2:	239f      	movs	r3, #159	; 0x9f
 80012c4:	4031      	ands	r1, r6
 80012c6:	1b1b      	subs	r3, r3, r4
 80012c8:	0189      	lsls	r1, r1, #6
 80012ca:	0a4d      	lsrs	r5, r1, #9
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	e7d9      	b.n	8001284 <__aeabi_ui2f+0x28>
 80012d0:	fbffffff 	.word	0xfbffffff

080012d4 <__aeabi_dadd>:
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	464f      	mov	r7, r9
 80012d8:	46d6      	mov	lr, sl
 80012da:	4646      	mov	r6, r8
 80012dc:	000d      	movs	r5, r1
 80012de:	0001      	movs	r1, r0
 80012e0:	0018      	movs	r0, r3
 80012e2:	b5c0      	push	{r6, r7, lr}
 80012e4:	0017      	movs	r7, r2
 80012e6:	032b      	lsls	r3, r5, #12
 80012e8:	0a5a      	lsrs	r2, r3, #9
 80012ea:	0f4b      	lsrs	r3, r1, #29
 80012ec:	4313      	orrs	r3, r2
 80012ee:	00ca      	lsls	r2, r1, #3
 80012f0:	4691      	mov	r9, r2
 80012f2:	0302      	lsls	r2, r0, #12
 80012f4:	006e      	lsls	r6, r5, #1
 80012f6:	0041      	lsls	r1, r0, #1
 80012f8:	0a52      	lsrs	r2, r2, #9
 80012fa:	0fec      	lsrs	r4, r5, #31
 80012fc:	0f7d      	lsrs	r5, r7, #29
 80012fe:	4315      	orrs	r5, r2
 8001300:	0d76      	lsrs	r6, r6, #21
 8001302:	0d49      	lsrs	r1, r1, #21
 8001304:	0fc0      	lsrs	r0, r0, #31
 8001306:	4682      	mov	sl, r0
 8001308:	46ac      	mov	ip, r5
 800130a:	00ff      	lsls	r7, r7, #3
 800130c:	1a72      	subs	r2, r6, r1
 800130e:	4284      	cmp	r4, r0
 8001310:	d100      	bne.n	8001314 <__aeabi_dadd+0x40>
 8001312:	e098      	b.n	8001446 <__aeabi_dadd+0x172>
 8001314:	2a00      	cmp	r2, #0
 8001316:	dc00      	bgt.n	800131a <__aeabi_dadd+0x46>
 8001318:	e081      	b.n	800141e <__aeabi_dadd+0x14a>
 800131a:	2900      	cmp	r1, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_dadd+0x4c>
 800131e:	e0b6      	b.n	800148e <__aeabi_dadd+0x1ba>
 8001320:	49c9      	ldr	r1, [pc, #804]	; (8001648 <__aeabi_dadd+0x374>)
 8001322:	428e      	cmp	r6, r1
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x54>
 8001326:	e172      	b.n	800160e <__aeabi_dadd+0x33a>
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0028      	movs	r0, r5
 800132c:	0409      	lsls	r1, r1, #16
 800132e:	4308      	orrs	r0, r1
 8001330:	4684      	mov	ip, r0
 8001332:	2a38      	cmp	r2, #56	; 0x38
 8001334:	dd00      	ble.n	8001338 <__aeabi_dadd+0x64>
 8001336:	e15e      	b.n	80015f6 <__aeabi_dadd+0x322>
 8001338:	2a1f      	cmp	r2, #31
 800133a:	dd00      	ble.n	800133e <__aeabi_dadd+0x6a>
 800133c:	e1ee      	b.n	800171c <__aeabi_dadd+0x448>
 800133e:	2020      	movs	r0, #32
 8001340:	0039      	movs	r1, r7
 8001342:	4665      	mov	r5, ip
 8001344:	1a80      	subs	r0, r0, r2
 8001346:	4087      	lsls	r7, r0
 8001348:	40d1      	lsrs	r1, r2
 800134a:	4085      	lsls	r5, r0
 800134c:	430d      	orrs	r5, r1
 800134e:	0039      	movs	r1, r7
 8001350:	1e4f      	subs	r7, r1, #1
 8001352:	41b9      	sbcs	r1, r7
 8001354:	4667      	mov	r7, ip
 8001356:	40d7      	lsrs	r7, r2
 8001358:	4329      	orrs	r1, r5
 800135a:	1bdb      	subs	r3, r3, r7
 800135c:	464a      	mov	r2, r9
 800135e:	1a55      	subs	r5, r2, r1
 8001360:	45a9      	cmp	r9, r5
 8001362:	4189      	sbcs	r1, r1
 8001364:	4249      	negs	r1, r1
 8001366:	1a5b      	subs	r3, r3, r1
 8001368:	4698      	mov	r8, r3
 800136a:	4643      	mov	r3, r8
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	d400      	bmi.n	8001372 <__aeabi_dadd+0x9e>
 8001370:	e0cc      	b.n	800150c <__aeabi_dadd+0x238>
 8001372:	4643      	mov	r3, r8
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	0a5b      	lsrs	r3, r3, #9
 8001378:	4698      	mov	r8, r3
 800137a:	4643      	mov	r3, r8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d100      	bne.n	8001382 <__aeabi_dadd+0xae>
 8001380:	e12c      	b.n	80015dc <__aeabi_dadd+0x308>
 8001382:	4640      	mov	r0, r8
 8001384:	f001 fcf6 	bl	8002d74 <__clzsi2>
 8001388:	0001      	movs	r1, r0
 800138a:	3908      	subs	r1, #8
 800138c:	2220      	movs	r2, #32
 800138e:	0028      	movs	r0, r5
 8001390:	4643      	mov	r3, r8
 8001392:	1a52      	subs	r2, r2, r1
 8001394:	408b      	lsls	r3, r1
 8001396:	40d0      	lsrs	r0, r2
 8001398:	408d      	lsls	r5, r1
 800139a:	4303      	orrs	r3, r0
 800139c:	428e      	cmp	r6, r1
 800139e:	dd00      	ble.n	80013a2 <__aeabi_dadd+0xce>
 80013a0:	e117      	b.n	80015d2 <__aeabi_dadd+0x2fe>
 80013a2:	1b8e      	subs	r6, r1, r6
 80013a4:	1c72      	adds	r2, r6, #1
 80013a6:	2a1f      	cmp	r2, #31
 80013a8:	dd00      	ble.n	80013ac <__aeabi_dadd+0xd8>
 80013aa:	e1a7      	b.n	80016fc <__aeabi_dadd+0x428>
 80013ac:	2120      	movs	r1, #32
 80013ae:	0018      	movs	r0, r3
 80013b0:	002e      	movs	r6, r5
 80013b2:	1a89      	subs	r1, r1, r2
 80013b4:	408d      	lsls	r5, r1
 80013b6:	4088      	lsls	r0, r1
 80013b8:	40d6      	lsrs	r6, r2
 80013ba:	40d3      	lsrs	r3, r2
 80013bc:	1e69      	subs	r1, r5, #1
 80013be:	418d      	sbcs	r5, r1
 80013c0:	4330      	orrs	r0, r6
 80013c2:	4698      	mov	r8, r3
 80013c4:	2600      	movs	r6, #0
 80013c6:	4305      	orrs	r5, r0
 80013c8:	076b      	lsls	r3, r5, #29
 80013ca:	d009      	beq.n	80013e0 <__aeabi_dadd+0x10c>
 80013cc:	230f      	movs	r3, #15
 80013ce:	402b      	ands	r3, r5
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d005      	beq.n	80013e0 <__aeabi_dadd+0x10c>
 80013d4:	1d2b      	adds	r3, r5, #4
 80013d6:	42ab      	cmp	r3, r5
 80013d8:	41ad      	sbcs	r5, r5
 80013da:	426d      	negs	r5, r5
 80013dc:	44a8      	add	r8, r5
 80013de:	001d      	movs	r5, r3
 80013e0:	4643      	mov	r3, r8
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	d400      	bmi.n	80013e8 <__aeabi_dadd+0x114>
 80013e6:	e094      	b.n	8001512 <__aeabi_dadd+0x23e>
 80013e8:	4b97      	ldr	r3, [pc, #604]	; (8001648 <__aeabi_dadd+0x374>)
 80013ea:	1c72      	adds	r2, r6, #1
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x11e>
 80013f0:	e09d      	b.n	800152e <__aeabi_dadd+0x25a>
 80013f2:	4641      	mov	r1, r8
 80013f4:	4b95      	ldr	r3, [pc, #596]	; (800164c <__aeabi_dadd+0x378>)
 80013f6:	08ed      	lsrs	r5, r5, #3
 80013f8:	4019      	ands	r1, r3
 80013fa:	000b      	movs	r3, r1
 80013fc:	0552      	lsls	r2, r2, #21
 80013fe:	0749      	lsls	r1, r1, #29
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	4329      	orrs	r1, r5
 8001404:	0b1b      	lsrs	r3, r3, #12
 8001406:	0d52      	lsrs	r2, r2, #21
 8001408:	0512      	lsls	r2, r2, #20
 800140a:	4313      	orrs	r3, r2
 800140c:	07e4      	lsls	r4, r4, #31
 800140e:	4323      	orrs	r3, r4
 8001410:	0008      	movs	r0, r1
 8001412:	0019      	movs	r1, r3
 8001414:	bce0      	pop	{r5, r6, r7}
 8001416:	46ba      	mov	sl, r7
 8001418:	46b1      	mov	r9, r6
 800141a:	46a8      	mov	r8, r5
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	2a00      	cmp	r2, #0
 8001420:	d043      	beq.n	80014aa <__aeabi_dadd+0x1d6>
 8001422:	1b8a      	subs	r2, r1, r6
 8001424:	2e00      	cmp	r6, #0
 8001426:	d000      	beq.n	800142a <__aeabi_dadd+0x156>
 8001428:	e12a      	b.n	8001680 <__aeabi_dadd+0x3ac>
 800142a:	464c      	mov	r4, r9
 800142c:	431c      	orrs	r4, r3
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x15e>
 8001430:	e1d1      	b.n	80017d6 <__aeabi_dadd+0x502>
 8001432:	1e54      	subs	r4, r2, #1
 8001434:	2a01      	cmp	r2, #1
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x166>
 8001438:	e21f      	b.n	800187a <__aeabi_dadd+0x5a6>
 800143a:	4d83      	ldr	r5, [pc, #524]	; (8001648 <__aeabi_dadd+0x374>)
 800143c:	42aa      	cmp	r2, r5
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0x16e>
 8001440:	e272      	b.n	8001928 <__aeabi_dadd+0x654>
 8001442:	0022      	movs	r2, r4
 8001444:	e123      	b.n	800168e <__aeabi_dadd+0x3ba>
 8001446:	2a00      	cmp	r2, #0
 8001448:	dc00      	bgt.n	800144c <__aeabi_dadd+0x178>
 800144a:	e098      	b.n	800157e <__aeabi_dadd+0x2aa>
 800144c:	2900      	cmp	r1, #0
 800144e:	d042      	beq.n	80014d6 <__aeabi_dadd+0x202>
 8001450:	497d      	ldr	r1, [pc, #500]	; (8001648 <__aeabi_dadd+0x374>)
 8001452:	428e      	cmp	r6, r1
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x184>
 8001456:	e0da      	b.n	800160e <__aeabi_dadd+0x33a>
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0028      	movs	r0, r5
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	4308      	orrs	r0, r1
 8001460:	4684      	mov	ip, r0
 8001462:	2a38      	cmp	r2, #56	; 0x38
 8001464:	dd00      	ble.n	8001468 <__aeabi_dadd+0x194>
 8001466:	e129      	b.n	80016bc <__aeabi_dadd+0x3e8>
 8001468:	2a1f      	cmp	r2, #31
 800146a:	dc00      	bgt.n	800146e <__aeabi_dadd+0x19a>
 800146c:	e187      	b.n	800177e <__aeabi_dadd+0x4aa>
 800146e:	0011      	movs	r1, r2
 8001470:	4665      	mov	r5, ip
 8001472:	3920      	subs	r1, #32
 8001474:	40cd      	lsrs	r5, r1
 8001476:	2a20      	cmp	r2, #32
 8001478:	d004      	beq.n	8001484 <__aeabi_dadd+0x1b0>
 800147a:	2040      	movs	r0, #64	; 0x40
 800147c:	4661      	mov	r1, ip
 800147e:	1a82      	subs	r2, r0, r2
 8001480:	4091      	lsls	r1, r2
 8001482:	430f      	orrs	r7, r1
 8001484:	0039      	movs	r1, r7
 8001486:	1e4f      	subs	r7, r1, #1
 8001488:	41b9      	sbcs	r1, r7
 800148a:	430d      	orrs	r5, r1
 800148c:	e11b      	b.n	80016c6 <__aeabi_dadd+0x3f2>
 800148e:	0029      	movs	r1, r5
 8001490:	4339      	orrs	r1, r7
 8001492:	d100      	bne.n	8001496 <__aeabi_dadd+0x1c2>
 8001494:	e0b5      	b.n	8001602 <__aeabi_dadd+0x32e>
 8001496:	1e51      	subs	r1, r2, #1
 8001498:	2a01      	cmp	r2, #1
 800149a:	d100      	bne.n	800149e <__aeabi_dadd+0x1ca>
 800149c:	e1ab      	b.n	80017f6 <__aeabi_dadd+0x522>
 800149e:	486a      	ldr	r0, [pc, #424]	; (8001648 <__aeabi_dadd+0x374>)
 80014a0:	4282      	cmp	r2, r0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x1d2>
 80014a4:	e1b2      	b.n	800180c <__aeabi_dadd+0x538>
 80014a6:	000a      	movs	r2, r1
 80014a8:	e743      	b.n	8001332 <__aeabi_dadd+0x5e>
 80014aa:	4969      	ldr	r1, [pc, #420]	; (8001650 <__aeabi_dadd+0x37c>)
 80014ac:	1c75      	adds	r5, r6, #1
 80014ae:	420d      	tst	r5, r1
 80014b0:	d000      	beq.n	80014b4 <__aeabi_dadd+0x1e0>
 80014b2:	e0cf      	b.n	8001654 <__aeabi_dadd+0x380>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x1e6>
 80014b8:	e193      	b.n	80017e2 <__aeabi_dadd+0x50e>
 80014ba:	4649      	mov	r1, r9
 80014bc:	4319      	orrs	r1, r3
 80014be:	d100      	bne.n	80014c2 <__aeabi_dadd+0x1ee>
 80014c0:	e1d1      	b.n	8001866 <__aeabi_dadd+0x592>
 80014c2:	4661      	mov	r1, ip
 80014c4:	4339      	orrs	r1, r7
 80014c6:	d000      	beq.n	80014ca <__aeabi_dadd+0x1f6>
 80014c8:	e1e3      	b.n	8001892 <__aeabi_dadd+0x5be>
 80014ca:	4649      	mov	r1, r9
 80014cc:	0758      	lsls	r0, r3, #29
 80014ce:	08c9      	lsrs	r1, r1, #3
 80014d0:	4301      	orrs	r1, r0
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	e026      	b.n	8001524 <__aeabi_dadd+0x250>
 80014d6:	0029      	movs	r1, r5
 80014d8:	4339      	orrs	r1, r7
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x20a>
 80014dc:	e091      	b.n	8001602 <__aeabi_dadd+0x32e>
 80014de:	1e51      	subs	r1, r2, #1
 80014e0:	2a01      	cmp	r2, #1
 80014e2:	d005      	beq.n	80014f0 <__aeabi_dadd+0x21c>
 80014e4:	4858      	ldr	r0, [pc, #352]	; (8001648 <__aeabi_dadd+0x374>)
 80014e6:	4282      	cmp	r2, r0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x218>
 80014ea:	e18f      	b.n	800180c <__aeabi_dadd+0x538>
 80014ec:	000a      	movs	r2, r1
 80014ee:	e7b8      	b.n	8001462 <__aeabi_dadd+0x18e>
 80014f0:	003d      	movs	r5, r7
 80014f2:	444d      	add	r5, r9
 80014f4:	454d      	cmp	r5, r9
 80014f6:	4189      	sbcs	r1, r1
 80014f8:	4463      	add	r3, ip
 80014fa:	4698      	mov	r8, r3
 80014fc:	4249      	negs	r1, r1
 80014fe:	4488      	add	r8, r1
 8001500:	4643      	mov	r3, r8
 8001502:	2602      	movs	r6, #2
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	d500      	bpl.n	800150a <__aeabi_dadd+0x236>
 8001508:	e0eb      	b.n	80016e2 <__aeabi_dadd+0x40e>
 800150a:	3e01      	subs	r6, #1
 800150c:	076b      	lsls	r3, r5, #29
 800150e:	d000      	beq.n	8001512 <__aeabi_dadd+0x23e>
 8001510:	e75c      	b.n	80013cc <__aeabi_dadd+0xf8>
 8001512:	4643      	mov	r3, r8
 8001514:	08e9      	lsrs	r1, r5, #3
 8001516:	075a      	lsls	r2, r3, #29
 8001518:	4311      	orrs	r1, r2
 800151a:	0032      	movs	r2, r6
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	484a      	ldr	r0, [pc, #296]	; (8001648 <__aeabi_dadd+0x374>)
 8001520:	4282      	cmp	r2, r0
 8001522:	d021      	beq.n	8001568 <__aeabi_dadd+0x294>
 8001524:	031b      	lsls	r3, r3, #12
 8001526:	0552      	lsls	r2, r2, #21
 8001528:	0b1b      	lsrs	r3, r3, #12
 800152a:	0d52      	lsrs	r2, r2, #21
 800152c:	e76c      	b.n	8001408 <__aeabi_dadd+0x134>
 800152e:	2300      	movs	r3, #0
 8001530:	2100      	movs	r1, #0
 8001532:	e769      	b.n	8001408 <__aeabi_dadd+0x134>
 8001534:	002a      	movs	r2, r5
 8001536:	433a      	orrs	r2, r7
 8001538:	d069      	beq.n	800160e <__aeabi_dadd+0x33a>
 800153a:	464a      	mov	r2, r9
 800153c:	0758      	lsls	r0, r3, #29
 800153e:	08d1      	lsrs	r1, r2, #3
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	031b      	lsls	r3, r3, #12
 8001546:	4308      	orrs	r0, r1
 8001548:	421a      	tst	r2, r3
 800154a:	d007      	beq.n	800155c <__aeabi_dadd+0x288>
 800154c:	0029      	movs	r1, r5
 800154e:	08ed      	lsrs	r5, r5, #3
 8001550:	421d      	tst	r5, r3
 8001552:	d103      	bne.n	800155c <__aeabi_dadd+0x288>
 8001554:	002a      	movs	r2, r5
 8001556:	08ff      	lsrs	r7, r7, #3
 8001558:	0748      	lsls	r0, r1, #29
 800155a:	4338      	orrs	r0, r7
 800155c:	0f43      	lsrs	r3, r0, #29
 800155e:	00c1      	lsls	r1, r0, #3
 8001560:	075b      	lsls	r3, r3, #29
 8001562:	08c9      	lsrs	r1, r1, #3
 8001564:	4319      	orrs	r1, r3
 8001566:	0013      	movs	r3, r2
 8001568:	000a      	movs	r2, r1
 800156a:	431a      	orrs	r2, r3
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x29c>
 800156e:	e213      	b.n	8001998 <__aeabi_dadd+0x6c4>
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	0312      	lsls	r2, r2, #12
 8001574:	4313      	orrs	r3, r2
 8001576:	031b      	lsls	r3, r3, #12
 8001578:	4a33      	ldr	r2, [pc, #204]	; (8001648 <__aeabi_dadd+0x374>)
 800157a:	0b1b      	lsrs	r3, r3, #12
 800157c:	e744      	b.n	8001408 <__aeabi_dadd+0x134>
 800157e:	2a00      	cmp	r2, #0
 8001580:	d04b      	beq.n	800161a <__aeabi_dadd+0x346>
 8001582:	1b8a      	subs	r2, r1, r6
 8001584:	2e00      	cmp	r6, #0
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x2b6>
 8001588:	e0e7      	b.n	800175a <__aeabi_dadd+0x486>
 800158a:	482f      	ldr	r0, [pc, #188]	; (8001648 <__aeabi_dadd+0x374>)
 800158c:	4281      	cmp	r1, r0
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x2be>
 8001590:	e195      	b.n	80018be <__aeabi_dadd+0x5ea>
 8001592:	2080      	movs	r0, #128	; 0x80
 8001594:	0400      	lsls	r0, r0, #16
 8001596:	4303      	orrs	r3, r0
 8001598:	2a38      	cmp	r2, #56	; 0x38
 800159a:	dd00      	ble.n	800159e <__aeabi_dadd+0x2ca>
 800159c:	e143      	b.n	8001826 <__aeabi_dadd+0x552>
 800159e:	2a1f      	cmp	r2, #31
 80015a0:	dd00      	ble.n	80015a4 <__aeabi_dadd+0x2d0>
 80015a2:	e1db      	b.n	800195c <__aeabi_dadd+0x688>
 80015a4:	2020      	movs	r0, #32
 80015a6:	001d      	movs	r5, r3
 80015a8:	464e      	mov	r6, r9
 80015aa:	1a80      	subs	r0, r0, r2
 80015ac:	4085      	lsls	r5, r0
 80015ae:	40d6      	lsrs	r6, r2
 80015b0:	4335      	orrs	r5, r6
 80015b2:	464e      	mov	r6, r9
 80015b4:	4086      	lsls	r6, r0
 80015b6:	0030      	movs	r0, r6
 80015b8:	40d3      	lsrs	r3, r2
 80015ba:	1e46      	subs	r6, r0, #1
 80015bc:	41b0      	sbcs	r0, r6
 80015be:	449c      	add	ip, r3
 80015c0:	4305      	orrs	r5, r0
 80015c2:	19ed      	adds	r5, r5, r7
 80015c4:	42bd      	cmp	r5, r7
 80015c6:	419b      	sbcs	r3, r3
 80015c8:	425b      	negs	r3, r3
 80015ca:	4463      	add	r3, ip
 80015cc:	4698      	mov	r8, r3
 80015ce:	000e      	movs	r6, r1
 80015d0:	e07f      	b.n	80016d2 <__aeabi_dadd+0x3fe>
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <__aeabi_dadd+0x378>)
 80015d4:	1a76      	subs	r6, r6, r1
 80015d6:	4013      	ands	r3, r2
 80015d8:	4698      	mov	r8, r3
 80015da:	e6f5      	b.n	80013c8 <__aeabi_dadd+0xf4>
 80015dc:	0028      	movs	r0, r5
 80015de:	f001 fbc9 	bl	8002d74 <__clzsi2>
 80015e2:	0001      	movs	r1, r0
 80015e4:	3118      	adds	r1, #24
 80015e6:	291f      	cmp	r1, #31
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_dadd+0x318>
 80015ea:	e6cf      	b.n	800138c <__aeabi_dadd+0xb8>
 80015ec:	002b      	movs	r3, r5
 80015ee:	3808      	subs	r0, #8
 80015f0:	4083      	lsls	r3, r0
 80015f2:	2500      	movs	r5, #0
 80015f4:	e6d2      	b.n	800139c <__aeabi_dadd+0xc8>
 80015f6:	4662      	mov	r2, ip
 80015f8:	433a      	orrs	r2, r7
 80015fa:	0011      	movs	r1, r2
 80015fc:	1e4f      	subs	r7, r1, #1
 80015fe:	41b9      	sbcs	r1, r7
 8001600:	e6ac      	b.n	800135c <__aeabi_dadd+0x88>
 8001602:	4649      	mov	r1, r9
 8001604:	0758      	lsls	r0, r3, #29
 8001606:	08c9      	lsrs	r1, r1, #3
 8001608:	4301      	orrs	r1, r0
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	e787      	b.n	800151e <__aeabi_dadd+0x24a>
 800160e:	4649      	mov	r1, r9
 8001610:	075a      	lsls	r2, r3, #29
 8001612:	08c9      	lsrs	r1, r1, #3
 8001614:	4311      	orrs	r1, r2
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	e7a6      	b.n	8001568 <__aeabi_dadd+0x294>
 800161a:	490d      	ldr	r1, [pc, #52]	; (8001650 <__aeabi_dadd+0x37c>)
 800161c:	1c70      	adds	r0, r6, #1
 800161e:	4208      	tst	r0, r1
 8001620:	d000      	beq.n	8001624 <__aeabi_dadd+0x350>
 8001622:	e0bb      	b.n	800179c <__aeabi_dadd+0x4c8>
 8001624:	2e00      	cmp	r6, #0
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x356>
 8001628:	e114      	b.n	8001854 <__aeabi_dadd+0x580>
 800162a:	4649      	mov	r1, r9
 800162c:	4319      	orrs	r1, r3
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x35e>
 8001630:	e175      	b.n	800191e <__aeabi_dadd+0x64a>
 8001632:	0029      	movs	r1, r5
 8001634:	4339      	orrs	r1, r7
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x366>
 8001638:	e17e      	b.n	8001938 <__aeabi_dadd+0x664>
 800163a:	4649      	mov	r1, r9
 800163c:	0758      	lsls	r0, r3, #29
 800163e:	08c9      	lsrs	r1, r1, #3
 8001640:	4301      	orrs	r1, r0
 8001642:	08db      	lsrs	r3, r3, #3
 8001644:	e76e      	b.n	8001524 <__aeabi_dadd+0x250>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	000007ff 	.word	0x000007ff
 800164c:	ff7fffff 	.word	0xff7fffff
 8001650:	000007fe 	.word	0x000007fe
 8001654:	4649      	mov	r1, r9
 8001656:	1bcd      	subs	r5, r1, r7
 8001658:	4661      	mov	r1, ip
 800165a:	1a58      	subs	r0, r3, r1
 800165c:	45a9      	cmp	r9, r5
 800165e:	4189      	sbcs	r1, r1
 8001660:	4249      	negs	r1, r1
 8001662:	4688      	mov	r8, r1
 8001664:	0001      	movs	r1, r0
 8001666:	4640      	mov	r0, r8
 8001668:	1a09      	subs	r1, r1, r0
 800166a:	4688      	mov	r8, r1
 800166c:	0209      	lsls	r1, r1, #8
 800166e:	d500      	bpl.n	8001672 <__aeabi_dadd+0x39e>
 8001670:	e0a6      	b.n	80017c0 <__aeabi_dadd+0x4ec>
 8001672:	4641      	mov	r1, r8
 8001674:	4329      	orrs	r1, r5
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x3a6>
 8001678:	e67f      	b.n	800137a <__aeabi_dadd+0xa6>
 800167a:	2300      	movs	r3, #0
 800167c:	2400      	movs	r4, #0
 800167e:	e751      	b.n	8001524 <__aeabi_dadd+0x250>
 8001680:	4cc7      	ldr	r4, [pc, #796]	; (80019a0 <__aeabi_dadd+0x6cc>)
 8001682:	42a1      	cmp	r1, r4
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x3b4>
 8001686:	e0c7      	b.n	8001818 <__aeabi_dadd+0x544>
 8001688:	2480      	movs	r4, #128	; 0x80
 800168a:	0424      	lsls	r4, r4, #16
 800168c:	4323      	orrs	r3, r4
 800168e:	2a38      	cmp	r2, #56	; 0x38
 8001690:	dc54      	bgt.n	800173c <__aeabi_dadd+0x468>
 8001692:	2a1f      	cmp	r2, #31
 8001694:	dd00      	ble.n	8001698 <__aeabi_dadd+0x3c4>
 8001696:	e0cc      	b.n	8001832 <__aeabi_dadd+0x55e>
 8001698:	2420      	movs	r4, #32
 800169a:	4648      	mov	r0, r9
 800169c:	1aa4      	subs	r4, r4, r2
 800169e:	001d      	movs	r5, r3
 80016a0:	464e      	mov	r6, r9
 80016a2:	40a0      	lsls	r0, r4
 80016a4:	40d6      	lsrs	r6, r2
 80016a6:	40a5      	lsls	r5, r4
 80016a8:	0004      	movs	r4, r0
 80016aa:	40d3      	lsrs	r3, r2
 80016ac:	4662      	mov	r2, ip
 80016ae:	4335      	orrs	r5, r6
 80016b0:	1e66      	subs	r6, r4, #1
 80016b2:	41b4      	sbcs	r4, r6
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	469c      	mov	ip, r3
 80016b8:	4325      	orrs	r5, r4
 80016ba:	e044      	b.n	8001746 <__aeabi_dadd+0x472>
 80016bc:	4662      	mov	r2, ip
 80016be:	433a      	orrs	r2, r7
 80016c0:	0015      	movs	r5, r2
 80016c2:	1e6f      	subs	r7, r5, #1
 80016c4:	41bd      	sbcs	r5, r7
 80016c6:	444d      	add	r5, r9
 80016c8:	454d      	cmp	r5, r9
 80016ca:	4189      	sbcs	r1, r1
 80016cc:	4249      	negs	r1, r1
 80016ce:	4688      	mov	r8, r1
 80016d0:	4498      	add	r8, r3
 80016d2:	4643      	mov	r3, r8
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	d400      	bmi.n	80016da <__aeabi_dadd+0x406>
 80016d8:	e718      	b.n	800150c <__aeabi_dadd+0x238>
 80016da:	4bb1      	ldr	r3, [pc, #708]	; (80019a0 <__aeabi_dadd+0x6cc>)
 80016dc:	3601      	adds	r6, #1
 80016de:	429e      	cmp	r6, r3
 80016e0:	d049      	beq.n	8001776 <__aeabi_dadd+0x4a2>
 80016e2:	4642      	mov	r2, r8
 80016e4:	4baf      	ldr	r3, [pc, #700]	; (80019a4 <__aeabi_dadd+0x6d0>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	401a      	ands	r2, r3
 80016ea:	0013      	movs	r3, r2
 80016ec:	086a      	lsrs	r2, r5, #1
 80016ee:	400d      	ands	r5, r1
 80016f0:	4315      	orrs	r5, r2
 80016f2:	07d9      	lsls	r1, r3, #31
 80016f4:	085b      	lsrs	r3, r3, #1
 80016f6:	4698      	mov	r8, r3
 80016f8:	430d      	orrs	r5, r1
 80016fa:	e665      	b.n	80013c8 <__aeabi_dadd+0xf4>
 80016fc:	0018      	movs	r0, r3
 80016fe:	3e1f      	subs	r6, #31
 8001700:	40f0      	lsrs	r0, r6
 8001702:	2a20      	cmp	r2, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dadd+0x43a>
 8001706:	2140      	movs	r1, #64	; 0x40
 8001708:	1a8a      	subs	r2, r1, r2
 800170a:	4093      	lsls	r3, r2
 800170c:	431d      	orrs	r5, r3
 800170e:	1e69      	subs	r1, r5, #1
 8001710:	418d      	sbcs	r5, r1
 8001712:	2300      	movs	r3, #0
 8001714:	2600      	movs	r6, #0
 8001716:	4698      	mov	r8, r3
 8001718:	4305      	orrs	r5, r0
 800171a:	e6f7      	b.n	800150c <__aeabi_dadd+0x238>
 800171c:	0011      	movs	r1, r2
 800171e:	4665      	mov	r5, ip
 8001720:	3920      	subs	r1, #32
 8001722:	40cd      	lsrs	r5, r1
 8001724:	2a20      	cmp	r2, #32
 8001726:	d004      	beq.n	8001732 <__aeabi_dadd+0x45e>
 8001728:	2040      	movs	r0, #64	; 0x40
 800172a:	4661      	mov	r1, ip
 800172c:	1a82      	subs	r2, r0, r2
 800172e:	4091      	lsls	r1, r2
 8001730:	430f      	orrs	r7, r1
 8001732:	0039      	movs	r1, r7
 8001734:	1e4f      	subs	r7, r1, #1
 8001736:	41b9      	sbcs	r1, r7
 8001738:	4329      	orrs	r1, r5
 800173a:	e60f      	b.n	800135c <__aeabi_dadd+0x88>
 800173c:	464a      	mov	r2, r9
 800173e:	4313      	orrs	r3, r2
 8001740:	001d      	movs	r5, r3
 8001742:	1e6b      	subs	r3, r5, #1
 8001744:	419d      	sbcs	r5, r3
 8001746:	1b7d      	subs	r5, r7, r5
 8001748:	42af      	cmp	r7, r5
 800174a:	419b      	sbcs	r3, r3
 800174c:	4662      	mov	r2, ip
 800174e:	425b      	negs	r3, r3
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4698      	mov	r8, r3
 8001754:	4654      	mov	r4, sl
 8001756:	000e      	movs	r6, r1
 8001758:	e607      	b.n	800136a <__aeabi_dadd+0x96>
 800175a:	4648      	mov	r0, r9
 800175c:	4318      	orrs	r0, r3
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x48e>
 8001760:	e0b3      	b.n	80018ca <__aeabi_dadd+0x5f6>
 8001762:	1e50      	subs	r0, r2, #1
 8001764:	2a01      	cmp	r2, #1
 8001766:	d100      	bne.n	800176a <__aeabi_dadd+0x496>
 8001768:	e10d      	b.n	8001986 <__aeabi_dadd+0x6b2>
 800176a:	4d8d      	ldr	r5, [pc, #564]	; (80019a0 <__aeabi_dadd+0x6cc>)
 800176c:	42aa      	cmp	r2, r5
 800176e:	d100      	bne.n	8001772 <__aeabi_dadd+0x49e>
 8001770:	e0a5      	b.n	80018be <__aeabi_dadd+0x5ea>
 8001772:	0002      	movs	r2, r0
 8001774:	e710      	b.n	8001598 <__aeabi_dadd+0x2c4>
 8001776:	0032      	movs	r2, r6
 8001778:	2300      	movs	r3, #0
 800177a:	2100      	movs	r1, #0
 800177c:	e644      	b.n	8001408 <__aeabi_dadd+0x134>
 800177e:	2120      	movs	r1, #32
 8001780:	0038      	movs	r0, r7
 8001782:	1a89      	subs	r1, r1, r2
 8001784:	4665      	mov	r5, ip
 8001786:	408f      	lsls	r7, r1
 8001788:	408d      	lsls	r5, r1
 800178a:	40d0      	lsrs	r0, r2
 800178c:	1e79      	subs	r1, r7, #1
 800178e:	418f      	sbcs	r7, r1
 8001790:	4305      	orrs	r5, r0
 8001792:	433d      	orrs	r5, r7
 8001794:	4667      	mov	r7, ip
 8001796:	40d7      	lsrs	r7, r2
 8001798:	19db      	adds	r3, r3, r7
 800179a:	e794      	b.n	80016c6 <__aeabi_dadd+0x3f2>
 800179c:	4a80      	ldr	r2, [pc, #512]	; (80019a0 <__aeabi_dadd+0x6cc>)
 800179e:	4290      	cmp	r0, r2
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dadd+0x4d0>
 80017a2:	e0ec      	b.n	800197e <__aeabi_dadd+0x6aa>
 80017a4:	0039      	movs	r1, r7
 80017a6:	4449      	add	r1, r9
 80017a8:	4549      	cmp	r1, r9
 80017aa:	4192      	sbcs	r2, r2
 80017ac:	4463      	add	r3, ip
 80017ae:	4252      	negs	r2, r2
 80017b0:	189b      	adds	r3, r3, r2
 80017b2:	07dd      	lsls	r5, r3, #31
 80017b4:	0849      	lsrs	r1, r1, #1
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	4698      	mov	r8, r3
 80017ba:	0006      	movs	r6, r0
 80017bc:	430d      	orrs	r5, r1
 80017be:	e6a5      	b.n	800150c <__aeabi_dadd+0x238>
 80017c0:	464a      	mov	r2, r9
 80017c2:	1abd      	subs	r5, r7, r2
 80017c4:	42af      	cmp	r7, r5
 80017c6:	4189      	sbcs	r1, r1
 80017c8:	4662      	mov	r2, ip
 80017ca:	4249      	negs	r1, r1
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	1a5b      	subs	r3, r3, r1
 80017d0:	4698      	mov	r8, r3
 80017d2:	4654      	mov	r4, sl
 80017d4:	e5d1      	b.n	800137a <__aeabi_dadd+0xa6>
 80017d6:	076c      	lsls	r4, r5, #29
 80017d8:	08f9      	lsrs	r1, r7, #3
 80017da:	4321      	orrs	r1, r4
 80017dc:	08eb      	lsrs	r3, r5, #3
 80017de:	0004      	movs	r4, r0
 80017e0:	e69d      	b.n	800151e <__aeabi_dadd+0x24a>
 80017e2:	464a      	mov	r2, r9
 80017e4:	431a      	orrs	r2, r3
 80017e6:	d175      	bne.n	80018d4 <__aeabi_dadd+0x600>
 80017e8:	4661      	mov	r1, ip
 80017ea:	4339      	orrs	r1, r7
 80017ec:	d114      	bne.n	8001818 <__aeabi_dadd+0x544>
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	2400      	movs	r4, #0
 80017f2:	031b      	lsls	r3, r3, #12
 80017f4:	e6bc      	b.n	8001570 <__aeabi_dadd+0x29c>
 80017f6:	464a      	mov	r2, r9
 80017f8:	1bd5      	subs	r5, r2, r7
 80017fa:	45a9      	cmp	r9, r5
 80017fc:	4189      	sbcs	r1, r1
 80017fe:	4662      	mov	r2, ip
 8001800:	4249      	negs	r1, r1
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	4698      	mov	r8, r3
 8001808:	2601      	movs	r6, #1
 800180a:	e5ae      	b.n	800136a <__aeabi_dadd+0x96>
 800180c:	464a      	mov	r2, r9
 800180e:	08d1      	lsrs	r1, r2, #3
 8001810:	075a      	lsls	r2, r3, #29
 8001812:	4311      	orrs	r1, r2
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	e6a7      	b.n	8001568 <__aeabi_dadd+0x294>
 8001818:	4663      	mov	r3, ip
 800181a:	08f9      	lsrs	r1, r7, #3
 800181c:	075a      	lsls	r2, r3, #29
 800181e:	4654      	mov	r4, sl
 8001820:	4311      	orrs	r1, r2
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	e6a0      	b.n	8001568 <__aeabi_dadd+0x294>
 8001826:	464a      	mov	r2, r9
 8001828:	4313      	orrs	r3, r2
 800182a:	001d      	movs	r5, r3
 800182c:	1e6b      	subs	r3, r5, #1
 800182e:	419d      	sbcs	r5, r3
 8001830:	e6c7      	b.n	80015c2 <__aeabi_dadd+0x2ee>
 8001832:	0014      	movs	r4, r2
 8001834:	001e      	movs	r6, r3
 8001836:	3c20      	subs	r4, #32
 8001838:	40e6      	lsrs	r6, r4
 800183a:	2a20      	cmp	r2, #32
 800183c:	d005      	beq.n	800184a <__aeabi_dadd+0x576>
 800183e:	2440      	movs	r4, #64	; 0x40
 8001840:	1aa2      	subs	r2, r4, r2
 8001842:	4093      	lsls	r3, r2
 8001844:	464a      	mov	r2, r9
 8001846:	431a      	orrs	r2, r3
 8001848:	4691      	mov	r9, r2
 800184a:	464d      	mov	r5, r9
 800184c:	1e6b      	subs	r3, r5, #1
 800184e:	419d      	sbcs	r5, r3
 8001850:	4335      	orrs	r5, r6
 8001852:	e778      	b.n	8001746 <__aeabi_dadd+0x472>
 8001854:	464a      	mov	r2, r9
 8001856:	431a      	orrs	r2, r3
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x588>
 800185a:	e66b      	b.n	8001534 <__aeabi_dadd+0x260>
 800185c:	076b      	lsls	r3, r5, #29
 800185e:	08f9      	lsrs	r1, r7, #3
 8001860:	4319      	orrs	r1, r3
 8001862:	08eb      	lsrs	r3, r5, #3
 8001864:	e680      	b.n	8001568 <__aeabi_dadd+0x294>
 8001866:	4661      	mov	r1, ip
 8001868:	4339      	orrs	r1, r7
 800186a:	d054      	beq.n	8001916 <__aeabi_dadd+0x642>
 800186c:	4663      	mov	r3, ip
 800186e:	08f9      	lsrs	r1, r7, #3
 8001870:	075c      	lsls	r4, r3, #29
 8001872:	4321      	orrs	r1, r4
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	0004      	movs	r4, r0
 8001878:	e654      	b.n	8001524 <__aeabi_dadd+0x250>
 800187a:	464a      	mov	r2, r9
 800187c:	1abd      	subs	r5, r7, r2
 800187e:	42af      	cmp	r7, r5
 8001880:	4189      	sbcs	r1, r1
 8001882:	4662      	mov	r2, ip
 8001884:	4249      	negs	r1, r1
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	1a5b      	subs	r3, r3, r1
 800188a:	4698      	mov	r8, r3
 800188c:	0004      	movs	r4, r0
 800188e:	2601      	movs	r6, #1
 8001890:	e56b      	b.n	800136a <__aeabi_dadd+0x96>
 8001892:	464a      	mov	r2, r9
 8001894:	1bd5      	subs	r5, r2, r7
 8001896:	45a9      	cmp	r9, r5
 8001898:	4189      	sbcs	r1, r1
 800189a:	4662      	mov	r2, ip
 800189c:	4249      	negs	r1, r1
 800189e:	1a9a      	subs	r2, r3, r2
 80018a0:	1a52      	subs	r2, r2, r1
 80018a2:	4690      	mov	r8, r2
 80018a4:	0212      	lsls	r2, r2, #8
 80018a6:	d532      	bpl.n	800190e <__aeabi_dadd+0x63a>
 80018a8:	464a      	mov	r2, r9
 80018aa:	1abd      	subs	r5, r7, r2
 80018ac:	42af      	cmp	r7, r5
 80018ae:	4189      	sbcs	r1, r1
 80018b0:	4662      	mov	r2, ip
 80018b2:	4249      	negs	r1, r1
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	1a5b      	subs	r3, r3, r1
 80018b8:	4698      	mov	r8, r3
 80018ba:	0004      	movs	r4, r0
 80018bc:	e584      	b.n	80013c8 <__aeabi_dadd+0xf4>
 80018be:	4663      	mov	r3, ip
 80018c0:	08f9      	lsrs	r1, r7, #3
 80018c2:	075a      	lsls	r2, r3, #29
 80018c4:	4311      	orrs	r1, r2
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	e64e      	b.n	8001568 <__aeabi_dadd+0x294>
 80018ca:	08f9      	lsrs	r1, r7, #3
 80018cc:	0768      	lsls	r0, r5, #29
 80018ce:	4301      	orrs	r1, r0
 80018d0:	08eb      	lsrs	r3, r5, #3
 80018d2:	e624      	b.n	800151e <__aeabi_dadd+0x24a>
 80018d4:	4662      	mov	r2, ip
 80018d6:	433a      	orrs	r2, r7
 80018d8:	d100      	bne.n	80018dc <__aeabi_dadd+0x608>
 80018da:	e698      	b.n	800160e <__aeabi_dadd+0x33a>
 80018dc:	464a      	mov	r2, r9
 80018de:	08d1      	lsrs	r1, r2, #3
 80018e0:	075a      	lsls	r2, r3, #29
 80018e2:	4311      	orrs	r1, r2
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	031b      	lsls	r3, r3, #12
 80018ea:	421a      	tst	r2, r3
 80018ec:	d008      	beq.n	8001900 <__aeabi_dadd+0x62c>
 80018ee:	4660      	mov	r0, ip
 80018f0:	08c5      	lsrs	r5, r0, #3
 80018f2:	421d      	tst	r5, r3
 80018f4:	d104      	bne.n	8001900 <__aeabi_dadd+0x62c>
 80018f6:	4654      	mov	r4, sl
 80018f8:	002a      	movs	r2, r5
 80018fa:	08f9      	lsrs	r1, r7, #3
 80018fc:	0743      	lsls	r3, r0, #29
 80018fe:	4319      	orrs	r1, r3
 8001900:	0f4b      	lsrs	r3, r1, #29
 8001902:	00c9      	lsls	r1, r1, #3
 8001904:	075b      	lsls	r3, r3, #29
 8001906:	08c9      	lsrs	r1, r1, #3
 8001908:	4319      	orrs	r1, r3
 800190a:	0013      	movs	r3, r2
 800190c:	e62c      	b.n	8001568 <__aeabi_dadd+0x294>
 800190e:	4641      	mov	r1, r8
 8001910:	4329      	orrs	r1, r5
 8001912:	d000      	beq.n	8001916 <__aeabi_dadd+0x642>
 8001914:	e5fa      	b.n	800150c <__aeabi_dadd+0x238>
 8001916:	2300      	movs	r3, #0
 8001918:	000a      	movs	r2, r1
 800191a:	2400      	movs	r4, #0
 800191c:	e602      	b.n	8001524 <__aeabi_dadd+0x250>
 800191e:	076b      	lsls	r3, r5, #29
 8001920:	08f9      	lsrs	r1, r7, #3
 8001922:	4319      	orrs	r1, r3
 8001924:	08eb      	lsrs	r3, r5, #3
 8001926:	e5fd      	b.n	8001524 <__aeabi_dadd+0x250>
 8001928:	4663      	mov	r3, ip
 800192a:	08f9      	lsrs	r1, r7, #3
 800192c:	075b      	lsls	r3, r3, #29
 800192e:	4319      	orrs	r1, r3
 8001930:	4663      	mov	r3, ip
 8001932:	0004      	movs	r4, r0
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	e617      	b.n	8001568 <__aeabi_dadd+0x294>
 8001938:	003d      	movs	r5, r7
 800193a:	444d      	add	r5, r9
 800193c:	4463      	add	r3, ip
 800193e:	454d      	cmp	r5, r9
 8001940:	4189      	sbcs	r1, r1
 8001942:	4698      	mov	r8, r3
 8001944:	4249      	negs	r1, r1
 8001946:	4488      	add	r8, r1
 8001948:	4643      	mov	r3, r8
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	d400      	bmi.n	8001950 <__aeabi_dadd+0x67c>
 800194e:	e5dd      	b.n	800150c <__aeabi_dadd+0x238>
 8001950:	4642      	mov	r2, r8
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <__aeabi_dadd+0x6d0>)
 8001954:	2601      	movs	r6, #1
 8001956:	401a      	ands	r2, r3
 8001958:	4690      	mov	r8, r2
 800195a:	e5d7      	b.n	800150c <__aeabi_dadd+0x238>
 800195c:	0010      	movs	r0, r2
 800195e:	001e      	movs	r6, r3
 8001960:	3820      	subs	r0, #32
 8001962:	40c6      	lsrs	r6, r0
 8001964:	2a20      	cmp	r2, #32
 8001966:	d005      	beq.n	8001974 <__aeabi_dadd+0x6a0>
 8001968:	2040      	movs	r0, #64	; 0x40
 800196a:	1a82      	subs	r2, r0, r2
 800196c:	4093      	lsls	r3, r2
 800196e:	464a      	mov	r2, r9
 8001970:	431a      	orrs	r2, r3
 8001972:	4691      	mov	r9, r2
 8001974:	464d      	mov	r5, r9
 8001976:	1e6b      	subs	r3, r5, #1
 8001978:	419d      	sbcs	r5, r3
 800197a:	4335      	orrs	r5, r6
 800197c:	e621      	b.n	80015c2 <__aeabi_dadd+0x2ee>
 800197e:	0002      	movs	r2, r0
 8001980:	2300      	movs	r3, #0
 8001982:	2100      	movs	r1, #0
 8001984:	e540      	b.n	8001408 <__aeabi_dadd+0x134>
 8001986:	464a      	mov	r2, r9
 8001988:	19d5      	adds	r5, r2, r7
 800198a:	42bd      	cmp	r5, r7
 800198c:	4189      	sbcs	r1, r1
 800198e:	4463      	add	r3, ip
 8001990:	4698      	mov	r8, r3
 8001992:	4249      	negs	r1, r1
 8001994:	4488      	add	r8, r1
 8001996:	e5b3      	b.n	8001500 <__aeabi_dadd+0x22c>
 8001998:	2100      	movs	r1, #0
 800199a:	4a01      	ldr	r2, [pc, #4]	; (80019a0 <__aeabi_dadd+0x6cc>)
 800199c:	000b      	movs	r3, r1
 800199e:	e533      	b.n	8001408 <__aeabi_dadd+0x134>
 80019a0:	000007ff 	.word	0x000007ff
 80019a4:	ff7fffff 	.word	0xff7fffff

080019a8 <__aeabi_ddiv>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4657      	mov	r7, sl
 80019ac:	464e      	mov	r6, r9
 80019ae:	4645      	mov	r5, r8
 80019b0:	46de      	mov	lr, fp
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	4681      	mov	r9, r0
 80019b6:	0005      	movs	r5, r0
 80019b8:	030c      	lsls	r4, r1, #12
 80019ba:	0048      	lsls	r0, r1, #1
 80019bc:	4692      	mov	sl, r2
 80019be:	001f      	movs	r7, r3
 80019c0:	b085      	sub	sp, #20
 80019c2:	0b24      	lsrs	r4, r4, #12
 80019c4:	0d40      	lsrs	r0, r0, #21
 80019c6:	0fce      	lsrs	r6, r1, #31
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d059      	beq.n	8001a80 <__aeabi_ddiv+0xd8>
 80019cc:	4b87      	ldr	r3, [pc, #540]	; (8001bec <__aeabi_ddiv+0x244>)
 80019ce:	4298      	cmp	r0, r3
 80019d0:	d100      	bne.n	80019d4 <__aeabi_ddiv+0x2c>
 80019d2:	e098      	b.n	8001b06 <__aeabi_ddiv+0x15e>
 80019d4:	0f6b      	lsrs	r3, r5, #29
 80019d6:	00e4      	lsls	r4, r4, #3
 80019d8:	431c      	orrs	r4, r3
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	4323      	orrs	r3, r4
 80019e0:	4698      	mov	r8, r3
 80019e2:	4b83      	ldr	r3, [pc, #524]	; (8001bf0 <__aeabi_ddiv+0x248>)
 80019e4:	00ed      	lsls	r5, r5, #3
 80019e6:	469b      	mov	fp, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	4699      	mov	r9, r3
 80019ec:	4483      	add	fp, r0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	033c      	lsls	r4, r7, #12
 80019f2:	007b      	lsls	r3, r7, #1
 80019f4:	4650      	mov	r0, sl
 80019f6:	0b24      	lsrs	r4, r4, #12
 80019f8:	0d5b      	lsrs	r3, r3, #21
 80019fa:	0fff      	lsrs	r7, r7, #31
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d067      	beq.n	8001ad0 <__aeabi_ddiv+0x128>
 8001a00:	4a7a      	ldr	r2, [pc, #488]	; (8001bec <__aeabi_ddiv+0x244>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d018      	beq.n	8001a38 <__aeabi_ddiv+0x90>
 8001a06:	497a      	ldr	r1, [pc, #488]	; (8001bf0 <__aeabi_ddiv+0x248>)
 8001a08:	0f42      	lsrs	r2, r0, #29
 8001a0a:	468c      	mov	ip, r1
 8001a0c:	00e4      	lsls	r4, r4, #3
 8001a0e:	4659      	mov	r1, fp
 8001a10:	4314      	orrs	r4, r2
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	4463      	add	r3, ip
 8001a16:	0412      	lsls	r2, r2, #16
 8001a18:	1acb      	subs	r3, r1, r3
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	00c2      	lsls	r2, r0, #3
 8001a20:	2000      	movs	r0, #0
 8001a22:	0033      	movs	r3, r6
 8001a24:	407b      	eors	r3, r7
 8001a26:	469a      	mov	sl, r3
 8001a28:	464b      	mov	r3, r9
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	d900      	bls.n	8001a30 <__aeabi_ddiv+0x88>
 8001a2e:	e0ef      	b.n	8001c10 <__aeabi_ddiv+0x268>
 8001a30:	4970      	ldr	r1, [pc, #448]	; (8001bf4 <__aeabi_ddiv+0x24c>)
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	58cb      	ldr	r3, [r1, r3]
 8001a36:	469f      	mov	pc, r3
 8001a38:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <__aeabi_ddiv+0x250>)
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	469c      	mov	ip, r3
 8001a3e:	4322      	orrs	r2, r4
 8001a40:	44e3      	add	fp, ip
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d000      	beq.n	8001a48 <__aeabi_ddiv+0xa0>
 8001a46:	e095      	b.n	8001b74 <__aeabi_ddiv+0x1cc>
 8001a48:	4649      	mov	r1, r9
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	4319      	orrs	r1, r3
 8001a4e:	4689      	mov	r9, r1
 8001a50:	2400      	movs	r4, #0
 8001a52:	2002      	movs	r0, #2
 8001a54:	e7e5      	b.n	8001a22 <__aeabi_ddiv+0x7a>
 8001a56:	2300      	movs	r3, #0
 8001a58:	2400      	movs	r4, #0
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	4652      	mov	r2, sl
 8001a5e:	051b      	lsls	r3, r3, #20
 8001a60:	4323      	orrs	r3, r4
 8001a62:	07d2      	lsls	r2, r2, #31
 8001a64:	4313      	orrs	r3, r2
 8001a66:	0028      	movs	r0, r5
 8001a68:	0019      	movs	r1, r3
 8001a6a:	b005      	add	sp, #20
 8001a6c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a6e:	46bb      	mov	fp, r7
 8001a70:	46b2      	mov	sl, r6
 8001a72:	46a9      	mov	r9, r5
 8001a74:	46a0      	mov	r8, r4
 8001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a78:	2400      	movs	r4, #0
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <__aeabi_ddiv+0x244>)
 8001a7e:	e7ed      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001a80:	464b      	mov	r3, r9
 8001a82:	4323      	orrs	r3, r4
 8001a84:	4698      	mov	r8, r3
 8001a86:	d100      	bne.n	8001a8a <__aeabi_ddiv+0xe2>
 8001a88:	e089      	b.n	8001b9e <__aeabi_ddiv+0x1f6>
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0xe8>
 8001a8e:	e1e0      	b.n	8001e52 <__aeabi_ddiv+0x4aa>
 8001a90:	0020      	movs	r0, r4
 8001a92:	f001 f96f 	bl	8002d74 <__clzsi2>
 8001a96:	0001      	movs	r1, r0
 8001a98:	0002      	movs	r2, r0
 8001a9a:	390b      	subs	r1, #11
 8001a9c:	231d      	movs	r3, #29
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	40d9      	lsrs	r1, r3
 8001aa6:	3808      	subs	r0, #8
 8001aa8:	4084      	lsls	r4, r0
 8001aaa:	000b      	movs	r3, r1
 8001aac:	464d      	mov	r5, r9
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	4698      	mov	r8, r3
 8001ab2:	4085      	lsls	r5, r0
 8001ab4:	4851      	ldr	r0, [pc, #324]	; (8001bfc <__aeabi_ddiv+0x254>)
 8001ab6:	033c      	lsls	r4, r7, #12
 8001ab8:	1a83      	subs	r3, r0, r2
 8001aba:	469b      	mov	fp, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	4699      	mov	r9, r3
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	007b      	lsls	r3, r7, #1
 8001ac4:	4650      	mov	r0, sl
 8001ac6:	0b24      	lsrs	r4, r4, #12
 8001ac8:	0d5b      	lsrs	r3, r3, #21
 8001aca:	0fff      	lsrs	r7, r7, #31
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d197      	bne.n	8001a00 <__aeabi_ddiv+0x58>
 8001ad0:	4652      	mov	r2, sl
 8001ad2:	4322      	orrs	r2, r4
 8001ad4:	d055      	beq.n	8001b82 <__aeabi_ddiv+0x1da>
 8001ad6:	2c00      	cmp	r4, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_ddiv+0x134>
 8001ada:	e1ca      	b.n	8001e72 <__aeabi_ddiv+0x4ca>
 8001adc:	0020      	movs	r0, r4
 8001ade:	f001 f949 	bl	8002d74 <__clzsi2>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	3a0b      	subs	r2, #11
 8001ae6:	231d      	movs	r3, #29
 8001ae8:	0001      	movs	r1, r0
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	4652      	mov	r2, sl
 8001aee:	3908      	subs	r1, #8
 8001af0:	40da      	lsrs	r2, r3
 8001af2:	408c      	lsls	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	4652      	mov	r2, sl
 8001af8:	408a      	lsls	r2, r1
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <__aeabi_ddiv+0x258>)
 8001afc:	4458      	add	r0, fp
 8001afe:	469b      	mov	fp, r3
 8001b00:	4483      	add	fp, r0
 8001b02:	2000      	movs	r0, #0
 8001b04:	e78d      	b.n	8001a22 <__aeabi_ddiv+0x7a>
 8001b06:	464b      	mov	r3, r9
 8001b08:	4323      	orrs	r3, r4
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	d140      	bne.n	8001b90 <__aeabi_ddiv+0x1e8>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	4699      	mov	r9, r3
 8001b12:	3b06      	subs	r3, #6
 8001b14:	2500      	movs	r5, #0
 8001b16:	4683      	mov	fp, r0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	e769      	b.n	80019f0 <__aeabi_ddiv+0x48>
 8001b1c:	46b2      	mov	sl, r6
 8001b1e:	9b00      	ldr	r3, [sp, #0]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d0a9      	beq.n	8001a78 <__aeabi_ddiv+0xd0>
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d100      	bne.n	8001b2a <__aeabi_ddiv+0x182>
 8001b28:	e211      	b.n	8001f4e <__aeabi_ddiv+0x5a6>
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d093      	beq.n	8001a56 <__aeabi_ddiv+0xae>
 8001b2e:	4a35      	ldr	r2, [pc, #212]	; (8001c04 <__aeabi_ddiv+0x25c>)
 8001b30:	445a      	add	r2, fp
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	dc00      	bgt.n	8001b38 <__aeabi_ddiv+0x190>
 8001b36:	e13c      	b.n	8001db2 <__aeabi_ddiv+0x40a>
 8001b38:	076b      	lsls	r3, r5, #29
 8001b3a:	d000      	beq.n	8001b3e <__aeabi_ddiv+0x196>
 8001b3c:	e1a7      	b.n	8001e8e <__aeabi_ddiv+0x4e6>
 8001b3e:	08ed      	lsrs	r5, r5, #3
 8001b40:	4643      	mov	r3, r8
 8001b42:	01db      	lsls	r3, r3, #7
 8001b44:	d506      	bpl.n	8001b54 <__aeabi_ddiv+0x1ac>
 8001b46:	4642      	mov	r2, r8
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <__aeabi_ddiv+0x260>)
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	4690      	mov	r8, r2
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	00d2      	lsls	r2, r2, #3
 8001b52:	445a      	add	r2, fp
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <__aeabi_ddiv+0x264>)
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dc8e      	bgt.n	8001a78 <__aeabi_ddiv+0xd0>
 8001b5a:	4643      	mov	r3, r8
 8001b5c:	0552      	lsls	r2, r2, #21
 8001b5e:	0758      	lsls	r0, r3, #29
 8001b60:	025c      	lsls	r4, r3, #9
 8001b62:	4305      	orrs	r5, r0
 8001b64:	0b24      	lsrs	r4, r4, #12
 8001b66:	0d53      	lsrs	r3, r2, #21
 8001b68:	e778      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001b6a:	46ba      	mov	sl, r7
 8001b6c:	46a0      	mov	r8, r4
 8001b6e:	0015      	movs	r5, r2
 8001b70:	9000      	str	r0, [sp, #0]
 8001b72:	e7d4      	b.n	8001b1e <__aeabi_ddiv+0x176>
 8001b74:	464a      	mov	r2, r9
 8001b76:	2303      	movs	r3, #3
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	4691      	mov	r9, r2
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	4652      	mov	r2, sl
 8001b80:	e74f      	b.n	8001a22 <__aeabi_ddiv+0x7a>
 8001b82:	4649      	mov	r1, r9
 8001b84:	2301      	movs	r3, #1
 8001b86:	4319      	orrs	r1, r3
 8001b88:	4689      	mov	r9, r1
 8001b8a:	2400      	movs	r4, #0
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	e748      	b.n	8001a22 <__aeabi_ddiv+0x7a>
 8001b90:	230c      	movs	r3, #12
 8001b92:	4699      	mov	r9, r3
 8001b94:	3b09      	subs	r3, #9
 8001b96:	46a0      	mov	r8, r4
 8001b98:	4683      	mov	fp, r0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	e728      	b.n	80019f0 <__aeabi_ddiv+0x48>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	4699      	mov	r9, r3
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	469b      	mov	fp, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	2500      	movs	r5, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	e720      	b.n	80019f0 <__aeabi_ddiv+0x48>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2480      	movs	r4, #128	; 0x80
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <__aeabi_ddiv+0x244>)
 8001bb8:	0324      	lsls	r4, r4, #12
 8001bba:	e74f      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	4641      	mov	r1, r8
 8001bc0:	031b      	lsls	r3, r3, #12
 8001bc2:	4219      	tst	r1, r3
 8001bc4:	d008      	beq.n	8001bd8 <__aeabi_ddiv+0x230>
 8001bc6:	421c      	tst	r4, r3
 8001bc8:	d106      	bne.n	8001bd8 <__aeabi_ddiv+0x230>
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	46ba      	mov	sl, r7
 8001bd0:	0015      	movs	r5, r2
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_ddiv+0x244>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e741      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001bd8:	2480      	movs	r4, #128	; 0x80
 8001bda:	4643      	mov	r3, r8
 8001bdc:	0324      	lsls	r4, r4, #12
 8001bde:	431c      	orrs	r4, r3
 8001be0:	0324      	lsls	r4, r4, #12
 8001be2:	46b2      	mov	sl, r6
 8001be4:	4b01      	ldr	r3, [pc, #4]	; (8001bec <__aeabi_ddiv+0x244>)
 8001be6:	0b24      	lsrs	r4, r4, #12
 8001be8:	e738      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	000007ff 	.word	0x000007ff
 8001bf0:	fffffc01 	.word	0xfffffc01
 8001bf4:	0800a04c 	.word	0x0800a04c
 8001bf8:	fffff801 	.word	0xfffff801
 8001bfc:	fffffc0d 	.word	0xfffffc0d
 8001c00:	000003f3 	.word	0x000003f3
 8001c04:	000003ff 	.word	0x000003ff
 8001c08:	feffffff 	.word	0xfeffffff
 8001c0c:	000007fe 	.word	0x000007fe
 8001c10:	4544      	cmp	r4, r8
 8001c12:	d200      	bcs.n	8001c16 <__aeabi_ddiv+0x26e>
 8001c14:	e116      	b.n	8001e44 <__aeabi_ddiv+0x49c>
 8001c16:	d100      	bne.n	8001c1a <__aeabi_ddiv+0x272>
 8001c18:	e111      	b.n	8001e3e <__aeabi_ddiv+0x496>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	469c      	mov	ip, r3
 8001c20:	002e      	movs	r6, r5
 8001c22:	4640      	mov	r0, r8
 8001c24:	2500      	movs	r5, #0
 8001c26:	44e3      	add	fp, ip
 8001c28:	0223      	lsls	r3, r4, #8
 8001c2a:	0e14      	lsrs	r4, r2, #24
 8001c2c:	431c      	orrs	r4, r3
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	4699      	mov	r9, r3
 8001c32:	0423      	lsls	r3, r4, #16
 8001c34:	0c1f      	lsrs	r7, r3, #16
 8001c36:	0212      	lsls	r2, r2, #8
 8001c38:	4649      	mov	r1, r9
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	9701      	str	r7, [sp, #4]
 8001c3e:	f7fe faf3 	bl	8000228 <__aeabi_uidivmod>
 8001c42:	0002      	movs	r2, r0
 8001c44:	437a      	muls	r2, r7
 8001c46:	040b      	lsls	r3, r1, #16
 8001c48:	0c31      	lsrs	r1, r6, #16
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	4319      	orrs	r1, r3
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d90b      	bls.n	8001c6a <__aeabi_ddiv+0x2c2>
 8001c52:	2301      	movs	r3, #1
 8001c54:	425b      	negs	r3, r3
 8001c56:	469c      	mov	ip, r3
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	44e0      	add	r8, ip
 8001c5c:	428c      	cmp	r4, r1
 8001c5e:	d804      	bhi.n	8001c6a <__aeabi_ddiv+0x2c2>
 8001c60:	428a      	cmp	r2, r1
 8001c62:	d902      	bls.n	8001c6a <__aeabi_ddiv+0x2c2>
 8001c64:	1e83      	subs	r3, r0, #2
 8001c66:	4698      	mov	r8, r3
 8001c68:	1909      	adds	r1, r1, r4
 8001c6a:	1a88      	subs	r0, r1, r2
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	f7fe fadb 	bl	8000228 <__aeabi_uidivmod>
 8001c72:	0409      	lsls	r1, r1, #16
 8001c74:	468c      	mov	ip, r1
 8001c76:	0431      	lsls	r1, r6, #16
 8001c78:	4666      	mov	r6, ip
 8001c7a:	9a01      	ldr	r2, [sp, #4]
 8001c7c:	0c09      	lsrs	r1, r1, #16
 8001c7e:	4342      	muls	r2, r0
 8001c80:	0003      	movs	r3, r0
 8001c82:	4331      	orrs	r1, r6
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d904      	bls.n	8001c92 <__aeabi_ddiv+0x2ea>
 8001c88:	1909      	adds	r1, r1, r4
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	428c      	cmp	r4, r1
 8001c8e:	d800      	bhi.n	8001c92 <__aeabi_ddiv+0x2ea>
 8001c90:	e111      	b.n	8001eb6 <__aeabi_ddiv+0x50e>
 8001c92:	1a89      	subs	r1, r1, r2
 8001c94:	4642      	mov	r2, r8
 8001c96:	9e00      	ldr	r6, [sp, #0]
 8001c98:	0412      	lsls	r2, r2, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	0c33      	lsrs	r3, r6, #16
 8001c9e:	001f      	movs	r7, r3
 8001ca0:	0c10      	lsrs	r0, r2, #16
 8001ca2:	4690      	mov	r8, r2
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	0413      	lsls	r3, r2, #16
 8001ca8:	0432      	lsls	r2, r6, #16
 8001caa:	0c16      	lsrs	r6, r2, #16
 8001cac:	0032      	movs	r2, r6
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	435a      	muls	r2, r3
 8001cb2:	9603      	str	r6, [sp, #12]
 8001cb4:	437b      	muls	r3, r7
 8001cb6:	4346      	muls	r6, r0
 8001cb8:	4378      	muls	r0, r7
 8001cba:	0c17      	lsrs	r7, r2, #16
 8001cbc:	46bc      	mov	ip, r7
 8001cbe:	199b      	adds	r3, r3, r6
 8001cc0:	4463      	add	r3, ip
 8001cc2:	429e      	cmp	r6, r3
 8001cc4:	d903      	bls.n	8001cce <__aeabi_ddiv+0x326>
 8001cc6:	2680      	movs	r6, #128	; 0x80
 8001cc8:	0276      	lsls	r6, r6, #9
 8001cca:	46b4      	mov	ip, r6
 8001ccc:	4460      	add	r0, ip
 8001cce:	0c1e      	lsrs	r6, r3, #16
 8001cd0:	1830      	adds	r0, r6, r0
 8001cd2:	0416      	lsls	r6, r2, #16
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	0c36      	lsrs	r6, r6, #16
 8001cd8:	199e      	adds	r6, r3, r6
 8001cda:	4281      	cmp	r1, r0
 8001cdc:	d200      	bcs.n	8001ce0 <__aeabi_ddiv+0x338>
 8001cde:	e09c      	b.n	8001e1a <__aeabi_ddiv+0x472>
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001ce2:	e097      	b.n	8001e14 <__aeabi_ddiv+0x46c>
 8001ce4:	1bae      	subs	r6, r5, r6
 8001ce6:	1a09      	subs	r1, r1, r0
 8001ce8:	42b5      	cmp	r5, r6
 8001cea:	4180      	sbcs	r0, r0
 8001cec:	4240      	negs	r0, r0
 8001cee:	1a08      	subs	r0, r1, r0
 8001cf0:	4284      	cmp	r4, r0
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0x34e>
 8001cf4:	e111      	b.n	8001f1a <__aeabi_ddiv+0x572>
 8001cf6:	4649      	mov	r1, r9
 8001cf8:	f7fe fa96 	bl	8000228 <__aeabi_uidivmod>
 8001cfc:	9a01      	ldr	r2, [sp, #4]
 8001cfe:	040b      	lsls	r3, r1, #16
 8001d00:	4342      	muls	r2, r0
 8001d02:	0c31      	lsrs	r1, r6, #16
 8001d04:	0005      	movs	r5, r0
 8001d06:	4319      	orrs	r1, r3
 8001d08:	428a      	cmp	r2, r1
 8001d0a:	d907      	bls.n	8001d1c <__aeabi_ddiv+0x374>
 8001d0c:	1909      	adds	r1, r1, r4
 8001d0e:	3d01      	subs	r5, #1
 8001d10:	428c      	cmp	r4, r1
 8001d12:	d803      	bhi.n	8001d1c <__aeabi_ddiv+0x374>
 8001d14:	428a      	cmp	r2, r1
 8001d16:	d901      	bls.n	8001d1c <__aeabi_ddiv+0x374>
 8001d18:	1e85      	subs	r5, r0, #2
 8001d1a:	1909      	adds	r1, r1, r4
 8001d1c:	1a88      	subs	r0, r1, r2
 8001d1e:	4649      	mov	r1, r9
 8001d20:	f7fe fa82 	bl	8000228 <__aeabi_uidivmod>
 8001d24:	0409      	lsls	r1, r1, #16
 8001d26:	468c      	mov	ip, r1
 8001d28:	0431      	lsls	r1, r6, #16
 8001d2a:	4666      	mov	r6, ip
 8001d2c:	9a01      	ldr	r2, [sp, #4]
 8001d2e:	0c09      	lsrs	r1, r1, #16
 8001d30:	4342      	muls	r2, r0
 8001d32:	0003      	movs	r3, r0
 8001d34:	4331      	orrs	r1, r6
 8001d36:	428a      	cmp	r2, r1
 8001d38:	d907      	bls.n	8001d4a <__aeabi_ddiv+0x3a2>
 8001d3a:	1909      	adds	r1, r1, r4
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	428c      	cmp	r4, r1
 8001d40:	d803      	bhi.n	8001d4a <__aeabi_ddiv+0x3a2>
 8001d42:	428a      	cmp	r2, r1
 8001d44:	d901      	bls.n	8001d4a <__aeabi_ddiv+0x3a2>
 8001d46:	1e83      	subs	r3, r0, #2
 8001d48:	1909      	adds	r1, r1, r4
 8001d4a:	9e03      	ldr	r6, [sp, #12]
 8001d4c:	1a89      	subs	r1, r1, r2
 8001d4e:	0032      	movs	r2, r6
 8001d50:	042d      	lsls	r5, r5, #16
 8001d52:	431d      	orrs	r5, r3
 8001d54:	9f02      	ldr	r7, [sp, #8]
 8001d56:	042b      	lsls	r3, r5, #16
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	435a      	muls	r2, r3
 8001d5c:	437b      	muls	r3, r7
 8001d5e:	469c      	mov	ip, r3
 8001d60:	0c28      	lsrs	r0, r5, #16
 8001d62:	4346      	muls	r6, r0
 8001d64:	0c13      	lsrs	r3, r2, #16
 8001d66:	44b4      	add	ip, r6
 8001d68:	4463      	add	r3, ip
 8001d6a:	4378      	muls	r0, r7
 8001d6c:	429e      	cmp	r6, r3
 8001d6e:	d903      	bls.n	8001d78 <__aeabi_ddiv+0x3d0>
 8001d70:	2680      	movs	r6, #128	; 0x80
 8001d72:	0276      	lsls	r6, r6, #9
 8001d74:	46b4      	mov	ip, r6
 8001d76:	4460      	add	r0, ip
 8001d78:	0c1e      	lsrs	r6, r3, #16
 8001d7a:	0412      	lsls	r2, r2, #16
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	0c12      	lsrs	r2, r2, #16
 8001d80:	1830      	adds	r0, r6, r0
 8001d82:	189b      	adds	r3, r3, r2
 8001d84:	4281      	cmp	r1, r0
 8001d86:	d306      	bcc.n	8001d96 <__aeabi_ddiv+0x3ee>
 8001d88:	d002      	beq.n	8001d90 <__aeabi_ddiv+0x3e8>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	431d      	orrs	r5, r3
 8001d8e:	e6ce      	b.n	8001b2e <__aeabi_ddiv+0x186>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_ddiv+0x3ee>
 8001d94:	e6cb      	b.n	8001b2e <__aeabi_ddiv+0x186>
 8001d96:	1861      	adds	r1, r4, r1
 8001d98:	1e6e      	subs	r6, r5, #1
 8001d9a:	42a1      	cmp	r1, r4
 8001d9c:	d200      	bcs.n	8001da0 <__aeabi_ddiv+0x3f8>
 8001d9e:	e0a4      	b.n	8001eea <__aeabi_ddiv+0x542>
 8001da0:	4281      	cmp	r1, r0
 8001da2:	d200      	bcs.n	8001da6 <__aeabi_ddiv+0x3fe>
 8001da4:	e0c9      	b.n	8001f3a <__aeabi_ddiv+0x592>
 8001da6:	d100      	bne.n	8001daa <__aeabi_ddiv+0x402>
 8001da8:	e0d9      	b.n	8001f5e <__aeabi_ddiv+0x5b6>
 8001daa:	0035      	movs	r5, r6
 8001dac:	e7ed      	b.n	8001d8a <__aeabi_ddiv+0x3e2>
 8001dae:	2501      	movs	r5, #1
 8001db0:	426d      	negs	r5, r5
 8001db2:	2101      	movs	r1, #1
 8001db4:	1a89      	subs	r1, r1, r2
 8001db6:	2938      	cmp	r1, #56	; 0x38
 8001db8:	dd00      	ble.n	8001dbc <__aeabi_ddiv+0x414>
 8001dba:	e64c      	b.n	8001a56 <__aeabi_ddiv+0xae>
 8001dbc:	291f      	cmp	r1, #31
 8001dbe:	dc00      	bgt.n	8001dc2 <__aeabi_ddiv+0x41a>
 8001dc0:	e07f      	b.n	8001ec2 <__aeabi_ddiv+0x51a>
 8001dc2:	231f      	movs	r3, #31
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	1a9a      	subs	r2, r3, r2
 8001dc8:	4643      	mov	r3, r8
 8001dca:	40d3      	lsrs	r3, r2
 8001dcc:	2920      	cmp	r1, #32
 8001dce:	d004      	beq.n	8001dda <__aeabi_ddiv+0x432>
 8001dd0:	4644      	mov	r4, r8
 8001dd2:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <__aeabi_ddiv+0x5c0>)
 8001dd4:	445a      	add	r2, fp
 8001dd6:	4094      	lsls	r4, r2
 8001dd8:	4325      	orrs	r5, r4
 8001dda:	1e6a      	subs	r2, r5, #1
 8001ddc:	4195      	sbcs	r5, r2
 8001dde:	2207      	movs	r2, #7
 8001de0:	432b      	orrs	r3, r5
 8001de2:	0015      	movs	r5, r2
 8001de4:	2400      	movs	r4, #0
 8001de6:	401d      	ands	r5, r3
 8001de8:	421a      	tst	r2, r3
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0x446>
 8001dec:	e0a1      	b.n	8001f32 <__aeabi_ddiv+0x58a>
 8001dee:	220f      	movs	r2, #15
 8001df0:	2400      	movs	r4, #0
 8001df2:	401a      	ands	r2, r3
 8001df4:	2a04      	cmp	r2, #4
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0x452>
 8001df8:	e098      	b.n	8001f2c <__aeabi_ddiv+0x584>
 8001dfa:	1d1a      	adds	r2, r3, #4
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	419b      	sbcs	r3, r3
 8001e00:	425b      	negs	r3, r3
 8001e02:	18e4      	adds	r4, r4, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	0222      	lsls	r2, r4, #8
 8001e08:	d400      	bmi.n	8001e0c <__aeabi_ddiv+0x464>
 8001e0a:	e08f      	b.n	8001f2c <__aeabi_ddiv+0x584>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	2400      	movs	r4, #0
 8001e10:	2500      	movs	r5, #0
 8001e12:	e623      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001e14:	42b5      	cmp	r5, r6
 8001e16:	d300      	bcc.n	8001e1a <__aeabi_ddiv+0x472>
 8001e18:	e764      	b.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001e1a:	4643      	mov	r3, r8
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	9b00      	ldr	r3, [sp, #0]
 8001e20:	469c      	mov	ip, r3
 8001e22:	4465      	add	r5, ip
 8001e24:	001f      	movs	r7, r3
 8001e26:	429d      	cmp	r5, r3
 8001e28:	419b      	sbcs	r3, r3
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	191b      	adds	r3, r3, r4
 8001e2e:	18c9      	adds	r1, r1, r3
 8001e30:	428c      	cmp	r4, r1
 8001e32:	d23a      	bcs.n	8001eaa <__aeabi_ddiv+0x502>
 8001e34:	4288      	cmp	r0, r1
 8001e36:	d863      	bhi.n	8001f00 <__aeabi_ddiv+0x558>
 8001e38:	d060      	beq.n	8001efc <__aeabi_ddiv+0x554>
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	e752      	b.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001e3e:	42aa      	cmp	r2, r5
 8001e40:	d900      	bls.n	8001e44 <__aeabi_ddiv+0x49c>
 8001e42:	e6ea      	b.n	8001c1a <__aeabi_ddiv+0x272>
 8001e44:	4643      	mov	r3, r8
 8001e46:	07de      	lsls	r6, r3, #31
 8001e48:	0858      	lsrs	r0, r3, #1
 8001e4a:	086b      	lsrs	r3, r5, #1
 8001e4c:	431e      	orrs	r6, r3
 8001e4e:	07ed      	lsls	r5, r5, #31
 8001e50:	e6ea      	b.n	8001c28 <__aeabi_ddiv+0x280>
 8001e52:	4648      	mov	r0, r9
 8001e54:	f000 ff8e 	bl	8002d74 <__clzsi2>
 8001e58:	0001      	movs	r1, r0
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	3115      	adds	r1, #21
 8001e5e:	3220      	adds	r2, #32
 8001e60:	291c      	cmp	r1, #28
 8001e62:	dc00      	bgt.n	8001e66 <__aeabi_ddiv+0x4be>
 8001e64:	e61a      	b.n	8001a9c <__aeabi_ddiv+0xf4>
 8001e66:	464b      	mov	r3, r9
 8001e68:	3808      	subs	r0, #8
 8001e6a:	4083      	lsls	r3, r0
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	4698      	mov	r8, r3
 8001e70:	e620      	b.n	8001ab4 <__aeabi_ddiv+0x10c>
 8001e72:	f000 ff7f 	bl	8002d74 <__clzsi2>
 8001e76:	0003      	movs	r3, r0
 8001e78:	001a      	movs	r2, r3
 8001e7a:	3215      	adds	r2, #21
 8001e7c:	3020      	adds	r0, #32
 8001e7e:	2a1c      	cmp	r2, #28
 8001e80:	dc00      	bgt.n	8001e84 <__aeabi_ddiv+0x4dc>
 8001e82:	e630      	b.n	8001ae6 <__aeabi_ddiv+0x13e>
 8001e84:	4654      	mov	r4, sl
 8001e86:	3b08      	subs	r3, #8
 8001e88:	2200      	movs	r2, #0
 8001e8a:	409c      	lsls	r4, r3
 8001e8c:	e635      	b.n	8001afa <__aeabi_ddiv+0x152>
 8001e8e:	230f      	movs	r3, #15
 8001e90:	402b      	ands	r3, r5
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d100      	bne.n	8001e98 <__aeabi_ddiv+0x4f0>
 8001e96:	e652      	b.n	8001b3e <__aeabi_ddiv+0x196>
 8001e98:	2305      	movs	r3, #5
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	419b      	sbcs	r3, r3
 8001ea0:	3504      	adds	r5, #4
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	08ed      	lsrs	r5, r5, #3
 8001ea6:	4498      	add	r8, r3
 8001ea8:	e64a      	b.n	8001b40 <__aeabi_ddiv+0x198>
 8001eaa:	428c      	cmp	r4, r1
 8001eac:	d1c5      	bne.n	8001e3a <__aeabi_ddiv+0x492>
 8001eae:	42af      	cmp	r7, r5
 8001eb0:	d9c0      	bls.n	8001e34 <__aeabi_ddiv+0x48c>
 8001eb2:	4690      	mov	r8, r2
 8001eb4:	e716      	b.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001eb6:	428a      	cmp	r2, r1
 8001eb8:	d800      	bhi.n	8001ebc <__aeabi_ddiv+0x514>
 8001eba:	e6ea      	b.n	8001c92 <__aeabi_ddiv+0x2ea>
 8001ebc:	1e83      	subs	r3, r0, #2
 8001ebe:	1909      	adds	r1, r1, r4
 8001ec0:	e6e7      	b.n	8001c92 <__aeabi_ddiv+0x2ea>
 8001ec2:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <__aeabi_ddiv+0x5c4>)
 8001ec4:	0028      	movs	r0, r5
 8001ec6:	445a      	add	r2, fp
 8001ec8:	4643      	mov	r3, r8
 8001eca:	4095      	lsls	r5, r2
 8001ecc:	4093      	lsls	r3, r2
 8001ece:	40c8      	lsrs	r0, r1
 8001ed0:	1e6a      	subs	r2, r5, #1
 8001ed2:	4195      	sbcs	r5, r2
 8001ed4:	4644      	mov	r4, r8
 8001ed6:	4303      	orrs	r3, r0
 8001ed8:	432b      	orrs	r3, r5
 8001eda:	40cc      	lsrs	r4, r1
 8001edc:	075a      	lsls	r2, r3, #29
 8001ede:	d092      	beq.n	8001e06 <__aeabi_ddiv+0x45e>
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	2a04      	cmp	r2, #4
 8001ee6:	d188      	bne.n	8001dfa <__aeabi_ddiv+0x452>
 8001ee8:	e78d      	b.n	8001e06 <__aeabi_ddiv+0x45e>
 8001eea:	0035      	movs	r5, r6
 8001eec:	4281      	cmp	r1, r0
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_ddiv+0x54a>
 8001ef0:	e74b      	b.n	8001d8a <__aeabi_ddiv+0x3e2>
 8001ef2:	9a00      	ldr	r2, [sp, #0]
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d000      	beq.n	8001efa <__aeabi_ddiv+0x552>
 8001ef8:	e747      	b.n	8001d8a <__aeabi_ddiv+0x3e2>
 8001efa:	e618      	b.n	8001b2e <__aeabi_ddiv+0x186>
 8001efc:	42ae      	cmp	r6, r5
 8001efe:	d99c      	bls.n	8001e3a <__aeabi_ddiv+0x492>
 8001f00:	2302      	movs	r3, #2
 8001f02:	425b      	negs	r3, r3
 8001f04:	469c      	mov	ip, r3
 8001f06:	9b00      	ldr	r3, [sp, #0]
 8001f08:	44e0      	add	r8, ip
 8001f0a:	469c      	mov	ip, r3
 8001f0c:	4465      	add	r5, ip
 8001f0e:	429d      	cmp	r5, r3
 8001f10:	419b      	sbcs	r3, r3
 8001f12:	425b      	negs	r3, r3
 8001f14:	191b      	adds	r3, r3, r4
 8001f16:	18c9      	adds	r1, r1, r3
 8001f18:	e6e4      	b.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <__aeabi_ddiv+0x5c8>)
 8001f1c:	445a      	add	r2, fp
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	dc00      	bgt.n	8001f24 <__aeabi_ddiv+0x57c>
 8001f22:	e744      	b.n	8001dae <__aeabi_ddiv+0x406>
 8001f24:	2301      	movs	r3, #1
 8001f26:	2500      	movs	r5, #0
 8001f28:	4498      	add	r8, r3
 8001f2a:	e609      	b.n	8001b40 <__aeabi_ddiv+0x198>
 8001f2c:	0765      	lsls	r5, r4, #29
 8001f2e:	0264      	lsls	r4, r4, #9
 8001f30:	0b24      	lsrs	r4, r4, #12
 8001f32:	08db      	lsrs	r3, r3, #3
 8001f34:	431d      	orrs	r5, r3
 8001f36:	2300      	movs	r3, #0
 8001f38:	e590      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001f3a:	9e00      	ldr	r6, [sp, #0]
 8001f3c:	3d02      	subs	r5, #2
 8001f3e:	0072      	lsls	r2, r6, #1
 8001f40:	42b2      	cmp	r2, r6
 8001f42:	41bf      	sbcs	r7, r7
 8001f44:	427f      	negs	r7, r7
 8001f46:	193c      	adds	r4, r7, r4
 8001f48:	1909      	adds	r1, r1, r4
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	e7ce      	b.n	8001eec <__aeabi_ddiv+0x544>
 8001f4e:	2480      	movs	r4, #128	; 0x80
 8001f50:	4643      	mov	r3, r8
 8001f52:	0324      	lsls	r4, r4, #12
 8001f54:	431c      	orrs	r4, r3
 8001f56:	0324      	lsls	r4, r4, #12
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <__aeabi_ddiv+0x5cc>)
 8001f5a:	0b24      	lsrs	r4, r4, #12
 8001f5c:	e57e      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001f5e:	9a00      	ldr	r2, [sp, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3ea      	bcc.n	8001f3a <__aeabi_ddiv+0x592>
 8001f64:	0035      	movs	r5, r6
 8001f66:	e7c4      	b.n	8001ef2 <__aeabi_ddiv+0x54a>
 8001f68:	0000043e 	.word	0x0000043e
 8001f6c:	0000041e 	.word	0x0000041e
 8001f70:	000003ff 	.word	0x000003ff
 8001f74:	000007ff 	.word	0x000007ff

08001f78 <__aeabi_dmul>:
 8001f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7a:	4657      	mov	r7, sl
 8001f7c:	464e      	mov	r6, r9
 8001f7e:	4645      	mov	r5, r8
 8001f80:	46de      	mov	lr, fp
 8001f82:	b5e0      	push	{r5, r6, r7, lr}
 8001f84:	4698      	mov	r8, r3
 8001f86:	030c      	lsls	r4, r1, #12
 8001f88:	004b      	lsls	r3, r1, #1
 8001f8a:	0006      	movs	r6, r0
 8001f8c:	4692      	mov	sl, r2
 8001f8e:	b087      	sub	sp, #28
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	0d5b      	lsrs	r3, r3, #21
 8001f94:	0fcf      	lsrs	r7, r1, #31
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d06c      	beq.n	8002074 <__aeabi_dmul+0xfc>
 8001f9a:	4add      	ldr	r2, [pc, #884]	; (8002310 <__aeabi_dmul+0x398>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x2a>
 8001fa0:	e086      	b.n	80020b0 <__aeabi_dmul+0x138>
 8001fa2:	0f42      	lsrs	r2, r0, #29
 8001fa4:	00e4      	lsls	r4, r4, #3
 8001fa6:	4314      	orrs	r4, r2
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	0412      	lsls	r2, r2, #16
 8001fac:	4314      	orrs	r4, r2
 8001fae:	4ad9      	ldr	r2, [pc, #868]	; (8002314 <__aeabi_dmul+0x39c>)
 8001fb0:	00c5      	lsls	r5, r0, #3
 8001fb2:	4694      	mov	ip, r2
 8001fb4:	4463      	add	r3, ip
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	4699      	mov	r9, r3
 8001fbc:	469b      	mov	fp, r3
 8001fbe:	4643      	mov	r3, r8
 8001fc0:	4642      	mov	r2, r8
 8001fc2:	031e      	lsls	r6, r3, #12
 8001fc4:	0fd2      	lsrs	r2, r2, #31
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4650      	mov	r0, sl
 8001fca:	4690      	mov	r8, r2
 8001fcc:	0b36      	lsrs	r6, r6, #12
 8001fce:	0d5b      	lsrs	r3, r3, #21
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dmul+0x5c>
 8001fd2:	e078      	b.n	80020c6 <__aeabi_dmul+0x14e>
 8001fd4:	4ace      	ldr	r2, [pc, #824]	; (8002310 <__aeabi_dmul+0x398>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01d      	beq.n	8002016 <__aeabi_dmul+0x9e>
 8001fda:	49ce      	ldr	r1, [pc, #824]	; (8002314 <__aeabi_dmul+0x39c>)
 8001fdc:	0f42      	lsrs	r2, r0, #29
 8001fde:	468c      	mov	ip, r1
 8001fe0:	9900      	ldr	r1, [sp, #0]
 8001fe2:	4463      	add	r3, ip
 8001fe4:	00f6      	lsls	r6, r6, #3
 8001fe6:	468c      	mov	ip, r1
 8001fe8:	4316      	orrs	r6, r2
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	449c      	add	ip, r3
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	4663      	mov	r3, ip
 8001ff2:	4316      	orrs	r6, r2
 8001ff4:	00c2      	lsls	r2, r0, #3
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	9900      	ldr	r1, [sp, #0]
 8001ffc:	4643      	mov	r3, r8
 8001ffe:	3101      	adds	r1, #1
 8002000:	468c      	mov	ip, r1
 8002002:	4649      	mov	r1, r9
 8002004:	407b      	eors	r3, r7
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	290f      	cmp	r1, #15
 800200a:	d900      	bls.n	800200e <__aeabi_dmul+0x96>
 800200c:	e07e      	b.n	800210c <__aeabi_dmul+0x194>
 800200e:	4bc2      	ldr	r3, [pc, #776]	; (8002318 <__aeabi_dmul+0x3a0>)
 8002010:	0089      	lsls	r1, r1, #2
 8002012:	5859      	ldr	r1, [r3, r1]
 8002014:	468f      	mov	pc, r1
 8002016:	4652      	mov	r2, sl
 8002018:	9b00      	ldr	r3, [sp, #0]
 800201a:	4332      	orrs	r2, r6
 800201c:	d000      	beq.n	8002020 <__aeabi_dmul+0xa8>
 800201e:	e156      	b.n	80022ce <__aeabi_dmul+0x356>
 8002020:	49bb      	ldr	r1, [pc, #748]	; (8002310 <__aeabi_dmul+0x398>)
 8002022:	2600      	movs	r6, #0
 8002024:	468c      	mov	ip, r1
 8002026:	4463      	add	r3, ip
 8002028:	4649      	mov	r1, r9
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2302      	movs	r3, #2
 800202e:	4319      	orrs	r1, r3
 8002030:	4689      	mov	r9, r1
 8002032:	2002      	movs	r0, #2
 8002034:	e7e1      	b.n	8001ffa <__aeabi_dmul+0x82>
 8002036:	4643      	mov	r3, r8
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	0034      	movs	r4, r6
 800203c:	0015      	movs	r5, r2
 800203e:	4683      	mov	fp, r0
 8002040:	465b      	mov	r3, fp
 8002042:	2b02      	cmp	r3, #2
 8002044:	d05e      	beq.n	8002104 <__aeabi_dmul+0x18c>
 8002046:	2b03      	cmp	r3, #3
 8002048:	d100      	bne.n	800204c <__aeabi_dmul+0xd4>
 800204a:	e1f3      	b.n	8002434 <__aeabi_dmul+0x4bc>
 800204c:	2b01      	cmp	r3, #1
 800204e:	d000      	beq.n	8002052 <__aeabi_dmul+0xda>
 8002050:	e118      	b.n	8002284 <__aeabi_dmul+0x30c>
 8002052:	2200      	movs	r2, #0
 8002054:	2400      	movs	r4, #0
 8002056:	2500      	movs	r5, #0
 8002058:	9b01      	ldr	r3, [sp, #4]
 800205a:	0512      	lsls	r2, r2, #20
 800205c:	4322      	orrs	r2, r4
 800205e:	07db      	lsls	r3, r3, #31
 8002060:	431a      	orrs	r2, r3
 8002062:	0028      	movs	r0, r5
 8002064:	0011      	movs	r1, r2
 8002066:	b007      	add	sp, #28
 8002068:	bcf0      	pop	{r4, r5, r6, r7}
 800206a:	46bb      	mov	fp, r7
 800206c:	46b2      	mov	sl, r6
 800206e:	46a9      	mov	r9, r5
 8002070:	46a0      	mov	r8, r4
 8002072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002074:	0025      	movs	r5, r4
 8002076:	4305      	orrs	r5, r0
 8002078:	d100      	bne.n	800207c <__aeabi_dmul+0x104>
 800207a:	e141      	b.n	8002300 <__aeabi_dmul+0x388>
 800207c:	2c00      	cmp	r4, #0
 800207e:	d100      	bne.n	8002082 <__aeabi_dmul+0x10a>
 8002080:	e1ad      	b.n	80023de <__aeabi_dmul+0x466>
 8002082:	0020      	movs	r0, r4
 8002084:	f000 fe76 	bl	8002d74 <__clzsi2>
 8002088:	0001      	movs	r1, r0
 800208a:	0002      	movs	r2, r0
 800208c:	390b      	subs	r1, #11
 800208e:	231d      	movs	r3, #29
 8002090:	0010      	movs	r0, r2
 8002092:	1a5b      	subs	r3, r3, r1
 8002094:	0031      	movs	r1, r6
 8002096:	0035      	movs	r5, r6
 8002098:	3808      	subs	r0, #8
 800209a:	4084      	lsls	r4, r0
 800209c:	40d9      	lsrs	r1, r3
 800209e:	4085      	lsls	r5, r0
 80020a0:	430c      	orrs	r4, r1
 80020a2:	489e      	ldr	r0, [pc, #632]	; (800231c <__aeabi_dmul+0x3a4>)
 80020a4:	1a83      	subs	r3, r0, r2
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2300      	movs	r3, #0
 80020aa:	4699      	mov	r9, r3
 80020ac:	469b      	mov	fp, r3
 80020ae:	e786      	b.n	8001fbe <__aeabi_dmul+0x46>
 80020b0:	0005      	movs	r5, r0
 80020b2:	4325      	orrs	r5, r4
 80020b4:	d000      	beq.n	80020b8 <__aeabi_dmul+0x140>
 80020b6:	e11c      	b.n	80022f2 <__aeabi_dmul+0x37a>
 80020b8:	2208      	movs	r2, #8
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2302      	movs	r3, #2
 80020be:	2400      	movs	r4, #0
 80020c0:	4691      	mov	r9, r2
 80020c2:	469b      	mov	fp, r3
 80020c4:	e77b      	b.n	8001fbe <__aeabi_dmul+0x46>
 80020c6:	4652      	mov	r2, sl
 80020c8:	4332      	orrs	r2, r6
 80020ca:	d100      	bne.n	80020ce <__aeabi_dmul+0x156>
 80020cc:	e10a      	b.n	80022e4 <__aeabi_dmul+0x36c>
 80020ce:	2e00      	cmp	r6, #0
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dmul+0x15c>
 80020d2:	e176      	b.n	80023c2 <__aeabi_dmul+0x44a>
 80020d4:	0030      	movs	r0, r6
 80020d6:	f000 fe4d 	bl	8002d74 <__clzsi2>
 80020da:	0002      	movs	r2, r0
 80020dc:	3a0b      	subs	r2, #11
 80020de:	231d      	movs	r3, #29
 80020e0:	0001      	movs	r1, r0
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	4652      	mov	r2, sl
 80020e6:	3908      	subs	r1, #8
 80020e8:	40da      	lsrs	r2, r3
 80020ea:	408e      	lsls	r6, r1
 80020ec:	4316      	orrs	r6, r2
 80020ee:	4652      	mov	r2, sl
 80020f0:	408a      	lsls	r2, r1
 80020f2:	9b00      	ldr	r3, [sp, #0]
 80020f4:	4989      	ldr	r1, [pc, #548]	; (800231c <__aeabi_dmul+0x3a4>)
 80020f6:	1a18      	subs	r0, r3, r0
 80020f8:	0003      	movs	r3, r0
 80020fa:	468c      	mov	ip, r1
 80020fc:	4463      	add	r3, ip
 80020fe:	2000      	movs	r0, #0
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	e77a      	b.n	8001ffa <__aeabi_dmul+0x82>
 8002104:	2400      	movs	r4, #0
 8002106:	2500      	movs	r5, #0
 8002108:	4a81      	ldr	r2, [pc, #516]	; (8002310 <__aeabi_dmul+0x398>)
 800210a:	e7a5      	b.n	8002058 <__aeabi_dmul+0xe0>
 800210c:	0c2f      	lsrs	r7, r5, #16
 800210e:	042d      	lsls	r5, r5, #16
 8002110:	0c2d      	lsrs	r5, r5, #16
 8002112:	002b      	movs	r3, r5
 8002114:	0c11      	lsrs	r1, r2, #16
 8002116:	0412      	lsls	r2, r2, #16
 8002118:	0c12      	lsrs	r2, r2, #16
 800211a:	4353      	muls	r3, r2
 800211c:	4698      	mov	r8, r3
 800211e:	0013      	movs	r3, r2
 8002120:	0028      	movs	r0, r5
 8002122:	437b      	muls	r3, r7
 8002124:	4699      	mov	r9, r3
 8002126:	4348      	muls	r0, r1
 8002128:	4448      	add	r0, r9
 800212a:	4683      	mov	fp, r0
 800212c:	4640      	mov	r0, r8
 800212e:	000b      	movs	r3, r1
 8002130:	0c00      	lsrs	r0, r0, #16
 8002132:	4682      	mov	sl, r0
 8002134:	4658      	mov	r0, fp
 8002136:	437b      	muls	r3, r7
 8002138:	4450      	add	r0, sl
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	4581      	cmp	r9, r0
 800213e:	d906      	bls.n	800214e <__aeabi_dmul+0x1d6>
 8002140:	469a      	mov	sl, r3
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	025b      	lsls	r3, r3, #9
 8002146:	4699      	mov	r9, r3
 8002148:	44ca      	add	sl, r9
 800214a:	4653      	mov	r3, sl
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	0c03      	lsrs	r3, r0, #16
 8002150:	469b      	mov	fp, r3
 8002152:	4643      	mov	r3, r8
 8002154:	041b      	lsls	r3, r3, #16
 8002156:	0400      	lsls	r0, r0, #16
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	4698      	mov	r8, r3
 800215c:	0003      	movs	r3, r0
 800215e:	4443      	add	r3, r8
 8002160:	9304      	str	r3, [sp, #16]
 8002162:	0c33      	lsrs	r3, r6, #16
 8002164:	4699      	mov	r9, r3
 8002166:	002b      	movs	r3, r5
 8002168:	0436      	lsls	r6, r6, #16
 800216a:	0c36      	lsrs	r6, r6, #16
 800216c:	4373      	muls	r3, r6
 800216e:	4698      	mov	r8, r3
 8002170:	0033      	movs	r3, r6
 8002172:	437b      	muls	r3, r7
 8002174:	469a      	mov	sl, r3
 8002176:	464b      	mov	r3, r9
 8002178:	435d      	muls	r5, r3
 800217a:	435f      	muls	r7, r3
 800217c:	4643      	mov	r3, r8
 800217e:	4455      	add	r5, sl
 8002180:	0c18      	lsrs	r0, r3, #16
 8002182:	1940      	adds	r0, r0, r5
 8002184:	4582      	cmp	sl, r0
 8002186:	d903      	bls.n	8002190 <__aeabi_dmul+0x218>
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	025b      	lsls	r3, r3, #9
 800218c:	469a      	mov	sl, r3
 800218e:	4457      	add	r7, sl
 8002190:	0c05      	lsrs	r5, r0, #16
 8002192:	19eb      	adds	r3, r5, r7
 8002194:	9305      	str	r3, [sp, #20]
 8002196:	4643      	mov	r3, r8
 8002198:	041d      	lsls	r5, r3, #16
 800219a:	0c2d      	lsrs	r5, r5, #16
 800219c:	0400      	lsls	r0, r0, #16
 800219e:	1940      	adds	r0, r0, r5
 80021a0:	0c25      	lsrs	r5, r4, #16
 80021a2:	0424      	lsls	r4, r4, #16
 80021a4:	0c24      	lsrs	r4, r4, #16
 80021a6:	0027      	movs	r7, r4
 80021a8:	4357      	muls	r7, r2
 80021aa:	436a      	muls	r2, r5
 80021ac:	4690      	mov	r8, r2
 80021ae:	002a      	movs	r2, r5
 80021b0:	0c3b      	lsrs	r3, r7, #16
 80021b2:	469a      	mov	sl, r3
 80021b4:	434a      	muls	r2, r1
 80021b6:	4361      	muls	r1, r4
 80021b8:	4441      	add	r1, r8
 80021ba:	4451      	add	r1, sl
 80021bc:	4483      	add	fp, r0
 80021be:	4588      	cmp	r8, r1
 80021c0:	d903      	bls.n	80021ca <__aeabi_dmul+0x252>
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	4698      	mov	r8, r3
 80021c8:	4442      	add	r2, r8
 80021ca:	043f      	lsls	r7, r7, #16
 80021cc:	0c0b      	lsrs	r3, r1, #16
 80021ce:	0c3f      	lsrs	r7, r7, #16
 80021d0:	0409      	lsls	r1, r1, #16
 80021d2:	19c9      	adds	r1, r1, r7
 80021d4:	0027      	movs	r7, r4
 80021d6:	4698      	mov	r8, r3
 80021d8:	464b      	mov	r3, r9
 80021da:	4377      	muls	r7, r6
 80021dc:	435c      	muls	r4, r3
 80021de:	436e      	muls	r6, r5
 80021e0:	435d      	muls	r5, r3
 80021e2:	0c3b      	lsrs	r3, r7, #16
 80021e4:	4699      	mov	r9, r3
 80021e6:	19a4      	adds	r4, r4, r6
 80021e8:	444c      	add	r4, r9
 80021ea:	4442      	add	r2, r8
 80021ec:	9503      	str	r5, [sp, #12]
 80021ee:	42a6      	cmp	r6, r4
 80021f0:	d904      	bls.n	80021fc <__aeabi_dmul+0x284>
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	025b      	lsls	r3, r3, #9
 80021f6:	4698      	mov	r8, r3
 80021f8:	4445      	add	r5, r8
 80021fa:	9503      	str	r5, [sp, #12]
 80021fc:	9b02      	ldr	r3, [sp, #8]
 80021fe:	043f      	lsls	r7, r7, #16
 8002200:	445b      	add	r3, fp
 8002202:	001e      	movs	r6, r3
 8002204:	4283      	cmp	r3, r0
 8002206:	4180      	sbcs	r0, r0
 8002208:	0423      	lsls	r3, r4, #16
 800220a:	4698      	mov	r8, r3
 800220c:	9b05      	ldr	r3, [sp, #20]
 800220e:	0c3f      	lsrs	r7, r7, #16
 8002210:	4447      	add	r7, r8
 8002212:	4698      	mov	r8, r3
 8002214:	1876      	adds	r6, r6, r1
 8002216:	428e      	cmp	r6, r1
 8002218:	4189      	sbcs	r1, r1
 800221a:	4447      	add	r7, r8
 800221c:	4240      	negs	r0, r0
 800221e:	183d      	adds	r5, r7, r0
 8002220:	46a8      	mov	r8, r5
 8002222:	4693      	mov	fp, r2
 8002224:	4249      	negs	r1, r1
 8002226:	468a      	mov	sl, r1
 8002228:	44c3      	add	fp, r8
 800222a:	429f      	cmp	r7, r3
 800222c:	41bf      	sbcs	r7, r7
 800222e:	4580      	cmp	r8, r0
 8002230:	4180      	sbcs	r0, r0
 8002232:	9b03      	ldr	r3, [sp, #12]
 8002234:	44da      	add	sl, fp
 8002236:	4698      	mov	r8, r3
 8002238:	4653      	mov	r3, sl
 800223a:	4240      	negs	r0, r0
 800223c:	427f      	negs	r7, r7
 800223e:	4307      	orrs	r7, r0
 8002240:	0c24      	lsrs	r4, r4, #16
 8002242:	4593      	cmp	fp, r2
 8002244:	4192      	sbcs	r2, r2
 8002246:	458a      	cmp	sl, r1
 8002248:	4189      	sbcs	r1, r1
 800224a:	193f      	adds	r7, r7, r4
 800224c:	0ddc      	lsrs	r4, r3, #23
 800224e:	9b04      	ldr	r3, [sp, #16]
 8002250:	0275      	lsls	r5, r6, #9
 8002252:	431d      	orrs	r5, r3
 8002254:	1e68      	subs	r0, r5, #1
 8002256:	4185      	sbcs	r5, r0
 8002258:	4653      	mov	r3, sl
 800225a:	4252      	negs	r2, r2
 800225c:	4249      	negs	r1, r1
 800225e:	430a      	orrs	r2, r1
 8002260:	18bf      	adds	r7, r7, r2
 8002262:	4447      	add	r7, r8
 8002264:	0df6      	lsrs	r6, r6, #23
 8002266:	027f      	lsls	r7, r7, #9
 8002268:	4335      	orrs	r5, r6
 800226a:	025a      	lsls	r2, r3, #9
 800226c:	433c      	orrs	r4, r7
 800226e:	4315      	orrs	r5, r2
 8002270:	01fb      	lsls	r3, r7, #7
 8002272:	d400      	bmi.n	8002276 <__aeabi_dmul+0x2fe>
 8002274:	e0c1      	b.n	80023fa <__aeabi_dmul+0x482>
 8002276:	2101      	movs	r1, #1
 8002278:	086a      	lsrs	r2, r5, #1
 800227a:	400d      	ands	r5, r1
 800227c:	4315      	orrs	r5, r2
 800227e:	07e2      	lsls	r2, r4, #31
 8002280:	4315      	orrs	r5, r2
 8002282:	0864      	lsrs	r4, r4, #1
 8002284:	4926      	ldr	r1, [pc, #152]	; (8002320 <__aeabi_dmul+0x3a8>)
 8002286:	4461      	add	r1, ip
 8002288:	2900      	cmp	r1, #0
 800228a:	dd56      	ble.n	800233a <__aeabi_dmul+0x3c2>
 800228c:	076b      	lsls	r3, r5, #29
 800228e:	d009      	beq.n	80022a4 <__aeabi_dmul+0x32c>
 8002290:	220f      	movs	r2, #15
 8002292:	402a      	ands	r2, r5
 8002294:	2a04      	cmp	r2, #4
 8002296:	d005      	beq.n	80022a4 <__aeabi_dmul+0x32c>
 8002298:	1d2a      	adds	r2, r5, #4
 800229a:	42aa      	cmp	r2, r5
 800229c:	41ad      	sbcs	r5, r5
 800229e:	426d      	negs	r5, r5
 80022a0:	1964      	adds	r4, r4, r5
 80022a2:	0015      	movs	r5, r2
 80022a4:	01e3      	lsls	r3, r4, #7
 80022a6:	d504      	bpl.n	80022b2 <__aeabi_dmul+0x33a>
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <__aeabi_dmul+0x3ac>)
 80022ac:	00c9      	lsls	r1, r1, #3
 80022ae:	4014      	ands	r4, r2
 80022b0:	4461      	add	r1, ip
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <__aeabi_dmul+0x3b0>)
 80022b4:	4291      	cmp	r1, r2
 80022b6:	dd00      	ble.n	80022ba <__aeabi_dmul+0x342>
 80022b8:	e724      	b.n	8002104 <__aeabi_dmul+0x18c>
 80022ba:	0762      	lsls	r2, r4, #29
 80022bc:	08ed      	lsrs	r5, r5, #3
 80022be:	0264      	lsls	r4, r4, #9
 80022c0:	0549      	lsls	r1, r1, #21
 80022c2:	4315      	orrs	r5, r2
 80022c4:	0b24      	lsrs	r4, r4, #12
 80022c6:	0d4a      	lsrs	r2, r1, #21
 80022c8:	e6c6      	b.n	8002058 <__aeabi_dmul+0xe0>
 80022ca:	9701      	str	r7, [sp, #4]
 80022cc:	e6b8      	b.n	8002040 <__aeabi_dmul+0xc8>
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <__aeabi_dmul+0x398>)
 80022d0:	2003      	movs	r0, #3
 80022d2:	4694      	mov	ip, r2
 80022d4:	4463      	add	r3, ip
 80022d6:	464a      	mov	r2, r9
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2303      	movs	r3, #3
 80022dc:	431a      	orrs	r2, r3
 80022de:	4691      	mov	r9, r2
 80022e0:	4652      	mov	r2, sl
 80022e2:	e68a      	b.n	8001ffa <__aeabi_dmul+0x82>
 80022e4:	4649      	mov	r1, r9
 80022e6:	2301      	movs	r3, #1
 80022e8:	4319      	orrs	r1, r3
 80022ea:	4689      	mov	r9, r1
 80022ec:	2600      	movs	r6, #0
 80022ee:	2001      	movs	r0, #1
 80022f0:	e683      	b.n	8001ffa <__aeabi_dmul+0x82>
 80022f2:	220c      	movs	r2, #12
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2303      	movs	r3, #3
 80022f8:	0005      	movs	r5, r0
 80022fa:	4691      	mov	r9, r2
 80022fc:	469b      	mov	fp, r3
 80022fe:	e65e      	b.n	8001fbe <__aeabi_dmul+0x46>
 8002300:	2304      	movs	r3, #4
 8002302:	4699      	mov	r9, r3
 8002304:	2300      	movs	r3, #0
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	2400      	movs	r4, #0
 800230c:	469b      	mov	fp, r3
 800230e:	e656      	b.n	8001fbe <__aeabi_dmul+0x46>
 8002310:	000007ff 	.word	0x000007ff
 8002314:	fffffc01 	.word	0xfffffc01
 8002318:	0800a08c 	.word	0x0800a08c
 800231c:	fffffc0d 	.word	0xfffffc0d
 8002320:	000003ff 	.word	0x000003ff
 8002324:	feffffff 	.word	0xfeffffff
 8002328:	000007fe 	.word	0x000007fe
 800232c:	2300      	movs	r3, #0
 800232e:	2480      	movs	r4, #128	; 0x80
 8002330:	2500      	movs	r5, #0
 8002332:	4a44      	ldr	r2, [pc, #272]	; (8002444 <__aeabi_dmul+0x4cc>)
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	0324      	lsls	r4, r4, #12
 8002338:	e68e      	b.n	8002058 <__aeabi_dmul+0xe0>
 800233a:	2001      	movs	r0, #1
 800233c:	1a40      	subs	r0, r0, r1
 800233e:	2838      	cmp	r0, #56	; 0x38
 8002340:	dd00      	ble.n	8002344 <__aeabi_dmul+0x3cc>
 8002342:	e686      	b.n	8002052 <__aeabi_dmul+0xda>
 8002344:	281f      	cmp	r0, #31
 8002346:	dd5b      	ble.n	8002400 <__aeabi_dmul+0x488>
 8002348:	221f      	movs	r2, #31
 800234a:	0023      	movs	r3, r4
 800234c:	4252      	negs	r2, r2
 800234e:	1a51      	subs	r1, r2, r1
 8002350:	40cb      	lsrs	r3, r1
 8002352:	0019      	movs	r1, r3
 8002354:	2820      	cmp	r0, #32
 8002356:	d003      	beq.n	8002360 <__aeabi_dmul+0x3e8>
 8002358:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <__aeabi_dmul+0x4d0>)
 800235a:	4462      	add	r2, ip
 800235c:	4094      	lsls	r4, r2
 800235e:	4325      	orrs	r5, r4
 8002360:	1e6a      	subs	r2, r5, #1
 8002362:	4195      	sbcs	r5, r2
 8002364:	002a      	movs	r2, r5
 8002366:	430a      	orrs	r2, r1
 8002368:	2107      	movs	r1, #7
 800236a:	000d      	movs	r5, r1
 800236c:	2400      	movs	r4, #0
 800236e:	4015      	ands	r5, r2
 8002370:	4211      	tst	r1, r2
 8002372:	d05b      	beq.n	800242c <__aeabi_dmul+0x4b4>
 8002374:	210f      	movs	r1, #15
 8002376:	2400      	movs	r4, #0
 8002378:	4011      	ands	r1, r2
 800237a:	2904      	cmp	r1, #4
 800237c:	d053      	beq.n	8002426 <__aeabi_dmul+0x4ae>
 800237e:	1d11      	adds	r1, r2, #4
 8002380:	4291      	cmp	r1, r2
 8002382:	4192      	sbcs	r2, r2
 8002384:	4252      	negs	r2, r2
 8002386:	18a4      	adds	r4, r4, r2
 8002388:	000a      	movs	r2, r1
 800238a:	0223      	lsls	r3, r4, #8
 800238c:	d54b      	bpl.n	8002426 <__aeabi_dmul+0x4ae>
 800238e:	2201      	movs	r2, #1
 8002390:	2400      	movs	r4, #0
 8002392:	2500      	movs	r5, #0
 8002394:	e660      	b.n	8002058 <__aeabi_dmul+0xe0>
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	031b      	lsls	r3, r3, #12
 800239a:	421c      	tst	r4, r3
 800239c:	d009      	beq.n	80023b2 <__aeabi_dmul+0x43a>
 800239e:	421e      	tst	r6, r3
 80023a0:	d107      	bne.n	80023b2 <__aeabi_dmul+0x43a>
 80023a2:	4333      	orrs	r3, r6
 80023a4:	031c      	lsls	r4, r3, #12
 80023a6:	4643      	mov	r3, r8
 80023a8:	0015      	movs	r5, r2
 80023aa:	0b24      	lsrs	r4, r4, #12
 80023ac:	4a25      	ldr	r2, [pc, #148]	; (8002444 <__aeabi_dmul+0x4cc>)
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	e652      	b.n	8002058 <__aeabi_dmul+0xe0>
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0312      	lsls	r2, r2, #12
 80023b6:	4314      	orrs	r4, r2
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	4a22      	ldr	r2, [pc, #136]	; (8002444 <__aeabi_dmul+0x4cc>)
 80023bc:	0b24      	lsrs	r4, r4, #12
 80023be:	9701      	str	r7, [sp, #4]
 80023c0:	e64a      	b.n	8002058 <__aeabi_dmul+0xe0>
 80023c2:	f000 fcd7 	bl	8002d74 <__clzsi2>
 80023c6:	0003      	movs	r3, r0
 80023c8:	001a      	movs	r2, r3
 80023ca:	3215      	adds	r2, #21
 80023cc:	3020      	adds	r0, #32
 80023ce:	2a1c      	cmp	r2, #28
 80023d0:	dc00      	bgt.n	80023d4 <__aeabi_dmul+0x45c>
 80023d2:	e684      	b.n	80020de <__aeabi_dmul+0x166>
 80023d4:	4656      	mov	r6, sl
 80023d6:	3b08      	subs	r3, #8
 80023d8:	2200      	movs	r2, #0
 80023da:	409e      	lsls	r6, r3
 80023dc:	e689      	b.n	80020f2 <__aeabi_dmul+0x17a>
 80023de:	f000 fcc9 	bl	8002d74 <__clzsi2>
 80023e2:	0001      	movs	r1, r0
 80023e4:	0002      	movs	r2, r0
 80023e6:	3115      	adds	r1, #21
 80023e8:	3220      	adds	r2, #32
 80023ea:	291c      	cmp	r1, #28
 80023ec:	dc00      	bgt.n	80023f0 <__aeabi_dmul+0x478>
 80023ee:	e64e      	b.n	800208e <__aeabi_dmul+0x116>
 80023f0:	0034      	movs	r4, r6
 80023f2:	3808      	subs	r0, #8
 80023f4:	2500      	movs	r5, #0
 80023f6:	4084      	lsls	r4, r0
 80023f8:	e653      	b.n	80020a2 <__aeabi_dmul+0x12a>
 80023fa:	9b00      	ldr	r3, [sp, #0]
 80023fc:	469c      	mov	ip, r3
 80023fe:	e741      	b.n	8002284 <__aeabi_dmul+0x30c>
 8002400:	4912      	ldr	r1, [pc, #72]	; (800244c <__aeabi_dmul+0x4d4>)
 8002402:	0022      	movs	r2, r4
 8002404:	4461      	add	r1, ip
 8002406:	002e      	movs	r6, r5
 8002408:	408d      	lsls	r5, r1
 800240a:	408a      	lsls	r2, r1
 800240c:	40c6      	lsrs	r6, r0
 800240e:	1e69      	subs	r1, r5, #1
 8002410:	418d      	sbcs	r5, r1
 8002412:	4332      	orrs	r2, r6
 8002414:	432a      	orrs	r2, r5
 8002416:	40c4      	lsrs	r4, r0
 8002418:	0753      	lsls	r3, r2, #29
 800241a:	d0b6      	beq.n	800238a <__aeabi_dmul+0x412>
 800241c:	210f      	movs	r1, #15
 800241e:	4011      	ands	r1, r2
 8002420:	2904      	cmp	r1, #4
 8002422:	d1ac      	bne.n	800237e <__aeabi_dmul+0x406>
 8002424:	e7b1      	b.n	800238a <__aeabi_dmul+0x412>
 8002426:	0765      	lsls	r5, r4, #29
 8002428:	0264      	lsls	r4, r4, #9
 800242a:	0b24      	lsrs	r4, r4, #12
 800242c:	08d2      	lsrs	r2, r2, #3
 800242e:	4315      	orrs	r5, r2
 8002430:	2200      	movs	r2, #0
 8002432:	e611      	b.n	8002058 <__aeabi_dmul+0xe0>
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	0312      	lsls	r2, r2, #12
 8002438:	4314      	orrs	r4, r2
 800243a:	0324      	lsls	r4, r4, #12
 800243c:	4a01      	ldr	r2, [pc, #4]	; (8002444 <__aeabi_dmul+0x4cc>)
 800243e:	0b24      	lsrs	r4, r4, #12
 8002440:	e60a      	b.n	8002058 <__aeabi_dmul+0xe0>
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	000007ff 	.word	0x000007ff
 8002448:	0000043e 	.word	0x0000043e
 800244c:	0000041e 	.word	0x0000041e

08002450 <__aeabi_dsub>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	4657      	mov	r7, sl
 8002454:	464e      	mov	r6, r9
 8002456:	4645      	mov	r5, r8
 8002458:	46de      	mov	lr, fp
 800245a:	0004      	movs	r4, r0
 800245c:	b5e0      	push	{r5, r6, r7, lr}
 800245e:	001f      	movs	r7, r3
 8002460:	0010      	movs	r0, r2
 8002462:	030b      	lsls	r3, r1, #12
 8002464:	0f62      	lsrs	r2, r4, #29
 8002466:	004e      	lsls	r6, r1, #1
 8002468:	0fcd      	lsrs	r5, r1, #31
 800246a:	0a5b      	lsrs	r3, r3, #9
 800246c:	0339      	lsls	r1, r7, #12
 800246e:	4313      	orrs	r3, r2
 8002470:	0a49      	lsrs	r1, r1, #9
 8002472:	00e2      	lsls	r2, r4, #3
 8002474:	0f44      	lsrs	r4, r0, #29
 8002476:	4321      	orrs	r1, r4
 8002478:	4cc2      	ldr	r4, [pc, #776]	; (8002784 <__aeabi_dsub+0x334>)
 800247a:	4691      	mov	r9, r2
 800247c:	4692      	mov	sl, r2
 800247e:	00c0      	lsls	r0, r0, #3
 8002480:	007a      	lsls	r2, r7, #1
 8002482:	4680      	mov	r8, r0
 8002484:	0d76      	lsrs	r6, r6, #21
 8002486:	0d52      	lsrs	r2, r2, #21
 8002488:	0fff      	lsrs	r7, r7, #31
 800248a:	42a2      	cmp	r2, r4
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x40>
 800248e:	e0b4      	b.n	80025fa <__aeabi_dsub+0x1aa>
 8002490:	2401      	movs	r4, #1
 8002492:	4067      	eors	r7, r4
 8002494:	46bb      	mov	fp, r7
 8002496:	42bd      	cmp	r5, r7
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x4c>
 800249a:	e088      	b.n	80025ae <__aeabi_dsub+0x15e>
 800249c:	1ab4      	subs	r4, r6, r2
 800249e:	46a4      	mov	ip, r4
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	dc00      	bgt.n	80024a6 <__aeabi_dsub+0x56>
 80024a4:	e0b2      	b.n	800260c <__aeabi_dsub+0x1bc>
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x5c>
 80024aa:	e0c5      	b.n	8002638 <__aeabi_dsub+0x1e8>
 80024ac:	4ab5      	ldr	r2, [pc, #724]	; (8002784 <__aeabi_dsub+0x334>)
 80024ae:	4296      	cmp	r6, r2
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x64>
 80024b2:	e28b      	b.n	80029cc <__aeabi_dsub+0x57c>
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	0412      	lsls	r2, r2, #16
 80024b8:	4311      	orrs	r1, r2
 80024ba:	4662      	mov	r2, ip
 80024bc:	2a38      	cmp	r2, #56	; 0x38
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dsub+0x72>
 80024c0:	e1a1      	b.n	8002806 <__aeabi_dsub+0x3b6>
 80024c2:	2a1f      	cmp	r2, #31
 80024c4:	dd00      	ble.n	80024c8 <__aeabi_dsub+0x78>
 80024c6:	e216      	b.n	80028f6 <__aeabi_dsub+0x4a6>
 80024c8:	2720      	movs	r7, #32
 80024ca:	000c      	movs	r4, r1
 80024cc:	1abf      	subs	r7, r7, r2
 80024ce:	40bc      	lsls	r4, r7
 80024d0:	0002      	movs	r2, r0
 80024d2:	46a0      	mov	r8, r4
 80024d4:	4664      	mov	r4, ip
 80024d6:	40b8      	lsls	r0, r7
 80024d8:	40e2      	lsrs	r2, r4
 80024da:	4644      	mov	r4, r8
 80024dc:	4314      	orrs	r4, r2
 80024de:	0002      	movs	r2, r0
 80024e0:	1e50      	subs	r0, r2, #1
 80024e2:	4182      	sbcs	r2, r0
 80024e4:	4660      	mov	r0, ip
 80024e6:	40c1      	lsrs	r1, r0
 80024e8:	4322      	orrs	r2, r4
 80024ea:	1a5b      	subs	r3, r3, r1
 80024ec:	4649      	mov	r1, r9
 80024ee:	1a8c      	subs	r4, r1, r2
 80024f0:	45a1      	cmp	r9, r4
 80024f2:	4192      	sbcs	r2, r2
 80024f4:	4252      	negs	r2, r2
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	4698      	mov	r8, r3
 80024fa:	4643      	mov	r3, r8
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	d400      	bmi.n	8002502 <__aeabi_dsub+0xb2>
 8002500:	e117      	b.n	8002732 <__aeabi_dsub+0x2e2>
 8002502:	4643      	mov	r3, r8
 8002504:	025b      	lsls	r3, r3, #9
 8002506:	0a5b      	lsrs	r3, r3, #9
 8002508:	4698      	mov	r8, r3
 800250a:	4643      	mov	r3, r8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d100      	bne.n	8002512 <__aeabi_dsub+0xc2>
 8002510:	e16c      	b.n	80027ec <__aeabi_dsub+0x39c>
 8002512:	4640      	mov	r0, r8
 8002514:	f000 fc2e 	bl	8002d74 <__clzsi2>
 8002518:	0002      	movs	r2, r0
 800251a:	3a08      	subs	r2, #8
 800251c:	2120      	movs	r1, #32
 800251e:	0020      	movs	r0, r4
 8002520:	4643      	mov	r3, r8
 8002522:	1a89      	subs	r1, r1, r2
 8002524:	4093      	lsls	r3, r2
 8002526:	40c8      	lsrs	r0, r1
 8002528:	4094      	lsls	r4, r2
 800252a:	4303      	orrs	r3, r0
 800252c:	4296      	cmp	r6, r2
 800252e:	dd00      	ble.n	8002532 <__aeabi_dsub+0xe2>
 8002530:	e157      	b.n	80027e2 <__aeabi_dsub+0x392>
 8002532:	1b96      	subs	r6, r2, r6
 8002534:	1c71      	adds	r1, r6, #1
 8002536:	291f      	cmp	r1, #31
 8002538:	dd00      	ble.n	800253c <__aeabi_dsub+0xec>
 800253a:	e1cb      	b.n	80028d4 <__aeabi_dsub+0x484>
 800253c:	2220      	movs	r2, #32
 800253e:	0018      	movs	r0, r3
 8002540:	0026      	movs	r6, r4
 8002542:	1a52      	subs	r2, r2, r1
 8002544:	4094      	lsls	r4, r2
 8002546:	4090      	lsls	r0, r2
 8002548:	40ce      	lsrs	r6, r1
 800254a:	40cb      	lsrs	r3, r1
 800254c:	1e62      	subs	r2, r4, #1
 800254e:	4194      	sbcs	r4, r2
 8002550:	4330      	orrs	r0, r6
 8002552:	4698      	mov	r8, r3
 8002554:	2600      	movs	r6, #0
 8002556:	4304      	orrs	r4, r0
 8002558:	0763      	lsls	r3, r4, #29
 800255a:	d009      	beq.n	8002570 <__aeabi_dsub+0x120>
 800255c:	230f      	movs	r3, #15
 800255e:	4023      	ands	r3, r4
 8002560:	2b04      	cmp	r3, #4
 8002562:	d005      	beq.n	8002570 <__aeabi_dsub+0x120>
 8002564:	1d23      	adds	r3, r4, #4
 8002566:	42a3      	cmp	r3, r4
 8002568:	41a4      	sbcs	r4, r4
 800256a:	4264      	negs	r4, r4
 800256c:	44a0      	add	r8, r4
 800256e:	001c      	movs	r4, r3
 8002570:	4643      	mov	r3, r8
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	d400      	bmi.n	8002578 <__aeabi_dsub+0x128>
 8002576:	e0df      	b.n	8002738 <__aeabi_dsub+0x2e8>
 8002578:	4b82      	ldr	r3, [pc, #520]	; (8002784 <__aeabi_dsub+0x334>)
 800257a:	3601      	adds	r6, #1
 800257c:	429e      	cmp	r6, r3
 800257e:	d100      	bne.n	8002582 <__aeabi_dsub+0x132>
 8002580:	e0fb      	b.n	800277a <__aeabi_dsub+0x32a>
 8002582:	4642      	mov	r2, r8
 8002584:	4b80      	ldr	r3, [pc, #512]	; (8002788 <__aeabi_dsub+0x338>)
 8002586:	08e4      	lsrs	r4, r4, #3
 8002588:	401a      	ands	r2, r3
 800258a:	0013      	movs	r3, r2
 800258c:	0571      	lsls	r1, r6, #21
 800258e:	0752      	lsls	r2, r2, #29
 8002590:	025b      	lsls	r3, r3, #9
 8002592:	4322      	orrs	r2, r4
 8002594:	0b1b      	lsrs	r3, r3, #12
 8002596:	0d49      	lsrs	r1, r1, #21
 8002598:	0509      	lsls	r1, r1, #20
 800259a:	07ed      	lsls	r5, r5, #31
 800259c:	4319      	orrs	r1, r3
 800259e:	4329      	orrs	r1, r5
 80025a0:	0010      	movs	r0, r2
 80025a2:	bcf0      	pop	{r4, r5, r6, r7}
 80025a4:	46bb      	mov	fp, r7
 80025a6:	46b2      	mov	sl, r6
 80025a8:	46a9      	mov	r9, r5
 80025aa:	46a0      	mov	r8, r4
 80025ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ae:	1ab4      	subs	r4, r6, r2
 80025b0:	46a4      	mov	ip, r4
 80025b2:	2c00      	cmp	r4, #0
 80025b4:	dd58      	ble.n	8002668 <__aeabi_dsub+0x218>
 80025b6:	2a00      	cmp	r2, #0
 80025b8:	d100      	bne.n	80025bc <__aeabi_dsub+0x16c>
 80025ba:	e09e      	b.n	80026fa <__aeabi_dsub+0x2aa>
 80025bc:	4a71      	ldr	r2, [pc, #452]	; (8002784 <__aeabi_dsub+0x334>)
 80025be:	4296      	cmp	r6, r2
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x174>
 80025c2:	e13b      	b.n	800283c <__aeabi_dsub+0x3ec>
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	0412      	lsls	r2, r2, #16
 80025c8:	4311      	orrs	r1, r2
 80025ca:	4662      	mov	r2, ip
 80025cc:	2a38      	cmp	r2, #56	; 0x38
 80025ce:	dd00      	ble.n	80025d2 <__aeabi_dsub+0x182>
 80025d0:	e0c1      	b.n	8002756 <__aeabi_dsub+0x306>
 80025d2:	2a1f      	cmp	r2, #31
 80025d4:	dc00      	bgt.n	80025d8 <__aeabi_dsub+0x188>
 80025d6:	e1bb      	b.n	8002950 <__aeabi_dsub+0x500>
 80025d8:	000c      	movs	r4, r1
 80025da:	3a20      	subs	r2, #32
 80025dc:	40d4      	lsrs	r4, r2
 80025de:	0022      	movs	r2, r4
 80025e0:	4664      	mov	r4, ip
 80025e2:	2c20      	cmp	r4, #32
 80025e4:	d004      	beq.n	80025f0 <__aeabi_dsub+0x1a0>
 80025e6:	2740      	movs	r7, #64	; 0x40
 80025e8:	1b3f      	subs	r7, r7, r4
 80025ea:	40b9      	lsls	r1, r7
 80025ec:	4308      	orrs	r0, r1
 80025ee:	4680      	mov	r8, r0
 80025f0:	4644      	mov	r4, r8
 80025f2:	1e61      	subs	r1, r4, #1
 80025f4:	418c      	sbcs	r4, r1
 80025f6:	4314      	orrs	r4, r2
 80025f8:	e0b1      	b.n	800275e <__aeabi_dsub+0x30e>
 80025fa:	000c      	movs	r4, r1
 80025fc:	4304      	orrs	r4, r0
 80025fe:	d02a      	beq.n	8002656 <__aeabi_dsub+0x206>
 8002600:	46bb      	mov	fp, r7
 8002602:	42bd      	cmp	r5, r7
 8002604:	d02d      	beq.n	8002662 <__aeabi_dsub+0x212>
 8002606:	4c61      	ldr	r4, [pc, #388]	; (800278c <__aeabi_dsub+0x33c>)
 8002608:	46a4      	mov	ip, r4
 800260a:	44b4      	add	ip, r6
 800260c:	4664      	mov	r4, ip
 800260e:	2c00      	cmp	r4, #0
 8002610:	d05c      	beq.n	80026cc <__aeabi_dsub+0x27c>
 8002612:	1b94      	subs	r4, r2, r6
 8002614:	46a4      	mov	ip, r4
 8002616:	2e00      	cmp	r6, #0
 8002618:	d000      	beq.n	800261c <__aeabi_dsub+0x1cc>
 800261a:	e115      	b.n	8002848 <__aeabi_dsub+0x3f8>
 800261c:	464d      	mov	r5, r9
 800261e:	431d      	orrs	r5, r3
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x1d4>
 8002622:	e1c3      	b.n	80029ac <__aeabi_dsub+0x55c>
 8002624:	1e65      	subs	r5, r4, #1
 8002626:	2c01      	cmp	r4, #1
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x1dc>
 800262a:	e20c      	b.n	8002a46 <__aeabi_dsub+0x5f6>
 800262c:	4e55      	ldr	r6, [pc, #340]	; (8002784 <__aeabi_dsub+0x334>)
 800262e:	42b4      	cmp	r4, r6
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x1e4>
 8002632:	e1f8      	b.n	8002a26 <__aeabi_dsub+0x5d6>
 8002634:	46ac      	mov	ip, r5
 8002636:	e10e      	b.n	8002856 <__aeabi_dsub+0x406>
 8002638:	000a      	movs	r2, r1
 800263a:	4302      	orrs	r2, r0
 800263c:	d100      	bne.n	8002640 <__aeabi_dsub+0x1f0>
 800263e:	e136      	b.n	80028ae <__aeabi_dsub+0x45e>
 8002640:	0022      	movs	r2, r4
 8002642:	3a01      	subs	r2, #1
 8002644:	2c01      	cmp	r4, #1
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x1fa>
 8002648:	e1c6      	b.n	80029d8 <__aeabi_dsub+0x588>
 800264a:	4c4e      	ldr	r4, [pc, #312]	; (8002784 <__aeabi_dsub+0x334>)
 800264c:	45a4      	cmp	ip, r4
 800264e:	d100      	bne.n	8002652 <__aeabi_dsub+0x202>
 8002650:	e0f4      	b.n	800283c <__aeabi_dsub+0x3ec>
 8002652:	4694      	mov	ip, r2
 8002654:	e731      	b.n	80024ba <__aeabi_dsub+0x6a>
 8002656:	2401      	movs	r4, #1
 8002658:	4067      	eors	r7, r4
 800265a:	46bb      	mov	fp, r7
 800265c:	42bd      	cmp	r5, r7
 800265e:	d000      	beq.n	8002662 <__aeabi_dsub+0x212>
 8002660:	e71c      	b.n	800249c <__aeabi_dsub+0x4c>
 8002662:	4c4a      	ldr	r4, [pc, #296]	; (800278c <__aeabi_dsub+0x33c>)
 8002664:	46a4      	mov	ip, r4
 8002666:	44b4      	add	ip, r6
 8002668:	4664      	mov	r4, ip
 800266a:	2c00      	cmp	r4, #0
 800266c:	d100      	bne.n	8002670 <__aeabi_dsub+0x220>
 800266e:	e0cf      	b.n	8002810 <__aeabi_dsub+0x3c0>
 8002670:	1b94      	subs	r4, r2, r6
 8002672:	46a4      	mov	ip, r4
 8002674:	2e00      	cmp	r6, #0
 8002676:	d100      	bne.n	800267a <__aeabi_dsub+0x22a>
 8002678:	e15c      	b.n	8002934 <__aeabi_dsub+0x4e4>
 800267a:	4e42      	ldr	r6, [pc, #264]	; (8002784 <__aeabi_dsub+0x334>)
 800267c:	42b2      	cmp	r2, r6
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x232>
 8002680:	e1ec      	b.n	8002a5c <__aeabi_dsub+0x60c>
 8002682:	2680      	movs	r6, #128	; 0x80
 8002684:	0436      	lsls	r6, r6, #16
 8002686:	4333      	orrs	r3, r6
 8002688:	4664      	mov	r4, ip
 800268a:	2c38      	cmp	r4, #56	; 0x38
 800268c:	dd00      	ble.n	8002690 <__aeabi_dsub+0x240>
 800268e:	e1b3      	b.n	80029f8 <__aeabi_dsub+0x5a8>
 8002690:	2c1f      	cmp	r4, #31
 8002692:	dd00      	ble.n	8002696 <__aeabi_dsub+0x246>
 8002694:	e238      	b.n	8002b08 <__aeabi_dsub+0x6b8>
 8002696:	2620      	movs	r6, #32
 8002698:	1b36      	subs	r6, r6, r4
 800269a:	001c      	movs	r4, r3
 800269c:	40b4      	lsls	r4, r6
 800269e:	464f      	mov	r7, r9
 80026a0:	46a0      	mov	r8, r4
 80026a2:	4664      	mov	r4, ip
 80026a4:	40e7      	lsrs	r7, r4
 80026a6:	4644      	mov	r4, r8
 80026a8:	433c      	orrs	r4, r7
 80026aa:	464f      	mov	r7, r9
 80026ac:	40b7      	lsls	r7, r6
 80026ae:	003e      	movs	r6, r7
 80026b0:	1e77      	subs	r7, r6, #1
 80026b2:	41be      	sbcs	r6, r7
 80026b4:	4334      	orrs	r4, r6
 80026b6:	4666      	mov	r6, ip
 80026b8:	40f3      	lsrs	r3, r6
 80026ba:	18c9      	adds	r1, r1, r3
 80026bc:	1824      	adds	r4, r4, r0
 80026be:	4284      	cmp	r4, r0
 80026c0:	419b      	sbcs	r3, r3
 80026c2:	425b      	negs	r3, r3
 80026c4:	4698      	mov	r8, r3
 80026c6:	0016      	movs	r6, r2
 80026c8:	4488      	add	r8, r1
 80026ca:	e04e      	b.n	800276a <__aeabi_dsub+0x31a>
 80026cc:	4a30      	ldr	r2, [pc, #192]	; (8002790 <__aeabi_dsub+0x340>)
 80026ce:	1c74      	adds	r4, r6, #1
 80026d0:	4214      	tst	r4, r2
 80026d2:	d000      	beq.n	80026d6 <__aeabi_dsub+0x286>
 80026d4:	e0d6      	b.n	8002884 <__aeabi_dsub+0x434>
 80026d6:	464a      	mov	r2, r9
 80026d8:	431a      	orrs	r2, r3
 80026da:	2e00      	cmp	r6, #0
 80026dc:	d000      	beq.n	80026e0 <__aeabi_dsub+0x290>
 80026de:	e15b      	b.n	8002998 <__aeabi_dsub+0x548>
 80026e0:	2a00      	cmp	r2, #0
 80026e2:	d100      	bne.n	80026e6 <__aeabi_dsub+0x296>
 80026e4:	e1a5      	b.n	8002a32 <__aeabi_dsub+0x5e2>
 80026e6:	000a      	movs	r2, r1
 80026e8:	4302      	orrs	r2, r0
 80026ea:	d000      	beq.n	80026ee <__aeabi_dsub+0x29e>
 80026ec:	e1bb      	b.n	8002a66 <__aeabi_dsub+0x616>
 80026ee:	464a      	mov	r2, r9
 80026f0:	0759      	lsls	r1, r3, #29
 80026f2:	08d2      	lsrs	r2, r2, #3
 80026f4:	430a      	orrs	r2, r1
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	e027      	b.n	800274a <__aeabi_dsub+0x2fa>
 80026fa:	000a      	movs	r2, r1
 80026fc:	4302      	orrs	r2, r0
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x2b2>
 8002700:	e174      	b.n	80029ec <__aeabi_dsub+0x59c>
 8002702:	0022      	movs	r2, r4
 8002704:	3a01      	subs	r2, #1
 8002706:	2c01      	cmp	r4, #1
 8002708:	d005      	beq.n	8002716 <__aeabi_dsub+0x2c6>
 800270a:	4c1e      	ldr	r4, [pc, #120]	; (8002784 <__aeabi_dsub+0x334>)
 800270c:	45a4      	cmp	ip, r4
 800270e:	d100      	bne.n	8002712 <__aeabi_dsub+0x2c2>
 8002710:	e094      	b.n	800283c <__aeabi_dsub+0x3ec>
 8002712:	4694      	mov	ip, r2
 8002714:	e759      	b.n	80025ca <__aeabi_dsub+0x17a>
 8002716:	4448      	add	r0, r9
 8002718:	4548      	cmp	r0, r9
 800271a:	4192      	sbcs	r2, r2
 800271c:	185b      	adds	r3, r3, r1
 800271e:	4698      	mov	r8, r3
 8002720:	0004      	movs	r4, r0
 8002722:	4252      	negs	r2, r2
 8002724:	4490      	add	r8, r2
 8002726:	4643      	mov	r3, r8
 8002728:	2602      	movs	r6, #2
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	d500      	bpl.n	8002730 <__aeabi_dsub+0x2e0>
 800272e:	e0c4      	b.n	80028ba <__aeabi_dsub+0x46a>
 8002730:	3e01      	subs	r6, #1
 8002732:	0763      	lsls	r3, r4, #29
 8002734:	d000      	beq.n	8002738 <__aeabi_dsub+0x2e8>
 8002736:	e711      	b.n	800255c <__aeabi_dsub+0x10c>
 8002738:	4643      	mov	r3, r8
 800273a:	46b4      	mov	ip, r6
 800273c:	0759      	lsls	r1, r3, #29
 800273e:	08e2      	lsrs	r2, r4, #3
 8002740:	430a      	orrs	r2, r1
 8002742:	08db      	lsrs	r3, r3, #3
 8002744:	490f      	ldr	r1, [pc, #60]	; (8002784 <__aeabi_dsub+0x334>)
 8002746:	458c      	cmp	ip, r1
 8002748:	d040      	beq.n	80027cc <__aeabi_dsub+0x37c>
 800274a:	4661      	mov	r1, ip
 800274c:	031b      	lsls	r3, r3, #12
 800274e:	0549      	lsls	r1, r1, #21
 8002750:	0b1b      	lsrs	r3, r3, #12
 8002752:	0d49      	lsrs	r1, r1, #21
 8002754:	e720      	b.n	8002598 <__aeabi_dsub+0x148>
 8002756:	4301      	orrs	r1, r0
 8002758:	000c      	movs	r4, r1
 800275a:	1e61      	subs	r1, r4, #1
 800275c:	418c      	sbcs	r4, r1
 800275e:	444c      	add	r4, r9
 8002760:	454c      	cmp	r4, r9
 8002762:	4192      	sbcs	r2, r2
 8002764:	4252      	negs	r2, r2
 8002766:	4690      	mov	r8, r2
 8002768:	4498      	add	r8, r3
 800276a:	4643      	mov	r3, r8
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	d5e0      	bpl.n	8002732 <__aeabi_dsub+0x2e2>
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__aeabi_dsub+0x334>)
 8002772:	3601      	adds	r6, #1
 8002774:	429e      	cmp	r6, r3
 8002776:	d000      	beq.n	800277a <__aeabi_dsub+0x32a>
 8002778:	e09f      	b.n	80028ba <__aeabi_dsub+0x46a>
 800277a:	0031      	movs	r1, r6
 800277c:	2300      	movs	r3, #0
 800277e:	2200      	movs	r2, #0
 8002780:	e70a      	b.n	8002598 <__aeabi_dsub+0x148>
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	000007ff 	.word	0x000007ff
 8002788:	ff7fffff 	.word	0xff7fffff
 800278c:	fffff801 	.word	0xfffff801
 8002790:	000007fe 	.word	0x000007fe
 8002794:	2a00      	cmp	r2, #0
 8002796:	d100      	bne.n	800279a <__aeabi_dsub+0x34a>
 8002798:	e160      	b.n	8002a5c <__aeabi_dsub+0x60c>
 800279a:	000a      	movs	r2, r1
 800279c:	4302      	orrs	r2, r0
 800279e:	d04d      	beq.n	800283c <__aeabi_dsub+0x3ec>
 80027a0:	464a      	mov	r2, r9
 80027a2:	075c      	lsls	r4, r3, #29
 80027a4:	08d2      	lsrs	r2, r2, #3
 80027a6:	4322      	orrs	r2, r4
 80027a8:	2480      	movs	r4, #128	; 0x80
 80027aa:	08db      	lsrs	r3, r3, #3
 80027ac:	0324      	lsls	r4, r4, #12
 80027ae:	4223      	tst	r3, r4
 80027b0:	d007      	beq.n	80027c2 <__aeabi_dsub+0x372>
 80027b2:	08ce      	lsrs	r6, r1, #3
 80027b4:	4226      	tst	r6, r4
 80027b6:	d104      	bne.n	80027c2 <__aeabi_dsub+0x372>
 80027b8:	465d      	mov	r5, fp
 80027ba:	0033      	movs	r3, r6
 80027bc:	08c2      	lsrs	r2, r0, #3
 80027be:	0749      	lsls	r1, r1, #29
 80027c0:	430a      	orrs	r2, r1
 80027c2:	0f51      	lsrs	r1, r2, #29
 80027c4:	00d2      	lsls	r2, r2, #3
 80027c6:	08d2      	lsrs	r2, r2, #3
 80027c8:	0749      	lsls	r1, r1, #29
 80027ca:	430a      	orrs	r2, r1
 80027cc:	0011      	movs	r1, r2
 80027ce:	4319      	orrs	r1, r3
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x384>
 80027d2:	e1c8      	b.n	8002b66 <__aeabi_dsub+0x716>
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	0309      	lsls	r1, r1, #12
 80027d8:	430b      	orrs	r3, r1
 80027da:	031b      	lsls	r3, r3, #12
 80027dc:	49d5      	ldr	r1, [pc, #852]	; (8002b34 <__aeabi_dsub+0x6e4>)
 80027de:	0b1b      	lsrs	r3, r3, #12
 80027e0:	e6da      	b.n	8002598 <__aeabi_dsub+0x148>
 80027e2:	49d5      	ldr	r1, [pc, #852]	; (8002b38 <__aeabi_dsub+0x6e8>)
 80027e4:	1ab6      	subs	r6, r6, r2
 80027e6:	400b      	ands	r3, r1
 80027e8:	4698      	mov	r8, r3
 80027ea:	e6b5      	b.n	8002558 <__aeabi_dsub+0x108>
 80027ec:	0020      	movs	r0, r4
 80027ee:	f000 fac1 	bl	8002d74 <__clzsi2>
 80027f2:	0002      	movs	r2, r0
 80027f4:	3218      	adds	r2, #24
 80027f6:	2a1f      	cmp	r2, #31
 80027f8:	dc00      	bgt.n	80027fc <__aeabi_dsub+0x3ac>
 80027fa:	e68f      	b.n	800251c <__aeabi_dsub+0xcc>
 80027fc:	0023      	movs	r3, r4
 80027fe:	3808      	subs	r0, #8
 8002800:	4083      	lsls	r3, r0
 8002802:	2400      	movs	r4, #0
 8002804:	e692      	b.n	800252c <__aeabi_dsub+0xdc>
 8002806:	4308      	orrs	r0, r1
 8002808:	0002      	movs	r2, r0
 800280a:	1e50      	subs	r0, r2, #1
 800280c:	4182      	sbcs	r2, r0
 800280e:	e66d      	b.n	80024ec <__aeabi_dsub+0x9c>
 8002810:	4cca      	ldr	r4, [pc, #808]	; (8002b3c <__aeabi_dsub+0x6ec>)
 8002812:	1c72      	adds	r2, r6, #1
 8002814:	4222      	tst	r2, r4
 8002816:	d000      	beq.n	800281a <__aeabi_dsub+0x3ca>
 8002818:	e0ad      	b.n	8002976 <__aeabi_dsub+0x526>
 800281a:	464a      	mov	r2, r9
 800281c:	431a      	orrs	r2, r3
 800281e:	2e00      	cmp	r6, #0
 8002820:	d1b8      	bne.n	8002794 <__aeabi_dsub+0x344>
 8002822:	2a00      	cmp	r2, #0
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x3d8>
 8002826:	e158      	b.n	8002ada <__aeabi_dsub+0x68a>
 8002828:	000a      	movs	r2, r1
 800282a:	4302      	orrs	r2, r0
 800282c:	d000      	beq.n	8002830 <__aeabi_dsub+0x3e0>
 800282e:	e159      	b.n	8002ae4 <__aeabi_dsub+0x694>
 8002830:	464a      	mov	r2, r9
 8002832:	0759      	lsls	r1, r3, #29
 8002834:	08d2      	lsrs	r2, r2, #3
 8002836:	430a      	orrs	r2, r1
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	e786      	b.n	800274a <__aeabi_dsub+0x2fa>
 800283c:	464a      	mov	r2, r9
 800283e:	0759      	lsls	r1, r3, #29
 8002840:	08d2      	lsrs	r2, r2, #3
 8002842:	430a      	orrs	r2, r1
 8002844:	08db      	lsrs	r3, r3, #3
 8002846:	e7c1      	b.n	80027cc <__aeabi_dsub+0x37c>
 8002848:	4dba      	ldr	r5, [pc, #744]	; (8002b34 <__aeabi_dsub+0x6e4>)
 800284a:	42aa      	cmp	r2, r5
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x400>
 800284e:	e11e      	b.n	8002a8e <__aeabi_dsub+0x63e>
 8002850:	2580      	movs	r5, #128	; 0x80
 8002852:	042d      	lsls	r5, r5, #16
 8002854:	432b      	orrs	r3, r5
 8002856:	4664      	mov	r4, ip
 8002858:	2c38      	cmp	r4, #56	; 0x38
 800285a:	dc5d      	bgt.n	8002918 <__aeabi_dsub+0x4c8>
 800285c:	2c1f      	cmp	r4, #31
 800285e:	dd00      	ble.n	8002862 <__aeabi_dsub+0x412>
 8002860:	e0d0      	b.n	8002a04 <__aeabi_dsub+0x5b4>
 8002862:	2520      	movs	r5, #32
 8002864:	4667      	mov	r7, ip
 8002866:	1b2d      	subs	r5, r5, r4
 8002868:	464e      	mov	r6, r9
 800286a:	001c      	movs	r4, r3
 800286c:	40fe      	lsrs	r6, r7
 800286e:	40ac      	lsls	r4, r5
 8002870:	4334      	orrs	r4, r6
 8002872:	464e      	mov	r6, r9
 8002874:	40ae      	lsls	r6, r5
 8002876:	0035      	movs	r5, r6
 8002878:	40fb      	lsrs	r3, r7
 800287a:	1e6e      	subs	r6, r5, #1
 800287c:	41b5      	sbcs	r5, r6
 800287e:	1ac9      	subs	r1, r1, r3
 8002880:	432c      	orrs	r4, r5
 8002882:	e04e      	b.n	8002922 <__aeabi_dsub+0x4d2>
 8002884:	464a      	mov	r2, r9
 8002886:	1a14      	subs	r4, r2, r0
 8002888:	45a1      	cmp	r9, r4
 800288a:	4192      	sbcs	r2, r2
 800288c:	4252      	negs	r2, r2
 800288e:	4690      	mov	r8, r2
 8002890:	1a5f      	subs	r7, r3, r1
 8002892:	003a      	movs	r2, r7
 8002894:	4647      	mov	r7, r8
 8002896:	1bd2      	subs	r2, r2, r7
 8002898:	4690      	mov	r8, r2
 800289a:	0212      	lsls	r2, r2, #8
 800289c:	d500      	bpl.n	80028a0 <__aeabi_dsub+0x450>
 800289e:	e08b      	b.n	80029b8 <__aeabi_dsub+0x568>
 80028a0:	4642      	mov	r2, r8
 80028a2:	4322      	orrs	r2, r4
 80028a4:	d000      	beq.n	80028a8 <__aeabi_dsub+0x458>
 80028a6:	e630      	b.n	800250a <__aeabi_dsub+0xba>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2500      	movs	r5, #0
 80028ac:	e74d      	b.n	800274a <__aeabi_dsub+0x2fa>
 80028ae:	464a      	mov	r2, r9
 80028b0:	0759      	lsls	r1, r3, #29
 80028b2:	08d2      	lsrs	r2, r2, #3
 80028b4:	430a      	orrs	r2, r1
 80028b6:	08db      	lsrs	r3, r3, #3
 80028b8:	e744      	b.n	8002744 <__aeabi_dsub+0x2f4>
 80028ba:	4642      	mov	r2, r8
 80028bc:	4b9e      	ldr	r3, [pc, #632]	; (8002b38 <__aeabi_dsub+0x6e8>)
 80028be:	0861      	lsrs	r1, r4, #1
 80028c0:	401a      	ands	r2, r3
 80028c2:	0013      	movs	r3, r2
 80028c4:	2201      	movs	r2, #1
 80028c6:	4014      	ands	r4, r2
 80028c8:	430c      	orrs	r4, r1
 80028ca:	07da      	lsls	r2, r3, #31
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	4698      	mov	r8, r3
 80028d0:	4314      	orrs	r4, r2
 80028d2:	e641      	b.n	8002558 <__aeabi_dsub+0x108>
 80028d4:	001a      	movs	r2, r3
 80028d6:	3e1f      	subs	r6, #31
 80028d8:	40f2      	lsrs	r2, r6
 80028da:	0016      	movs	r6, r2
 80028dc:	2920      	cmp	r1, #32
 80028de:	d003      	beq.n	80028e8 <__aeabi_dsub+0x498>
 80028e0:	2240      	movs	r2, #64	; 0x40
 80028e2:	1a51      	subs	r1, r2, r1
 80028e4:	408b      	lsls	r3, r1
 80028e6:	431c      	orrs	r4, r3
 80028e8:	1e62      	subs	r2, r4, #1
 80028ea:	4194      	sbcs	r4, r2
 80028ec:	2300      	movs	r3, #0
 80028ee:	4334      	orrs	r4, r6
 80028f0:	4698      	mov	r8, r3
 80028f2:	2600      	movs	r6, #0
 80028f4:	e71d      	b.n	8002732 <__aeabi_dsub+0x2e2>
 80028f6:	000c      	movs	r4, r1
 80028f8:	3a20      	subs	r2, #32
 80028fa:	40d4      	lsrs	r4, r2
 80028fc:	0022      	movs	r2, r4
 80028fe:	4664      	mov	r4, ip
 8002900:	2c20      	cmp	r4, #32
 8002902:	d004      	beq.n	800290e <__aeabi_dsub+0x4be>
 8002904:	2740      	movs	r7, #64	; 0x40
 8002906:	1b3f      	subs	r7, r7, r4
 8002908:	40b9      	lsls	r1, r7
 800290a:	4308      	orrs	r0, r1
 800290c:	4680      	mov	r8, r0
 800290e:	4644      	mov	r4, r8
 8002910:	1e61      	subs	r1, r4, #1
 8002912:	418c      	sbcs	r4, r1
 8002914:	4322      	orrs	r2, r4
 8002916:	e5e9      	b.n	80024ec <__aeabi_dsub+0x9c>
 8002918:	464c      	mov	r4, r9
 800291a:	4323      	orrs	r3, r4
 800291c:	001c      	movs	r4, r3
 800291e:	1e63      	subs	r3, r4, #1
 8002920:	419c      	sbcs	r4, r3
 8002922:	1b04      	subs	r4, r0, r4
 8002924:	42a0      	cmp	r0, r4
 8002926:	419b      	sbcs	r3, r3
 8002928:	425b      	negs	r3, r3
 800292a:	1acb      	subs	r3, r1, r3
 800292c:	4698      	mov	r8, r3
 800292e:	465d      	mov	r5, fp
 8002930:	0016      	movs	r6, r2
 8002932:	e5e2      	b.n	80024fa <__aeabi_dsub+0xaa>
 8002934:	464e      	mov	r6, r9
 8002936:	431e      	orrs	r6, r3
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x4ec>
 800293a:	e0ae      	b.n	8002a9a <__aeabi_dsub+0x64a>
 800293c:	1e66      	subs	r6, r4, #1
 800293e:	2c01      	cmp	r4, #1
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x4f4>
 8002942:	e0fd      	b.n	8002b40 <__aeabi_dsub+0x6f0>
 8002944:	4f7b      	ldr	r7, [pc, #492]	; (8002b34 <__aeabi_dsub+0x6e4>)
 8002946:	42bc      	cmp	r4, r7
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x4fc>
 800294a:	e107      	b.n	8002b5c <__aeabi_dsub+0x70c>
 800294c:	46b4      	mov	ip, r6
 800294e:	e69b      	b.n	8002688 <__aeabi_dsub+0x238>
 8002950:	4664      	mov	r4, ip
 8002952:	2220      	movs	r2, #32
 8002954:	1b12      	subs	r2, r2, r4
 8002956:	000c      	movs	r4, r1
 8002958:	4094      	lsls	r4, r2
 800295a:	0007      	movs	r7, r0
 800295c:	4090      	lsls	r0, r2
 800295e:	46a0      	mov	r8, r4
 8002960:	4664      	mov	r4, ip
 8002962:	1e42      	subs	r2, r0, #1
 8002964:	4190      	sbcs	r0, r2
 8002966:	4662      	mov	r2, ip
 8002968:	40e7      	lsrs	r7, r4
 800296a:	4644      	mov	r4, r8
 800296c:	40d1      	lsrs	r1, r2
 800296e:	433c      	orrs	r4, r7
 8002970:	4304      	orrs	r4, r0
 8002972:	185b      	adds	r3, r3, r1
 8002974:	e6f3      	b.n	800275e <__aeabi_dsub+0x30e>
 8002976:	4c6f      	ldr	r4, [pc, #444]	; (8002b34 <__aeabi_dsub+0x6e4>)
 8002978:	42a2      	cmp	r2, r4
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x52e>
 800297c:	e0d5      	b.n	8002b2a <__aeabi_dsub+0x6da>
 800297e:	4448      	add	r0, r9
 8002980:	185b      	adds	r3, r3, r1
 8002982:	4548      	cmp	r0, r9
 8002984:	4189      	sbcs	r1, r1
 8002986:	4249      	negs	r1, r1
 8002988:	185b      	adds	r3, r3, r1
 800298a:	07dc      	lsls	r4, r3, #31
 800298c:	0840      	lsrs	r0, r0, #1
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	4698      	mov	r8, r3
 8002992:	0016      	movs	r6, r2
 8002994:	4304      	orrs	r4, r0
 8002996:	e6cc      	b.n	8002732 <__aeabi_dsub+0x2e2>
 8002998:	2a00      	cmp	r2, #0
 800299a:	d000      	beq.n	800299e <__aeabi_dsub+0x54e>
 800299c:	e082      	b.n	8002aa4 <__aeabi_dsub+0x654>
 800299e:	000a      	movs	r2, r1
 80029a0:	4302      	orrs	r2, r0
 80029a2:	d140      	bne.n	8002a26 <__aeabi_dsub+0x5d6>
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	2500      	movs	r5, #0
 80029a8:	031b      	lsls	r3, r3, #12
 80029aa:	e713      	b.n	80027d4 <__aeabi_dsub+0x384>
 80029ac:	074b      	lsls	r3, r1, #29
 80029ae:	08c2      	lsrs	r2, r0, #3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	465d      	mov	r5, fp
 80029b4:	08cb      	lsrs	r3, r1, #3
 80029b6:	e6c5      	b.n	8002744 <__aeabi_dsub+0x2f4>
 80029b8:	464a      	mov	r2, r9
 80029ba:	1a84      	subs	r4, r0, r2
 80029bc:	42a0      	cmp	r0, r4
 80029be:	4192      	sbcs	r2, r2
 80029c0:	1acb      	subs	r3, r1, r3
 80029c2:	4252      	negs	r2, r2
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	4698      	mov	r8, r3
 80029c8:	465d      	mov	r5, fp
 80029ca:	e59e      	b.n	800250a <__aeabi_dsub+0xba>
 80029cc:	464a      	mov	r2, r9
 80029ce:	0759      	lsls	r1, r3, #29
 80029d0:	08d2      	lsrs	r2, r2, #3
 80029d2:	430a      	orrs	r2, r1
 80029d4:	08db      	lsrs	r3, r3, #3
 80029d6:	e6f9      	b.n	80027cc <__aeabi_dsub+0x37c>
 80029d8:	464a      	mov	r2, r9
 80029da:	1a14      	subs	r4, r2, r0
 80029dc:	45a1      	cmp	r9, r4
 80029de:	4192      	sbcs	r2, r2
 80029e0:	1a5b      	subs	r3, r3, r1
 80029e2:	4252      	negs	r2, r2
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	4698      	mov	r8, r3
 80029e8:	2601      	movs	r6, #1
 80029ea:	e586      	b.n	80024fa <__aeabi_dsub+0xaa>
 80029ec:	464a      	mov	r2, r9
 80029ee:	0759      	lsls	r1, r3, #29
 80029f0:	08d2      	lsrs	r2, r2, #3
 80029f2:	430a      	orrs	r2, r1
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	e6a5      	b.n	8002744 <__aeabi_dsub+0x2f4>
 80029f8:	464c      	mov	r4, r9
 80029fa:	4323      	orrs	r3, r4
 80029fc:	001c      	movs	r4, r3
 80029fe:	1e63      	subs	r3, r4, #1
 8002a00:	419c      	sbcs	r4, r3
 8002a02:	e65b      	b.n	80026bc <__aeabi_dsub+0x26c>
 8002a04:	4665      	mov	r5, ip
 8002a06:	001e      	movs	r6, r3
 8002a08:	3d20      	subs	r5, #32
 8002a0a:	40ee      	lsrs	r6, r5
 8002a0c:	2c20      	cmp	r4, #32
 8002a0e:	d005      	beq.n	8002a1c <__aeabi_dsub+0x5cc>
 8002a10:	2540      	movs	r5, #64	; 0x40
 8002a12:	1b2d      	subs	r5, r5, r4
 8002a14:	40ab      	lsls	r3, r5
 8002a16:	464c      	mov	r4, r9
 8002a18:	431c      	orrs	r4, r3
 8002a1a:	46a2      	mov	sl, r4
 8002a1c:	4654      	mov	r4, sl
 8002a1e:	1e63      	subs	r3, r4, #1
 8002a20:	419c      	sbcs	r4, r3
 8002a22:	4334      	orrs	r4, r6
 8002a24:	e77d      	b.n	8002922 <__aeabi_dsub+0x4d2>
 8002a26:	074b      	lsls	r3, r1, #29
 8002a28:	08c2      	lsrs	r2, r0, #3
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	465d      	mov	r5, fp
 8002a2e:	08cb      	lsrs	r3, r1, #3
 8002a30:	e6cc      	b.n	80027cc <__aeabi_dsub+0x37c>
 8002a32:	000a      	movs	r2, r1
 8002a34:	4302      	orrs	r2, r0
 8002a36:	d100      	bne.n	8002a3a <__aeabi_dsub+0x5ea>
 8002a38:	e736      	b.n	80028a8 <__aeabi_dsub+0x458>
 8002a3a:	074b      	lsls	r3, r1, #29
 8002a3c:	08c2      	lsrs	r2, r0, #3
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	465d      	mov	r5, fp
 8002a42:	08cb      	lsrs	r3, r1, #3
 8002a44:	e681      	b.n	800274a <__aeabi_dsub+0x2fa>
 8002a46:	464a      	mov	r2, r9
 8002a48:	1a84      	subs	r4, r0, r2
 8002a4a:	42a0      	cmp	r0, r4
 8002a4c:	4192      	sbcs	r2, r2
 8002a4e:	1acb      	subs	r3, r1, r3
 8002a50:	4252      	negs	r2, r2
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	4698      	mov	r8, r3
 8002a56:	465d      	mov	r5, fp
 8002a58:	2601      	movs	r6, #1
 8002a5a:	e54e      	b.n	80024fa <__aeabi_dsub+0xaa>
 8002a5c:	074b      	lsls	r3, r1, #29
 8002a5e:	08c2      	lsrs	r2, r0, #3
 8002a60:	431a      	orrs	r2, r3
 8002a62:	08cb      	lsrs	r3, r1, #3
 8002a64:	e6b2      	b.n	80027cc <__aeabi_dsub+0x37c>
 8002a66:	464a      	mov	r2, r9
 8002a68:	1a14      	subs	r4, r2, r0
 8002a6a:	45a1      	cmp	r9, r4
 8002a6c:	4192      	sbcs	r2, r2
 8002a6e:	1a5f      	subs	r7, r3, r1
 8002a70:	4252      	negs	r2, r2
 8002a72:	1aba      	subs	r2, r7, r2
 8002a74:	4690      	mov	r8, r2
 8002a76:	0212      	lsls	r2, r2, #8
 8002a78:	d56b      	bpl.n	8002b52 <__aeabi_dsub+0x702>
 8002a7a:	464a      	mov	r2, r9
 8002a7c:	1a84      	subs	r4, r0, r2
 8002a7e:	42a0      	cmp	r0, r4
 8002a80:	4192      	sbcs	r2, r2
 8002a82:	1acb      	subs	r3, r1, r3
 8002a84:	4252      	negs	r2, r2
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	4698      	mov	r8, r3
 8002a8a:	465d      	mov	r5, fp
 8002a8c:	e564      	b.n	8002558 <__aeabi_dsub+0x108>
 8002a8e:	074b      	lsls	r3, r1, #29
 8002a90:	08c2      	lsrs	r2, r0, #3
 8002a92:	431a      	orrs	r2, r3
 8002a94:	465d      	mov	r5, fp
 8002a96:	08cb      	lsrs	r3, r1, #3
 8002a98:	e698      	b.n	80027cc <__aeabi_dsub+0x37c>
 8002a9a:	074b      	lsls	r3, r1, #29
 8002a9c:	08c2      	lsrs	r2, r0, #3
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	08cb      	lsrs	r3, r1, #3
 8002aa2:	e64f      	b.n	8002744 <__aeabi_dsub+0x2f4>
 8002aa4:	000a      	movs	r2, r1
 8002aa6:	4302      	orrs	r2, r0
 8002aa8:	d090      	beq.n	80029cc <__aeabi_dsub+0x57c>
 8002aaa:	464a      	mov	r2, r9
 8002aac:	075c      	lsls	r4, r3, #29
 8002aae:	08d2      	lsrs	r2, r2, #3
 8002ab0:	4314      	orrs	r4, r2
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	0312      	lsls	r2, r2, #12
 8002ab8:	4213      	tst	r3, r2
 8002aba:	d008      	beq.n	8002ace <__aeabi_dsub+0x67e>
 8002abc:	08ce      	lsrs	r6, r1, #3
 8002abe:	4216      	tst	r6, r2
 8002ac0:	d105      	bne.n	8002ace <__aeabi_dsub+0x67e>
 8002ac2:	08c0      	lsrs	r0, r0, #3
 8002ac4:	0749      	lsls	r1, r1, #29
 8002ac6:	4308      	orrs	r0, r1
 8002ac8:	0004      	movs	r4, r0
 8002aca:	465d      	mov	r5, fp
 8002acc:	0033      	movs	r3, r6
 8002ace:	0f61      	lsrs	r1, r4, #29
 8002ad0:	00e2      	lsls	r2, r4, #3
 8002ad2:	0749      	lsls	r1, r1, #29
 8002ad4:	08d2      	lsrs	r2, r2, #3
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	e678      	b.n	80027cc <__aeabi_dsub+0x37c>
 8002ada:	074b      	lsls	r3, r1, #29
 8002adc:	08c2      	lsrs	r2, r0, #3
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	08cb      	lsrs	r3, r1, #3
 8002ae2:	e632      	b.n	800274a <__aeabi_dsub+0x2fa>
 8002ae4:	4448      	add	r0, r9
 8002ae6:	185b      	adds	r3, r3, r1
 8002ae8:	4548      	cmp	r0, r9
 8002aea:	4192      	sbcs	r2, r2
 8002aec:	4698      	mov	r8, r3
 8002aee:	4252      	negs	r2, r2
 8002af0:	4490      	add	r8, r2
 8002af2:	4643      	mov	r3, r8
 8002af4:	0004      	movs	r4, r0
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	d400      	bmi.n	8002afc <__aeabi_dsub+0x6ac>
 8002afa:	e61a      	b.n	8002732 <__aeabi_dsub+0x2e2>
 8002afc:	4642      	mov	r2, r8
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <__aeabi_dsub+0x6e8>)
 8002b00:	2601      	movs	r6, #1
 8002b02:	401a      	ands	r2, r3
 8002b04:	4690      	mov	r8, r2
 8002b06:	e614      	b.n	8002732 <__aeabi_dsub+0x2e2>
 8002b08:	4666      	mov	r6, ip
 8002b0a:	001f      	movs	r7, r3
 8002b0c:	3e20      	subs	r6, #32
 8002b0e:	40f7      	lsrs	r7, r6
 8002b10:	2c20      	cmp	r4, #32
 8002b12:	d005      	beq.n	8002b20 <__aeabi_dsub+0x6d0>
 8002b14:	2640      	movs	r6, #64	; 0x40
 8002b16:	1b36      	subs	r6, r6, r4
 8002b18:	40b3      	lsls	r3, r6
 8002b1a:	464c      	mov	r4, r9
 8002b1c:	431c      	orrs	r4, r3
 8002b1e:	46a2      	mov	sl, r4
 8002b20:	4654      	mov	r4, sl
 8002b22:	1e63      	subs	r3, r4, #1
 8002b24:	419c      	sbcs	r4, r3
 8002b26:	433c      	orrs	r4, r7
 8002b28:	e5c8      	b.n	80026bc <__aeabi_dsub+0x26c>
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2200      	movs	r2, #0
 8002b30:	e532      	b.n	8002598 <__aeabi_dsub+0x148>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	000007ff 	.word	0x000007ff
 8002b38:	ff7fffff 	.word	0xff7fffff
 8002b3c:	000007fe 	.word	0x000007fe
 8002b40:	464a      	mov	r2, r9
 8002b42:	1814      	adds	r4, r2, r0
 8002b44:	4284      	cmp	r4, r0
 8002b46:	4192      	sbcs	r2, r2
 8002b48:	185b      	adds	r3, r3, r1
 8002b4a:	4698      	mov	r8, r3
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	4490      	add	r8, r2
 8002b50:	e5e9      	b.n	8002726 <__aeabi_dsub+0x2d6>
 8002b52:	4642      	mov	r2, r8
 8002b54:	4322      	orrs	r2, r4
 8002b56:	d100      	bne.n	8002b5a <__aeabi_dsub+0x70a>
 8002b58:	e6a6      	b.n	80028a8 <__aeabi_dsub+0x458>
 8002b5a:	e5ea      	b.n	8002732 <__aeabi_dsub+0x2e2>
 8002b5c:	074b      	lsls	r3, r1, #29
 8002b5e:	08c2      	lsrs	r2, r0, #3
 8002b60:	431a      	orrs	r2, r3
 8002b62:	08cb      	lsrs	r3, r1, #3
 8002b64:	e632      	b.n	80027cc <__aeabi_dsub+0x37c>
 8002b66:	2200      	movs	r2, #0
 8002b68:	4901      	ldr	r1, [pc, #4]	; (8002b70 <__aeabi_dsub+0x720>)
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	e514      	b.n	8002598 <__aeabi_dsub+0x148>
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	000007ff 	.word	0x000007ff

08002b74 <__aeabi_i2d>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d016      	beq.n	8002ba8 <__aeabi_i2d+0x34>
 8002b7a:	17c3      	asrs	r3, r0, #31
 8002b7c:	18c5      	adds	r5, r0, r3
 8002b7e:	405d      	eors	r5, r3
 8002b80:	0fc4      	lsrs	r4, r0, #31
 8002b82:	0028      	movs	r0, r5
 8002b84:	f000 f8f6 	bl	8002d74 <__clzsi2>
 8002b88:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <__aeabi_i2d+0x5c>)
 8002b8a:	1a12      	subs	r2, r2, r0
 8002b8c:	280a      	cmp	r0, #10
 8002b8e:	dc16      	bgt.n	8002bbe <__aeabi_i2d+0x4a>
 8002b90:	0003      	movs	r3, r0
 8002b92:	002e      	movs	r6, r5
 8002b94:	3315      	adds	r3, #21
 8002b96:	409e      	lsls	r6, r3
 8002b98:	230b      	movs	r3, #11
 8002b9a:	1a18      	subs	r0, r3, r0
 8002b9c:	40c5      	lsrs	r5, r0
 8002b9e:	0553      	lsls	r3, r2, #21
 8002ba0:	032d      	lsls	r5, r5, #12
 8002ba2:	0b2d      	lsrs	r5, r5, #12
 8002ba4:	0d5b      	lsrs	r3, r3, #21
 8002ba6:	e003      	b.n	8002bb0 <__aeabi_i2d+0x3c>
 8002ba8:	2400      	movs	r4, #0
 8002baa:	2300      	movs	r3, #0
 8002bac:	2500      	movs	r5, #0
 8002bae:	2600      	movs	r6, #0
 8002bb0:	051b      	lsls	r3, r3, #20
 8002bb2:	432b      	orrs	r3, r5
 8002bb4:	07e4      	lsls	r4, r4, #31
 8002bb6:	4323      	orrs	r3, r4
 8002bb8:	0030      	movs	r0, r6
 8002bba:	0019      	movs	r1, r3
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
 8002bbe:	380b      	subs	r0, #11
 8002bc0:	4085      	lsls	r5, r0
 8002bc2:	0553      	lsls	r3, r2, #21
 8002bc4:	032d      	lsls	r5, r5, #12
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	0b2d      	lsrs	r5, r5, #12
 8002bca:	0d5b      	lsrs	r3, r3, #21
 8002bcc:	e7f0      	b.n	8002bb0 <__aeabi_i2d+0x3c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	0000041e 	.word	0x0000041e

08002bd4 <__aeabi_f2d>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	0043      	lsls	r3, r0, #1
 8002bd8:	0246      	lsls	r6, r0, #9
 8002bda:	0fc4      	lsrs	r4, r0, #31
 8002bdc:	20fe      	movs	r0, #254	; 0xfe
 8002bde:	0e1b      	lsrs	r3, r3, #24
 8002be0:	1c59      	adds	r1, r3, #1
 8002be2:	0a75      	lsrs	r5, r6, #9
 8002be4:	4208      	tst	r0, r1
 8002be6:	d00c      	beq.n	8002c02 <__aeabi_f2d+0x2e>
 8002be8:	22e0      	movs	r2, #224	; 0xe0
 8002bea:	0092      	lsls	r2, r2, #2
 8002bec:	4694      	mov	ip, r2
 8002bee:	076d      	lsls	r5, r5, #29
 8002bf0:	0b36      	lsrs	r6, r6, #12
 8002bf2:	4463      	add	r3, ip
 8002bf4:	051b      	lsls	r3, r3, #20
 8002bf6:	4333      	orrs	r3, r6
 8002bf8:	07e4      	lsls	r4, r4, #31
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	0028      	movs	r0, r5
 8002bfe:	0019      	movs	r1, r3
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d114      	bne.n	8002c30 <__aeabi_f2d+0x5c>
 8002c06:	2d00      	cmp	r5, #0
 8002c08:	d01b      	beq.n	8002c42 <__aeabi_f2d+0x6e>
 8002c0a:	0028      	movs	r0, r5
 8002c0c:	f000 f8b2 	bl	8002d74 <__clzsi2>
 8002c10:	280a      	cmp	r0, #10
 8002c12:	dc1c      	bgt.n	8002c4e <__aeabi_f2d+0x7a>
 8002c14:	230b      	movs	r3, #11
 8002c16:	002a      	movs	r2, r5
 8002c18:	1a1b      	subs	r3, r3, r0
 8002c1a:	40da      	lsrs	r2, r3
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	3315      	adds	r3, #21
 8002c20:	409d      	lsls	r5, r3
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <__aeabi_f2d+0x88>)
 8002c24:	0312      	lsls	r2, r2, #12
 8002c26:	1a1b      	subs	r3, r3, r0
 8002c28:	055b      	lsls	r3, r3, #21
 8002c2a:	0b16      	lsrs	r6, r2, #12
 8002c2c:	0d5b      	lsrs	r3, r3, #21
 8002c2e:	e7e1      	b.n	8002bf4 <__aeabi_f2d+0x20>
 8002c30:	2d00      	cmp	r5, #0
 8002c32:	d009      	beq.n	8002c48 <__aeabi_f2d+0x74>
 8002c34:	0b32      	lsrs	r2, r6, #12
 8002c36:	2680      	movs	r6, #128	; 0x80
 8002c38:	0336      	lsls	r6, r6, #12
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <__aeabi_f2d+0x8c>)
 8002c3c:	076d      	lsls	r5, r5, #29
 8002c3e:	4316      	orrs	r6, r2
 8002c40:	e7d8      	b.n	8002bf4 <__aeabi_f2d+0x20>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2600      	movs	r6, #0
 8002c46:	e7d5      	b.n	8002bf4 <__aeabi_f2d+0x20>
 8002c48:	2600      	movs	r6, #0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <__aeabi_f2d+0x8c>)
 8002c4c:	e7d2      	b.n	8002bf4 <__aeabi_f2d+0x20>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	002a      	movs	r2, r5
 8002c52:	3b0b      	subs	r3, #11
 8002c54:	409a      	lsls	r2, r3
 8002c56:	2500      	movs	r5, #0
 8002c58:	e7e3      	b.n	8002c22 <__aeabi_f2d+0x4e>
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	00000389 	.word	0x00000389
 8002c60:	000007ff 	.word	0x000007ff

08002c64 <__aeabi_d2f>:
 8002c64:	0002      	movs	r2, r0
 8002c66:	004b      	lsls	r3, r1, #1
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	0308      	lsls	r0, r1, #12
 8002c6c:	0d5b      	lsrs	r3, r3, #21
 8002c6e:	4e3d      	ldr	r6, [pc, #244]	; (8002d64 <__aeabi_d2f+0x100>)
 8002c70:	0fcc      	lsrs	r4, r1, #31
 8002c72:	0a40      	lsrs	r0, r0, #9
 8002c74:	0f51      	lsrs	r1, r2, #29
 8002c76:	1c5f      	adds	r7, r3, #1
 8002c78:	4308      	orrs	r0, r1
 8002c7a:	00d5      	lsls	r5, r2, #3
 8002c7c:	4237      	tst	r7, r6
 8002c7e:	d00a      	beq.n	8002c96 <__aeabi_d2f+0x32>
 8002c80:	4939      	ldr	r1, [pc, #228]	; (8002d68 <__aeabi_d2f+0x104>)
 8002c82:	185e      	adds	r6, r3, r1
 8002c84:	2efe      	cmp	r6, #254	; 0xfe
 8002c86:	dd16      	ble.n	8002cb6 <__aeabi_d2f+0x52>
 8002c88:	23ff      	movs	r3, #255	; 0xff
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	05db      	lsls	r3, r3, #23
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	07e0      	lsls	r0, r4, #31
 8002c92:	4318      	orrs	r0, r3
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <__aeabi_d2f+0x44>
 8002c9a:	4328      	orrs	r0, r5
 8002c9c:	d027      	beq.n	8002cee <__aeabi_d2f+0x8a>
 8002c9e:	2105      	movs	r1, #5
 8002ca0:	0189      	lsls	r1, r1, #6
 8002ca2:	0a49      	lsrs	r1, r1, #9
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e7f1      	b.n	8002c8c <__aeabi_d2f+0x28>
 8002ca8:	4305      	orrs	r5, r0
 8002caa:	d0ed      	beq.n	8002c88 <__aeabi_d2f+0x24>
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	03c9      	lsls	r1, r1, #15
 8002cb0:	23ff      	movs	r3, #255	; 0xff
 8002cb2:	4301      	orrs	r1, r0
 8002cb4:	e7ea      	b.n	8002c8c <__aeabi_d2f+0x28>
 8002cb6:	2e00      	cmp	r6, #0
 8002cb8:	dd1c      	ble.n	8002cf4 <__aeabi_d2f+0x90>
 8002cba:	0192      	lsls	r2, r2, #6
 8002cbc:	0011      	movs	r1, r2
 8002cbe:	1e4a      	subs	r2, r1, #1
 8002cc0:	4191      	sbcs	r1, r2
 8002cc2:	00c0      	lsls	r0, r0, #3
 8002cc4:	0f6d      	lsrs	r5, r5, #29
 8002cc6:	4301      	orrs	r1, r0
 8002cc8:	4329      	orrs	r1, r5
 8002cca:	074b      	lsls	r3, r1, #29
 8002ccc:	d048      	beq.n	8002d60 <__aeabi_d2f+0xfc>
 8002cce:	230f      	movs	r3, #15
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_d2f+0x74>
 8002cd6:	3104      	adds	r1, #4
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	04db      	lsls	r3, r3, #19
 8002cdc:	400b      	ands	r3, r1
 8002cde:	d03f      	beq.n	8002d60 <__aeabi_d2f+0xfc>
 8002ce0:	1c72      	adds	r2, r6, #1
 8002ce2:	2efe      	cmp	r6, #254	; 0xfe
 8002ce4:	d0d0      	beq.n	8002c88 <__aeabi_d2f+0x24>
 8002ce6:	0189      	lsls	r1, r1, #6
 8002ce8:	0a49      	lsrs	r1, r1, #9
 8002cea:	b2d3      	uxtb	r3, r2
 8002cec:	e7ce      	b.n	8002c8c <__aeabi_d2f+0x28>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	e7cb      	b.n	8002c8c <__aeabi_d2f+0x28>
 8002cf4:	0032      	movs	r2, r6
 8002cf6:	3217      	adds	r2, #23
 8002cf8:	db22      	blt.n	8002d40 <__aeabi_d2f+0xdc>
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	221e      	movs	r2, #30
 8002cfe:	0409      	lsls	r1, r1, #16
 8002d00:	4308      	orrs	r0, r1
 8002d02:	1b92      	subs	r2, r2, r6
 8002d04:	2a1f      	cmp	r2, #31
 8002d06:	dd1d      	ble.n	8002d44 <__aeabi_d2f+0xe0>
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4249      	negs	r1, r1
 8002d0c:	1b8e      	subs	r6, r1, r6
 8002d0e:	0001      	movs	r1, r0
 8002d10:	40f1      	lsrs	r1, r6
 8002d12:	000e      	movs	r6, r1
 8002d14:	2a20      	cmp	r2, #32
 8002d16:	d004      	beq.n	8002d22 <__aeabi_d2f+0xbe>
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <__aeabi_d2f+0x108>)
 8002d1a:	4694      	mov	ip, r2
 8002d1c:	4463      	add	r3, ip
 8002d1e:	4098      	lsls	r0, r3
 8002d20:	4305      	orrs	r5, r0
 8002d22:	0029      	movs	r1, r5
 8002d24:	1e4d      	subs	r5, r1, #1
 8002d26:	41a9      	sbcs	r1, r5
 8002d28:	4331      	orrs	r1, r6
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	074b      	lsls	r3, r1, #29
 8002d2e:	d1ce      	bne.n	8002cce <__aeabi_d2f+0x6a>
 8002d30:	2080      	movs	r0, #128	; 0x80
 8002d32:	000b      	movs	r3, r1
 8002d34:	04c0      	lsls	r0, r0, #19
 8002d36:	2201      	movs	r2, #1
 8002d38:	4003      	ands	r3, r0
 8002d3a:	4201      	tst	r1, r0
 8002d3c:	d1d3      	bne.n	8002ce6 <__aeabi_d2f+0x82>
 8002d3e:	e7af      	b.n	8002ca0 <__aeabi_d2f+0x3c>
 8002d40:	2300      	movs	r3, #0
 8002d42:	e7ac      	b.n	8002c9e <__aeabi_d2f+0x3a>
 8002d44:	490a      	ldr	r1, [pc, #40]	; (8002d70 <__aeabi_d2f+0x10c>)
 8002d46:	468c      	mov	ip, r1
 8002d48:	0029      	movs	r1, r5
 8002d4a:	4463      	add	r3, ip
 8002d4c:	40d1      	lsrs	r1, r2
 8002d4e:	409d      	lsls	r5, r3
 8002d50:	000a      	movs	r2, r1
 8002d52:	0029      	movs	r1, r5
 8002d54:	4098      	lsls	r0, r3
 8002d56:	1e4d      	subs	r5, r1, #1
 8002d58:	41a9      	sbcs	r1, r5
 8002d5a:	4301      	orrs	r1, r0
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	e7e4      	b.n	8002d2a <__aeabi_d2f+0xc6>
 8002d60:	0033      	movs	r3, r6
 8002d62:	e79d      	b.n	8002ca0 <__aeabi_d2f+0x3c>
 8002d64:	000007fe 	.word	0x000007fe
 8002d68:	fffffc80 	.word	0xfffffc80
 8002d6c:	fffffca2 	.word	0xfffffca2
 8002d70:	fffffc82 	.word	0xfffffc82

08002d74 <__clzsi2>:
 8002d74:	211c      	movs	r1, #28
 8002d76:	2301      	movs	r3, #1
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	4298      	cmp	r0, r3
 8002d7c:	d301      	bcc.n	8002d82 <__clzsi2+0xe>
 8002d7e:	0c00      	lsrs	r0, r0, #16
 8002d80:	3910      	subs	r1, #16
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	4298      	cmp	r0, r3
 8002d86:	d301      	bcc.n	8002d8c <__clzsi2+0x18>
 8002d88:	0a00      	lsrs	r0, r0, #8
 8002d8a:	3908      	subs	r1, #8
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	4298      	cmp	r0, r3
 8002d90:	d301      	bcc.n	8002d96 <__clzsi2+0x22>
 8002d92:	0900      	lsrs	r0, r0, #4
 8002d94:	3904      	subs	r1, #4
 8002d96:	a202      	add	r2, pc, #8	; (adr r2, 8002da0 <__clzsi2+0x2c>)
 8002d98:	5c10      	ldrb	r0, [r2, r0]
 8002d9a:	1840      	adds	r0, r0, r1
 8002d9c:	4770      	bx	lr
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	02020304 	.word	0x02020304
 8002da4:	01010101 	.word	0x01010101
	...

08002db0 <__clzdi2>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	2900      	cmp	r1, #0
 8002db4:	d103      	bne.n	8002dbe <__clzdi2+0xe>
 8002db6:	f7ff ffdd 	bl	8002d74 <__clzsi2>
 8002dba:	3020      	adds	r0, #32
 8002dbc:	e002      	b.n	8002dc4 <__clzdi2+0x14>
 8002dbe:	1c08      	adds	r0, r1, #0
 8002dc0:	f7ff ffd8 	bl	8002d74 <__clzsi2>
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)

08002dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dcc:	f002 f8dc 	bl	8004f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dd0:	f000 f836 	bl	8002e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dd4:	f000 fb72 	bl	80034bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002dd8:	f000 fb52 	bl	8003480 <MX_DMA_Init>
  MX_ADC_Init();
 8002ddc:	f000 f8a6 	bl	8002f2c <MX_ADC_Init>
  MX_I2C1_Init();
 8002de0:	f000 f944 	bl	800306c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002de4:	f000 f982 	bl	80030ec <MX_I2C2_Init>
  MX_TIM2_Init();
 8002de8:	f000 f9c0 	bl	800316c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002dec:	f000 fae8 	bl	80033c0 <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 8002df0:	f000 fb16 	bl	8003420 <MX_USART5_UART_Init>
  MX_TIM6_Init();
 8002df4:	f000 fa6c 	bl	80032d0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002df8:	f000 faa8 	bl	800334c <MX_TIM7_Init>
  MX_TIM3_Init();
 8002dfc:	f000 fa0a 	bl	8003214 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  user_pripheral_init();
 8002e00:	f001 fd58 	bl	80048b4 <user_pripheral_init>
  user_driver_init();
 8002e04:	f001 fd6e 	bl	80048e4 <user_driver_init>
  APP_LOGD("Interrupt timer start project");
 8002e08:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <main+0x64>)
 8002e0a:	4909      	ldr	r1, [pc, #36]	; (8002e30 <main+0x68>)
 8002e0c:	4809      	ldr	r0, [pc, #36]	; (8002e34 <main+0x6c>)
 8002e0e:	237e      	movs	r3, #126	; 0x7e
 8002e10:	f001 fb2e 	bl	8004470 <uart_debug_printf>
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <main+0x70>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f001 fb2a 	bl	8004470 <uart_debug_printf>
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <main+0x74>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f001 fb26 	bl	8004470 <uart_debug_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    user_driver_process();
 8002e24:	f001 fd7e 	bl	8004924 <user_driver_process>
 8002e28:	e7fc      	b.n	8002e24 <main+0x5c>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	0800a0cc 	.word	0x0800a0cc
 8002e30:	08009d48 	.word	0x08009d48
 8002e34:	08009d4c 	.word	0x08009d4c
 8002e38:	08009d5c 	.word	0x08009d5c
 8002e3c:	08009d7c 	.word	0x08009d7c

08002e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b09b      	sub	sp, #108	; 0x6c
 8002e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e46:	2434      	movs	r4, #52	; 0x34
 8002e48:	193b      	adds	r3, r7, r4
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	2334      	movs	r3, #52	; 0x34
 8002e4e:	001a      	movs	r2, r3
 8002e50:	2100      	movs	r1, #0
 8002e52:	f006 fb39 	bl	80094c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e56:	2320      	movs	r3, #32
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	2314      	movs	r3, #20
 8002e5e:	001a      	movs	r2, r3
 8002e60:	2100      	movs	r1, #0
 8002e62:	f006 fb31 	bl	80094c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e66:	003b      	movs	r3, r7
 8002e68:	0018      	movs	r0, r3
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	2100      	movs	r1, #0
 8002e70:	f006 fb2a 	bl	80094c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <SystemClock_Config+0xe4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <SystemClock_Config+0xe8>)
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <SystemClock_Config+0xe4>)
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	0109      	lsls	r1, r1, #4
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e86:	0021      	movs	r1, r4
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	2201      	movs	r2, #1
 8002e92:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2210      	movs	r2, #16
 8002e98:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	02d2      	lsls	r2, r2, #11
 8002eac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002eae:	187b      	adds	r3, r7, r1
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	03d2      	lsls	r2, r2, #15
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f003 fe5f 	bl	8006b7c <HAL_RCC_OscConfig>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d001      	beq.n	8002ec6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002ec2:	f000 fbe3 	bl	800368c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	220f      	movs	r2, #15
 8002ecc:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ed4:	187b      	adds	r3, r7, r1
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002eda:	187b      	adds	r3, r7, r1
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ee6:	187b      	adds	r3, r7, r1
 8002ee8:	2101      	movs	r1, #1
 8002eea:	0018      	movs	r0, r3
 8002eec:	f004 f9c2 	bl	8007274 <HAL_RCC_ClockConfig>
 8002ef0:	1e03      	subs	r3, r0, #0
 8002ef2:	d001      	beq.n	8002ef8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002ef4:	f000 fbca 	bl	800368c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 8002ef8:	003b      	movs	r3, r7
 8002efa:	2209      	movs	r2, #9
 8002efc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002efe:	003b      	movs	r3, r7
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f04:	003b      	movs	r3, r7
 8002f06:	2200      	movs	r2, #0
 8002f08:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f0a:	003b      	movs	r3, r7
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f004 fbd5 	bl	80076bc <HAL_RCCEx_PeriphCLKConfig>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002f16:	f000 fbb9 	bl	800368c <Error_Handler>
  }
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b01b      	add	sp, #108	; 0x6c
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40007000 	.word	0x40007000
 8002f28:	ffffe7ff 	.word	0xffffe7ff

08002f2c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f32:	003b      	movs	r3, r7
 8002f34:	0018      	movs	r0, r3
 8002f36:	2308      	movs	r3, #8
 8002f38:	001a      	movs	r2, r3
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	f006 fac4 	bl	80094c8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002f40:	4b44      	ldr	r3, [pc, #272]	; (8003054 <MX_ADC_Init+0x128>)
 8002f42:	4a45      	ldr	r2, [pc, #276]	; (8003058 <MX_ADC_Init+0x12c>)
 8002f44:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <MX_ADC_Init+0x128>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002f4c:	4b41      	ldr	r3, [pc, #260]	; (8003054 <MX_ADC_Init+0x128>)
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	0312      	lsls	r2, r2, #12
 8002f52:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <MX_ADC_Init+0x128>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <MX_ADC_Init+0x128>)
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002f60:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <MX_ADC_Init+0x128>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <MX_ADC_Init+0x128>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002f6c:	4b39      	ldr	r3, [pc, #228]	; (8003054 <MX_ADC_Init+0x128>)
 8002f6e:	2220      	movs	r2, #32
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002f74:	4b37      	ldr	r3, [pc, #220]	; (8003054 <MX_ADC_Init+0x128>)
 8002f76:	2221      	movs	r2, #33	; 0x21
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <MX_ADC_Init+0x128>)
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002f84:	4b33      	ldr	r3, [pc, #204]	; (8003054 <MX_ADC_Init+0x128>)
 8002f86:	22c0      	movs	r2, #192	; 0xc0
 8002f88:	0052      	lsls	r2, r2, #1
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <MX_ADC_Init+0x128>)
 8002f8e:	222c      	movs	r2, #44	; 0x2c
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002f94:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <MX_ADC_Init+0x128>)
 8002f96:	2208      	movs	r2, #8
 8002f98:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <MX_ADC_Init+0x128>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <MX_ADC_Init+0x128>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <MX_ADC_Init+0x128>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002fac:	4b29      	ldr	r3, [pc, #164]	; (8003054 <MX_ADC_Init+0x128>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002fb2:	4b28      	ldr	r3, [pc, #160]	; (8003054 <MX_ADC_Init+0x128>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f002 f857 	bl	8005068 <HAL_ADC_Init>
 8002fba:	1e03      	subs	r3, r0, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 8002fbe:	f000 fb65 	bl	800368c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002fc2:	003b      	movs	r3, r7
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002fc8:	003b      	movs	r3, r7
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	0152      	lsls	r2, r2, #5
 8002fce:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002fd0:	003a      	movs	r2, r7
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <MX_ADC_Init+0x128>)
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f002 fa4c 	bl	8005474 <HAL_ADC_ConfigChannel>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 8002fe0:	f000 fb54 	bl	800368c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002fe4:	003b      	movs	r3, r7
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <MX_ADC_Init+0x130>)
 8002fe8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002fea:	003a      	movs	r2, r7
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <MX_ADC_Init+0x128>)
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f002 fa3f 	bl	8005474 <HAL_ADC_ConfigChannel>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 8002ffa:	f000 fb47 	bl	800368c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ffe:	003b      	movs	r3, r7
 8003000:	4a17      	ldr	r2, [pc, #92]	; (8003060 <MX_ADC_Init+0x134>)
 8003002:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003004:	003a      	movs	r2, r7
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <MX_ADC_Init+0x128>)
 8003008:	0011      	movs	r1, r2
 800300a:	0018      	movs	r0, r3
 800300c:	f002 fa32 	bl	8005474 <HAL_ADC_ConfigChannel>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d001      	beq.n	8003018 <MX_ADC_Init+0xec>
  {
    Error_Handler();
 8003014:	f000 fb3a 	bl	800368c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003018:	003b      	movs	r3, r7
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <MX_ADC_Init+0x138>)
 800301c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800301e:	003a      	movs	r2, r7
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <MX_ADC_Init+0x128>)
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f002 fa25 	bl	8005474 <HAL_ADC_ConfigChannel>
 800302a:	1e03      	subs	r3, r0, #0
 800302c:	d001      	beq.n	8003032 <MX_ADC_Init+0x106>
  {
    Error_Handler();
 800302e:	f000 fb2d 	bl	800368c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003032:	003b      	movs	r3, r7
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <MX_ADC_Init+0x13c>)
 8003036:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003038:	003a      	movs	r2, r7
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <MX_ADC_Init+0x128>)
 800303c:	0011      	movs	r1, r2
 800303e:	0018      	movs	r0, r3
 8003040:	f002 fa18 	bl	8005474 <HAL_ADC_ConfigChannel>
 8003044:	1e03      	subs	r3, r0, #0
 8003046:	d001      	beq.n	800304c <MX_ADC_Init+0x120>
  {
    Error_Handler();
 8003048:	f000 fb20 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}
 8003054:	2000038c 	.word	0x2000038c
 8003058:	40012400 	.word	0x40012400
 800305c:	04000002 	.word	0x04000002
 8003060:	08000004 	.word	0x08000004
 8003064:	0c000008 	.word	0x0c000008
 8003068:	10000010 	.word	0x10000010

0800306c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <MX_I2C1_Init+0x74>)
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <MX_I2C1_Init+0x78>)
 8003074:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <MX_I2C1_Init+0x74>)
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <MX_I2C1_Init+0x7c>)
 800307a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <MX_I2C1_Init+0x74>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <MX_I2C1_Init+0x74>)
 8003084:	2201      	movs	r2, #1
 8003086:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <MX_I2C1_Init+0x74>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <MX_I2C1_Init+0x74>)
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <MX_I2C1_Init+0x74>)
 8003096:	2200      	movs	r2, #0
 8003098:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <MX_I2C1_Init+0x74>)
 800309c:	2200      	movs	r2, #0
 800309e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <MX_I2C1_Init+0x74>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <MX_I2C1_Init+0x74>)
 80030a8:	0018      	movs	r0, r3
 80030aa:	f003 f845 	bl	8006138 <HAL_I2C_Init>
 80030ae:	1e03      	subs	r3, r0, #0
 80030b0:	d001      	beq.n	80030b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80030b2:	f000 faeb 	bl	800368c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <MX_I2C1_Init+0x74>)
 80030b8:	2100      	movs	r1, #0
 80030ba:	0018      	movs	r0, r3
 80030bc:	f003 fcc6 	bl	8006a4c <HAL_I2CEx_ConfigAnalogFilter>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d001      	beq.n	80030c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80030c4:	f000 fae2 	bl	800368c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <MX_I2C1_Init+0x74>)
 80030ca:	2100      	movs	r1, #0
 80030cc:	0018      	movs	r0, r3
 80030ce:	f003 fd09 	bl	8006ae4 <HAL_I2CEx_ConfigDigitalFilter>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d001      	beq.n	80030da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80030d6:	f000 fad9 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200000c8 	.word	0x200000c8
 80030e4:	40005400 	.word	0x40005400
 80030e8:	00707cbb 	.word	0x00707cbb

080030ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80030f0:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <MX_I2C2_Init+0x74>)
 80030f2:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <MX_I2C2_Init+0x78>)
 80030f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80030f6:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <MX_I2C2_Init+0x74>)
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <MX_I2C2_Init+0x7c>)
 80030fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80030fc:	4b18      	ldr	r3, [pc, #96]	; (8003160 <MX_I2C2_Init+0x74>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <MX_I2C2_Init+0x74>)
 8003104:	2201      	movs	r2, #1
 8003106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <MX_I2C2_Init+0x74>)
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <MX_I2C2_Init+0x74>)
 8003110:	2200      	movs	r2, #0
 8003112:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <MX_I2C2_Init+0x74>)
 8003116:	2200      	movs	r2, #0
 8003118:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <MX_I2C2_Init+0x74>)
 800311c:	2200      	movs	r2, #0
 800311e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003120:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <MX_I2C2_Init+0x74>)
 8003122:	2200      	movs	r2, #0
 8003124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <MX_I2C2_Init+0x74>)
 8003128:	0018      	movs	r0, r3
 800312a:	f003 f805 	bl	8006138 <HAL_I2C_Init>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d001      	beq.n	8003136 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003132:	f000 faab 	bl	800368c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <MX_I2C2_Init+0x74>)
 8003138:	2100      	movs	r1, #0
 800313a:	0018      	movs	r0, r3
 800313c:	f003 fc86 	bl	8006a4c <HAL_I2CEx_ConfigAnalogFilter>
 8003140:	1e03      	subs	r3, r0, #0
 8003142:	d001      	beq.n	8003148 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003144:	f000 faa2 	bl	800368c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <MX_I2C2_Init+0x74>)
 800314a:	2100      	movs	r1, #0
 800314c:	0018      	movs	r0, r3
 800314e:	f003 fcc9 	bl	8006ae4 <HAL_I2CEx_ConfigDigitalFilter>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d001      	beq.n	800315a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003156:	f000 fa99 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000114 	.word	0x20000114
 8003164:	40005800 	.word	0x40005800
 8003168:	00707cbb 	.word	0x00707cbb

0800316c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003172:	2308      	movs	r3, #8
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	0018      	movs	r0, r3
 8003178:	2310      	movs	r3, #16
 800317a:	001a      	movs	r2, r3
 800317c:	2100      	movs	r1, #0
 800317e:	f006 f9a3 	bl	80094c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003182:	003b      	movs	r3, r7
 8003184:	0018      	movs	r0, r3
 8003186:	2308      	movs	r3, #8
 8003188:	001a      	movs	r2, r3
 800318a:	2100      	movs	r1, #0
 800318c:	f006 f99c 	bl	80094c8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003190:	4b1e      	ldr	r3, [pc, #120]	; (800320c <MX_TIM2_Init+0xa0>)
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	05d2      	lsls	r2, r2, #23
 8003196:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003198:	4b1c      	ldr	r3, [pc, #112]	; (800320c <MX_TIM2_Init+0xa0>)
 800319a:	2200      	movs	r2, #0
 800319c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <MX_TIM2_Init+0xa0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <MX_TIM2_Init+0xa0>)
 80031a6:	4a1a      	ldr	r2, [pc, #104]	; (8003210 <MX_TIM2_Init+0xa4>)
 80031a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <MX_TIM2_Init+0xa0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <MX_TIM2_Init+0xa0>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <MX_TIM2_Init+0xa0>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f004 fbc5 	bl	8007948 <HAL_TIM_Base_Init>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80031c2:	f000 fa63 	bl	800368c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031c6:	2108      	movs	r1, #8
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	0152      	lsls	r2, r2, #5
 80031ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031d0:	187a      	adds	r2, r7, r1
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <MX_TIM2_Init+0xa0>)
 80031d4:	0011      	movs	r1, r2
 80031d6:	0018      	movs	r0, r3
 80031d8:	f004 fe26 	bl	8007e28 <HAL_TIM_ConfigClockSource>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80031e0:	f000 fa54 	bl	800368c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e4:	003b      	movs	r3, r7
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ea:	003b      	movs	r3, r7
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031f0:	003a      	movs	r2, r7
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_TIM2_Init+0xa0>)
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f005 f904 	bl	8008404 <HAL_TIMEx_MasterConfigSynchronization>
 80031fc:	1e03      	subs	r3, r0, #0
 80031fe:	d001      	beq.n	8003204 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003200:	f000 fa44 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b006      	add	sp, #24
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000304 	.word	0x20000304
 8003210:	0000ffff 	.word	0x0000ffff

08003214 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321a:	2310      	movs	r3, #16
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	0018      	movs	r0, r3
 8003220:	2308      	movs	r3, #8
 8003222:	001a      	movs	r2, r3
 8003224:	2100      	movs	r1, #0
 8003226:	f006 f94f 	bl	80094c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800322a:	003b      	movs	r3, r7
 800322c:	0018      	movs	r0, r3
 800322e:	2310      	movs	r3, #16
 8003230:	001a      	movs	r2, r3
 8003232:	2100      	movs	r1, #0
 8003234:	f006 f948 	bl	80094c8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <MX_TIM3_Init+0xb0>)
 800323a:	4a23      	ldr	r2, [pc, #140]	; (80032c8 <MX_TIM3_Init+0xb4>)
 800323c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 800323e:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <MX_TIM3_Init+0xb0>)
 8003240:	4a22      	ldr	r2, [pc, #136]	; (80032cc <MX_TIM3_Init+0xb8>)
 8003242:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <MX_TIM3_Init+0xb0>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200 - 1;
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <MX_TIM3_Init+0xb0>)
 800324c:	22c7      	movs	r2, #199	; 0xc7
 800324e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003250:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <MX_TIM3_Init+0xb0>)
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <MX_TIM3_Init+0xb0>)
 8003258:	2200      	movs	r2, #0
 800325a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <MX_TIM3_Init+0xb0>)
 800325e:	0018      	movs	r0, r3
 8003260:	f004 fc6c 	bl	8007b3c <HAL_TIM_OC_Init>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d001      	beq.n	800326c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003268:	f000 fa10 	bl	800368c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800326c:	2110      	movs	r1, #16
 800326e:	187b      	adds	r3, r7, r1
 8003270:	2220      	movs	r2, #32
 8003272:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003274:	187b      	adds	r3, r7, r1
 8003276:	2200      	movs	r2, #0
 8003278:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800327a:	187a      	adds	r2, r7, r1
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <MX_TIM3_Init+0xb0>)
 800327e:	0011      	movs	r1, r2
 8003280:	0018      	movs	r0, r3
 8003282:	f005 f8bf 	bl	8008404 <HAL_TIMEx_MasterConfigSynchronization>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d001      	beq.n	800328e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800328a:	f000 f9ff 	bl	800368c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800328e:	003b      	movs	r3, r7
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003294:	003b      	movs	r3, r7
 8003296:	2200      	movs	r2, #0
 8003298:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800329a:	003b      	movs	r3, r7
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032a0:	003b      	movs	r3, r7
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032a6:	0039      	movs	r1, r7
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <MX_TIM3_Init+0xb0>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	0018      	movs	r0, r3
 80032ae:	f004 fd6d 	bl	8007d8c <HAL_TIM_OC_ConfigChannel>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d001      	beq.n	80032ba <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80032b6:	f000 f9e9 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	20000160 	.word	0x20000160
 80032c8:	40000400 	.word	0x40000400
 80032cc:	000018ff 	.word	0x000018ff

080032d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d6:	003b      	movs	r3, r7
 80032d8:	0018      	movs	r0, r3
 80032da:	2308      	movs	r3, #8
 80032dc:	001a      	movs	r2, r3
 80032de:	2100      	movs	r1, #0
 80032e0:	f006 f8f2 	bl	80094c8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <MX_TIM6_Init+0x6c>)
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <MX_TIM6_Init+0x70>)
 80032e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000 - 1;
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <MX_TIM6_Init+0x6c>)
 80032ec:	4a15      	ldr	r2, [pc, #84]	; (8003344 <MX_TIM6_Init+0x74>)
 80032ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <MX_TIM6_Init+0x6c>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <MX_TIM6_Init+0x6c>)
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <MX_TIM6_Init+0x78>)
 80032fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <MX_TIM6_Init+0x6c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <MX_TIM6_Init+0x6c>)
 8003304:	0018      	movs	r0, r3
 8003306:	f004 fb1f 	bl	8007948 <HAL_TIM_Base_Init>
 800330a:	1e03      	subs	r3, r0, #0
 800330c:	d001      	beq.n	8003312 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800330e:	f000 f9bd 	bl	800368c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003312:	003b      	movs	r3, r7
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003318:	003b      	movs	r3, r7
 800331a:	2200      	movs	r2, #0
 800331c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800331e:	003a      	movs	r2, r7
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <MX_TIM6_Init+0x6c>)
 8003322:	0011      	movs	r1, r2
 8003324:	0018      	movs	r0, r3
 8003326:	f005 f86d 	bl	8008404 <HAL_TIMEx_MasterConfigSynchronization>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800332e:	f000 f9ad 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	200002c4 	.word	0x200002c4
 8003340:	40001000 	.word	0x40001000
 8003344:	00007cff 	.word	0x00007cff
 8003348:	000003e7 	.word	0x000003e7

0800334c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003352:	003b      	movs	r3, r7
 8003354:	0018      	movs	r0, r3
 8003356:	2308      	movs	r3, #8
 8003358:	001a      	movs	r2, r3
 800335a:	2100      	movs	r1, #0
 800335c:	f006 f8b4 	bl	80094c8 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003360:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <MX_TIM7_Init+0x6c>)
 8003362:	4a16      	ldr	r2, [pc, #88]	; (80033bc <MX_TIM7_Init+0x70>)
 8003364:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 320 - 1;
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <MX_TIM7_Init+0x6c>)
 8003368:	2240      	movs	r2, #64	; 0x40
 800336a:	32ff      	adds	r2, #255	; 0xff
 800336c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <MX_TIM7_Init+0x6c>)
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <MX_TIM7_Init+0x6c>)
 8003376:	2263      	movs	r2, #99	; 0x63
 8003378:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <MX_TIM7_Init+0x6c>)
 800337c:	2200      	movs	r2, #0
 800337e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <MX_TIM7_Init+0x6c>)
 8003382:	0018      	movs	r0, r3
 8003384:	f004 fae0 	bl	8007948 <HAL_TIM_Base_Init>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 800338c:	f000 f97e 	bl	800368c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003390:	003b      	movs	r3, r7
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003396:	003b      	movs	r3, r7
 8003398:	2200      	movs	r2, #0
 800339a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800339c:	003a      	movs	r2, r7
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <MX_TIM7_Init+0x6c>)
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f005 f82e 	bl	8008404 <HAL_TIMEx_MasterConfigSynchronization>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 80033ac:	f000 f96e 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	200003e8 	.word	0x200003e8
 80033bc:	40001400 	.word	0x40001400

080033c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <MX_USART1_UART_Init+0x5c>)
 80033c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033cc:	22e1      	movs	r2, #225	; 0xe1
 80033ce:	0252      	lsls	r2, r2, #9
 80033d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033e6:	220c      	movs	r2, #12
 80033e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033fe:	2200      	movs	r2, #0
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <MX_USART1_UART_Init+0x58>)
 8003404:	0018      	movs	r0, r3
 8003406:	f005 f85b 	bl	80084c0 <HAL_UART_Init>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d001      	beq.n	8003412 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800340e:	f000 f93d 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000240 	.word	0x20000240
 800341c:	40013800 	.word	0x40013800

08003420 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <MX_USART5_UART_Init+0x58>)
 8003426:	4a15      	ldr	r2, [pc, #84]	; (800347c <MX_USART5_UART_Init+0x5c>)
 8003428:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <MX_USART5_UART_Init+0x58>)
 800342c:	22e1      	movs	r2, #225	; 0xe1
 800342e:	0252      	lsls	r2, r2, #9
 8003430:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <MX_USART5_UART_Init+0x58>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <MX_USART5_UART_Init+0x58>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <MX_USART5_UART_Init+0x58>)
 8003440:	2200      	movs	r2, #0
 8003442:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <MX_USART5_UART_Init+0x58>)
 8003446:	220c      	movs	r2, #12
 8003448:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <MX_USART5_UART_Init+0x58>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <MX_USART5_UART_Init+0x58>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <MX_USART5_UART_Init+0x58>)
 8003458:	2200      	movs	r2, #0
 800345a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <MX_USART5_UART_Init+0x58>)
 800345e:	2200      	movs	r2, #0
 8003460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <MX_USART5_UART_Init+0x58>)
 8003464:	0018      	movs	r0, r3
 8003466:	f005 f82b 	bl	80084c0 <HAL_UART_Init>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d001      	beq.n	8003472 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800346e:	f000 f90d 	bl	800368c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200001a0 	.word	0x200001a0
 800347c:	40005000 	.word	0x40005000

08003480 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <MX_DMA_Init+0x38>)
 8003488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <MX_DMA_Init+0x38>)
 800348c:	2101      	movs	r1, #1
 800348e:	430a      	orrs	r2, r1
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <MX_DMA_Init+0x38>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	2201      	movs	r2, #1
 8003498:	4013      	ands	r3, r2
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	2009      	movs	r0, #9
 80034a4:	f002 fa1c 	bl	80058e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80034a8:	2009      	movs	r0, #9
 80034aa:	f002 fa2e 	bl	800590a <HAL_NVIC_EnableIRQ>
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40021000 	.word	0x40021000

080034bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b08b      	sub	sp, #44	; 0x2c
 80034c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c2:	2414      	movs	r4, #20
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	0018      	movs	r0, r3
 80034c8:	2314      	movs	r3, #20
 80034ca:	001a      	movs	r2, r3
 80034cc:	2100      	movs	r1, #0
 80034ce:	f005 fffb 	bl	80094c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d2:	4b68      	ldr	r3, [pc, #416]	; (8003674 <MX_GPIO_Init+0x1b8>)
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	4b67      	ldr	r3, [pc, #412]	; (8003674 <MX_GPIO_Init+0x1b8>)
 80034d8:	2104      	movs	r1, #4
 80034da:	430a      	orrs	r2, r1
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <MX_GPIO_Init+0x1b8>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	2204      	movs	r2, #4
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ea:	4b62      	ldr	r3, [pc, #392]	; (8003674 <MX_GPIO_Init+0x1b8>)
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <MX_GPIO_Init+0x1b8>)
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	430a      	orrs	r2, r1
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80034f6:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <MX_GPIO_Init+0x1b8>)
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <MX_GPIO_Init+0x1b8>)
 8003504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003506:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <MX_GPIO_Init+0x1b8>)
 8003508:	2101      	movs	r1, #1
 800350a:	430a      	orrs	r2, r1
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
 800350e:	4b59      	ldr	r3, [pc, #356]	; (8003674 <MX_GPIO_Init+0x1b8>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	2201      	movs	r2, #1
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800351a:	4b56      	ldr	r3, [pc, #344]	; (8003674 <MX_GPIO_Init+0x1b8>)
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	4b55      	ldr	r3, [pc, #340]	; (8003674 <MX_GPIO_Init+0x1b8>)
 8003520:	2102      	movs	r1, #2
 8003522:	430a      	orrs	r2, r1
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c
 8003526:	4b53      	ldr	r3, [pc, #332]	; (8003674 <MX_GPIO_Init+0x1b8>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	2202      	movs	r2, #2
 800352c:	4013      	ands	r3, r2
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	4850      	ldr	r0, [pc, #320]	; (8003678 <MX_GPIO_Init+0x1bc>)
 8003538:	2201      	movs	r2, #1
 800353a:	0019      	movs	r1, r3
 800353c:	f002 fddf 	bl	80060fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_GREEN_Pin | LED_BLUE_Pin, GPIO_PIN_SET);
 8003540:	4b4e      	ldr	r3, [pc, #312]	; (800367c <MX_GPIO_Init+0x1c0>)
 8003542:	2201      	movs	r2, #1
 8003544:	2103      	movs	r1, #3
 8003546:	0018      	movs	r0, r3
 8003548:	f002 fdd9 	bl	80060fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_CTRL_Pin | POWER_CTRL_Pin | HEATING_CTRL_Pin, GPIO_PIN_RESET);
 800354c:	2398      	movs	r3, #152	; 0x98
 800354e:	015b      	lsls	r3, r3, #5
 8003550:	484b      	ldr	r0, [pc, #300]	; (8003680 <MX_GPIO_Init+0x1c4>)
 8003552:	2200      	movs	r2, #0
 8003554:	0019      	movs	r1, r3
 8003556:	f002 fdd2 	bl	80060fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	0059      	lsls	r1, r3, #1
 800355e:	23a0      	movs	r3, #160	; 0xa0
 8003560:	05db      	lsls	r3, r3, #23
 8003562:	2200      	movs	r2, #0
 8003564:	0018      	movs	r0, r3
 8003566:	f002 fdca 	bl	80060fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800356a:	193b      	adds	r3, r7, r4
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	0192      	lsls	r2, r2, #6
 8003570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003572:	193b      	adds	r3, r7, r4
 8003574:	2201      	movs	r2, #1
 8003576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	193b      	adds	r3, r7, r4
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	193b      	adds	r3, r7, r4
 8003580:	2200      	movs	r2, #0
 8003582:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003584:	193b      	adds	r3, r7, r4
 8003586:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <MX_GPIO_Init+0x1bc>)
 8003588:	0019      	movs	r1, r3
 800358a:	0010      	movs	r0, r2
 800358c:	f002 fc1c 	bl	8005dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin | LED_BLUE_Pin;
 8003590:	193b      	adds	r3, r7, r4
 8003592:	2203      	movs	r2, #3
 8003594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003596:	193b      	adds	r3, r7, r4
 8003598:	2201      	movs	r2, #1
 800359a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	193b      	adds	r3, r7, r4
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a2:	193b      	adds	r3, r7, r4
 80035a4:	2200      	movs	r2, #0
 80035a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80035a8:	193b      	adds	r3, r7, r4
 80035aa:	4a34      	ldr	r2, [pc, #208]	; (800367c <MX_GPIO_Init+0x1c0>)
 80035ac:	0019      	movs	r1, r3
 80035ae:	0010      	movs	r0, r2
 80035b0:	f002 fc0a 	bl	8005dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTARY1_P1_Pin ROTARY1_P2_Pin ROTARY1_P3_Pin CHARGE_STAT2_Pin */
  GPIO_InitStruct.Pin = ROTARY1_P1_Pin | ROTARY1_P2_Pin | ROTARY1_P3_Pin | CHARGE_STAT2_Pin;
 80035b4:	193b      	adds	r3, r7, r4
 80035b6:	4a33      	ldr	r2, [pc, #204]	; (8003684 <MX_GPIO_Init+0x1c8>)
 80035b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ba:	193b      	adds	r3, r7, r4
 80035bc:	2200      	movs	r2, #0
 80035be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	193b      	adds	r3, r7, r4
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	193a      	adds	r2, r7, r4
 80035c8:	23a0      	movs	r3, #160	; 0xa0
 80035ca:	05db      	lsls	r3, r3, #23
 80035cc:	0011      	movs	r1, r2
 80035ce:	0018      	movs	r0, r3
 80035d0:	f002 fbfa 	bl	8005dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTARY1_P4_Pin ROTARY2_P1_Pin ROTARY2_P2_Pin ROTARY2_P3_Pin
                           ROTARY2_P4_Pin CHARGE_STAT1_Pin */
  GPIO_InitStruct.Pin = ROTARY1_P4_Pin | ROTARY2_P1_Pin | ROTARY2_P2_Pin | ROTARY2_P3_Pin | ROTARY2_P4_Pin | CHARGE_STAT1_Pin;
 80035d4:	193b      	adds	r3, r7, r4
 80035d6:	4a2c      	ldr	r2, [pc, #176]	; (8003688 <MX_GPIO_Init+0x1cc>)
 80035d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035da:	193b      	adds	r3, r7, r4
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	193b      	adds	r3, r7, r4
 80035e8:	4a25      	ldr	r2, [pc, #148]	; (8003680 <MX_GPIO_Init+0x1c4>)
 80035ea:	0019      	movs	r1, r3
 80035ec:	0010      	movs	r0, r2
 80035ee:	f002 fbeb 	bl	8005dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_CTRL_Pin POWER_CTRL_Pin HEATING_CTRL_Pin */
  GPIO_InitStruct.Pin = FAN_CTRL_Pin | POWER_CTRL_Pin | HEATING_CTRL_Pin;
 80035f2:	0021      	movs	r1, r4
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2298      	movs	r2, #152	; 0x98
 80035f8:	0152      	lsls	r2, r2, #5
 80035fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fc:	000c      	movs	r4, r1
 80035fe:	193b      	adds	r3, r7, r4
 8003600:	2201      	movs	r2, #1
 8003602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003604:	193b      	adds	r3, r7, r4
 8003606:	2201      	movs	r2, #1
 8003608:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	193b      	adds	r3, r7, r4
 800360c:	2200      	movs	r2, #0
 800360e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003610:	193b      	adds	r3, r7, r4
 8003612:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <MX_GPIO_Init+0x1c4>)
 8003614:	0019      	movs	r1, r3
 8003616:	0010      	movs	r0, r2
 8003618:	f002 fbd6 	bl	8005dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_BTN_Pin */
  GPIO_InitStruct.Pin = MODE_BTN_Pin;
 800361c:	0021      	movs	r1, r4
 800361e:	187b      	adds	r3, r7, r1
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	0212      	lsls	r2, r2, #8
 8003624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003626:	000c      	movs	r4, r1
 8003628:	193b      	adds	r3, r7, r4
 800362a:	2200      	movs	r2, #0
 800362c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800362e:	193b      	adds	r3, r7, r4
 8003630:	2201      	movs	r2, #1
 8003632:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_BTN_GPIO_Port, &GPIO_InitStruct);
 8003634:	193b      	adds	r3, r7, r4
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <MX_GPIO_Init+0x1c4>)
 8003638:	0019      	movs	r1, r3
 800363a:	0010      	movs	r0, r2
 800363c:	f002 fbc4 	bl	8005dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin;
 8003640:	0021      	movs	r1, r4
 8003642:	187b      	adds	r3, r7, r1
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	0052      	lsls	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2201      	movs	r2, #1
 800364e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	187b      	adds	r3, r7, r1
 8003658:	2200      	movs	r2, #0
 800365a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LORA_RST_GPIO_Port, &GPIO_InitStruct);
 800365c:	187a      	adds	r2, r7, r1
 800365e:	23a0      	movs	r3, #160	; 0xa0
 8003660:	05db      	lsls	r3, r3, #23
 8003662:	0011      	movs	r1, r2
 8003664:	0018      	movs	r0, r3
 8003666:	f002 fbaf 	bl	8005dc8 <HAL_GPIO_Init>
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b00b      	add	sp, #44	; 0x2c
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	40021000 	.word	0x40021000
 8003678:	50000800 	.word	0x50000800
 800367c:	50001c00 	.word	0x50001c00
 8003680:	50000400 	.word	0x50000400
 8003684:	000080e0 	.word	0x000080e0
 8003688:	00000c27 	.word	0x00000c27

0800368c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003690:	b672      	cpsid	i
}
 8003692:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003694:	e7fe      	b.n	8003694 <Error_Handler+0x8>
	...

08003698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <HAL_MspInit+0x24>)
 800369e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_MspInit+0x24>)
 80036a2:	2101      	movs	r1, #1
 80036a4:	430a      	orrs	r2, r1
 80036a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_MspInit+0x24>)
 80036aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_MspInit+0x24>)
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	0549      	lsls	r1, r1, #21
 80036b2:	430a      	orrs	r2, r1
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000

080036c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	240c      	movs	r4, #12
 80036ca:	193b      	adds	r3, r7, r4
 80036cc:	0018      	movs	r0, r3
 80036ce:	2314      	movs	r3, #20
 80036d0:	001a      	movs	r2, r3
 80036d2:	2100      	movs	r1, #0
 80036d4:	f005 fef8 	bl	80094c8 <memset>
  if(hadc->Instance==ADC1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <HAL_ADC_MspInit+0xc8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d14d      	bne.n	800377e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_ADC_MspInit+0xcc>)
 80036e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_ADC_MspInit+0xcc>)
 80036e8:	2180      	movs	r1, #128	; 0x80
 80036ea:	0089      	lsls	r1, r1, #2
 80036ec:	430a      	orrs	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f0:	4b26      	ldr	r3, [pc, #152]	; (800378c <HAL_ADC_MspInit+0xcc>)
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_ADC_MspInit+0xcc>)
 80036f6:	2101      	movs	r1, #1
 80036f8:	430a      	orrs	r2, r1
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_ADC_MspInit+0xcc>)
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	2201      	movs	r2, #1
 8003702:	4013      	ands	r3, r2
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003708:	193b      	adds	r3, r7, r4
 800370a:	221f      	movs	r2, #31
 800370c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800370e:	193b      	adds	r3, r7, r4
 8003710:	2203      	movs	r2, #3
 8003712:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	193b      	adds	r3, r7, r4
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371a:	193a      	adds	r2, r7, r4
 800371c:	23a0      	movs	r3, #160	; 0xa0
 800371e:	05db      	lsls	r3, r3, #23
 8003720:	0011      	movs	r1, r2
 8003722:	0018      	movs	r0, r3
 8003724:	f002 fb50 	bl	8005dc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 800372a:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_ADC_MspInit+0xd4>)
 800372c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 8003730:	2200      	movs	r2, #0
 8003732:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 800373c:	2200      	movs	r2, #0
 800373e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	0052      	lsls	r2, r2, #1
 800374c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	00d2      	lsls	r2, r2, #3
 8003754:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 8003758:	2200      	movs	r2, #0
 800375a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 800375e:	2200      	movs	r2, #0
 8003760:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 8003764:	0018      	movs	r0, r3
 8003766:	f002 f8ed 	bl	8005944 <HAL_DMA_Init>
 800376a:	1e03      	subs	r3, r0, #0
 800376c:	d001      	beq.n	8003772 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800376e:	f7ff ff8d 	bl	800368c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a06      	ldr	r2, [pc, #24]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 8003776:	64da      	str	r2, [r3, #76]	; 0x4c
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_ADC_MspInit+0xd0>)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b009      	add	sp, #36	; 0x24
 8003784:	bd90      	pop	{r4, r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	40012400 	.word	0x40012400
 800378c:	40021000 	.word	0x40021000
 8003790:	20000344 	.word	0x20000344
 8003794:	40020008 	.word	0x40020008

08003798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003798:	b590      	push	{r4, r7, lr}
 800379a:	b08b      	sub	sp, #44	; 0x2c
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	2414      	movs	r4, #20
 80037a2:	193b      	adds	r3, r7, r4
 80037a4:	0018      	movs	r0, r3
 80037a6:	2314      	movs	r3, #20
 80037a8:	001a      	movs	r2, r3
 80037aa:	2100      	movs	r1, #0
 80037ac:	f005 fe8c 	bl	80094c8 <memset>
  if(hi2c->Instance==I2C1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <HAL_I2C_MspInit+0xdc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d129      	bne.n	800380e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 80037bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 80037c0:	2102      	movs	r1, #2
 80037c2:	430a      	orrs	r2, r1
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80037c6:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	2202      	movs	r2, #2
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037d2:	0021      	movs	r1, r4
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	22c0      	movs	r2, #192	; 0xc0
 80037d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	2212      	movs	r2, #18
 80037de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2201      	movs	r2, #1
 80037e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	2203      	movs	r2, #3
 80037ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	2201      	movs	r2, #1
 80037f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	4a21      	ldr	r2, [pc, #132]	; (800387c <HAL_I2C_MspInit+0xe4>)
 80037f6:	0019      	movs	r1, r3
 80037f8:	0010      	movs	r0, r2
 80037fa:	f002 fae5 	bl	8005dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 8003800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	0389      	lsls	r1, r1, #14
 8003808:	430a      	orrs	r2, r1
 800380a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800380c:	e02e      	b.n	800386c <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_I2C_MspInit+0xe8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d129      	bne.n	800386c <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003818:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 800381e:	2102      	movs	r1, #2
 8003820:	430a      	orrs	r2, r1
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2202      	movs	r2, #2
 800382a:	4013      	ands	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003830:	2114      	movs	r1, #20
 8003832:	187b      	adds	r3, r7, r1
 8003834:	22c0      	movs	r2, #192	; 0xc0
 8003836:	01d2      	lsls	r2, r2, #7
 8003838:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800383a:	187b      	adds	r3, r7, r1
 800383c:	2212      	movs	r2, #18
 800383e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003840:	187b      	adds	r3, r7, r1
 8003842:	2201      	movs	r2, #1
 8003844:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003846:	187b      	adds	r3, r7, r1
 8003848:	2203      	movs	r2, #3
 800384a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800384c:	187b      	adds	r3, r7, r1
 800384e:	2205      	movs	r2, #5
 8003850:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003852:	187b      	adds	r3, r7, r1
 8003854:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_I2C_MspInit+0xe4>)
 8003856:	0019      	movs	r1, r3
 8003858:	0010      	movs	r0, r2
 800385a:	f002 fab5 	bl	8005dc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_I2C_MspInit+0xe0>)
 8003864:	2180      	movs	r1, #128	; 0x80
 8003866:	03c9      	lsls	r1, r1, #15
 8003868:	430a      	orrs	r2, r1
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b00b      	add	sp, #44	; 0x2c
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	40005400 	.word	0x40005400
 8003878:	40021000 	.word	0x40021000
 800387c:	50000400 	.word	0x50000400
 8003880:	40005800 	.word	0x40005800

08003884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	05db      	lsls	r3, r3, #23
 8003894:	429a      	cmp	r2, r3
 8003896:	d106      	bne.n	80038a6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_TIM_Base_MspInit+0x78>)
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_TIM_Base_MspInit+0x78>)
 800389e:	2101      	movs	r1, #1
 80038a0:	430a      	orrs	r2, r1
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80038a4:	e026      	b.n	80038f4 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM6)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a15      	ldr	r2, [pc, #84]	; (8003900 <HAL_TIM_Base_MspInit+0x7c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10e      	bne.n	80038ce <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_TIM_Base_MspInit+0x78>)
 80038b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <HAL_TIM_Base_MspInit+0x78>)
 80038b6:	2110      	movs	r1, #16
 80038b8:	430a      	orrs	r2, r1
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80038bc:	2200      	movs	r2, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	2011      	movs	r0, #17
 80038c2:	f002 f80d 	bl	80058e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80038c6:	2011      	movs	r0, #17
 80038c8:	f002 f81f 	bl	800590a <HAL_NVIC_EnableIRQ>
}
 80038cc:	e012      	b.n	80038f4 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM7)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <HAL_TIM_Base_MspInit+0x80>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10d      	bne.n	80038f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_TIM_Base_MspInit+0x78>)
 80038da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <HAL_TIM_Base_MspInit+0x78>)
 80038de:	2120      	movs	r1, #32
 80038e0:	430a      	orrs	r2, r1
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	2012      	movs	r0, #18
 80038ea:	f001 fff9 	bl	80058e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038ee:	2012      	movs	r0, #18
 80038f0:	f002 f80b 	bl	800590a <HAL_NVIC_EnableIRQ>
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	40001000 	.word	0x40001000
 8003904:	40001400 	.word	0x40001400

08003908 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a06      	ldr	r2, [pc, #24]	; (8003930 <HAL_TIM_OC_MspInit+0x28>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d105      	bne.n	8003926 <HAL_TIM_OC_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_TIM_OC_MspInit+0x2c>)
 800391c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_TIM_OC_MspInit+0x2c>)
 8003920:	2102      	movs	r1, #2
 8003922:	430a      	orrs	r2, r1
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	40000400 	.word	0x40000400
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b08b      	sub	sp, #44	; 0x2c
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	2414      	movs	r4, #20
 8003942:	193b      	adds	r3, r7, r4
 8003944:	0018      	movs	r0, r3
 8003946:	2314      	movs	r3, #20
 8003948:	001a      	movs	r2, r3
 800394a:	2100      	movs	r1, #0
 800394c:	f005 fdbc 	bl	80094c8 <memset>
  if(huart->Instance==USART1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a38      	ldr	r2, [pc, #224]	; (8003a38 <HAL_UART_MspInit+0x100>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d133      	bne.n	80039c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800395a:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <HAL_UART_MspInit+0x104>)
 800395c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_UART_MspInit+0x104>)
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	01c9      	lsls	r1, r1, #7
 8003964:	430a      	orrs	r2, r1
 8003966:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003968:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <HAL_UART_MspInit+0x104>)
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <HAL_UART_MspInit+0x104>)
 800396e:	2101      	movs	r1, #1
 8003970:	430a      	orrs	r2, r1
 8003972:	62da      	str	r2, [r3, #44]	; 0x2c
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_UART_MspInit+0x104>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	2201      	movs	r2, #1
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003980:	193b      	adds	r3, r7, r4
 8003982:	22c0      	movs	r2, #192	; 0xc0
 8003984:	00d2      	lsls	r2, r2, #3
 8003986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	0021      	movs	r1, r4
 800398a:	187b      	adds	r3, r7, r1
 800398c:	2202      	movs	r2, #2
 800398e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2203      	movs	r2, #3
 800399a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800399c:	187b      	adds	r3, r7, r1
 800399e:	2204      	movs	r2, #4
 80039a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a2:	187a      	adds	r2, r7, r1
 80039a4:	23a0      	movs	r3, #160	; 0xa0
 80039a6:	05db      	lsls	r3, r3, #23
 80039a8:	0011      	movs	r1, r2
 80039aa:	0018      	movs	r0, r3
 80039ac:	f002 fa0c 	bl	8005dc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2100      	movs	r1, #0
 80039b4:	201b      	movs	r0, #27
 80039b6:	f001 ff93 	bl	80058e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039ba:	201b      	movs	r0, #27
 80039bc:	f001 ffa5 	bl	800590a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80039c0:	e035      	b.n	8003a2e <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART5)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_UART_MspInit+0x108>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d130      	bne.n	8003a2e <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART5_CLK_ENABLE();
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_UART_MspInit+0x104>)
 80039ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d0:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <HAL_UART_MspInit+0x104>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0349      	lsls	r1, r1, #13
 80039d6:	430a      	orrs	r2, r1
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_UART_MspInit+0x104>)
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_UART_MspInit+0x104>)
 80039e0:	2102      	movs	r1, #2
 80039e2:	430a      	orrs	r2, r1
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_UART_MspInit+0x104>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	2202      	movs	r2, #2
 80039ec:	4013      	ands	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80039f2:	2114      	movs	r1, #20
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2218      	movs	r2, #24
 80039f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	2202      	movs	r2, #2
 80039fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	2206      	movs	r2, #6
 8003a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a12:	187b      	adds	r3, r7, r1
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <HAL_UART_MspInit+0x10c>)
 8003a16:	0019      	movs	r1, r3
 8003a18:	0010      	movs	r0, r2
 8003a1a:	f002 f9d5 	bl	8005dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	200e      	movs	r0, #14
 8003a24:	f001 ff5c 	bl	80058e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003a28:	200e      	movs	r0, #14
 8003a2a:	f001 ff6e 	bl	800590a <HAL_NVIC_EnableIRQ>
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b00b      	add	sp, #44	; 0x2c
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	40013800 	.word	0x40013800
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40005000 	.word	0x40005000
 8003a44:	50000400 	.word	0x50000400

08003a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <NMI_Handler+0x4>

08003a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a52:	e7fe      	b.n	8003a52 <HardFault_Handler+0x4>

08003a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a6c:	f001 fae0 	bl	8005030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <DMA1_Channel1_IRQHandler+0x14>)
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f002 f8c5 	bl	8005c0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	20000344 	.word	0x20000344

08003a90 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <USART4_5_IRQHandler+0x14>)
 8003a96:	0018      	movs	r0, r3
 8003a98:	f004 fe0e 	bl	80086b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	200001a0 	.word	0x200001a0

08003aa8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <TIM6_IRQHandler+0x1c>)
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f004 f884 	bl	8007bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  timer_1s_count++;
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <TIM6_IRQHandler+0x20>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <TIM6_IRQHandler+0x20>)
 8003abc:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM6_IRQn 1 */
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200002c4 	.word	0x200002c4
 8003ac8:	200000a0 	.word	0x200000a0

08003acc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <TIM7_IRQHandler+0x1c>)
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f004 f872 	bl	8007bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  timer_1ms_count++;
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <TIM7_IRQHandler+0x20>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	4b03      	ldr	r3, [pc, #12]	; (8003aec <TIM7_IRQHandler+0x20>)
 8003ae0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200003e8 	.word	0x200003e8
 8003aec:	200000a4 	.word	0x200000a4

08003af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <USART1_IRQHandler+0x14>)
 8003af6:	0018      	movs	r0, r3
 8003af8:	f004 fdde 	bl	80086b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	20000240 	.word	0x20000240

08003b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <_sbrk+0x5c>)
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <_sbrk+0x60>)
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <_sbrk+0x64>)
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <_sbrk+0x68>)
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <_sbrk+0x64>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d207      	bcs.n	8003b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b38:	f005 fc80 	bl	800943c <__errno>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	220c      	movs	r2, #12
 8003b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	425b      	negs	r3, r3
 8003b46:	e009      	b.n	8003b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <_sbrk+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <_sbrk+0x64>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	18d2      	adds	r2, r2, r3
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <_sbrk+0x64>)
 8003b58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b006      	add	sp, #24
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20005000 	.word	0x20005000
 8003b68:	00000400 	.word	0x00000400
 8003b6c:	20000090 	.word	0x20000090
 8003b70:	20000478 	.word	0x20000478

08003b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b80:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b84:	480d      	ldr	r0, [pc, #52]	; (8003bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8003b86:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b88:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <LoopForever+0xe>)
  movs r3, #0
 8003b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b8c:	e002      	b.n	8003b94 <LoopCopyDataInit>

08003b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b92:	3304      	adds	r3, #4

08003b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b98:	d3f9      	bcc.n	8003b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9a:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b9c:	4c0b      	ldr	r4, [pc, #44]	; (8003bcc <LoopForever+0x16>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba0:	e001      	b.n	8003ba6 <LoopFillZerobss>

08003ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba4:	3204      	adds	r2, #4

08003ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba8:	d3fb      	bcc.n	8003ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003baa:	f7ff ffe3 	bl	8003b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bae:	f005 fc4b 	bl	8009448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bb2:	f7ff f909 	bl	8002dc8 <main>

08003bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8003bb6:	e7fe      	b.n	8003bb6 <LoopForever>
   ldr   r0, =_estack
 8003bb8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bc0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003bc4:	0800a230 	.word	0x0800a230
  ldr r2, =_sbss
 8003bc8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003bcc:	20000478 	.word	0x20000478

08003bd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd0:	e7fe      	b.n	8003bd0 <ADC1_COMP_IRQHandler>
	...

08003bd4 <driver_charger_status>:
#include "stm32l0xx_hal_gpio.h"
#include "charger_status.h"

uint8_t value_return = 0;
uint8_t driver_charger_status(void)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t STAT1 = 0;
 8003bda:	1dfb      	adds	r3, r7, #7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
	uint8_t STAT2 = 0;
 8003be0:	1dbb      	adds	r3, r7, #6
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]

	STAT1 = HAL_GPIO_ReadPin(CHARGE_STAT1_GPIO_Port, CHARGE_STAT1_Pin);
 8003be6:	1dfc      	adds	r4, r7, #7
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <driver_charger_status+0x5c>)
 8003bea:	2120      	movs	r1, #32
 8003bec:	0018      	movs	r0, r3
 8003bee:	f002 fa69 	bl	80060c4 <HAL_GPIO_ReadPin>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	7023      	strb	r3, [r4, #0]
	STAT1 = HAL_GPIO_ReadPin(CHARGE_STAT2_GPIO_Port, CHARGE_STAT2_Pin);
 8003bf6:	1dfc      	adds	r4, r7, #7
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	23a0      	movs	r3, #160	; 0xa0
 8003bfe:	05db      	lsls	r3, r3, #23
 8003c00:	0011      	movs	r1, r2
 8003c02:	0018      	movs	r0, r3
 8003c04:	f002 fa5e 	bl	80060c4 <HAL_GPIO_ReadPin>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	7023      	strb	r3, [r4, #0]
	value_return = ((STAT1 << 1) | STAT2 );
 8003c0c:	1dfb      	adds	r3, r7, #7
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	b25a      	sxtb	r2, r3
 8003c14:	1dbb      	adds	r3, r7, #6
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b25b      	sxtb	r3, r3
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	b25b      	sxtb	r3, r3
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <driver_charger_status+0x60>)
 8003c22:	701a      	strb	r2, [r3, #0]
	return value_return;
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <driver_charger_status+0x60>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b003      	add	sp, #12
 8003c2e:	bd90      	pop	{r4, r7, pc}
 8003c30:	50000400 	.word	0x50000400
 8003c34:	20000094 	.word	0x20000094

08003c38 <User_Power_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Power_On(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWER_CTRL_GPIO_Port, POWER_CTRL_Pin, GPIO_PIN_SET);
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <User_Power_On+0x18>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	0019      	movs	r1, r3
 8003c46:	f002 fa5a 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	50000400 	.word	0x50000400

08003c54 <User_Power_Off>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Power_Off(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWER_CTRL_GPIO_Port, POWER_CTRL_Pin, GPIO_PIN_RESET);
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4803      	ldr	r0, [pc, #12]	; (8003c6c <User_Power_Off+0x18>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	0019      	movs	r1, r3
 8003c62:	f002 fa4c 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	50000400 	.word	0x50000400

08003c70 <User_Heating_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Heating_On(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HEATING_CTRL_GPIO_Port, HEATING_CTRL_Pin, GPIO_PIN_SET);
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4803      	ldr	r0, [pc, #12]	; (8003c88 <User_Heating_On+0x18>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	f002 fa3e 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	50000400 	.word	0x50000400

08003c8c <User_Heating_Off>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Heating_Off(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HEATING_CTRL_GPIO_Port, HEATING_CTRL_Pin, GPIO_PIN_RESET);
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4803      	ldr	r0, [pc, #12]	; (8003ca4 <User_Heating_Off+0x18>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	0019      	movs	r1, r3
 8003c9a:	f002 fa30 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	50000400 	.word	0x50000400

08003ca8 <User_Fan_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Fan_On(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_CTRL_GPIO_Port, FAN_CTRL_Pin, GPIO_PIN_SET);
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	015b      	lsls	r3, r3, #5
 8003cb0:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <User_Fan_On+0x18>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	f002 fa22 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	50000400 	.word	0x50000400

08003cc4 <User_Fan_Off>:

void User_Fan_Off(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_CTRL_GPIO_Port, FAN_CTRL_Pin, GPIO_PIN_RESET);
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	015b      	lsls	r3, r3, #5
 8003ccc:	4803      	ldr	r0, [pc, #12]	; (8003cdc <User_Fan_Off+0x18>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	f002 fa14 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	50000400 	.word	0x50000400

08003ce0 <User_Led_Green_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Led_Green_On(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <User_Led_Green_On+0x18>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2101      	movs	r1, #1
 8003cea:	0018      	movs	r0, r3
 8003cec:	f002 fa07 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	50001c00 	.word	0x50001c00

08003cfc <User_Led_Green_Off>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Led_Green_Off(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <User_Led_Green_Off+0x18>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	2101      	movs	r1, #1
 8003d06:	0018      	movs	r0, r3
 8003d08:	f002 f9f9 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	50001c00 	.word	0x50001c00

08003d18 <User_Led_Red_Off>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Led_Red_Off(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	019b      	lsls	r3, r3, #6
 8003d20:	4803      	ldr	r0, [pc, #12]	; (8003d30 <User_Led_Red_Off+0x18>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	0019      	movs	r1, r3
 8003d26:	f002 f9ea 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	50000800 	.word	0x50000800

08003d34 <User_Led_Blue_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Led_Blue_On(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <User_Led_Blue_On+0x18>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f002 f9dd 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	50001c00 	.word	0x50001c00

08003d50 <User_Led_Blue_Off>:

void User_Led_Blue_Off(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <User_Led_Blue_Off+0x18>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	2102      	movs	r1, #2
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f002 f9cf 	bl	80060fe <HAL_GPIO_WritePin>
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	50001c00 	.word	0x50001c00

08003d6c <lora_com_init>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void lora_com_init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
//	user_lora_uart_init(); // for lora communication init
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <lora_com_send_interval>:

void lora_com_send_interval(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
	switch (step_lora_send) {
 8003d7c:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <lora_com_send_interval+0x48>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <lora_com_send_interval+0x12>
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d009      	beq.n	8003d9c <lora_com_send_interval+0x24>
				step_lora_send = 0;
				device_send_report();
			}
			break;
		default:
			break;
 8003d88:	e017      	b.n	8003dba <lora_com_send_interval+0x42>
			previous_tick_send = user_timer_1ms_get_tick();
 8003d8a:	f000 f95b 	bl	8004044 <user_timer_1ms_get_tick>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <lora_com_send_interval+0x4c>)
 8003d92:	601a      	str	r2, [r3, #0]
			step_lora_send = 1;
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <lora_com_send_interval+0x48>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
			break;
 8003d9a:	e00e      	b.n	8003dba <lora_com_send_interval+0x42>
			if( user_timer_1ms_get_tick() - previous_tick_send > (60*60*60)) // 60 minutes
 8003d9c:	f000 f952 	bl	8004044 <user_timer_1ms_get_tick>
 8003da0:	0002      	movs	r2, r0
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <lora_com_send_interval+0x4c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <lora_com_send_interval+0x50>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d904      	bls.n	8003db8 <lora_com_send_interval+0x40>
				step_lora_send = 0;
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <lora_com_send_interval+0x48>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
				device_send_report();
 8003db4:	f000 f80a 	bl	8003dcc <device_send_report>
			break;
 8003db8:	46c0      	nop			; (mov r8, r8)
	}

}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	2000009c 	.word	0x2000009c
 8003dc4:	20000098 	.word	0x20000098
 8003dc8:	00034bc0 	.word	0x00034bc0

08003dcc <device_send_report>:
/***********************************************************************************************************************
* Static Functions
***********************************************************************************************************************/

static void device_send_report(void)
{
 8003dcc:	b5b0      	push	{r4, r5, r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
	// message will send battery (volt), knock, oild pressuare, rpm
	uint8_t tmp_data[MESSAGE_LENGTH];
	uint16_t temp;
	temp = (device_state.temperature_pcb / 10)*10;
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <device_send_report+0x80>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	491e      	ldr	r1, [pc, #120]	; (8003e50 <device_send_report+0x84>)
 8003dd8:	1c18      	adds	r0, r3, #0
 8003dda:	f7fc fd2d 	bl	8000838 <__aeabi_fdiv>
 8003dde:	1c03      	adds	r3, r0, #0
 8003de0:	491b      	ldr	r1, [pc, #108]	; (8003e50 <device_send_report+0x84>)
 8003de2:	1c18      	adds	r0, r3, #0
 8003de4:	f7fc fef2 	bl	8000bcc <__aeabi_fmul>
 8003de8:	1c03      	adds	r3, r0, #0
 8003dea:	250e      	movs	r5, #14
 8003dec:	197c      	adds	r4, r7, r5
 8003dee:	1c18      	adds	r0, r3, #0
 8003df0:	f7fc faa2 	bl	8000338 <__aeabi_f2uiz>
 8003df4:	0003      	movs	r3, r0
 8003df6:	8023      	strh	r3, [r4, #0]
	tmp_data[0] = 0x00; // command id
 8003df8:	1d3b      	adds	r3, r7, #4
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
	tmp_data[1] = device_state.dc_volt.dc_1_in_volt >> 8;
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <device_send_report+0x80>)
 8003e00:	889b      	ldrh	r3, [r3, #4]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	705a      	strb	r2, [r3, #1]
	tmp_data[2] = device_state.dc_volt.dc_1_in_volt & 0x00FF;
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <device_send_report+0x80>)
 8003e0e:	889b      	ldrh	r3, [r3, #4]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	709a      	strb	r2, [r3, #2]

	tmp_data[3] = temp;
 8003e16:	197b      	adds	r3, r7, r5
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	1d3b      	adds	r3, r7, #4
 8003e1e:	70da      	strb	r2, [r3, #3]

	tmp_data[4] = device_state.switching_state.power;
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <device_send_report+0x80>)
 8003e22:	7c5a      	ldrb	r2, [r3, #17]
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	711a      	strb	r2, [r3, #4]
	tmp_data[5] = device_state.switching_state.heating;
 8003e28:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <device_send_report+0x80>)
 8003e2a:	7c9a      	ldrb	r2, [r3, #18]
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	715a      	strb	r2, [r3, #5]
	tmp_data[6] = device_state.switching_state.fan;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <device_send_report+0x80>)
 8003e32:	7cda      	ldrb	r2, [r3, #19]
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	719a      	strb	r2, [r3, #6]

	lora_packet_message(tmp_data, MESSAGE_LENGTH);
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	2107      	movs	r1, #7
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f000 f809 	bl	8003e54 <lora_packet_message>

}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b004      	add	sp, #16
 8003e48:	bdb0      	pop	{r4, r5, r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	20000224 	.word	0x20000224
 8003e50:	41200000 	.word	0x41200000

08003e54 <lora_packet_message>:

static bool lora_packet_message(uint8_t *buf, uint8_t buf_len)
{
 8003e54:	b5b0      	push	{r4, r5, r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	000a      	movs	r2, r1
 8003e5e:	1cfb      	adds	r3, r7, #3
 8003e60:	701a      	strb	r2, [r3, #0]
	bool status = false;
 8003e62:	2314      	movs	r3, #20
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
    uint8_t tmp_cksa = 0;
 8003e6a:	2117      	movs	r1, #23
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]
    uint8_t tmp_cksb = 0;
 8003e72:	2416      	movs	r4, #22
 8003e74:	193b      	adds	r3, r7, r4
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 8003e7a:	2515      	movs	r5, #21
 8003e7c:	197b      	adds	r3, r7, r5
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
    uint8_t sum_data[MESSAGE_LENGTH + 5];

    sum_data[0] = HEADER_01;
 8003e82:	2008      	movs	r0, #8
 8003e84:	183b      	adds	r3, r7, r0
 8003e86:	22aa      	movs	r2, #170	; 0xaa
 8003e88:	701a      	strb	r2, [r3, #0]
    sum_data[1] = HEADER_02;
 8003e8a:	183b      	adds	r3, r7, r0
 8003e8c:	2255      	movs	r2, #85	; 0x55
 8003e8e:	705a      	strb	r2, [r3, #1]
    sum_data[2] = buf_len;
 8003e90:	183b      	adds	r3, r7, r0
 8003e92:	1cfa      	adds	r2, r7, #3
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	709a      	strb	r2, [r3, #2]

    tmp_cksa += buf_len;
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	0008      	movs	r0, r1
 8003e9c:	1879      	adds	r1, r7, r1
 8003e9e:	1cfa      	adds	r2, r7, #3
 8003ea0:	7809      	ldrb	r1, [r1, #0]
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	188a      	adds	r2, r1, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
    tmp_cksb += tmp_cksa;
 8003ea8:	193b      	adds	r3, r7, r4
 8003eaa:	1939      	adds	r1, r7, r4
 8003eac:	183a      	adds	r2, r7, r0
 8003eae:	7809      	ldrb	r1, [r1, #0]
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	188a      	adds	r2, r1, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < buf_len; i++)
 8003eb6:	197b      	adds	r3, r7, r5
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e023      	b.n	8003f06 <lora_packet_message+0xb2>
    {
        sum_data[3 + i] = buf[i];
 8003ebe:	2015      	movs	r0, #21
 8003ec0:	183b      	adds	r3, r7, r0
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	18d2      	adds	r2, r2, r3
 8003ec8:	183b      	adds	r3, r7, r0
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	3303      	adds	r3, #3
 8003ece:	7811      	ldrb	r1, [r2, #0]
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	18ba      	adds	r2, r7, r2
 8003ed4:	54d1      	strb	r1, [r2, r3]
        tmp_cksa += buf[i];
 8003ed6:	183b      	adds	r3, r7, r0
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	7819      	ldrb	r1, [r3, #0]
 8003ee0:	2417      	movs	r4, #23
 8003ee2:	193b      	adds	r3, r7, r4
 8003ee4:	193a      	adds	r2, r7, r4
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	188a      	adds	r2, r1, r2
 8003eea:	701a      	strb	r2, [r3, #0]
        tmp_cksb += tmp_cksa;
 8003eec:	2216      	movs	r2, #22
 8003eee:	18bb      	adds	r3, r7, r2
 8003ef0:	18b9      	adds	r1, r7, r2
 8003ef2:	193a      	adds	r2, r7, r4
 8003ef4:	7809      	ldrb	r1, [r1, #0]
 8003ef6:	7812      	ldrb	r2, [r2, #0]
 8003ef8:	188a      	adds	r2, r1, r2
 8003efa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < buf_len; i++)
 8003efc:	183b      	adds	r3, r7, r0
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	183b      	adds	r3, r7, r0
 8003f02:	3201      	adds	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	2015      	movs	r0, #21
 8003f08:	183a      	adds	r2, r7, r0
 8003f0a:	1cfb      	adds	r3, r7, #3
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d3d4      	bcc.n	8003ebe <lora_packet_message+0x6a>
    }

    sum_data[3 + i] = tmp_cksa;
 8003f14:	183b      	adds	r3, r7, r0
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	3303      	adds	r3, #3
 8003f1a:	2408      	movs	r4, #8
 8003f1c:	193a      	adds	r2, r7, r4
 8003f1e:	2117      	movs	r1, #23
 8003f20:	1879      	adds	r1, r7, r1
 8003f22:	7809      	ldrb	r1, [r1, #0]
 8003f24:	54d1      	strb	r1, [r2, r3]
    sum_data[4 + i] = tmp_cksb;
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	193a      	adds	r2, r7, r4
 8003f2e:	2116      	movs	r1, #22
 8003f30:	1879      	adds	r1, r7, r1
 8003f32:	7809      	ldrb	r1, [r1, #0]
 8003f34:	54d1      	strb	r1, [r2, r3]

    user_lora_trasmit(sum_data, buf_len + 5);
 8003f36:	1cfb      	adds	r3, r7, #3
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	1d5a      	adds	r2, r3, #5
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	0011      	movs	r1, r2
 8003f40:	0018      	movs	r0, r3
 8003f42:	f000 f889 	bl	8004058 <user_lora_trasmit>
	return status;
 8003f46:	2314      	movs	r3, #20
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b006      	add	sp, #24
 8003f52:	bdb0      	pop	{r4, r5, r7, pc}

08003f54 <adc_init>:
/***********************************************************************************************************************
* public Functions
***********************************************************************************************************************/

void adc_init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_IT(&hadc);
	adc_start_process();
 8003f58:	f000 f834 	bl	8003fc4 <adc_start_process>
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_ADC_ConvCpltCallback>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
    uint16_t i = 0, j = 0;
 8003f6c:	2312      	movs	r3, #18
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	2200      	movs	r2, #0
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	2310      	movs	r3, #16
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	2200      	movs	r2, #0
 8003f7a:	801a      	strh	r2, [r3, #0]
    uint32_t sumTmp = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
    HAL_TIM_Base_Stop(&TIMER_TRIGGER);
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_ADC_ConvCpltCallback+0x54>)
 8003f82:	0018      	movs	r0, r3
 8003f84:	f003 fd6a 	bl	8007a5c <HAL_TIM_Base_Stop>
//        {
//            sumTmp += adc_buffer_sample[i * ADC_CHANNEL_COUNT + j]; // 0 3 6 9 12
//        }
//        adc_value[j] = sumTmp / ADC_SAMPLE_COUNT;
//    }
    for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e00b      	b.n	8003fa6 <HAL_ADC_ConvCpltCallback+0x42>
    {
    	adc_value[i] = adc_buffer_sample[i];
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_ADC_ConvCpltCallback+0x58>)
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	0052      	lsls	r2, r2, #1
 8003f94:	5ad3      	ldrh	r3, [r2, r3]
 8003f96:	b299      	uxth	r1, r3
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	52d1      	strh	r1, [r2, r3]
    for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	ddf0      	ble.n	8003f8e <HAL_ADC_ConvCpltCallback+0x2a>
	}
//    HAL_TIM_Base_Start(&TIMER_TRIGGER);
    adc_start_process();
 8003fac:	f000 f80a 	bl	8003fc4 <adc_start_process>
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b006      	add	sp, #24
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000160 	.word	0x20000160
 8003fbc:	20000434 	.word	0x20000434
 8003fc0:	20000428 	.word	0x20000428

08003fc4 <adc_start_process>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void adc_start_process(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_buffer_sample, ADC_CHANNEL_COUNT * ADC_SAMPLE_COUNT);
 8003fc8:	4906      	ldr	r1, [pc, #24]	; (8003fe4 <adc_start_process+0x20>)
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <adc_start_process+0x24>)
 8003fcc:	2214      	movs	r2, #20
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f001 f9be 	bl	8005350 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&TIMER_TRIGGER);
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <adc_start_process+0x28>)
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f003 fcf6 	bl	80079c8 <HAL_TIM_Base_Start>
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	20000434 	.word	0x20000434
 8003fe8:	2000038c 	.word	0x2000038c
 8003fec:	20000160 	.word	0x20000160

08003ff0 <adc_get_sample>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
uint16_t* adc_get_sample(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
    return (uint16_t*)adc_value;
 8003ff4:	4b01      	ldr	r3, [pc, #4]	; (8003ffc <adc_get_sample+0xc>)
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000428 	.word	0x20000428

08004000 <user_timer_1s_start>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void user_timer_1s_start(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <user_timer_1s_start+0x14>)
 8004006:	0018      	movs	r0, r3
 8004008:	f003 fd46 	bl	8007a98 <HAL_TIM_Base_Start_IT>
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	200002c4 	.word	0x200002c4

08004018 <user_timer_1s_get_tick>:

uint32_t user_timer_1s_get_tick(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	return timer_1s_count;
 800401c:	4b02      	ldr	r3, [pc, #8]	; (8004028 <user_timer_1s_get_tick+0x10>)
 800401e:	681b      	ldr	r3, [r3, #0]
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	200000a0 	.word	0x200000a0

0800402c <user_timer_1ms_start>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void user_timer_1ms_start(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim7);
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <user_timer_1ms_start+0x14>)
 8004032:	0018      	movs	r0, r3
 8004034:	f003 fd30 	bl	8007a98 <HAL_TIM_Base_Start_IT>
}
 8004038:	46c0      	nop			; (mov r8, r8)
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	200003e8 	.word	0x200003e8

08004044 <user_timer_1ms_get_tick>:

uint32_t user_timer_1ms_get_tick(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
	return timer_1ms_count;
 8004048:	4b02      	ldr	r3, [pc, #8]	; (8004054 <user_timer_1ms_get_tick+0x10>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	200000a4 	.word	0x200000a4

08004058 <user_lora_trasmit>:
{
	HAL_UART_DeInit(&UART_COM);
}

bool  user_lora_trasmit(uint8_t *buffer, uint16_t Size)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	000a      	movs	r2, r1
 8004062:	1cbb      	adds	r3, r7, #2
 8004064:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_UART_Transmit(&UART_COM, (uint8_t *)buffer, Size, 100);
 8004066:	230f      	movs	r3, #15
 8004068:	18fc      	adds	r4, r7, r3
 800406a:	1cbb      	adds	r3, r7, #2
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4805      	ldr	r0, [pc, #20]	; (8004088 <user_lora_trasmit+0x30>)
 8004072:	2364      	movs	r3, #100	; 0x64
 8004074:	f004 fa78 	bl	8008568 <HAL_UART_Transmit>
 8004078:	0003      	movs	r3, r0
 800407a:	7023      	strb	r3, [r4, #0]

	return (status ? HAL_OK : 1, 0);
 800407c:	2300      	movs	r3, #0
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b005      	add	sp, #20
 8004084:	bd90      	pop	{r4, r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000240 	.word	0x20000240

0800408c <roatary_time_get_value>:
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
uint32_t time_test = 0;
void roatary_time_get_value(void) // call in loop
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b087      	sub	sp, #28
 8004090:	af04      	add	r7, sp, #16
	uint8_t time_rotary_1_location = 0;
 8004092:	1dfb      	adds	r3, r7, #7
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
	uint8_t time_rotary_2_location = 0;
 8004098:	1dbb      	adds	r3, r7, #6
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
	if (user_timer_1s_get_tick() - time_test > 2)
 800409e:	f7ff ffbb 	bl	8004018 <user_timer_1s_get_tick>
 80040a2:	0002      	movs	r2, r0
 80040a4:	4b95      	ldr	r3, [pc, #596]	; (80042fc <roatary_time_get_value+0x270>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d904      	bls.n	80040b8 <roatary_time_get_value+0x2c>
	{
		time_test = user_timer_1s_get_tick();
 80040ae:	f7ff ffb3 	bl	8004018 <user_timer_1s_get_tick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	4b91      	ldr	r3, [pc, #580]	; (80042fc <roatary_time_get_value+0x270>)
 80040b6:	601a      	str	r2, [r3, #0]
//											   ROTARY2_P3_GPIO_Port, ROTARY2_P3_Pin,
//											   ROTARY2_P2_GPIO_Port, ROTARY2_P1_Pin);
//		APP_LOGD("time_rotary_1_location = %d", time_rotary_1_location);
//		APP_LOGD("time_rotary_2_location = %d", time_rotary_2_location);
	}
	time_rotary_1_location = rotary_detect(ROTARY1_P4_GPIO_Port, ROTARY1_P4_Pin,
 80040b8:	1dfc      	adds	r4, r7, #7
 80040ba:	23a0      	movs	r3, #160	; 0xa0
 80040bc:	05da      	lsls	r2, r3, #23
 80040be:	4890      	ldr	r0, [pc, #576]	; (8004300 <roatary_time_get_value+0x274>)
 80040c0:	2320      	movs	r3, #32
 80040c2:	9303      	str	r3, [sp, #12]
 80040c4:	23a0      	movs	r3, #160	; 0xa0
 80040c6:	05db      	lsls	r3, r3, #23
 80040c8:	9302      	str	r3, [sp, #8]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	23a0      	movs	r3, #160	; 0xa0
 80040d0:	05db      	lsls	r3, r3, #23
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	2101      	movs	r1, #1
 80040d8:	f000 f934 	bl	8004344 <rotary_detect>
 80040dc:	0003      	movs	r3, r0
 80040de:	7023      	strb	r3, [r4, #0]
										   ROTARY1_P2_GPIO_Port, ROTARY1_P2_Pin,
										   ROTARY1_P3_GPIO_Port, ROTARY1_P3_Pin,
										   ROTARY1_P1_GPIO_Port, ROTARY1_P1_Pin);

	time_rotary_2_location = rotary_detect(ROTARY2_P4_GPIO_Port, ROTARY2_P4_Pin,
 80040e0:	1dbc      	adds	r4, r7, #6
 80040e2:	4a87      	ldr	r2, [pc, #540]	; (8004300 <roatary_time_get_value+0x274>)
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	0119      	lsls	r1, r3, #4
 80040e8:	4885      	ldr	r0, [pc, #532]	; (8004300 <roatary_time_get_value+0x274>)
 80040ea:	2302      	movs	r3, #2
 80040ec:	9303      	str	r3, [sp, #12]
 80040ee:	4b84      	ldr	r3, [pc, #528]	; (8004300 <roatary_time_get_value+0x274>)
 80040f0:	9302      	str	r3, [sp, #8]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	4b81      	ldr	r3, [pc, #516]	; (8004300 <roatary_time_get_value+0x274>)
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2304      	movs	r3, #4
 80040fe:	f000 f921 	bl	8004344 <rotary_detect>
 8004102:	0003      	movs	r3, r0
 8004104:	7023      	strb	r3, [r4, #0]
										   ROTARY2_P2_GPIO_Port, ROTARY2_P2_Pin,
										   ROTARY2_P3_GPIO_Port, ROTARY2_P3_Pin,
										   ROTARY2_P2_GPIO_Port, ROTARY2_P1_Pin);
	// check rotary location change will update time after 2s
	if ((time_rotary_1_location != time_rotary_1_old_location) |
 8004106:	4b7f      	ldr	r3, [pc, #508]	; (8004304 <roatary_time_get_value+0x278>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	1dfa      	adds	r2, r7, #7
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	1e5a      	subs	r2, r3, #1
 8004112:	4193      	sbcs	r3, r2
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4b7c      	ldr	r3, [pc, #496]	; (8004308 <roatary_time_get_value+0x27c>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	1db9      	adds	r1, r7, #6
 800411c:	7809      	ldrb	r1, [r1, #0]
 800411e:	1acb      	subs	r3, r1, r3
 8004120:	1e59      	subs	r1, r3, #1
 8004122:	418b      	sbcs	r3, r1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	4313      	orrs	r3, r2
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d02e      	beq.n	800418c <roatary_time_get_value+0x100>
		(time_rotary_2_location != time_rotary_2_old_location))
	{
		time_rotary_1_old_location = time_rotary_1_location;
 800412e:	4b75      	ldr	r3, [pc, #468]	; (8004304 <roatary_time_get_value+0x278>)
 8004130:	1dfa      	adds	r2, r7, #7
 8004132:	7812      	ldrb	r2, [r2, #0]
 8004134:	701a      	strb	r2, [r3, #0]
		time_rotary_2_old_location = time_rotary_2_location;
 8004136:	4b74      	ldr	r3, [pc, #464]	; (8004308 <roatary_time_get_value+0x27c>)
 8004138:	1dba      	adds	r2, r7, #6
 800413a:	7812      	ldrb	r2, [r2, #0]
 800413c:	701a      	strb	r2, [r3, #0]
		rotary_state_update = 1;
 800413e:	4b73      	ldr	r3, [pc, #460]	; (800430c <roatary_time_get_value+0x280>)
 8004140:	2201      	movs	r2, #1
 8004142:	701a      	strb	r2, [r3, #0]
		APP_LOGD("rotary 1  = %d", time_rotary_1_old_location);
 8004144:	4a72      	ldr	r2, [pc, #456]	; (8004310 <roatary_time_get_value+0x284>)
 8004146:	4973      	ldr	r1, [pc, #460]	; (8004314 <roatary_time_get_value+0x288>)
 8004148:	4873      	ldr	r0, [pc, #460]	; (8004318 <roatary_time_get_value+0x28c>)
 800414a:	235d      	movs	r3, #93	; 0x5d
 800414c:	f000 f990 	bl	8004470 <uart_debug_printf>
 8004150:	4b6c      	ldr	r3, [pc, #432]	; (8004304 <roatary_time_get_value+0x278>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	001a      	movs	r2, r3
 8004156:	4b71      	ldr	r3, [pc, #452]	; (800431c <roatary_time_get_value+0x290>)
 8004158:	0011      	movs	r1, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f000 f988 	bl	8004470 <uart_debug_printf>
 8004160:	4b6f      	ldr	r3, [pc, #444]	; (8004320 <roatary_time_get_value+0x294>)
 8004162:	0018      	movs	r0, r3
 8004164:	f000 f984 	bl	8004470 <uart_debug_printf>
		APP_LOGD("rotary 2  = %d", time_rotary_2_old_location);
 8004168:	4a69      	ldr	r2, [pc, #420]	; (8004310 <roatary_time_get_value+0x284>)
 800416a:	496a      	ldr	r1, [pc, #424]	; (8004314 <roatary_time_get_value+0x288>)
 800416c:	486a      	ldr	r0, [pc, #424]	; (8004318 <roatary_time_get_value+0x28c>)
 800416e:	235e      	movs	r3, #94	; 0x5e
 8004170:	f000 f97e 	bl	8004470 <uart_debug_printf>
 8004174:	4b64      	ldr	r3, [pc, #400]	; (8004308 <roatary_time_get_value+0x27c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	001a      	movs	r2, r3
 800417a:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <roatary_time_get_value+0x298>)
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f000 f976 	bl	8004470 <uart_debug_printf>
 8004184:	4b66      	ldr	r3, [pc, #408]	; (8004320 <roatary_time_get_value+0x294>)
 8004186:	0018      	movs	r0, r3
 8004188:	f000 f972 	bl	8004470 <uart_debug_printf>
	}
	switch (rotary_state_update)
 800418c:	4b5f      	ldr	r3, [pc, #380]	; (800430c <roatary_time_get_value+0x280>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d00e      	beq.n	80041b2 <roatary_time_get_value+0x126>
 8004194:	dc2c      	bgt.n	80041f0 <roatary_time_get_value+0x164>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d02c      	beq.n	80041f4 <roatary_time_get_value+0x168>
 800419a:	2b01      	cmp	r3, #1
 800419c:	d000      	beq.n	80041a0 <roatary_time_get_value+0x114>
			rotary_state_update = 0;
			APP_LOGD("update new value rotary done");
		}
		break;
	default:
		break;
 800419e:	e027      	b.n	80041f0 <roatary_time_get_value+0x164>
		rotary_time_update = user_timer_1ms_get_tick();
 80041a0:	f7ff ff50 	bl	8004044 <user_timer_1ms_get_tick>
 80041a4:	0002      	movs	r2, r0
 80041a6:	4b60      	ldr	r3, [pc, #384]	; (8004328 <roatary_time_get_value+0x29c>)
 80041a8:	601a      	str	r2, [r3, #0]
		rotary_state_update = 2;
 80041aa:	4b58      	ldr	r3, [pc, #352]	; (800430c <roatary_time_get_value+0x280>)
 80041ac:	2202      	movs	r2, #2
 80041ae:	701a      	strb	r2, [r3, #0]
		break;
 80041b0:	e023      	b.n	80041fa <roatary_time_get_value+0x16e>
		if (user_timer_1ms_get_tick() - rotary_time_update > 2000) // update after 2s
 80041b2:	f7ff ff47 	bl	8004044 <user_timer_1ms_get_tick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <roatary_time_get_value+0x29c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1ad2      	subs	r2, r2, r3
 80041be:	23fa      	movs	r3, #250	; 0xfa
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d918      	bls.n	80041f8 <roatary_time_get_value+0x16c>
			timer_update_value = true;
 80041c6:	4b59      	ldr	r3, [pc, #356]	; (800432c <roatary_time_get_value+0x2a0>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
			rotary_state_update = 0;
 80041cc:	4b4f      	ldr	r3, [pc, #316]	; (800430c <roatary_time_get_value+0x280>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
			APP_LOGD("update new value rotary done");
 80041d2:	4a4f      	ldr	r2, [pc, #316]	; (8004310 <roatary_time_get_value+0x284>)
 80041d4:	494f      	ldr	r1, [pc, #316]	; (8004314 <roatary_time_get_value+0x288>)
 80041d6:	4850      	ldr	r0, [pc, #320]	; (8004318 <roatary_time_get_value+0x28c>)
 80041d8:	236e      	movs	r3, #110	; 0x6e
 80041da:	f000 f949 	bl	8004470 <uart_debug_printf>
 80041de:	4b54      	ldr	r3, [pc, #336]	; (8004330 <roatary_time_get_value+0x2a4>)
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 f945 	bl	8004470 <uart_debug_printf>
 80041e6:	4b4e      	ldr	r3, [pc, #312]	; (8004320 <roatary_time_get_value+0x294>)
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 f941 	bl	8004470 <uart_debug_printf>
		break;
 80041ee:	e003      	b.n	80041f8 <roatary_time_get_value+0x16c>
		break;
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	e002      	b.n	80041fa <roatary_time_get_value+0x16e>
		break;
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	e000      	b.n	80041fa <roatary_time_get_value+0x16e>
		break;
 80041f8:	46c0      	nop			; (mov r8, r8)
	}

	if (timer_update_value)
 80041fa:	4b4c      	ldr	r3, [pc, #304]	; (800432c <roatary_time_get_value+0x2a0>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d100      	bne.n	8004204 <roatary_time_get_value+0x178>
 8004202:	e077      	b.n	80042f4 <roatary_time_get_value+0x268>
	{
		timer_update_value = false; // clear update timer by rotary
 8004204:	4b49      	ldr	r3, [pc, #292]	; (800432c <roatary_time_get_value+0x2a0>)
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
		switch (time_rotary_1_location)
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b03      	cmp	r3, #3
 8004210:	d014      	beq.n	800423c <roatary_time_get_value+0x1b0>
 8004212:	dc18      	bgt.n	8004246 <roatary_time_get_value+0x1ba>
 8004214:	2b02      	cmp	r3, #2
 8004216:	d00d      	beq.n	8004234 <roatary_time_get_value+0x1a8>
 8004218:	dc15      	bgt.n	8004246 <roatary_time_get_value+0x1ba>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <roatary_time_get_value+0x198>
 800421e:	2b01      	cmp	r3, #1
 8004220:	d004      	beq.n	800422c <roatary_time_get_value+0x1a0>
 8004222:	e010      	b.n	8004246 <roatary_time_get_value+0x1ba>
		{
		case 0:
			device_state.time.time_duration = E_DURATION_TIME_1_MINUTES;
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <roatary_time_get_value+0x2a8>)
 8004226:	223c      	movs	r2, #60	; 0x3c
 8004228:	615a      	str	r2, [r3, #20]
			break;
 800422a:	e011      	b.n	8004250 <roatary_time_get_value+0x1c4>
		case 1:
			device_state.time.time_duration = E_DURATION_TIME_2_MINUTES;
 800422c:	4b41      	ldr	r3, [pc, #260]	; (8004334 <roatary_time_get_value+0x2a8>)
 800422e:	2278      	movs	r2, #120	; 0x78
 8004230:	615a      	str	r2, [r3, #20]
			break;
 8004232:	e00d      	b.n	8004250 <roatary_time_get_value+0x1c4>
		case 2:
			device_state.time.time_duration = E_DURATION_TIME_4_MINUTES;
 8004234:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <roatary_time_get_value+0x2a8>)
 8004236:	22f0      	movs	r2, #240	; 0xf0
 8004238:	615a      	str	r2, [r3, #20]
			break;
 800423a:	e009      	b.n	8004250 <roatary_time_get_value+0x1c4>
		case 3:
			device_state.time.time_duration = E_DURATION_TIME_5_MINUTES;
 800423c:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <roatary_time_get_value+0x2a8>)
 800423e:	2296      	movs	r2, #150	; 0x96
 8004240:	0052      	lsls	r2, r2, #1
 8004242:	615a      	str	r2, [r3, #20]
			break;
 8004244:	e004      	b.n	8004250 <roatary_time_get_value+0x1c4>
		default:
			device_state.time.time_duration = E_DURATION_TIME_5_MINUTES;
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <roatary_time_get_value+0x2a8>)
 8004248:	2296      	movs	r2, #150	; 0x96
 800424a:	0052      	lsls	r2, r2, #1
 800424c:	615a      	str	r2, [r3, #20]
			break;
 800424e:	46c0      	nop			; (mov r8, r8)
		}

		switch (time_rotary_2_location)
 8004250:	1dbb      	adds	r3, r7, #6
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b06      	cmp	r3, #6
 8004256:	d826      	bhi.n	80042a6 <roatary_time_get_value+0x21a>
 8004258:	009a      	lsls	r2, r3, #2
 800425a:	4b37      	ldr	r3, [pc, #220]	; (8004338 <roatary_time_get_value+0x2ac>)
 800425c:	18d3      	adds	r3, r2, r3
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	469f      	mov	pc, r3
		{
		case 0:
			device_state.time.time_interval = E_INTERVAL_TIME_1_MINUTES;
 8004262:	4b34      	ldr	r3, [pc, #208]	; (8004334 <roatary_time_get_value+0x2a8>)
 8004264:	223c      	movs	r2, #60	; 0x3c
 8004266:	619a      	str	r2, [r3, #24]
			break;
 8004268:	e022      	b.n	80042b0 <roatary_time_get_value+0x224>
		case 1:
			device_state.time.time_interval = E_INTERVAL_TIME_5_MINUTES;
 800426a:	4b32      	ldr	r3, [pc, #200]	; (8004334 <roatary_time_get_value+0x2a8>)
 800426c:	2296      	movs	r2, #150	; 0x96
 800426e:	0052      	lsls	r2, r2, #1
 8004270:	619a      	str	r2, [r3, #24]
			break;
 8004272:	e01d      	b.n	80042b0 <roatary_time_get_value+0x224>
		case 2:
			device_state.time.time_interval = E_INTERVAL_TIME_10_MINUTES;
 8004274:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <roatary_time_get_value+0x2a8>)
 8004276:	2296      	movs	r2, #150	; 0x96
 8004278:	0092      	lsls	r2, r2, #2
 800427a:	619a      	str	r2, [r3, #24]
			break;
 800427c:	e018      	b.n	80042b0 <roatary_time_get_value+0x224>
		case 3:
			device_state.time.time_interval = E_INTERVAL_TIME_15_MINUTES;
 800427e:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <roatary_time_get_value+0x2a8>)
 8004280:	22e1      	movs	r2, #225	; 0xe1
 8004282:	0092      	lsls	r2, r2, #2
 8004284:	619a      	str	r2, [r3, #24]
			break;
 8004286:	e013      	b.n	80042b0 <roatary_time_get_value+0x224>
		case 4:
			device_state.time.time_interval = E_INTERVAL_TIME_20_MINUTES;
 8004288:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <roatary_time_get_value+0x2a8>)
 800428a:	2296      	movs	r2, #150	; 0x96
 800428c:	00d2      	lsls	r2, r2, #3
 800428e:	619a      	str	r2, [r3, #24]
			break;
 8004290:	e00e      	b.n	80042b0 <roatary_time_get_value+0x224>
		case 5:
			device_state.time.time_interval = E_INTERVAL_TIME_30_MINUTES;
 8004292:	4b28      	ldr	r3, [pc, #160]	; (8004334 <roatary_time_get_value+0x2a8>)
 8004294:	22e1      	movs	r2, #225	; 0xe1
 8004296:	00d2      	lsls	r2, r2, #3
 8004298:	619a      	str	r2, [r3, #24]
			break;
 800429a:	e009      	b.n	80042b0 <roatary_time_get_value+0x224>
		case 6:
			device_state.time.time_interval = E_INTERVAL_TIME_60_MINUTES;
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <roatary_time_get_value+0x2a8>)
 800429e:	22e1      	movs	r2, #225	; 0xe1
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	619a      	str	r2, [r3, #24]
			break;
 80042a4:	e004      	b.n	80042b0 <roatary_time_get_value+0x224>
		default:
			device_state.time.time_interval = E_INTERVAL_TIME_60_MINUTES;
 80042a6:	4b23      	ldr	r3, [pc, #140]	; (8004334 <roatary_time_get_value+0x2a8>)
 80042a8:	22e1      	movs	r2, #225	; 0xe1
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	619a      	str	r2, [r3, #24]
			break;
 80042ae:	46c0      	nop			; (mov r8, r8)
		}
		APP_LOGD("device_state.time.time_duration = %d ", device_state.time.time_duration);
 80042b0:	4a17      	ldr	r2, [pc, #92]	; (8004310 <roatary_time_get_value+0x284>)
 80042b2:	4918      	ldr	r1, [pc, #96]	; (8004314 <roatary_time_get_value+0x288>)
 80042b4:	4818      	ldr	r0, [pc, #96]	; (8004318 <roatary_time_get_value+0x28c>)
 80042b6:	23a6      	movs	r3, #166	; 0xa6
 80042b8:	f000 f8da 	bl	8004470 <uart_debug_printf>
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <roatary_time_get_value+0x2a8>)
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	4b1e      	ldr	r3, [pc, #120]	; (800433c <roatary_time_get_value+0x2b0>)
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 f8d3 	bl	8004470 <uart_debug_printf>
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <roatary_time_get_value+0x294>)
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 f8cf 	bl	8004470 <uart_debug_printf>
		APP_LOGD("device_state.time.time_interval = %d ", device_state.time.time_interval);
 80042d2:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <roatary_time_get_value+0x284>)
 80042d4:	490f      	ldr	r1, [pc, #60]	; (8004314 <roatary_time_get_value+0x288>)
 80042d6:	4810      	ldr	r0, [pc, #64]	; (8004318 <roatary_time_get_value+0x28c>)
 80042d8:	23a7      	movs	r3, #167	; 0xa7
 80042da:	f000 f8c9 	bl	8004470 <uart_debug_printf>
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <roatary_time_get_value+0x2a8>)
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	4b17      	ldr	r3, [pc, #92]	; (8004340 <roatary_time_get_value+0x2b4>)
 80042e4:	0011      	movs	r1, r2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 f8c2 	bl	8004470 <uart_debug_printf>
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <roatary_time_get_value+0x294>)
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 f8be 	bl	8004470 <uart_debug_printf>
	}
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b003      	add	sp, #12
 80042fa:	bd90      	pop	{r4, r7, pc}
 80042fc:	200000ac 	.word	0x200000ac
 8004300:	50000400 	.word	0x50000400
 8004304:	200000a8 	.word	0x200000a8
 8004308:	200000a9 	.word	0x200000a9
 800430c:	200000aa 	.word	0x200000aa
 8004310:	0800a114 	.word	0x0800a114
 8004314:	08009d80 	.word	0x08009d80
 8004318:	08009d84 	.word	0x08009d84
 800431c:	08009d94 	.word	0x08009d94
 8004320:	08009da4 	.word	0x08009da4
 8004324:	08009da8 	.word	0x08009da8
 8004328:	2000045c 	.word	0x2000045c
 800432c:	20000004 	.word	0x20000004
 8004330:	08009db8 	.word	0x08009db8
 8004334:	20000224 	.word	0x20000224
 8004338:	0800a0f8 	.word	0x0800a0f8
 800433c:	08009dd8 	.word	0x08009dd8
 8004340:	08009e00 	.word	0x08009e00

08004344 <rotary_detect>:
***********************************************************************************************************************/
static uint8_t rotary_detect(GPIO_TypeDef *r_port_1, uint16_t pin_1,
							 GPIO_TypeDef *r_port_2, uint16_t pin_2,
							 GPIO_TypeDef *r_port_4, uint16_t pin_4,
							 GPIO_TypeDef *r_port_8, uint16_t pin_8)
{
 8004344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	0008      	movs	r0, r1
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	0019      	movs	r1, r3
 8004352:	260a      	movs	r6, #10
 8004354:	19bb      	adds	r3, r7, r6
 8004356:	1c02      	adds	r2, r0, #0
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	2308      	movs	r3, #8
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	1c0a      	adds	r2, r1, #0
 8004360:	801a      	strh	r2, [r3, #0]
	uint8_t rotary_1;
	uint8_t rotary_2;
	uint8_t rotary_3;
	uint8_t rotary_4;
	uint8_t sum_rotary;
	rotary_4 = HAL_GPIO_ReadPin(r_port_1, pin_1);
 8004362:	2514      	movs	r5, #20
 8004364:	197c      	adds	r4, r7, r5
 8004366:	19bb      	adds	r3, r7, r6
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0011      	movs	r1, r2
 800436e:	0018      	movs	r0, r3
 8004370:	f001 fea8 	bl	80060c4 <HAL_GPIO_ReadPin>
 8004374:	0003      	movs	r3, r0
 8004376:	7023      	strb	r3, [r4, #0]
	if (rotary_4 == 0)
 8004378:	197b      	adds	r3, r7, r5
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d103      	bne.n	8004388 <rotary_detect+0x44>
		rotary_4 = 1;
 8004380:	197b      	adds	r3, r7, r5
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e003      	b.n	8004390 <rotary_detect+0x4c>
	else
		rotary_4 = 0;
 8004388:	2314      	movs	r3, #20
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
	rotary_3 = HAL_GPIO_ReadPin(r_port_2, pin_2);
 8004390:	2515      	movs	r5, #21
 8004392:	197c      	adds	r4, r7, r5
 8004394:	2308      	movs	r3, #8
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0011      	movs	r1, r2
 800439e:	0018      	movs	r0, r3
 80043a0:	f001 fe90 	bl	80060c4 <HAL_GPIO_ReadPin>
 80043a4:	0003      	movs	r3, r0
 80043a6:	7023      	strb	r3, [r4, #0]
	if (rotary_3 == 0)
 80043a8:	197b      	adds	r3, r7, r5
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <rotary_detect+0x74>
		rotary_3 = 1;
 80043b0:	197b      	adds	r3, r7, r5
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e003      	b.n	80043c0 <rotary_detect+0x7c>
	else
		rotary_3 = 0;
 80043b8:	2315      	movs	r3, #21
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
	rotary_2 = HAL_GPIO_ReadPin(r_port_4, pin_4);
 80043c0:	2516      	movs	r5, #22
 80043c2:	197c      	adds	r4, r7, r5
 80043c4:	232c      	movs	r3, #44	; 0x2c
 80043c6:	2208      	movs	r2, #8
 80043c8:	4694      	mov	ip, r2
 80043ca:	44bc      	add	ip, r7
 80043cc:	4463      	add	r3, ip
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	0011      	movs	r1, r2
 80043d4:	0018      	movs	r0, r3
 80043d6:	f001 fe75 	bl	80060c4 <HAL_GPIO_ReadPin>
 80043da:	0003      	movs	r3, r0
 80043dc:	7023      	strb	r3, [r4, #0]
	if (rotary_2 == 0)
 80043de:	197b      	adds	r3, r7, r5
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <rotary_detect+0xaa>
		rotary_2 = 1;
 80043e6:	197b      	adds	r3, r7, r5
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e003      	b.n	80043f6 <rotary_detect+0xb2>
	else
		rotary_2 = 0;
 80043ee:	2316      	movs	r3, #22
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
	rotary_1 = HAL_GPIO_ReadPin(r_port_8, pin_8);
 80043f6:	2517      	movs	r5, #23
 80043f8:	197c      	adds	r4, r7, r5
 80043fa:	2334      	movs	r3, #52	; 0x34
 80043fc:	2208      	movs	r2, #8
 80043fe:	4694      	mov	ip, r2
 8004400:	44bc      	add	ip, r7
 8004402:	4463      	add	r3, ip
 8004404:	881a      	ldrh	r2, [r3, #0]
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	0011      	movs	r1, r2
 800440a:	0018      	movs	r0, r3
 800440c:	f001 fe5a 	bl	80060c4 <HAL_GPIO_ReadPin>
 8004410:	0003      	movs	r3, r0
 8004412:	7023      	strb	r3, [r4, #0]
	if (rotary_1 == 0)
 8004414:	197b      	adds	r3, r7, r5
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <rotary_detect+0xe0>
		rotary_1 = 1;
 800441c:	197b      	adds	r3, r7, r5
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e003      	b.n	800442c <rotary_detect+0xe8>
	else
		rotary_1 = 0;
 8004424:	2317      	movs	r3, #23
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
	sum_rotary = (rotary_4 << 3) | (rotary_3 << 2) | (rotary_2 << 1) | rotary_1;
 800442c:	2314      	movs	r3, #20
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	b25a      	sxtb	r2, r3
 8004436:	2315      	movs	r3, #21
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	b25b      	sxtb	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b25a      	sxtb	r2, r3
 8004444:	2316      	movs	r3, #22
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	b25b      	sxtb	r3, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	b25a      	sxtb	r2, r3
 8004452:	2317      	movs	r3, #23
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	b25b      	sxtb	r3, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	b25a      	sxtb	r2, r3
 800445e:	2113      	movs	r1, #19
 8004460:	187b      	adds	r3, r7, r1
 8004462:	701a      	strb	r2, [r3, #0]
	// return rotary_value.sum_rotary;

	return sum_rotary;
 8004464:	187b      	adds	r3, r7, r1
 8004466:	781b      	ldrb	r3, [r3, #0]
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b007      	add	sp, #28
 800446e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004470 <uart_debug_printf>:
* Return Value : none
***********************************************************************************************************************/

//debug printf
int uart_debug_printf(const char *Format, ...)
{
 8004470:	b40f      	push	{r0, r1, r2, r3}
 8004472:	b580      	push	{r7, lr}
 8004474:	4f1a      	ldr	r7, [pc, #104]	; (80044e0 <uart_debug_printf+0x70>)
 8004476:	44bd      	add	sp, r7
 8004478:	af00      	add	r7, sp, #0
    uint8_t buff[512 + 1] = {0};
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <uart_debug_printf+0x74>)
 800447c:	2282      	movs	r2, #130	; 0x82
 800447e:	0092      	lsls	r2, r2, #2
 8004480:	4694      	mov	ip, r2
 8004482:	44bc      	add	ip, r7
 8004484:	4463      	add	r3, ip
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	3304      	adds	r3, #4
 800448c:	22fe      	movs	r2, #254	; 0xfe
 800448e:	32ff      	adds	r2, #255	; 0xff
 8004490:	2100      	movs	r1, #0
 8004492:	0018      	movs	r0, r3
 8004494:	f005 f818 	bl	80094c8 <memset>
    va_list args;
    va_start(args, Format);
 8004498:	2385      	movs	r3, #133	; 0x85
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	603b      	str	r3, [r7, #0]
    uint16_t len = vsprintf((char *)buff, Format, args);
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	2384      	movs	r3, #132	; 0x84
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	1d3b      	adds	r3, r7, #4
 80044ac:	0018      	movs	r0, r3
 80044ae:	f005 f849 	bl	8009544 <vsiprintf>
 80044b2:	0002      	movs	r2, r0
 80044b4:	490c      	ldr	r1, [pc, #48]	; (80044e8 <uart_debug_printf+0x78>)
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart5, (uint8_t *)buff, len, 100);
 80044ba:	187b      	adds	r3, r7, r1
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	1d39      	adds	r1, r7, #4
 80044c0:	480a      	ldr	r0, [pc, #40]	; (80044ec <uart_debug_printf+0x7c>)
 80044c2:	2364      	movs	r3, #100	; 0x64
 80044c4:	f004 f850 	bl	8008568 <HAL_UART_Transmit>
    va_end(args);
    return -1;
 80044c8:	2301      	movs	r3, #1
 80044ca:	425b      	negs	r3, r3
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	2382      	movs	r3, #130	; 0x82
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	449d      	add	sp, r3
 80044d6:	bc80      	pop	{r7}
 80044d8:	bc08      	pop	{r3}
 80044da:	b004      	add	sp, #16
 80044dc:	4718      	bx	r3
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	fffffdf8 	.word	0xfffffdf8
 80044e4:	fffffdfc 	.word	0xfffffdfc
 80044e8:	00000206 	.word	0x00000206
 80044ec:	200001a0 	.word	0x200001a0

080044f0 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <SHT2x_Init+0x18>)
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	20000460 	.word	0x20000460

0800450c <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b085      	sub	sp, #20
 8004510:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8004512:	1d7b      	adds	r3, r7, #5
 8004514:	22e7      	movs	r2, #231	; 0xe7
 8004516:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004518:	1dfb      	adds	r3, r7, #7
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <SHT2x_ReadUserReg+0x70>)
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	1d7a      	adds	r2, r7, #5
 8004524:	23fa      	movs	r3, #250	; 0xfa
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2301      	movs	r3, #1
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	f001 fe99 	bl	8006264 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <SHT2x_ReadUserReg+0x70>)
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	1dfc      	adds	r4, r7, #7
 8004538:	1dba      	adds	r2, r7, #6
 800453a:	23fa      	movs	r3, #250	; 0xfa
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2301      	movs	r3, #1
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	f001 ff96 	bl	8006474 <HAL_I2C_Master_Receive>
 8004548:	0003      	movs	r3, r0
 800454a:	7023      	strb	r3, [r4, #0]
	if( status == HAL_ERROR)
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d10d      	bne.n	8004570 <SHT2x_ReadUserReg+0x64>
		APP_LOGE("read sht sensor fail");
 8004554:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <SHT2x_ReadUserReg+0x74>)
 8004556:	490b      	ldr	r1, [pc, #44]	; (8004584 <SHT2x_ReadUserReg+0x78>)
 8004558:	480b      	ldr	r0, [pc, #44]	; (8004588 <SHT2x_ReadUserReg+0x7c>)
 800455a:	2327      	movs	r3, #39	; 0x27
 800455c:	f7ff ff88 	bl	8004470 <uart_debug_printf>
 8004560:	4b0a      	ldr	r3, [pc, #40]	; (800458c <SHT2x_ReadUserReg+0x80>)
 8004562:	0018      	movs	r0, r3
 8004564:	f7ff ff84 	bl	8004470 <uart_debug_printf>
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <SHT2x_ReadUserReg+0x84>)
 800456a:	0018      	movs	r0, r3
 800456c:	f7ff ff80 	bl	8004470 <uart_debug_printf>
	return val;
 8004570:	1dbb      	adds	r3, r7, #6
 8004572:	781b      	ldrb	r3, [r3, #0]
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b003      	add	sp, #12
 800457a:	bd90      	pop	{r4, r7, pc}
 800457c:	20000460 	.word	0x20000460
 8004580:	0800a12c 	.word	0x0800a12c
 8004584:	08009e28 	.word	0x08009e28
 8004588:	08009e2c 	.word	0x08009e2c
 800458c:	08009e3c 	.word	0x08009e3c
 8004590:	08009e54 	.word	0x08009e54

08004594 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	b087      	sub	sp, #28
 8004598:	af02      	add	r7, sp, #8
 800459a:	0002      	movs	r2, r0
 800459c:	1dfb      	adds	r3, r7, #7
 800459e:	701a      	strb	r2, [r3, #0]
	uint8_t val[3] = { 0 };
 80045a0:	260c      	movs	r6, #12
 80045a2:	19bb      	adds	r3, r7, r6
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <SHT2x_GetRaw+0x94>)
 80045a6:	8812      	ldrh	r2, [r2, #0]
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	2202      	movs	r2, #2
 80045ac:	2100      	movs	r1, #0
 80045ae:	5499      	strb	r1, [r3, r2]
	HAL_StatusTypeDef status = HAL_OK;
 80045b0:	250f      	movs	r5, #15
 80045b2:	197b      	adds	r3, r7, r5
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 80045b8:	4b1c      	ldr	r3, [pc, #112]	; (800462c <SHT2x_GetRaw+0x98>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	1dfa      	adds	r2, r7, #7
 80045be:	23fa      	movs	r3, #250	; 0xfa
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	2301      	movs	r3, #1
 80045c6:	2180      	movs	r1, #128	; 0x80
 80045c8:	f001 fe4c 	bl	8006264 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 80045cc:	4b17      	ldr	r3, [pc, #92]	; (800462c <SHT2x_GetRaw+0x98>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	197c      	adds	r4, r7, r5
 80045d2:	19ba      	adds	r2, r7, r6
 80045d4:	23fa      	movs	r3, #250	; 0xfa
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	2303      	movs	r3, #3
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	f001 ff49 	bl	8006474 <HAL_I2C_Master_Receive>
 80045e2:	0003      	movs	r3, r0
 80045e4:	7023      	strb	r3, [r4, #0]
	if( status == HAL_ERROR)
 80045e6:	197b      	adds	r3, r7, r5
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d10d      	bne.n	800460a <SHT2x_GetRaw+0x76>
		APP_LOGE("read sht sensor fail");
 80045ee:	4a10      	ldr	r2, [pc, #64]	; (8004630 <SHT2x_GetRaw+0x9c>)
 80045f0:	4910      	ldr	r1, [pc, #64]	; (8004634 <SHT2x_GetRaw+0xa0>)
 80045f2:	4811      	ldr	r0, [pc, #68]	; (8004638 <SHT2x_GetRaw+0xa4>)
 80045f4:	2336      	movs	r3, #54	; 0x36
 80045f6:	f7ff ff3b 	bl	8004470 <uart_debug_printf>
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <SHT2x_GetRaw+0xa8>)
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff ff37 	bl	8004470 <uart_debug_printf>
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <SHT2x_GetRaw+0xac>)
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff ff33 	bl	8004470 <uart_debug_printf>
	return val[0] << 8 | val[1];
 800460a:	210c      	movs	r1, #12
 800460c:	187b      	adds	r3, r7, r1
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	b21a      	sxth	r2, r3
 8004614:	187b      	adds	r3, r7, r1
 8004616:	785b      	ldrb	r3, [r3, #1]
 8004618:	b21b      	sxth	r3, r3
 800461a:	4313      	orrs	r3, r2
 800461c:	b21b      	sxth	r3, r3
 800461e:	b29b      	uxth	r3, r3
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b005      	add	sp, #20
 8004626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004628:	08009e58 	.word	0x08009e58
 800462c:	20000460 	.word	0x20000460
 8004630:	0800a140 	.word	0x0800a140
 8004634:	08009e28 	.word	0x08009e28
 8004638:	08009e2c 	.word	0x08009e2c
 800463c:	08009e3c 	.word	0x08009e3c
 8004640:	08009e54 	.word	0x08009e54

08004644 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	0002      	movs	r2, r0
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8004650:	1dfb      	adds	r3, r7, #7
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <SHT2x_GetTemperature+0x18>
 8004658:	22e3      	movs	r2, #227	; 0xe3
 800465a:	e000      	b.n	800465e <SHT2x_GetTemperature+0x1a>
 800465c:	22f3      	movs	r2, #243	; 0xf3
 800465e:	210f      	movs	r1, #15
 8004660:	187b      	adds	r3, r7, r1
 8004662:	701a      	strb	r2, [r3, #0]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8004664:	187b      	adds	r3, r7, r1
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	0018      	movs	r0, r3
 800466a:	f7ff ff93 	bl	8004594 <SHT2x_GetRaw>
 800466e:	0003      	movs	r3, r0
 8004670:	0018      	movs	r0, r3
 8004672:	f7fe fa7f 	bl	8002b74 <__aeabi_i2d>
 8004676:	2200      	movs	r2, #0
 8004678:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <SHT2x_GetTemperature+0x70>)
 800467a:	f7fd f995 	bl	80019a8 <__aeabi_ddiv>
 800467e:	0002      	movs	r2, r0
 8004680:	000b      	movs	r3, r1
 8004682:	0010      	movs	r0, r2
 8004684:	0019      	movs	r1, r3
 8004686:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <SHT2x_GetTemperature+0x74>)
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <SHT2x_GetTemperature+0x78>)
 800468a:	f7fd fc75 	bl	8001f78 <__aeabi_dmul>
 800468e:	0002      	movs	r2, r0
 8004690:	000b      	movs	r3, r1
 8004692:	0010      	movs	r0, r2
 8004694:	0019      	movs	r1, r3
 8004696:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <SHT2x_GetTemperature+0x7c>)
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <SHT2x_GetTemperature+0x80>)
 800469a:	f7fd fed9 	bl	8002450 <__aeabi_dsub>
 800469e:	0002      	movs	r2, r0
 80046a0:	000b      	movs	r3, r1
 80046a2:	0010      	movs	r0, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	f7fe fadd 	bl	8002c64 <__aeabi_d2f>
 80046aa:	1c03      	adds	r3, r0, #0
}
 80046ac:	1c18      	adds	r0, r3, #0
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b004      	add	sp, #16
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40f00000 	.word	0x40f00000
 80046b8:	3d70a3d7 	.word	0x3d70a3d7
 80046bc:	4065f70a 	.word	0x4065f70a
 80046c0:	cccccccd 	.word	0xcccccccd
 80046c4:	40476ccc 	.word	0x40476ccc

080046c8 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	0002      	movs	r2, r0
 80046d0:	1dfb      	adds	r3, r7, #7
 80046d2:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 80046d4:	1dfb      	adds	r3, r7, #7
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <SHT2x_GetRelativeHumidity+0x18>
 80046dc:	22e5      	movs	r2, #229	; 0xe5
 80046de:	e000      	b.n	80046e2 <SHT2x_GetRelativeHumidity+0x1a>
 80046e0:	22f5      	movs	r2, #245	; 0xf5
 80046e2:	210f      	movs	r1, #15
 80046e4:	187b      	adds	r3, r7, r1
 80046e6:	701a      	strb	r2, [r3, #0]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff ff51 	bl	8004594 <SHT2x_GetRaw>
 80046f2:	0003      	movs	r3, r0
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fe fa3d 	bl	8002b74 <__aeabi_i2d>
 80046fa:	2200      	movs	r2, #0
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <SHT2x_GetRelativeHumidity+0x70>)
 80046fe:	f7fd f953 	bl	80019a8 <__aeabi_ddiv>
 8004702:	0002      	movs	r2, r0
 8004704:	000b      	movs	r3, r1
 8004706:	0010      	movs	r0, r2
 8004708:	0019      	movs	r1, r3
 800470a:	2200      	movs	r2, #0
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <SHT2x_GetRelativeHumidity+0x74>)
 800470e:	f7fd fc33 	bl	8001f78 <__aeabi_dmul>
 8004712:	0002      	movs	r2, r0
 8004714:	000b      	movs	r3, r1
 8004716:	0010      	movs	r0, r2
 8004718:	0019      	movs	r1, r3
 800471a:	2200      	movs	r2, #0
 800471c:	4b08      	ldr	r3, [pc, #32]	; (8004740 <SHT2x_GetRelativeHumidity+0x78>)
 800471e:	f7fd fe97 	bl	8002450 <__aeabi_dsub>
 8004722:	0002      	movs	r2, r0
 8004724:	000b      	movs	r3, r1
 8004726:	0010      	movs	r0, r2
 8004728:	0019      	movs	r1, r3
 800472a:	f7fe fa9b 	bl	8002c64 <__aeabi_d2f>
 800472e:	1c03      	adds	r3, r0, #0
}
 8004730:	1c18      	adds	r0, r3, #0
 8004732:	46bd      	mov	sp, r7
 8004734:	b004      	add	sp, #16
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40f00000 	.word	0x40f00000
 800473c:	405f4000 	.word	0x405f4000
 8004740:	40180000 	.word	0x40180000

08004744 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8004744:	b5b0      	push	{r4, r5, r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af02      	add	r7, sp, #8
 800474a:	0002      	movs	r2, r0
 800474c:	1dfb      	adds	r3, r7, #7
 800474e:	701a      	strb	r2, [r3, #0]
	uint8_t val = SHT2x_ReadUserReg();
 8004750:	250f      	movs	r5, #15
 8004752:	197c      	adds	r4, r7, r5
 8004754:	f7ff feda 	bl	800450c <SHT2x_ReadUserReg>
 8004758:	0003      	movs	r3, r0
 800475a:	7023      	strb	r3, [r4, #0]
	val = (val & 0x7e) | res;
 800475c:	0029      	movs	r1, r5
 800475e:	187b      	adds	r3, r7, r1
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	b25b      	sxtb	r3, r3
 8004764:	227e      	movs	r2, #126	; 0x7e
 8004766:	4013      	ands	r3, r2
 8004768:	b25a      	sxtb	r2, r3
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b25b      	sxtb	r3, r3
 8004770:	4313      	orrs	r3, r2
 8004772:	b25a      	sxtb	r2, r3
 8004774:	187b      	adds	r3, r7, r1
 8004776:	701a      	strb	r2, [r3, #0]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8004778:	240c      	movs	r4, #12
 800477a:	193b      	adds	r3, r7, r4
 800477c:	22e6      	movs	r2, #230	; 0xe6
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	193b      	adds	r3, r7, r4
 8004782:	187a      	adds	r2, r7, r1
 8004784:	7812      	ldrb	r2, [r2, #0]
 8004786:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <SHT2x_SetResolution+0x60>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	193a      	adds	r2, r7, r4
 800478e:	23fa      	movs	r3, #250	; 0xfa
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2302      	movs	r3, #2
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	f001 fd64 	bl	8006264 <HAL_I2C_Master_Transmit>
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	46bd      	mov	sp, r7
 80047a0:	b004      	add	sp, #16
 80047a2:	bdb0      	pop	{r4, r5, r7, pc}
 80047a4:	20000460 	.word	0x20000460

080047a8 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fe fa0f 	bl	8002bd4 <__aeabi_f2d>
 80047b6:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <SHT2x_CelsiusToFahrenheit+0x3c>)
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <SHT2x_CelsiusToFahrenheit+0x40>)
 80047ba:	f7fd fbdd 	bl	8001f78 <__aeabi_dmul>
 80047be:	0002      	movs	r2, r0
 80047c0:	000b      	movs	r3, r1
 80047c2:	0010      	movs	r0, r2
 80047c4:	0019      	movs	r1, r3
 80047c6:	2200      	movs	r2, #0
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <SHT2x_CelsiusToFahrenheit+0x44>)
 80047ca:	f7fc fd83 	bl	80012d4 <__aeabi_dadd>
 80047ce:	0002      	movs	r2, r0
 80047d0:	000b      	movs	r3, r1
 80047d2:	0010      	movs	r0, r2
 80047d4:	0019      	movs	r1, r3
 80047d6:	f7fe fa45 	bl	8002c64 <__aeabi_d2f>
 80047da:	1c03      	adds	r3, r0, #0
}
 80047dc:	1c18      	adds	r0, r3, #0
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	cccccccd 	.word	0xcccccccd
 80047e8:	3ffccccc 	.word	0x3ffccccc
 80047ec:	40400000 	.word	0x40400000

080047f0 <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	return celsius + 273;
 80047f8:	4904      	ldr	r1, [pc, #16]	; (800480c <SHT2x_CelsiusToKelvin+0x1c>)
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fb fe80 	bl	8000500 <__aeabi_fadd>
 8004800:	1c03      	adds	r3, r0, #0
}
 8004802:	1c18      	adds	r0, r3, #0
 8004804:	46bd      	mov	sp, r7
 8004806:	b002      	add	sp, #8
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	43888000 	.word	0x43888000

08004810 <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	return num / 1;
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fc fcb9 	bl	8001190 <__aeabi_f2iz>
 800481e:	0003      	movs	r3, r0
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b002      	add	sp, #8
 8004826:	bd80      	pop	{r7, pc}

08004828 <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1c18      	adds	r0, r3, #0
 8004836:	f7ff ffeb 	bl	8004810 <SHT2x_GetInteger>
 800483a:	0003      	movs	r3, r0
 800483c:	0018      	movs	r0, r3
 800483e:	f7fc fcc7 	bl	80011d0 <__aeabi_i2f>
 8004842:	1c03      	adds	r3, r0, #0
 8004844:	1c19      	adds	r1, r3, #0
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fada 	bl	8000e00 <__aeabi_fsub>
 800484c:	1c03      	adds	r3, r0, #0
 800484e:	60fb      	str	r3, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	0019      	movs	r1, r3
 8004854:	200a      	movs	r0, #10
 8004856:	f000 f812 	bl	800487e <SHT2x_Ipow>
 800485a:	0003      	movs	r3, r0
 800485c:	0018      	movs	r0, r3
 800485e:	f7fc fcfd 	bl	800125c <__aeabi_ui2f>
 8004862:	1c03      	adds	r3, r0, #0
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	1c18      	adds	r0, r3, #0
 8004868:	f7fc f9b0 	bl	8000bcc <__aeabi_fmul>
 800486c:	1c03      	adds	r3, r0, #0
 800486e:	1c18      	adds	r0, r3, #0
 8004870:	f7fb fd62 	bl	8000338 <__aeabi_f2uiz>
 8004874:	0003      	movs	r3, r0
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b004      	add	sp, #16
 800487c:	bd80      	pop	{r7, pc}

0800487e <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 800488c:	2301      	movs	r3, #1
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	e006      	b.n	80048a0 <SHT2x_Ipow+0x22>
		temp *= base;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	4353      	muls	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d3f4      	bcc.n	8004892 <SHT2x_Ipow+0x14>
	return temp;
 80048a8:	68fb      	ldr	r3, [r7, #12]
}
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b004      	add	sp, #16
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <user_pripheral_init>:
static e_mode old_mode;
/***********************************************************************************************************************
* public Functions
***********************************************************************************************************************/
void user_pripheral_init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	//	user_uart_init();
	lora_com_init();
 80048b8:	f7ff fa58 	bl	8003d6c <lora_com_init>
	user_timer_1s_start();
 80048bc:	f7ff fba0 	bl	8004000 <user_timer_1s_start>
	user_timer_1ms_start();
 80048c0:	f7ff fbb4 	bl	800402c <user_timer_1ms_start>
	SHT2x_Init(&hi2c1); // internal sensor on PCB
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <user_pripheral_init+0x2c>)
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7ff fe12 	bl	80044f0 <SHT2x_Init>
	SHT2x_SetResolution(RES_14_12);
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7ff ff39 	bl	8004744 <SHT2x_SetResolution>

	user_get_tem_pcb_start();
 80048d2:	f000 fa43 	bl	8004d5c <user_get_tem_pcb_start>
	adc_init();
 80048d6:	f7ff fb3d 	bl	8003f54 <adc_init>
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200000c8 	.word	0x200000c8

080048e4 <user_driver_init>:

void user_driver_init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
	device_state.mode = E_NORMAL_MODE;
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <user_driver_init+0x38>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	741a      	strb	r2, [r3, #16]
	device_state.switching_state.power = E_OFF;
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <user_driver_init+0x38>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	745a      	strb	r2, [r3, #17]
	device_state.switching_state.heating = E_OFF;
 80048f4:	4b09      	ldr	r3, [pc, #36]	; (800491c <user_driver_init+0x38>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	749a      	strb	r2, [r3, #18]
	device_state.switching_state.fan = E_OFF;
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <user_driver_init+0x38>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	74da      	strb	r2, [r3, #19]

	device_state.charger_status = E_CHARGE_DONE;
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <user_driver_init+0x38>)
 8004902:	2201      	movs	r2, #1
 8004904:	73da      	strb	r2, [r3, #15]
	device_state.dc_volt.dc_1_in_volt = 0;
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <user_driver_init+0x38>)
 8004908:	2200      	movs	r2, #0
 800490a:	809a      	strh	r2, [r3, #4]
	old_mode = device_state.mode;
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <user_driver_init+0x38>)
 800490e:	7c1a      	ldrb	r2, [r3, #16]
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <user_driver_init+0x3c>)
 8004912:	701a      	strb	r2, [r3, #0]
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	20000224 	.word	0x20000224
 8004920:	200000b0 	.word	0x200000b0

08004924 <user_driver_process>:

void user_driver_process(void) // call in loop
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
	user_process();
 8004928:	f000 f804 	bl	8004934 <user_process>
}
 800492c:	46c0      	nop			; (mov r8, r8)
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <user_process>:

uint32_t time_sht_read = 0;
static void user_process(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
	/*
	 * get value sensor
	 */
	device_state.dc_volt.dc_1_in_volt = DC1_In_Volt();
 8004938:	f000 faee 	bl	8004f18 <DC1_In_Volt>
 800493c:	0003      	movs	r3, r0
 800493e:	001a      	movs	r2, r3
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <user_process+0x108>)
 8004942:	809a      	strh	r2, [r3, #4]
	roatary_time_get_value(); // get state rotary
 8004944:	f7ff fba2 	bl	800408c <roatary_time_get_value>
	user_set_switch_state();  //set switch state
 8004948:	f000 f88e 	bl	8004a68 <user_set_switch_state>
	charger_get_state();	  // check charger state
 800494c:	f000 fad6 	bl	8004efc <charger_get_state>
	/*
	 * action
	 * action switch control
	 *
	 */
	user_set_switch_control();
 8004950:	f000 f9ba 	bl	8004cc8 <user_set_switch_control>
	user_set_led_status();
 8004954:	f000 f9e6 	bl	8004d24 <user_set_led_status>

	if (user_timer_1s_get_tick() - time_sht_read > 2)
 8004958:	f7ff fb5e 	bl	8004018 <user_timer_1s_get_tick>
 800495c:	0002      	movs	r2, r0
 800495e:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <user_process+0x10c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d962      	bls.n	8004a2e <user_process+0xfa>
	{
		time_sht_read = user_timer_1s_get_tick();
 8004968:	f7ff fb56 	bl	8004018 <user_timer_1s_get_tick>
 800496c:	0002      	movs	r2, r0
 800496e:	4b34      	ldr	r3, [pc, #208]	; (8004a40 <user_process+0x10c>)
 8004970:	601a      	str	r2, [r3, #0]
		user_sht20_test();
 8004972:	f000 fa3b 	bl	8004dec <user_sht20_test>
		switch (device_state.charger_status)
 8004976:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <user_process+0x108>)
 8004978:	7bdb      	ldrb	r3, [r3, #15]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d035      	beq.n	80049ea <user_process+0xb6>
 800497e:	dc43      	bgt.n	8004a08 <user_process+0xd4>
 8004980:	2b02      	cmp	r3, #2
 8004982:	d023      	beq.n	80049cc <user_process+0x98>
 8004984:	dc40      	bgt.n	8004a08 <user_process+0xd4>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <user_process+0x5c>
 800498a:	2b01      	cmp	r3, #1
 800498c:	d00f      	beq.n	80049ae <user_process+0x7a>
 800498e:	e03b      	b.n	8004a08 <user_process+0xd4>
		{
		case E_CHARGE_SUSPEND:
			APP_LOGI("E_CHARGE_SUSPEND");
 8004990:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <user_process+0x110>)
 8004992:	492d      	ldr	r1, [pc, #180]	; (8004a48 <user_process+0x114>)
 8004994:	482d      	ldr	r0, [pc, #180]	; (8004a4c <user_process+0x118>)
 8004996:	2360      	movs	r3, #96	; 0x60
 8004998:	f7ff fd6a 	bl	8004470 <uart_debug_printf>
 800499c:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <user_process+0x11c>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f7ff fd66 	bl	8004470 <uart_debug_printf>
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <user_process+0x120>)
 80049a6:	0018      	movs	r0, r3
 80049a8:	f7ff fd62 	bl	8004470 <uart_debug_printf>
			break;
 80049ac:	e040      	b.n	8004a30 <user_process+0xfc>
		case E_CHARGE_DONE:
			APP_LOGI("E_CHARGE_DONE");
 80049ae:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <user_process+0x110>)
 80049b0:	4925      	ldr	r1, [pc, #148]	; (8004a48 <user_process+0x114>)
 80049b2:	4826      	ldr	r0, [pc, #152]	; (8004a4c <user_process+0x118>)
 80049b4:	2363      	movs	r3, #99	; 0x63
 80049b6:	f7ff fd5b 	bl	8004470 <uart_debug_printf>
 80049ba:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <user_process+0x124>)
 80049bc:	0018      	movs	r0, r3
 80049be:	f7ff fd57 	bl	8004470 <uart_debug_printf>
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <user_process+0x120>)
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff fd53 	bl	8004470 <uart_debug_printf>
			break;
 80049ca:	e031      	b.n	8004a30 <user_process+0xfc>
		case E_CHARGE_FAST:
			APP_LOGI("E_CHARGE_FAST");
 80049cc:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <user_process+0x110>)
 80049ce:	491e      	ldr	r1, [pc, #120]	; (8004a48 <user_process+0x114>)
 80049d0:	481e      	ldr	r0, [pc, #120]	; (8004a4c <user_process+0x118>)
 80049d2:	2366      	movs	r3, #102	; 0x66
 80049d4:	f7ff fd4c 	bl	8004470 <uart_debug_printf>
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <user_process+0x128>)
 80049da:	0018      	movs	r0, r3
 80049dc:	f7ff fd48 	bl	8004470 <uart_debug_printf>
 80049e0:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <user_process+0x120>)
 80049e2:	0018      	movs	r0, r3
 80049e4:	f7ff fd44 	bl	8004470 <uart_debug_printf>
			break;
 80049e8:	e022      	b.n	8004a30 <user_process+0xfc>
		case E_CHARGER_PRE:
			APP_LOGI("E_CHARGER_PRE");
 80049ea:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <user_process+0x110>)
 80049ec:	4916      	ldr	r1, [pc, #88]	; (8004a48 <user_process+0x114>)
 80049ee:	4817      	ldr	r0, [pc, #92]	; (8004a4c <user_process+0x118>)
 80049f0:	2369      	movs	r3, #105	; 0x69
 80049f2:	f7ff fd3d 	bl	8004470 <uart_debug_printf>
 80049f6:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <user_process+0x12c>)
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7ff fd39 	bl	8004470 <uart_debug_printf>
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <user_process+0x120>)
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff fd35 	bl	8004470 <uart_debug_printf>
			break;
 8004a06:	e013      	b.n	8004a30 <user_process+0xfc>
		default:
			APP_LOGI("E_CHARGER_ERR overfload value = %d", device_state.charger_status);
 8004a08:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <user_process+0x110>)
 8004a0a:	490f      	ldr	r1, [pc, #60]	; (8004a48 <user_process+0x114>)
 8004a0c:	480f      	ldr	r0, [pc, #60]	; (8004a4c <user_process+0x118>)
 8004a0e:	236c      	movs	r3, #108	; 0x6c
 8004a10:	f7ff fd2e 	bl	8004470 <uart_debug_printf>
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <user_process+0x108>)
 8004a16:	7bdb      	ldrb	r3, [r3, #15]
 8004a18:	001a      	movs	r2, r3
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <user_process+0x130>)
 8004a1c:	0011      	movs	r1, r2
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7ff fd26 	bl	8004470 <uart_debug_printf>
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <user_process+0x120>)
 8004a26:	0018      	movs	r0, r3
 8004a28:	f7ff fd22 	bl	8004470 <uart_debug_printf>
			break;
 8004a2c:	e000      	b.n	8004a30 <user_process+0xfc>
		}
	}
 8004a2e:	46c0      	nop			; (mov r8, r8)
	/*
	 * send lora message
	 */
	lora_com_send_interval();
 8004a30:	f7ff f9a2 	bl	8003d78 <lora_com_send_interval>
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	20000224 	.word	0x20000224
 8004a40:	200000b4 	.word	0x200000b4
 8004a44:	0800a150 	.word	0x0800a150
 8004a48:	08009e5c 	.word	0x08009e5c
 8004a4c:	08009e60 	.word	0x08009e60
 8004a50:	08009e70 	.word	0x08009e70
 8004a54:	08009e84 	.word	0x08009e84
 8004a58:	08009e88 	.word	0x08009e88
 8004a5c:	08009e98 	.word	0x08009e98
 8004a60:	08009ea8 	.word	0x08009ea8
 8004a64:	08009eb8 	.word	0x08009eb8

08004a68 <user_set_switch_state>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void user_set_switch_state(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
	// check mode process
	if (device_state.dc_volt.dc_1_in_volt < (12 * 1000 - 0.5 * 1000))
 8004a6c:	4b23      	ldr	r3, [pc, #140]	; (8004afc <user_set_switch_state+0x94>)
 8004a6e:	889b      	ldrh	r3, [r3, #4]
 8004a70:	4a23      	ldr	r2, [pc, #140]	; (8004b00 <user_set_switch_state+0x98>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d803      	bhi.n	8004a7e <user_set_switch_state+0x16>
	{
		device_state.mode = E_SAVE_MODE;
 8004a76:	4b21      	ldr	r3, [pc, #132]	; (8004afc <user_set_switch_state+0x94>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	741a      	strb	r2, [r3, #16]
 8004a7c:	e00c      	b.n	8004a98 <user_set_switch_state+0x30>
	}
	else if (device_state.dc_volt.dc_1_in_volt > (12 * 1000 + 0.5 * 1000))
 8004a7e:	4b1f      	ldr	r3, [pc, #124]	; (8004afc <user_set_switch_state+0x94>)
 8004a80:	889b      	ldrh	r3, [r3, #4]
 8004a82:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <user_set_switch_state+0x9c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d903      	bls.n	8004a90 <user_set_switch_state+0x28>
	{
		device_state.mode = E_NORMAL_MODE;
 8004a88:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <user_set_switch_state+0x94>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	741a      	strb	r2, [r3, #16]
 8004a8e:	e003      	b.n	8004a98 <user_set_switch_state+0x30>
	}
	*/
	else
	{
		// keep mode
		device_state.mode = device_state.mode;
 8004a90:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <user_set_switch_state+0x94>)
 8004a92:	7c1a      	ldrb	r2, [r3, #16]
 8004a94:	4b19      	ldr	r3, [pc, #100]	; (8004afc <user_set_switch_state+0x94>)
 8004a96:	741a      	strb	r2, [r3, #16]
	}

	if (old_mode != device_state.mode)
 8004a98:	4b18      	ldr	r3, [pc, #96]	; (8004afc <user_set_switch_state+0x94>)
 8004a9a:	7c1a      	ldrb	r2, [r3, #16]
 8004a9c:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <user_set_switch_state+0xa0>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d005      	beq.n	8004ab0 <user_set_switch_state+0x48>
	{
		old_mode = device_state.mode;
 8004aa4:	4b15      	ldr	r3, [pc, #84]	; (8004afc <user_set_switch_state+0x94>)
 8004aa6:	7c1a      	ldrb	r2, [r3, #16]
 8004aa8:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <user_set_switch_state+0xa0>)
 8004aaa:	701a      	strb	r2, [r3, #0]
		user_clear_power_change_state();
 8004aac:	f000 f902 	bl	8004cb4 <user_clear_power_change_state>
	}
	// control heating and fan follow temperature
	if (device_state.mode == E_NORMAL_MODE)
 8004ab0:	4b12      	ldr	r3, [pc, #72]	; (8004afc <user_set_switch_state+0x94>)
 8004ab2:	7c1b      	ldrb	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11c      	bne.n	8004af2 <user_set_switch_state+0x8a>
	{
		if (device_state.temperature_pcb < (5.0 - 0.5)) // <5°C
 8004ab8:	4b10      	ldr	r3, [pc, #64]	; (8004afc <user_set_switch_state+0x94>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4913      	ldr	r1, [pc, #76]	; (8004b0c <user_set_switch_state+0xa4>)
 8004abe:	1c18      	adds	r0, r3, #0
 8004ac0:	f7fb fbca 	bl	8000258 <__aeabi_fcmplt>
 8004ac4:	1e03      	subs	r3, r0, #0
 8004ac6:	d006      	beq.n	8004ad6 <user_set_switch_state+0x6e>
		{
			device_state.switching_state.heating = E_ON;
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <user_set_switch_state+0x94>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	749a      	strb	r2, [r3, #18]
			device_state.switching_state.fan = E_ON;
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <user_set_switch_state+0x94>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	74da      	strb	r2, [r3, #19]
 8004ad4:	e00d      	b.n	8004af2 <user_set_switch_state+0x8a>
		}
		else if (device_state.temperature_pcb < (5.0 - 0.5)) // > 5°C
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <user_set_switch_state+0x94>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	490c      	ldr	r1, [pc, #48]	; (8004b0c <user_set_switch_state+0xa4>)
 8004adc:	1c18      	adds	r0, r3, #0
 8004ade:	f7fb fbbb 	bl	8000258 <__aeabi_fcmplt>
 8004ae2:	1e03      	subs	r3, r0, #0
 8004ae4:	d005      	beq.n	8004af2 <user_set_switch_state+0x8a>
		{
			device_state.switching_state.heating = E_OFF;
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <user_set_switch_state+0x94>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	749a      	strb	r2, [r3, #18]
			device_state.switching_state.fan = E_OFF;
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <user_set_switch_state+0x94>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	74da      	strb	r2, [r3, #19]
		{
			// keep
		}
	}
	// control power switch
	user_power_switch_set_state();
 8004af2:	f000 f80d 	bl	8004b10 <user_power_switch_set_state>
}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000224 	.word	0x20000224
 8004b00:	00002ceb 	.word	0x00002ceb
 8004b04:	000030d4 	.word	0x000030d4
 8004b08:	200000b0 	.word	0x200000b0
 8004b0c:	40900000 	.word	0x40900000

08004b10 <user_power_switch_set_state>:
* Return Value : none
***********************************************************************************************************************/
uint32_t tick_power_switch = 0;
static uint8_t state_save_power_switch = 0;
static void user_power_switch_set_state(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
	if (device_state.mode == E_SAVE_MODE) // process save mode
 8004b14:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004b16:	7c1b      	ldrb	r3, [r3, #16]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d166      	bne.n	8004bea <user_power_switch_set_state+0xda>
	{
		// after 60 min will turn on according duration time
		switch (state_save_power_switch)
 8004b1c:	4b5c      	ldr	r3, [pc, #368]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d043      	beq.n	8004bac <user_power_switch_set_state+0x9c>
 8004b24:	dd00      	ble.n	8004b28 <user_power_switch_set_state+0x18>
 8004b26:	e0a1      	b.n	8004c6c <user_power_switch_set_state+0x15c>
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d025      	beq.n	8004b78 <user_power_switch_set_state+0x68>
 8004b2c:	dd00      	ble.n	8004b30 <user_power_switch_set_state+0x20>
 8004b2e:	e09d      	b.n	8004c6c <user_power_switch_set_state+0x15c>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <user_power_switch_set_state+0x2a>
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d00c      	beq.n	8004b52 <user_power_switch_set_state+0x42>
				state_save_power_switch = 0;
				APP_LOGI("switching_state.power OFF after time_duration ");
			}
			break;
		default:
			break;
 8004b38:	e098      	b.n	8004c6c <user_power_switch_set_state+0x15c>
			tick_power_switch = user_timer_1s_get_tick();
 8004b3a:	f7ff fa6d 	bl	8004018 <user_timer_1s_get_tick>
 8004b3e:	0002      	movs	r2, r0
 8004b40:	4b54      	ldr	r3, [pc, #336]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004b42:	601a      	str	r2, [r3, #0]
			state_save_power_switch = 1;
 8004b44:	4b52      	ldr	r3, [pc, #328]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
			device_state.switching_state.power = E_OFF;
 8004b4a:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	745a      	strb	r2, [r3, #17]
			break;
 8004b50:	e099      	b.n	8004c86 <user_power_switch_set_state+0x176>
			if (user_timer_1s_get_tick() - tick_power_switch > (60 * 60 * 60)) //power ON according rotation switch duration only EVERY 60min
 8004b52:	f7ff fa61 	bl	8004018 <user_timer_1s_get_tick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	4a4e      	ldr	r2, [pc, #312]	; (8004c98 <user_power_switch_set_state+0x188>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d800      	bhi.n	8004b66 <user_power_switch_set_state+0x56>
 8004b64:	e084      	b.n	8004c70 <user_power_switch_set_state+0x160>
				tick_power_switch = user_timer_1s_get_tick();
 8004b66:	f7ff fa57 	bl	8004018 <user_timer_1s_get_tick>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004b6e:	601a      	str	r2, [r3, #0]
				state_save_power_switch = 2;
 8004b70:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004b72:	2202      	movs	r2, #2
 8004b74:	701a      	strb	r2, [r3, #0]
			break;
 8004b76:	e07b      	b.n	8004c70 <user_power_switch_set_state+0x160>
			APP_LOGI("switching_state.power E_ON after 60 minutes");
 8004b78:	4a48      	ldr	r2, [pc, #288]	; (8004c9c <user_power_switch_set_state+0x18c>)
 8004b7a:	4949      	ldr	r1, [pc, #292]	; (8004ca0 <user_power_switch_set_state+0x190>)
 8004b7c:	4849      	ldr	r0, [pc, #292]	; (8004ca4 <user_power_switch_set_state+0x194>)
 8004b7e:	23d1      	movs	r3, #209	; 0xd1
 8004b80:	f7ff fc76 	bl	8004470 <uart_debug_printf>
 8004b84:	4b48      	ldr	r3, [pc, #288]	; (8004ca8 <user_power_switch_set_state+0x198>)
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7ff fc72 	bl	8004470 <uart_debug_printf>
 8004b8c:	4b47      	ldr	r3, [pc, #284]	; (8004cac <user_power_switch_set_state+0x19c>)
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f7ff fc6e 	bl	8004470 <uart_debug_printf>
			device_state.switching_state.power = E_ON;
 8004b94:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	745a      	strb	r2, [r3, #17]
			tick_power_switch = user_timer_1s_get_tick();
 8004b9a:	f7ff fa3d 	bl	8004018 <user_timer_1s_get_tick>
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	4b3c      	ldr	r3, [pc, #240]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004ba2:	601a      	str	r2, [r3, #0]
			state_save_power_switch = 3;
 8004ba4:	4b3a      	ldr	r3, [pc, #232]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	701a      	strb	r2, [r3, #0]
			break;
 8004baa:	e06c      	b.n	8004c86 <user_power_switch_set_state+0x176>
			if (user_timer_1s_get_tick() - tick_power_switch > (device_state.time.time_duration))
 8004bac:	f7ff fa34 	bl	8004018 <user_timer_1s_get_tick>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	1ad2      	subs	r2, r2, r3
 8004bb8:	4b34      	ldr	r3, [pc, #208]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d959      	bls.n	8004c74 <user_power_switch_set_state+0x164>
				device_state.switching_state.power = E_OFF;
 8004bc0:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	745a      	strb	r2, [r3, #17]
				state_save_power_switch = 0;
 8004bc6:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
				APP_LOGI("switching_state.power OFF after time_duration ");
 8004bcc:	4a33      	ldr	r2, [pc, #204]	; (8004c9c <user_power_switch_set_state+0x18c>)
 8004bce:	4934      	ldr	r1, [pc, #208]	; (8004ca0 <user_power_switch_set_state+0x190>)
 8004bd0:	4834      	ldr	r0, [pc, #208]	; (8004ca4 <user_power_switch_set_state+0x194>)
 8004bd2:	23db      	movs	r3, #219	; 0xdb
 8004bd4:	f7ff fc4c 	bl	8004470 <uart_debug_printf>
 8004bd8:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <user_power_switch_set_state+0x1a0>)
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7ff fc48 	bl	8004470 <uart_debug_printf>
 8004be0:	4b32      	ldr	r3, [pc, #200]	; (8004cac <user_power_switch_set_state+0x19c>)
 8004be2:	0018      	movs	r0, r3
 8004be4:	f7ff fc44 	bl	8004470 <uart_debug_printf>
			break;
 8004be8:	e044      	b.n	8004c74 <user_power_switch_set_state+0x164>
		}
	}
	else if (device_state.mode == E_NORMAL_MODE)
 8004bea:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004bec:	7c1b      	ldrb	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d142      	bne.n	8004c78 <user_power_switch_set_state+0x168>
	{
		switch (state_save_power_switch)
 8004bf2:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d027      	beq.n	8004c4a <user_power_switch_set_state+0x13a>
 8004bfa:	dc3f      	bgt.n	8004c7c <user_power_switch_set_state+0x16c>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <user_power_switch_set_state+0xf6>
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d00c      	beq.n	8004c1e <user_power_switch_set_state+0x10e>
				device_state.switching_state.power = E_OFF;
				state_save_power_switch = 0;
			}
			break;
		default:
			break;
 8004c04:	e03a      	b.n	8004c7c <user_power_switch_set_state+0x16c>
			device_state.switching_state.power = E_OFF;
 8004c06:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	745a      	strb	r2, [r3, #17]
			tick_power_switch = user_timer_1s_get_tick();
 8004c0c:	f7ff fa04 	bl	8004018 <user_timer_1s_get_tick>
 8004c10:	0002      	movs	r2, r0
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004c14:	601a      	str	r2, [r3, #0]
			state_save_power_switch = 1;
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]
			break;
 8004c1c:	e033      	b.n	8004c86 <user_power_switch_set_state+0x176>
			if (user_timer_1s_get_tick() - tick_power_switch > (device_state.time.time_interval))
 8004c1e:	f7ff f9fb 	bl	8004018 <user_timer_1s_get_tick>
 8004c22:	0002      	movs	r2, r0
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	1ad2      	subs	r2, r2, r3
 8004c2a:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d926      	bls.n	8004c80 <user_power_switch_set_state+0x170>
				device_state.switching_state.power = E_ON;
 8004c32:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	745a      	strb	r2, [r3, #17]
				state_save_power_switch = 2;
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
				tick_power_switch = user_timer_1s_get_tick();
 8004c3e:	f7ff f9eb 	bl	8004018 <user_timer_1s_get_tick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004c46:	601a      	str	r2, [r3, #0]
			break;
 8004c48:	e01a      	b.n	8004c80 <user_power_switch_set_state+0x170>
			if (user_timer_1s_get_tick() - tick_power_switch > (device_state.time.time_duration))
 8004c4a:	f7ff f9e5 	bl	8004018 <user_timer_1s_get_tick>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <user_power_switch_set_state+0x184>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	1ad2      	subs	r2, r2, r3
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d912      	bls.n	8004c84 <user_power_switch_set_state+0x174>
				device_state.switching_state.power = E_OFF;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <user_power_switch_set_state+0x17c>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	745a      	strb	r2, [r3, #17]
				state_save_power_switch = 0;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <user_power_switch_set_state+0x180>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
			break;
 8004c6a:	e00b      	b.n	8004c84 <user_power_switch_set_state+0x174>
			break;
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	e00a      	b.n	8004c86 <user_power_switch_set_state+0x176>
			break;
 8004c70:	46c0      	nop			; (mov r8, r8)
 8004c72:	e008      	b.n	8004c86 <user_power_switch_set_state+0x176>
			break;
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	e006      	b.n	8004c86 <user_power_switch_set_state+0x176>
		}
	}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	e004      	b.n	8004c86 <user_power_switch_set_state+0x176>
			break;
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	e002      	b.n	8004c86 <user_power_switch_set_state+0x176>
			break;
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	e000      	b.n	8004c86 <user_power_switch_set_state+0x176>
			break;
 8004c84:	46c0      	nop			; (mov r8, r8)
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000224 	.word	0x20000224
 8004c90:	200000bc 	.word	0x200000bc
 8004c94:	200000b8 	.word	0x200000b8
 8004c98:	00034bc0 	.word	0x00034bc0
 8004c9c:	0800a160 	.word	0x0800a160
 8004ca0:	08009e5c 	.word	0x08009e5c
 8004ca4:	08009e60 	.word	0x08009e60
 8004ca8:	08009edc 	.word	0x08009edc
 8004cac:	08009e84 	.word	0x08009e84
 8004cb0:	08009f08 	.word	0x08009f08

08004cb4 <user_clear_power_change_state>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void user_clear_power_change_state(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
	state_save_power_switch = 0;
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <user_clear_power_change_state+0x10>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200000bc 	.word	0x200000bc

08004cc8 <user_set_switch_control>:
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/

static void user_set_switch_control(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
	if (device_state.switching_state.power == E_ON)
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <user_set_switch_control+0x58>)
 8004cce:	7c5b      	ldrb	r3, [r3, #17]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d102      	bne.n	8004cda <user_set_switch_control+0x12>
		User_Power_On();
 8004cd4:	f7fe ffb0 	bl	8003c38 <User_Power_On>
 8004cd8:	e005      	b.n	8004ce6 <user_set_switch_control+0x1e>
	else if (device_state.switching_state.power == E_OFF)
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <user_set_switch_control+0x58>)
 8004cdc:	7c5b      	ldrb	r3, [r3, #17]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <user_set_switch_control+0x1e>
		User_Power_Off();
 8004ce2:	f7fe ffb7 	bl	8003c54 <User_Power_Off>

	if (device_state.switching_state.heating == E_ON)
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <user_set_switch_control+0x58>)
 8004ce8:	7c9b      	ldrb	r3, [r3, #18]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d102      	bne.n	8004cf4 <user_set_switch_control+0x2c>
		User_Heating_On();
 8004cee:	f7fe ffbf 	bl	8003c70 <User_Heating_On>
 8004cf2:	e005      	b.n	8004d00 <user_set_switch_control+0x38>
	else if (device_state.switching_state.heating == E_OFF)
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <user_set_switch_control+0x58>)
 8004cf6:	7c9b      	ldrb	r3, [r3, #18]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <user_set_switch_control+0x38>
		User_Heating_Off();
 8004cfc:	f7fe ffc6 	bl	8003c8c <User_Heating_Off>

	if (device_state.switching_state.fan == E_ON)
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <user_set_switch_control+0x58>)
 8004d02:	7cdb      	ldrb	r3, [r3, #19]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d102      	bne.n	8004d0e <user_set_switch_control+0x46>
		User_Fan_On();
 8004d08:	f7fe ffce 	bl	8003ca8 <User_Fan_On>
	else if (device_state.switching_state.fan == E_OFF)
		User_Fan_Off();
}
 8004d0c:	e005      	b.n	8004d1a <user_set_switch_control+0x52>
	else if (device_state.switching_state.fan == E_OFF)
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <user_set_switch_control+0x58>)
 8004d10:	7cdb      	ldrb	r3, [r3, #19]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <user_set_switch_control+0x52>
		User_Fan_Off();
 8004d16:	f7fe ffd5 	bl	8003cc4 <User_Fan_Off>
}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000224 	.word	0x20000224

08004d24 <user_set_led_status>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void user_set_led_status(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
	if (device_state.mode == E_NORMAL_MODE)
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <user_set_led_status+0x34>)
 8004d2a:	7c1b      	ldrb	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <user_set_led_status+0x1a>
	{
		User_Led_Green_On();
 8004d30:	f7fe ffd6 	bl	8003ce0 <User_Led_Green_On>
		User_Led_Blue_Off();
 8004d34:	f7ff f80c 	bl	8003d50 <User_Led_Blue_Off>
		User_Led_Red_Off();
 8004d38:	f7fe ffee 	bl	8003d18 <User_Led_Red_Off>
	{
		User_Led_Blue_On();
		User_Led_Red_Off();
		User_Led_Green_Off();
	}
}
 8004d3c:	e009      	b.n	8004d52 <user_set_led_status+0x2e>
	else if (device_state.mode == E_SAVE_MODE)
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <user_set_led_status+0x34>)
 8004d40:	7c1b      	ldrb	r3, [r3, #16]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <user_set_led_status+0x2e>
		User_Led_Blue_On();
 8004d46:	f7fe fff5 	bl	8003d34 <User_Led_Blue_On>
		User_Led_Red_Off();
 8004d4a:	f7fe ffe5 	bl	8003d18 <User_Led_Red_Off>
		User_Led_Green_Off();
 8004d4e:	f7fe ffd5 	bl	8003cfc <User_Led_Green_Off>
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000224 	.word	0x20000224

08004d5c <user_get_tem_pcb_start>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void user_get_tem_pcb_start(void)
{
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
	unsigned char buffer[20] = {0};
 8004d62:	003b      	movs	r3, r7
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f004 fbaa 	bl	80094c8 <memset>
	float cel = SHT2x_GetTemperature(1);
 8004d74:	2001      	movs	r0, #1
 8004d76:	f7ff fc65 	bl	8004644 <SHT2x_GetTemperature>
 8004d7a:	1c03      	adds	r3, r0, #0
 8004d7c:	617b      	str	r3, [r7, #20]
	device_state.temperature_pcb = cel;
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <user_get_tem_pcb_start+0x74>)
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "%d.%dºC", SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1));
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1c18      	adds	r0, r3, #0
 8004d88:	f7ff fd42 	bl	8004810 <SHT2x_GetInteger>
 8004d8c:	0004      	movs	r4, r0
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2101      	movs	r1, #1
 8004d92:	1c18      	adds	r0, r3, #0
 8004d94:	f7ff fd48 	bl	8004828 <SHT2x_GetDecimal>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	490e      	ldr	r1, [pc, #56]	; (8004dd4 <user_get_tem_pcb_start+0x78>)
 8004d9c:	0038      	movs	r0, r7
 8004d9e:	0022      	movs	r2, r4
 8004da0:	f004 fb9a 	bl	80094d8 <siprintf>
	APP_LOGD("device read temp start = %s", buffer);
 8004da4:	2344      	movs	r3, #68	; 0x44
 8004da6:	33ff      	adds	r3, #255	; 0xff
 8004da8:	4a0b      	ldr	r2, [pc, #44]	; (8004dd8 <user_get_tem_pcb_start+0x7c>)
 8004daa:	490c      	ldr	r1, [pc, #48]	; (8004ddc <user_get_tem_pcb_start+0x80>)
 8004dac:	480c      	ldr	r0, [pc, #48]	; (8004de0 <user_get_tem_pcb_start+0x84>)
 8004dae:	f7ff fb5f 	bl	8004470 <uart_debug_printf>
 8004db2:	003a      	movs	r2, r7
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <user_get_tem_pcb_start+0x88>)
 8004db6:	0011      	movs	r1, r2
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7ff fb59 	bl	8004470 <uart_debug_printf>
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <user_get_tem_pcb_start+0x8c>)
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7ff fb55 	bl	8004470 <uart_debug_printf>
}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b007      	add	sp, #28
 8004dcc:	bd90      	pop	{r4, r7, pc}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	20000224 	.word	0x20000224
 8004dd4:	08009f38 	.word	0x08009f38
 8004dd8:	0800a17c 	.word	0x0800a17c
 8004ddc:	08009f44 	.word	0x08009f44
 8004de0:	08009e60 	.word	0x08009e60
 8004de4:	08009f48 	.word	0x08009f48
 8004de8:	08009e84 	.word	0x08009e84

08004dec <user_sht20_test>:
 * Arguments    : none
 * Return Value : none
 ***********************************************************************************************************************/

static void user_sht20_test(void)
{
 8004dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dee:	46de      	mov	lr, fp
 8004df0:	4657      	mov	r7, sl
 8004df2:	464e      	mov	r6, r9
 8004df4:	4645      	mov	r5, r8
 8004df6:	b5e0      	push	{r5, r6, r7, lr}
 8004df8:	b0a5      	sub	sp, #148	; 0x94
 8004dfa:	af06      	add	r7, sp, #24
	unsigned char buffer[100] = {0};
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	3304      	adds	r3, #4
 8004e04:	2260      	movs	r2, #96	; 0x60
 8004e06:	2100      	movs	r1, #0
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f004 fb5d 	bl	80094c8 <memset>
	/* Gets current temperature & relative humidity. */
	float cel = SHT2x_GetTemperature(1);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f7ff fc18 	bl	8004644 <SHT2x_GetTemperature>
 8004e14:	1c03      	adds	r3, r0, #0
 8004e16:	677b      	str	r3, [r7, #116]	; 0x74
	device_state.temperature_pcb = cel;
 8004e18:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <user_sht20_test+0xf8>)
 8004e1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e1c:	601a      	str	r2, [r3, #0]
	/* Converts temperature to degrees Fahrenheit and Kelvin */
	float fah = SHT2x_CelsiusToFahrenheit(cel);
 8004e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e20:	1c18      	adds	r0, r3, #0
 8004e22:	f7ff fcc1 	bl	80047a8 <SHT2x_CelsiusToFahrenheit>
 8004e26:	1c03      	adds	r3, r0, #0
 8004e28:	673b      	str	r3, [r7, #112]	; 0x70
	float kel = SHT2x_CelsiusToKelvin(cel);
 8004e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2c:	1c18      	adds	r0, r3, #0
 8004e2e:	f7ff fcdf 	bl	80047f0 <SHT2x_CelsiusToKelvin>
 8004e32:	1c03      	adds	r3, r0, #0
 8004e34:	66fb      	str	r3, [r7, #108]	; 0x6c
	float rh = SHT2x_GetRelativeHumidity(1);
 8004e36:	2001      	movs	r0, #1
 8004e38:	f7ff fc46 	bl	80046c8 <SHT2x_GetRelativeHumidity>
 8004e3c:	1c03      	adds	r3, r0, #0
 8004e3e:	66bb      	str	r3, [r7, #104]	; 0x68
	/* May show warning below. Ignore and proceed. */
	sprintf(buffer,
 8004e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e42:	1c18      	adds	r0, r3, #0
 8004e44:	f7ff fce4 	bl	8004810 <SHT2x_GetInteger>
 8004e48:	4682      	mov	sl, r0
 8004e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	1c18      	adds	r0, r3, #0
 8004e50:	f7ff fcea 	bl	8004828 <SHT2x_GetDecimal>
 8004e54:	4683      	mov	fp, r0
 8004e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e58:	1c18      	adds	r0, r3, #0
 8004e5a:	f7ff fcd9 	bl	8004810 <SHT2x_GetInteger>
 8004e5e:	0004      	movs	r4, r0
 8004e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e62:	2101      	movs	r1, #1
 8004e64:	1c18      	adds	r0, r3, #0
 8004e66:	f7ff fcdf 	bl	8004828 <SHT2x_GetDecimal>
 8004e6a:	0005      	movs	r5, r0
 8004e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6e:	1c18      	adds	r0, r3, #0
 8004e70:	f7ff fcce 	bl	8004810 <SHT2x_GetInteger>
 8004e74:	0006      	movs	r6, r0
 8004e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e78:	2101      	movs	r1, #1
 8004e7a:	1c18      	adds	r0, r3, #0
 8004e7c:	f7ff fcd4 	bl	8004828 <SHT2x_GetDecimal>
 8004e80:	4680      	mov	r8, r0
 8004e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e84:	1c18      	adds	r0, r3, #0
 8004e86:	f7ff fcc3 	bl	8004810 <SHT2x_GetInteger>
 8004e8a:	4681      	mov	r9, r0
 8004e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8e:	2101      	movs	r1, #1
 8004e90:	1c18      	adds	r0, r3, #0
 8004e92:	f7ff fcc9 	bl	8004828 <SHT2x_GetDecimal>
 8004e96:	0003      	movs	r3, r0
 8004e98:	4913      	ldr	r1, [pc, #76]	; (8004ee8 <user_sht20_test+0xfc>)
 8004e9a:	1d38      	adds	r0, r7, #4
 8004e9c:	9305      	str	r3, [sp, #20]
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	9304      	str	r3, [sp, #16]
 8004ea2:	4643      	mov	r3, r8
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	9602      	str	r6, [sp, #8]
 8004ea8:	9501      	str	r5, [sp, #4]
 8004eaa:	9400      	str	r4, [sp, #0]
 8004eac:	465b      	mov	r3, fp
 8004eae:	4652      	mov	r2, sl
 8004eb0:	f004 fb12 	bl	80094d8 <siprintf>
			"%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH",
			SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
			SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
			SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
			SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
	APP_LOGD(buffer);
 8004eb4:	235e      	movs	r3, #94	; 0x5e
 8004eb6:	33ff      	adds	r3, #255	; 0xff
 8004eb8:	4a0c      	ldr	r2, [pc, #48]	; (8004eec <user_sht20_test+0x100>)
 8004eba:	490d      	ldr	r1, [pc, #52]	; (8004ef0 <user_sht20_test+0x104>)
 8004ebc:	480d      	ldr	r0, [pc, #52]	; (8004ef4 <user_sht20_test+0x108>)
 8004ebe:	f7ff fad7 	bl	8004470 <uart_debug_printf>
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff fad3 	bl	8004470 <uart_debug_printf>
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <user_sht20_test+0x10c>)
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7ff facf 	bl	8004470 <uart_debug_printf>
}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b01f      	add	sp, #124	; 0x7c
 8004ed8:	bcf0      	pop	{r4, r5, r6, r7}
 8004eda:	46bb      	mov	fp, r7
 8004edc:	46b2      	mov	sl, r6
 8004ede:	46a9      	mov	r9, r5
 8004ee0:	46a0      	mov	r8, r4
 8004ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee4:	20000224 	.word	0x20000224
 8004ee8:	08009f64 	.word	0x08009f64
 8004eec:	0800a194 	.word	0x0800a194
 8004ef0:	08009f44 	.word	0x08009f44
 8004ef4:	08009e60 	.word	0x08009e60
 8004ef8:	08009e84 	.word	0x08009e84

08004efc <charger_get_state>:
 * Description  :
 * Arguments    : none
 * Return Value : none
 ***********************************************************************************************************************/
void charger_get_state(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	device_state.charger_status = driver_charger_status();
 8004f00:	f7fe fe68 	bl	8003bd4 <driver_charger_status>
 8004f04:	0003      	movs	r3, r0
 8004f06:	001a      	movs	r2, r3
 8004f08:	4b02      	ldr	r3, [pc, #8]	; (8004f14 <charger_get_state+0x18>)
 8004f0a:	73da      	strb	r2, [r3, #15]
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	20000224 	.word	0x20000224

08004f18 <DC1_In_Volt>:
*/
#define kVDC1_IN_R_CONST_01    100 // kOmh
#define kVDC1_IN_R_CONST_02    10 // kOmh

uint16_t DC1_In_Volt(void)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
	float dc1_value = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
	uint16_t u16DC1 = 0;
 8004f22:	1cbb      	adds	r3, r7, #2
 8004f24:	2200      	movs	r2, #0
 8004f26:	801a      	strh	r2, [r3, #0]
	dc1_value = (adc_get_sample()[0] * kADC_SENSOR_SCALE) * ((kVDC1_IN_R_CONST_01+kVDC1_IN_R_CONST_02) / kVDC1_IN_R_CONST_02);
 8004f28:	f7ff f862 	bl	8003ff0 <adc_get_sample>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f7fc f94d 	bl	80011d0 <__aeabi_i2f>
 8004f36:	1c03      	adds	r3, r0, #0
 8004f38:	4910      	ldr	r1, [pc, #64]	; (8004f7c <DC1_In_Volt+0x64>)
 8004f3a:	1c18      	adds	r0, r3, #0
 8004f3c:	f7fb fe46 	bl	8000bcc <__aeabi_fmul>
 8004f40:	1c03      	adds	r3, r0, #0
 8004f42:	490f      	ldr	r1, [pc, #60]	; (8004f80 <DC1_In_Volt+0x68>)
 8004f44:	1c18      	adds	r0, r3, #0
 8004f46:	f7fb fe41 	bl	8000bcc <__aeabi_fmul>
 8004f4a:	1c03      	adds	r3, r0, #0
 8004f4c:	607b      	str	r3, [r7, #4]
	u16DC1 = (dc1_value / 10)*10;
 8004f4e:	490d      	ldr	r1, [pc, #52]	; (8004f84 <DC1_In_Volt+0x6c>)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fb fc71 	bl	8000838 <__aeabi_fdiv>
 8004f56:	1c03      	adds	r3, r0, #0
 8004f58:	490a      	ldr	r1, [pc, #40]	; (8004f84 <DC1_In_Volt+0x6c>)
 8004f5a:	1c18      	adds	r0, r3, #0
 8004f5c:	f7fb fe36 	bl	8000bcc <__aeabi_fmul>
 8004f60:	1c03      	adds	r3, r0, #0
 8004f62:	1cbc      	adds	r4, r7, #2
 8004f64:	1c18      	adds	r0, r3, #0
 8004f66:	f7fb f9e7 	bl	8000338 <__aeabi_f2uiz>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	8023      	strh	r3, [r4, #0]
	return u16DC1;
 8004f6e:	1cbb      	adds	r3, r7, #2
 8004f70:	881b      	ldrh	r3, [r3, #0]
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b003      	add	sp, #12
 8004f78:	bd90      	pop	{r4, r7, pc}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	3f4e4ce5 	.word	0x3f4e4ce5
 8004f80:	41300000 	.word	0x41300000
 8004f84:	41200000 	.word	0x41200000

08004f88 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f8e:	1dfb      	adds	r3, r7, #7
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_Init+0x3c>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_Init+0x3c>)
 8004f9a:	2140      	movs	r1, #64	; 0x40
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f000 f811 	bl	8004fc8 <HAL_InitTick>
 8004fa6:	1e03      	subs	r3, r0, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004faa:	1dfb      	adds	r3, r7, #7
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e001      	b.n	8004fb6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004fb2:	f7fe fb71 	bl	8003698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004fb6:	1dfb      	adds	r3, r7, #7
 8004fb8:	781b      	ldrb	r3, [r3, #0]
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b002      	add	sp, #8
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	40022000 	.word	0x40022000

08004fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HAL_InitTick+0x5c>)
 8004fd2:	681c      	ldr	r4, [r3, #0]
 8004fd4:	4b14      	ldr	r3, [pc, #80]	; (8005028 <HAL_InitTick+0x60>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	0019      	movs	r1, r3
 8004fda:	23fa      	movs	r3, #250	; 0xfa
 8004fdc:	0098      	lsls	r0, r3, #2
 8004fde:	f7fb f89d 	bl	800011c <__udivsi3>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	0020      	movs	r0, r4
 8004fe8:	f7fb f898 	bl	800011c <__udivsi3>
 8004fec:	0003      	movs	r3, r0
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f000 fc9b 	bl	800592a <HAL_SYSTICK_Config>
 8004ff4:	1e03      	subs	r3, r0, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e00f      	b.n	800501c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d80b      	bhi.n	800501a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	2301      	movs	r3, #1
 8005006:	425b      	negs	r3, r3
 8005008:	2200      	movs	r2, #0
 800500a:	0018      	movs	r0, r3
 800500c:	f000 fc68 	bl	80058e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005010:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_InitTick+0x64>)
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
}
 800501c:	0018      	movs	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	b003      	add	sp, #12
 8005022:	bd90      	pop	{r4, r7, pc}
 8005024:	20000000 	.word	0x20000000
 8005028:	2000000c 	.word	0x2000000c
 800502c:	20000008 	.word	0x20000008

08005030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <HAL_IncTick+0x1c>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	001a      	movs	r2, r3
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <HAL_IncTick+0x20>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	18d2      	adds	r2, r2, r3
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_IncTick+0x20>)
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	46c0      	nop			; (mov r8, r8)
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	2000000c 	.word	0x2000000c
 8005050:	20000464 	.word	0x20000464

08005054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  return uwTick;
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <HAL_GetTick+0x10>)
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	0018      	movs	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	20000464 	.word	0x20000464

08005068 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e159      	b.n	800532e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2250      	movs	r2, #80	; 0x50
 800508c:	2100      	movs	r1, #0
 800508e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	0018      	movs	r0, r3
 8005094:	f7fe fb14 	bl	80036c0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509c:	2210      	movs	r2, #16
 800509e:	4013      	ands	r3, r2
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d005      	beq.n	80050b0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2204      	movs	r2, #4
 80050ac:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80050ae:	d00b      	beq.n	80050c8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	2210      	movs	r2, #16
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2250      	movs	r2, #80	; 0x50
 80050c0:	2100      	movs	r1, #0
 80050c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e132      	b.n	800532e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	4a9a      	ldr	r2, [pc, #616]	; (8005338 <HAL_ADC_Init+0x2d0>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	2202      	movs	r2, #2
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2203      	movs	r2, #3
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d108      	bne.n	80050f8 <HAL_ADC_Init+0x90>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2201      	movs	r2, #1
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_ADC_Init+0x90>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_ADC_Init+0x92>
 80050f8:	2300      	movs	r3, #0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d149      	bne.n	8005192 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	23c0      	movs	r3, #192	; 0xc0
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	429a      	cmp	r2, r3
 8005108:	d00b      	beq.n	8005122 <HAL_ADC_Init+0xba>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	05db      	lsls	r3, r3, #23
 8005112:	429a      	cmp	r2, r3
 8005114:	d005      	beq.n	8005122 <HAL_ADC_Init+0xba>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	429a      	cmp	r2, r3
 8005120:	d111      	bne.n	8005146 <HAL_ADC_Init+0xde>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	0092      	lsls	r2, r2, #2
 800512e:	0892      	lsrs	r2, r2, #2
 8005130:	611a      	str	r2, [r3, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6919      	ldr	r1, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	611a      	str	r2, [r3, #16]
 8005144:	e014      	b.n	8005170 <HAL_ADC_Init+0x108>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	0092      	lsls	r2, r2, #2
 8005152:	0892      	lsrs	r2, r2, #2
 8005154:	611a      	str	r2, [r3, #16]
 8005156:	4b79      	ldr	r3, [pc, #484]	; (800533c <HAL_ADC_Init+0x2d4>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b78      	ldr	r3, [pc, #480]	; (800533c <HAL_ADC_Init+0x2d4>)
 800515c:	4978      	ldr	r1, [pc, #480]	; (8005340 <HAL_ADC_Init+0x2d8>)
 800515e:	400a      	ands	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	4b76      	ldr	r3, [pc, #472]	; (800533c <HAL_ADC_Init+0x2d4>)
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4b74      	ldr	r3, [pc, #464]	; (800533c <HAL_ADC_Init+0x2d4>)
 800516c:	430a      	orrs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2118      	movs	r1, #24
 800517c:	438a      	bics	r2, r1
 800517e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68d9      	ldr	r1, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005192:	4b6a      	ldr	r3, [pc, #424]	; (800533c <HAL_ADC_Init+0x2d4>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b69      	ldr	r3, [pc, #420]	; (800533c <HAL_ADC_Init+0x2d4>)
 8005198:	496a      	ldr	r1, [pc, #424]	; (8005344 <HAL_ADC_Init+0x2dc>)
 800519a:	400a      	ands	r2, r1
 800519c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800519e:	4b67      	ldr	r3, [pc, #412]	; (800533c <HAL_ADC_Init+0x2d4>)
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	065a      	lsls	r2, r3, #25
 80051a8:	4b64      	ldr	r3, [pc, #400]	; (800533c <HAL_ADC_Init+0x2d4>)
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	055b      	lsls	r3, r3, #21
 80051b8:	4013      	ands	r3, r2
 80051ba:	d108      	bne.n	80051ce <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	0549      	lsls	r1, r1, #21
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	495b      	ldr	r1, [pc, #364]	; (8005348 <HAL_ADC_Init+0x2e0>)
 80051da:	400a      	ands	r2, r1
 80051dc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d101      	bne.n	80051f4 <HAL_ADC_Init+0x18c>
 80051f0:	2304      	movs	r3, #4
 80051f2:	e000      	b.n	80051f6 <HAL_ADC_Init+0x18e>
 80051f4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80051f6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2020      	movs	r0, #32
 80051fc:	5c1b      	ldrb	r3, [r3, r0]
 80051fe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005200:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	202c      	movs	r0, #44	; 0x2c
 8005206:	5c1b      	ldrb	r3, [r3, r0]
 8005208:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800520a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005210:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005218:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005220:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800522e:	23c2      	movs	r3, #194	; 0xc2
 8005230:	33ff      	adds	r3, #255	; 0xff
 8005232:	429a      	cmp	r2, r3
 8005234:	d00b      	beq.n	800524e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68d9      	ldr	r1, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2221      	movs	r2, #33	; 0x21
 8005252:	5c9b      	ldrb	r3, [r3, r2]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d11a      	bne.n	800528e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	5c9b      	ldrb	r3, [r3, r2]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	0249      	lsls	r1, r1, #9
 8005270:	430a      	orrs	r2, r1
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e00b      	b.n	800528e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527a:	2220      	movs	r2, #32
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	2201      	movs	r2, #1
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	2b01      	cmp	r3, #1
 8005294:	d11f      	bne.n	80052d6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	492a      	ldr	r1, [pc, #168]	; (800534c <HAL_ADC_Init+0x2e4>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6919      	ldr	r1, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052b4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80052ba:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	430a      	orrs	r2, r1
 80052d2:	611a      	str	r2, [r3, #16]
 80052d4:	e00e      	b.n	80052f4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2201      	movs	r2, #1
 80052de:	4013      	ands	r3, r2
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2101      	movs	r1, #1
 80052f0:	438a      	bics	r2, r1
 80052f2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2107      	movs	r1, #7
 8005300:	438a      	bics	r2, r1
 8005302:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6959      	ldr	r1, [r3, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	2203      	movs	r2, #3
 8005322:	4393      	bics	r3, r2
 8005324:	2201      	movs	r2, #1
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	0018      	movs	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	b002      	add	sp, #8
 8005334:	bd80      	pop	{r7, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	fffffefd 	.word	0xfffffefd
 800533c:	40012708 	.word	0x40012708
 8005340:	ffc3ffff 	.word	0xffc3ffff
 8005344:	fdffffff 	.word	0xfdffffff
 8005348:	fffe0219 	.word	0xfffe0219
 800534c:	fffffc03 	.word	0xfffffc03

08005350 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800535c:	2317      	movs	r3, #23
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2204      	movs	r2, #4
 800536c:	4013      	ands	r3, r2
 800536e:	d15e      	bne.n	800542e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2250      	movs	r2, #80	; 0x50
 8005374:	5c9b      	ldrb	r3, [r3, r2]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_ADC_Start_DMA+0x2e>
 800537a:	2302      	movs	r3, #2
 800537c:	e05e      	b.n	800543c <HAL_ADC_Start_DMA+0xec>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2250      	movs	r2, #80	; 0x50
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2101      	movs	r1, #1
 8005392:	430a      	orrs	r2, r1
 8005394:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d007      	beq.n	80053ae <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800539e:	2317      	movs	r3, #23
 80053a0:	18fc      	adds	r4, r7, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f000 f8eb 	bl	8005580 <ADC_Enable>
 80053aa:	0003      	movs	r3, r0
 80053ac:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80053ae:	2317      	movs	r3, #23
 80053b0:	18fb      	adds	r3, r7, r3
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d13e      	bne.n	8005436 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	4a21      	ldr	r2, [pc, #132]	; (8005444 <HAL_ADC_Start_DMA+0xf4>)
 80053be:	4013      	ands	r3, r2
 80053c0:	2280      	movs	r2, #128	; 0x80
 80053c2:	0052      	lsls	r2, r2, #1
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2250      	movs	r2, #80	; 0x50
 80053d4:	2100      	movs	r1, #0
 80053d6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053dc:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <HAL_ADC_Start_DMA+0xf8>)
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e4:	4a19      	ldr	r2, [pc, #100]	; (800544c <HAL_ADC_Start_DMA+0xfc>)
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ec:	4a18      	ldr	r2, [pc, #96]	; (8005450 <HAL_ADC_Start_DMA+0x100>)
 80053ee:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	221c      	movs	r2, #28
 80053f6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2110      	movs	r1, #16
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3340      	adds	r3, #64	; 0x40
 8005412:	0019      	movs	r1, r3
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f000 fb0c 	bl	8005a34 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2104      	movs	r1, #4
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	e003      	b.n	8005436 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800542e:	2317      	movs	r3, #23
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	2202      	movs	r2, #2
 8005434:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005436:	2317      	movs	r3, #23
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	781b      	ldrb	r3, [r3, #0]
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b007      	add	sp, #28
 8005442:	bd90      	pop	{r4, r7, pc}
 8005444:	fffff0fe 	.word	0xfffff0fe
 8005448:	08005641 	.word	0x08005641
 800544c:	080056f5 	.word	0x080056f5
 8005450:	08005713 	.word	0x08005713

08005454 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800545c:	46c0      	nop			; (mov r8, r8)
 800545e:	46bd      	mov	sp, r7
 8005460:	b002      	add	sp, #8
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b002      	add	sp, #8
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2250      	movs	r2, #80	; 0x50
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_ADC_ConfigChannel+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e06c      	b.n	8005566 <HAL_ADC_ConfigChannel+0xf2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2250      	movs	r2, #80	; 0x50
 8005490:	2101      	movs	r1, #1
 8005492:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2204      	movs	r2, #4
 800549c:	4013      	ands	r3, r2
 800549e:	d00b      	beq.n	80054b8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	2220      	movs	r2, #32
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2250      	movs	r2, #80	; 0x50
 80054b0:	2100      	movs	r1, #0
 80054b2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e056      	b.n	8005566 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a2c      	ldr	r2, [pc, #176]	; (8005570 <HAL_ADC_ConfigChannel+0xfc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d028      	beq.n	8005514 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	035b      	lsls	r3, r3, #13
 80054ce:	0b5a      	lsrs	r2, r3, #13
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	02db      	lsls	r3, r3, #11
 80054e0:	4013      	ands	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80054e4:	4b23      	ldr	r3, [pc, #140]	; (8005574 <HAL_ADC_ConfigChannel+0x100>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4b22      	ldr	r3, [pc, #136]	; (8005574 <HAL_ADC_ConfigChannel+0x100>)
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	0409      	lsls	r1, r1, #16
 80054ee:	430a      	orrs	r2, r1
 80054f0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80054f2:	200a      	movs	r0, #10
 80054f4:	f000 f928 	bl	8005748 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	029b      	lsls	r3, r3, #10
 8005500:	4013      	ands	r3, r2
 8005502:	d02b      	beq.n	800555c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <HAL_ADC_ConfigChannel+0x100>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <HAL_ADC_ConfigChannel+0x100>)
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	03c9      	lsls	r1, r1, #15
 800550e:	430a      	orrs	r2, r1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e023      	b.n	800555c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	035b      	lsls	r3, r3, #13
 8005520:	0b5b      	lsrs	r3, r3, #13
 8005522:	43d9      	mvns	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	400a      	ands	r2, r1
 800552a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	02db      	lsls	r3, r3, #11
 8005534:	4013      	ands	r3, r2
 8005536:	d005      	beq.n	8005544 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005538:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <HAL_ADC_ConfigChannel+0x100>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <HAL_ADC_ConfigChannel+0x100>)
 800553e:	490e      	ldr	r1, [pc, #56]	; (8005578 <HAL_ADC_ConfigChannel+0x104>)
 8005540:	400a      	ands	r2, r1
 8005542:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	029b      	lsls	r3, r3, #10
 800554c:	4013      	ands	r3, r2
 800554e:	d005      	beq.n	800555c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <HAL_ADC_ConfigChannel+0x100>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <HAL_ADC_ConfigChannel+0x100>)
 8005556:	4909      	ldr	r1, [pc, #36]	; (800557c <HAL_ADC_ConfigChannel+0x108>)
 8005558:	400a      	ands	r2, r1
 800555a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2250      	movs	r2, #80	; 0x50
 8005560:	2100      	movs	r1, #0
 8005562:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b002      	add	sp, #8
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	00001001 	.word	0x00001001
 8005574:	40012708 	.word	0x40012708
 8005578:	ff7fffff 	.word	0xff7fffff
 800557c:	ffbfffff 	.word	0xffbfffff

08005580 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2203      	movs	r2, #3
 8005594:	4013      	ands	r3, r2
 8005596:	2b01      	cmp	r3, #1
 8005598:	d108      	bne.n	80055ac <ADC_Enable+0x2c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2201      	movs	r2, #1
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <ADC_Enable+0x2c>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <ADC_Enable+0x2e>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d13f      	bne.n	8005632 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a20      	ldr	r2, [pc, #128]	; (800563c <ADC_Enable+0xbc>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	d00d      	beq.n	80055da <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	2210      	movs	r2, #16
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	2201      	movs	r2, #1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e02c      	b.n	8005634 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2101      	movs	r1, #1
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80055ea:	2001      	movs	r0, #1
 80055ec:	f000 f8ac 	bl	8005748 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80055f0:	f7ff fd30 	bl	8005054 <HAL_GetTick>
 80055f4:	0003      	movs	r3, r0
 80055f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80055f8:	e014      	b.n	8005624 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055fa:	f7ff fd2b 	bl	8005054 <HAL_GetTick>
 80055fe:	0002      	movs	r2, r0
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b0a      	cmp	r3, #10
 8005606:	d90d      	bls.n	8005624 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	2210      	movs	r2, #16
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	2201      	movs	r2, #1
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e007      	b.n	8005634 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2201      	movs	r2, #1
 800562c:	4013      	ands	r3, r2
 800562e:	2b01      	cmp	r3, #1
 8005630:	d1e3      	bne.n	80055fa <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	0018      	movs	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	b004      	add	sp, #16
 800563a:	bd80      	pop	{r7, pc}
 800563c:	80000017 	.word	0x80000017

08005640 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	2250      	movs	r2, #80	; 0x50
 8005654:	4013      	ands	r3, r2
 8005656:	d141      	bne.n	80056dc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	2280      	movs	r2, #128	; 0x80
 800565e:	0092      	lsls	r2, r2, #2
 8005660:	431a      	orrs	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	23c0      	movs	r3, #192	; 0xc0
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4013      	ands	r3, r2
 8005672:	d12e      	bne.n	80056d2 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800567a:	2b00      	cmp	r3, #0
 800567c:	d129      	bne.n	80056d2 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2208      	movs	r2, #8
 8005686:	4013      	ands	r3, r2
 8005688:	2b08      	cmp	r3, #8
 800568a:	d122      	bne.n	80056d2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2204      	movs	r2, #4
 8005694:	4013      	ands	r3, r2
 8005696:	d110      	bne.n	80056ba <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	210c      	movs	r1, #12
 80056a4:	438a      	bics	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ac:	4a10      	ldr	r2, [pc, #64]	; (80056f0 <ADC_DMAConvCplt+0xb0>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	2201      	movs	r2, #1
 80056b2:	431a      	orrs	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	655a      	str	r2, [r3, #84]	; 0x54
 80056b8:	e00b      	b.n	80056d2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	2220      	movs	r2, #32
 80056c0:	431a      	orrs	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	2201      	movs	r2, #1
 80056cc:	431a      	orrs	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f7fe fc45 	bl	8003f64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80056da:	e005      	b.n	80056e8 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	0010      	movs	r0, r2
 80056e6:	4798      	blx	r3
}
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b004      	add	sp, #16
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	fffffefe 	.word	0xfffffefe

080056f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	0018      	movs	r0, r3
 8005706:	f7ff fea5 	bl	8005454 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	46bd      	mov	sp, r7
 800570e:	b004      	add	sp, #16
 8005710:	bd80      	pop	{r7, pc}

08005712 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	2240      	movs	r2, #64	; 0x40
 8005726:	431a      	orrs	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005730:	2204      	movs	r2, #4
 8005732:	431a      	orrs	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	0018      	movs	r0, r3
 800573c:	f7ff fe92 	bl	8005464 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005740:	46c0      	nop			; (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	b004      	add	sp, #16
 8005746:	bd80      	pop	{r7, pc}

08005748 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <ADC_DelayMicroSecond+0x38>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	490b      	ldr	r1, [pc, #44]	; (8005784 <ADC_DelayMicroSecond+0x3c>)
 8005756:	0018      	movs	r0, r3
 8005758:	f7fa fce0 	bl	800011c <__udivsi3>
 800575c:	0003      	movs	r3, r0
 800575e:	001a      	movs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4353      	muls	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8005766:	e002      	b.n	800576e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3b01      	subs	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f9      	bne.n	8005768 <ADC_DelayMicroSecond+0x20>
  } 
}
 8005774:	46c0      	nop			; (mov r8, r8)
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b004      	add	sp, #16
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	20000000 	.word	0x20000000
 8005784:	000f4240 	.word	0x000f4240

08005788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	0002      	movs	r2, r0
 8005790:	1dfb      	adds	r3, r7, #7
 8005792:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005794:	1dfb      	adds	r3, r7, #7
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b7f      	cmp	r3, #127	; 0x7f
 800579a:	d809      	bhi.n	80057b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800579c:	1dfb      	adds	r3, r7, #7
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	001a      	movs	r2, r3
 80057a2:	231f      	movs	r3, #31
 80057a4:	401a      	ands	r2, r3
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <__NVIC_EnableIRQ+0x30>)
 80057a8:	2101      	movs	r1, #1
 80057aa:	4091      	lsls	r1, r2
 80057ac:	000a      	movs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]
  }
}
 80057b0:	46c0      	nop			; (mov r8, r8)
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b002      	add	sp, #8
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	e000e100 	.word	0xe000e100

080057bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	0002      	movs	r2, r0
 80057c4:	6039      	str	r1, [r7, #0]
 80057c6:	1dfb      	adds	r3, r7, #7
 80057c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80057ca:	1dfb      	adds	r3, r7, #7
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b7f      	cmp	r3, #127	; 0x7f
 80057d0:	d828      	bhi.n	8005824 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057d2:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <__NVIC_SetPriority+0xd4>)
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	33c0      	adds	r3, #192	; 0xc0
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	589b      	ldr	r3, [r3, r2]
 80057e2:	1dfa      	adds	r2, r7, #7
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	0011      	movs	r1, r2
 80057e8:	2203      	movs	r2, #3
 80057ea:	400a      	ands	r2, r1
 80057ec:	00d2      	lsls	r2, r2, #3
 80057ee:	21ff      	movs	r1, #255	; 0xff
 80057f0:	4091      	lsls	r1, r2
 80057f2:	000a      	movs	r2, r1
 80057f4:	43d2      	mvns	r2, r2
 80057f6:	401a      	ands	r2, r3
 80057f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	019b      	lsls	r3, r3, #6
 80057fe:	22ff      	movs	r2, #255	; 0xff
 8005800:	401a      	ands	r2, r3
 8005802:	1dfb      	adds	r3, r7, #7
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	0018      	movs	r0, r3
 8005808:	2303      	movs	r3, #3
 800580a:	4003      	ands	r3, r0
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005810:	481f      	ldr	r0, [pc, #124]	; (8005890 <__NVIC_SetPriority+0xd4>)
 8005812:	1dfb      	adds	r3, r7, #7
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b25b      	sxtb	r3, r3
 8005818:	089b      	lsrs	r3, r3, #2
 800581a:	430a      	orrs	r2, r1
 800581c:	33c0      	adds	r3, #192	; 0xc0
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005822:	e031      	b.n	8005888 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005824:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <__NVIC_SetPriority+0xd8>)
 8005826:	1dfb      	adds	r3, r7, #7
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	0019      	movs	r1, r3
 800582c:	230f      	movs	r3, #15
 800582e:	400b      	ands	r3, r1
 8005830:	3b08      	subs	r3, #8
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	3306      	adds	r3, #6
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	18d3      	adds	r3, r2, r3
 800583a:	3304      	adds	r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	1dfa      	adds	r2, r7, #7
 8005840:	7812      	ldrb	r2, [r2, #0]
 8005842:	0011      	movs	r1, r2
 8005844:	2203      	movs	r2, #3
 8005846:	400a      	ands	r2, r1
 8005848:	00d2      	lsls	r2, r2, #3
 800584a:	21ff      	movs	r1, #255	; 0xff
 800584c:	4091      	lsls	r1, r2
 800584e:	000a      	movs	r2, r1
 8005850:	43d2      	mvns	r2, r2
 8005852:	401a      	ands	r2, r3
 8005854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	019b      	lsls	r3, r3, #6
 800585a:	22ff      	movs	r2, #255	; 0xff
 800585c:	401a      	ands	r2, r3
 800585e:	1dfb      	adds	r3, r7, #7
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	0018      	movs	r0, r3
 8005864:	2303      	movs	r3, #3
 8005866:	4003      	ands	r3, r0
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800586c:	4809      	ldr	r0, [pc, #36]	; (8005894 <__NVIC_SetPriority+0xd8>)
 800586e:	1dfb      	adds	r3, r7, #7
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	001c      	movs	r4, r3
 8005874:	230f      	movs	r3, #15
 8005876:	4023      	ands	r3, r4
 8005878:	3b08      	subs	r3, #8
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	430a      	orrs	r2, r1
 800587e:	3306      	adds	r3, #6
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	18c3      	adds	r3, r0, r3
 8005884:	3304      	adds	r3, #4
 8005886:	601a      	str	r2, [r3, #0]
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b003      	add	sp, #12
 800588e:	bd90      	pop	{r4, r7, pc}
 8005890:	e000e100 	.word	0xe000e100
 8005894:	e000ed00 	.word	0xe000ed00

08005898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	1e5a      	subs	r2, r3, #1
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	045b      	lsls	r3, r3, #17
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d301      	bcc.n	80058b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ac:	2301      	movs	r3, #1
 80058ae:	e010      	b.n	80058d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058b0:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <SysTick_Config+0x44>)
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	3a01      	subs	r2, #1
 80058b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058b8:	2301      	movs	r3, #1
 80058ba:	425b      	negs	r3, r3
 80058bc:	2103      	movs	r1, #3
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff ff7c 	bl	80057bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <SysTick_Config+0x44>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ca:	4b04      	ldr	r3, [pc, #16]	; (80058dc <SysTick_Config+0x44>)
 80058cc:	2207      	movs	r2, #7
 80058ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	0018      	movs	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b002      	add	sp, #8
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	e000e010 	.word	0xe000e010

080058e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	210f      	movs	r1, #15
 80058ec:	187b      	adds	r3, r7, r1
 80058ee:	1c02      	adds	r2, r0, #0
 80058f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	187b      	adds	r3, r7, r1
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b25b      	sxtb	r3, r3
 80058fa:	0011      	movs	r1, r2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7ff ff5d 	bl	80057bc <__NVIC_SetPriority>
}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	46bd      	mov	sp, r7
 8005906:	b004      	add	sp, #16
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	0002      	movs	r2, r0
 8005912:	1dfb      	adds	r3, r7, #7
 8005914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005916:	1dfb      	adds	r3, r7, #7
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	b25b      	sxtb	r3, r3
 800591c:	0018      	movs	r0, r3
 800591e:	f7ff ff33 	bl	8005788 <__NVIC_EnableIRQ>
}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	46bd      	mov	sp, r7
 8005926:	b002      	add	sp, #8
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f7ff ffaf 	bl	8005898 <SysTick_Config>
 800593a:	0003      	movs	r3, r0
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b002      	add	sp, #8
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e061      	b.n	8005a1a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a32      	ldr	r2, [pc, #200]	; (8005a24 <HAL_DMA_Init+0xe0>)
 800595c:	4694      	mov	ip, r2
 800595e:	4463      	add	r3, ip
 8005960:	2114      	movs	r1, #20
 8005962:	0018      	movs	r0, r3
 8005964:	f7fa fbda 	bl	800011c <__udivsi3>
 8005968:	0003      	movs	r3, r0
 800596a:	009a      	lsls	r2, r3, #2
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2d      	ldr	r2, [pc, #180]	; (8005a28 <HAL_DMA_Init+0xe4>)
 8005974:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2225      	movs	r2, #37	; 0x25
 800597a:	2102      	movs	r1, #2
 800597c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a28      	ldr	r2, [pc, #160]	; (8005a2c <HAL_DMA_Init+0xe8>)
 800598a:	4013      	ands	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	01db      	lsls	r3, r3, #7
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d018      	beq.n	8005a02 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059d0:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <HAL_DMA_Init+0xec>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d8:	211c      	movs	r1, #28
 80059da:	400b      	ands	r3, r1
 80059dc:	210f      	movs	r1, #15
 80059de:	4099      	lsls	r1, r3
 80059e0:	000b      	movs	r3, r1
 80059e2:	43d9      	mvns	r1, r3
 80059e4:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <HAL_DMA_Init+0xec>)
 80059e6:	400a      	ands	r2, r1
 80059e8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <HAL_DMA_Init+0xec>)
 80059ec:	6819      	ldr	r1, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	201c      	movs	r0, #28
 80059f8:	4003      	ands	r3, r0
 80059fa:	409a      	lsls	r2, r3
 80059fc:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <HAL_DMA_Init+0xec>)
 80059fe:	430a      	orrs	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2225      	movs	r2, #37	; 0x25
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	2100      	movs	r1, #0
 8005a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b004      	add	sp, #16
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	bffdfff8 	.word	0xbffdfff8
 8005a28:	40020000 	.word	0x40020000
 8005a2c:	ffff800f 	.word	0xffff800f
 8005a30:	400200a8 	.word	0x400200a8

08005a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a42:	2317      	movs	r3, #23
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2224      	movs	r2, #36	; 0x24
 8005a4e:	5c9b      	ldrb	r3, [r3, r2]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_DMA_Start_IT+0x24>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e04f      	b.n	8005af8 <HAL_DMA_Start_IT+0xc4>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2225      	movs	r2, #37	; 0x25
 8005a64:	5c9b      	ldrb	r3, [r3, r2]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d13a      	bne.n	8005ae2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2225      	movs	r2, #37	; 0x25
 8005a70:	2102      	movs	r1, #2
 8005a72:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2101      	movs	r1, #1
 8005a86:	438a      	bics	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f96a 	bl	8005d6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	210e      	movs	r1, #14
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e00f      	b.n	8005ad0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2104      	movs	r1, #4
 8005abc:	438a      	bics	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	210a      	movs	r1, #10
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2101      	movs	r1, #1
 8005adc:	430a      	orrs	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e007      	b.n	8005af2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2224      	movs	r2, #36	; 0x24
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005aea:	2317      	movs	r3, #23
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	2202      	movs	r2, #2
 8005af0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005af2:	2317      	movs	r3, #23
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	781b      	ldrb	r3, [r3, #0]
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b006      	add	sp, #24
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	230f      	movs	r3, #15
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2225      	movs	r2, #37	; 0x25
 8005b14:	5c9b      	ldrb	r3, [r3, r2]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d008      	beq.n	8005b2e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2224      	movs	r2, #36	; 0x24
 8005b26:	2100      	movs	r1, #0
 8005b28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e024      	b.n	8005b78 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	210e      	movs	r1, #14
 8005b3a:	438a      	bics	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2101      	movs	r1, #1
 8005b4a:	438a      	bics	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	221c      	movs	r2, #28
 8005b54:	401a      	ands	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4091      	lsls	r1, r2
 8005b5e:	000a      	movs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2225      	movs	r2, #37	; 0x25
 8005b66:	2101      	movs	r1, #1
 8005b68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2224      	movs	r2, #36	; 0x24
 8005b6e:	2100      	movs	r1, #0
 8005b70:	5499      	strb	r1, [r3, r2]

    return status;
 8005b72:	230f      	movs	r3, #15
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005b78:	0018      	movs	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b004      	add	sp, #16
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b88:	210f      	movs	r1, #15
 8005b8a:	187b      	adds	r3, r7, r1
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2225      	movs	r2, #37	; 0x25
 8005b94:	5c9b      	ldrb	r3, [r3, r2]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d006      	beq.n	8005baa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005ba2:	187b      	adds	r3, r7, r1
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	e02a      	b.n	8005c00 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	210e      	movs	r1, #14
 8005bb6:	438a      	bics	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	438a      	bics	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	221c      	movs	r2, #28
 8005bd0:	401a      	ands	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4091      	lsls	r1, r2
 8005bda:	000a      	movs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2225      	movs	r2, #37	; 0x25
 8005be2:	2101      	movs	r1, #1
 8005be4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2224      	movs	r2, #36	; 0x24
 8005bea:	2100      	movs	r1, #0
 8005bec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	0010      	movs	r0, r2
 8005bfe:	4798      	blx	r3
    }
  }
  return status;
 8005c00:	230f      	movs	r3, #15
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	781b      	ldrb	r3, [r3, #0]
}
 8005c06:	0018      	movs	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b004      	add	sp, #16
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	221c      	movs	r2, #28
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	2204      	movs	r2, #4
 8005c30:	409a      	lsls	r2, r3
 8005c32:	0013      	movs	r3, r2
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4013      	ands	r3, r2
 8005c38:	d026      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x7a>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d022      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d107      	bne.n	8005c5e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2104      	movs	r1, #4
 8005c5a:	438a      	bics	r2, r1
 8005c5c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	221c      	movs	r2, #28
 8005c64:	401a      	ands	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2104      	movs	r1, #4
 8005c6c:	4091      	lsls	r1, r2
 8005c6e:	000a      	movs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d100      	bne.n	8005c7c <HAL_DMA_IRQHandler+0x6e>
 8005c7a:	e071      	b.n	8005d60 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	0010      	movs	r0, r2
 8005c84:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8005c86:	e06b      	b.n	8005d60 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	221c      	movs	r2, #28
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2202      	movs	r2, #2
 8005c92:	409a      	lsls	r2, r3
 8005c94:	0013      	movs	r3, r2
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d02d      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0xea>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d029      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2220      	movs	r2, #32
 8005cac:	4013      	ands	r3, r2
 8005cae:	d10b      	bne.n	8005cc8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	210a      	movs	r1, #10
 8005cbc:	438a      	bics	r2, r1
 8005cbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2225      	movs	r2, #37	; 0x25
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	221c      	movs	r2, #28
 8005cce:	401a      	ands	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	4091      	lsls	r1, r2
 8005cd8:	000a      	movs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	; 0x24
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d039      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	0010      	movs	r0, r2
 8005cf4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005cf6:	e033      	b.n	8005d60 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfc:	221c      	movs	r2, #28
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2208      	movs	r2, #8
 8005d02:	409a      	lsls	r2, r3
 8005d04:	0013      	movs	r3, r2
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d02a      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x154>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2208      	movs	r2, #8
 8005d10:	4013      	ands	r3, r2
 8005d12:	d026      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	210e      	movs	r1, #14
 8005d20:	438a      	bics	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d28:	221c      	movs	r2, #28
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	2101      	movs	r1, #1
 8005d32:	4091      	lsls	r1, r2
 8005d34:	000a      	movs	r2, r1
 8005d36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2225      	movs	r2, #37	; 0x25
 8005d42:	2101      	movs	r1, #1
 8005d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2224      	movs	r2, #36	; 0x24
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	0010      	movs	r0, r2
 8005d5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d60:	46c0      	nop			; (mov r8, r8)
 8005d62:	46c0      	nop			; (mov r8, r8)
}
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b004      	add	sp, #16
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	221c      	movs	r2, #28
 8005d7e:	401a      	ands	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	2101      	movs	r1, #1
 8005d86:	4091      	lsls	r1, r2
 8005d88:	000a      	movs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d108      	bne.n	8005dae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005dac:	e007      	b.n	8005dbe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	60da      	str	r2, [r3, #12]
}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b004      	add	sp, #16
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005dde:	e155      	b.n	800608c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2101      	movs	r1, #1
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4091      	lsls	r1, r2
 8005dea:	000a      	movs	r2, r1
 8005dec:	4013      	ands	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d100      	bne.n	8005df8 <HAL_GPIO_Init+0x30>
 8005df6:	e146      	b.n	8006086 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d00b      	beq.n	8005e18 <HAL_GPIO_Init+0x50>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d007      	beq.n	8005e18 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e0c:	2b11      	cmp	r3, #17
 8005e0e:	d003      	beq.n	8005e18 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b12      	cmp	r3, #18
 8005e16:	d130      	bne.n	8005e7a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	2203      	movs	r2, #3
 8005e24:	409a      	lsls	r2, r3
 8005e26:	0013      	movs	r3, r2
 8005e28:	43da      	mvns	r2, r3
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	409a      	lsls	r2, r3
 8005e3a:	0013      	movs	r3, r2
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e4e:	2201      	movs	r2, #1
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	409a      	lsls	r2, r3
 8005e54:	0013      	movs	r3, r2
 8005e56:	43da      	mvns	r2, r3
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	091b      	lsrs	r3, r3, #4
 8005e64:	2201      	movs	r2, #1
 8005e66:	401a      	ands	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	0013      	movs	r3, r2
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	2203      	movs	r2, #3
 8005e86:	409a      	lsls	r2, r3
 8005e88:	0013      	movs	r3, r2
 8005e8a:	43da      	mvns	r2, r3
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	409a      	lsls	r2, r3
 8005e9c:	0013      	movs	r3, r2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d003      	beq.n	8005eba <HAL_GPIO_Init+0xf2>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b12      	cmp	r3, #18
 8005eb8:	d123      	bne.n	8005f02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	08da      	lsrs	r2, r3, #3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3208      	adds	r2, #8
 8005ec2:	0092      	lsls	r2, r2, #2
 8005ec4:	58d3      	ldr	r3, [r2, r3]
 8005ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2207      	movs	r2, #7
 8005ecc:	4013      	ands	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	220f      	movs	r2, #15
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	0013      	movs	r3, r2
 8005ed6:	43da      	mvns	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4013      	ands	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2107      	movs	r1, #7
 8005ee6:	400b      	ands	r3, r1
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	409a      	lsls	r2, r3
 8005eec:	0013      	movs	r3, r2
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	08da      	lsrs	r2, r3, #3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3208      	adds	r2, #8
 8005efc:	0092      	lsls	r2, r2, #2
 8005efe:	6939      	ldr	r1, [r7, #16]
 8005f00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	0013      	movs	r3, r2
 8005f12:	43da      	mvns	r2, r3
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4013      	ands	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2203      	movs	r2, #3
 8005f20:	401a      	ands	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	409a      	lsls	r2, r3
 8005f28:	0013      	movs	r3, r2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	055b      	lsls	r3, r3, #21
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d100      	bne.n	8005f44 <HAL_GPIO_Init+0x17c>
 8005f42:	e0a0      	b.n	8006086 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f44:	4b57      	ldr	r3, [pc, #348]	; (80060a4 <HAL_GPIO_Init+0x2dc>)
 8005f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f48:	4b56      	ldr	r3, [pc, #344]	; (80060a4 <HAL_GPIO_Init+0x2dc>)
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f50:	4a55      	ldr	r2, [pc, #340]	; (80060a8 <HAL_GPIO_Init+0x2e0>)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	3302      	adds	r3, #2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	589b      	ldr	r3, [r3, r2]
 8005f5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2203      	movs	r2, #3
 8005f62:	4013      	ands	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	220f      	movs	r2, #15
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	0013      	movs	r3, r2
 8005f6c:	43da      	mvns	r2, r3
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4013      	ands	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	23a0      	movs	r3, #160	; 0xa0
 8005f78:	05db      	lsls	r3, r3, #23
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d01f      	beq.n	8005fbe <HAL_GPIO_Init+0x1f6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a4a      	ldr	r2, [pc, #296]	; (80060ac <HAL_GPIO_Init+0x2e4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d019      	beq.n	8005fba <HAL_GPIO_Init+0x1f2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a49      	ldr	r2, [pc, #292]	; (80060b0 <HAL_GPIO_Init+0x2e8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_GPIO_Init+0x1ee>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a48      	ldr	r2, [pc, #288]	; (80060b4 <HAL_GPIO_Init+0x2ec>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00d      	beq.n	8005fb2 <HAL_GPIO_Init+0x1ea>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a47      	ldr	r2, [pc, #284]	; (80060b8 <HAL_GPIO_Init+0x2f0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <HAL_GPIO_Init+0x1e6>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a46      	ldr	r2, [pc, #280]	; (80060bc <HAL_GPIO_Init+0x2f4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <HAL_GPIO_Init+0x1e2>
 8005fa6:	2305      	movs	r3, #5
 8005fa8:	e00a      	b.n	8005fc0 <HAL_GPIO_Init+0x1f8>
 8005faa:	2306      	movs	r3, #6
 8005fac:	e008      	b.n	8005fc0 <HAL_GPIO_Init+0x1f8>
 8005fae:	2304      	movs	r3, #4
 8005fb0:	e006      	b.n	8005fc0 <HAL_GPIO_Init+0x1f8>
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e004      	b.n	8005fc0 <HAL_GPIO_Init+0x1f8>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e002      	b.n	8005fc0 <HAL_GPIO_Init+0x1f8>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <HAL_GPIO_Init+0x1f8>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	2103      	movs	r1, #3
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	0092      	lsls	r2, r2, #2
 8005fc8:	4093      	lsls	r3, r2
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fd0:	4935      	ldr	r1, [pc, #212]	; (80060a8 <HAL_GPIO_Init+0x2e0>)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	3302      	adds	r3, #2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fde:	4b38      	ldr	r3, [pc, #224]	; (80060c0 <HAL_GPIO_Init+0x2f8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	43da      	mvns	r2, r3
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4013      	ands	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	025b      	lsls	r3, r3, #9
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <HAL_GPIO_Init+0x2f8>)
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006008:	4b2d      	ldr	r3, [pc, #180]	; (80060c0 <HAL_GPIO_Init+0x2f8>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	43da      	mvns	r2, r3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4013      	ands	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	029b      	lsls	r3, r3, #10
 8006020:	4013      	ands	r3, r2
 8006022:	d003      	beq.n	800602c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <HAL_GPIO_Init+0x2f8>)
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006032:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <HAL_GPIO_Init+0x2f8>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	43da      	mvns	r2, r3
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4013      	ands	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	035b      	lsls	r3, r3, #13
 800604a:	4013      	ands	r3, r2
 800604c:	d003      	beq.n	8006056 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006056:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <HAL_GPIO_Init+0x2f8>)
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800605c:	4b18      	ldr	r3, [pc, #96]	; (80060c0 <HAL_GPIO_Init+0x2f8>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	43da      	mvns	r2, r3
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	4013      	ands	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	039b      	lsls	r3, r3, #14
 8006074:	4013      	ands	r3, r2
 8006076:	d003      	beq.n	8006080 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <HAL_GPIO_Init+0x2f8>)
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	3301      	adds	r3, #1
 800608a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	40da      	lsrs	r2, r3
 8006094:	1e13      	subs	r3, r2, #0
 8006096:	d000      	beq.n	800609a <HAL_GPIO_Init+0x2d2>
 8006098:	e6a2      	b.n	8005de0 <HAL_GPIO_Init+0x18>
  }
}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	b006      	add	sp, #24
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40010000 	.word	0x40010000
 80060ac:	50000400 	.word	0x50000400
 80060b0:	50000800 	.word	0x50000800
 80060b4:	50000c00 	.word	0x50000c00
 80060b8:	50001000 	.word	0x50001000
 80060bc:	50001c00 	.word	0x50001c00
 80060c0:	40010400 	.word	0x40010400

080060c4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	000a      	movs	r2, r1
 80060ce:	1cbb      	adds	r3, r7, #2
 80060d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	1cba      	adds	r2, r7, #2
 80060d8:	8812      	ldrh	r2, [r2, #0]
 80060da:	4013      	ands	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80060de:	230f      	movs	r3, #15
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e003      	b.n	80060f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060e8:	230f      	movs	r3, #15
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80060f0:	230f      	movs	r3, #15
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	781b      	ldrb	r3, [r3, #0]
}
 80060f6:	0018      	movs	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b004      	add	sp, #16
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	0008      	movs	r0, r1
 8006108:	0011      	movs	r1, r2
 800610a:	1cbb      	adds	r3, r7, #2
 800610c:	1c02      	adds	r2, r0, #0
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	1c7b      	adds	r3, r7, #1
 8006112:	1c0a      	adds	r2, r1, #0
 8006114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006116:	1c7b      	adds	r3, r7, #1
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800611e:	1cbb      	adds	r3, r7, #2
 8006120:	881a      	ldrh	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006126:	e003      	b.n	8006130 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006128:	1cbb      	adds	r3, r7, #2
 800612a:	881a      	ldrh	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b002      	add	sp, #8
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e082      	b.n	8006250 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2241      	movs	r2, #65	; 0x41
 800614e:	5c9b      	ldrb	r3, [r3, r2]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2240      	movs	r2, #64	; 0x40
 800615a:	2100      	movs	r1, #0
 800615c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	0018      	movs	r0, r3
 8006162:	f7fd fb19 	bl	8003798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2241      	movs	r2, #65	; 0x41
 800616a:	2124      	movs	r1, #36	; 0x24
 800616c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2101      	movs	r1, #1
 800617a:	438a      	bics	r2, r1
 800617c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4934      	ldr	r1, [pc, #208]	; (8006258 <HAL_I2C_Init+0x120>)
 8006188:	400a      	ands	r2, r1
 800618a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4931      	ldr	r1, [pc, #196]	; (800625c <HAL_I2C_Init+0x124>)
 8006198:	400a      	ands	r2, r1
 800619a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d108      	bne.n	80061b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	0209      	lsls	r1, r1, #8
 80061b0:	430a      	orrs	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	e007      	b.n	80061c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2184      	movs	r1, #132	; 0x84
 80061c0:	0209      	lsls	r1, r1, #8
 80061c2:	430a      	orrs	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d104      	bne.n	80061d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2280      	movs	r2, #128	; 0x80
 80061d4:	0112      	lsls	r2, r2, #4
 80061d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	491f      	ldr	r1, [pc, #124]	; (8006260 <HAL_I2C_Init+0x128>)
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	491a      	ldr	r1, [pc, #104]	; (800625c <HAL_I2C_Init+0x124>)
 80061f4:	400a      	ands	r2, r1
 80061f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	431a      	orrs	r2, r3
 8006202:	0011      	movs	r1, r2
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	021a      	lsls	r2, r3, #8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69d9      	ldr	r1, [r3, #28]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2101      	movs	r1, #1
 800622e:	430a      	orrs	r2, r1
 8006230:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2241      	movs	r2, #65	; 0x41
 800623c:	2120      	movs	r1, #32
 800623e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2242      	movs	r2, #66	; 0x42
 800624a:	2100      	movs	r1, #0
 800624c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b002      	add	sp, #8
 8006256:	bd80      	pop	{r7, pc}
 8006258:	f0ffffff 	.word	0xf0ffffff
 800625c:	ffff7fff 	.word	0xffff7fff
 8006260:	02008000 	.word	0x02008000

08006264 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b089      	sub	sp, #36	; 0x24
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	0008      	movs	r0, r1
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	0019      	movs	r1, r3
 8006272:	230a      	movs	r3, #10
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	1c02      	adds	r2, r0, #0
 8006278:	801a      	strh	r2, [r3, #0]
 800627a:	2308      	movs	r3, #8
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	1c0a      	adds	r2, r1, #0
 8006280:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2241      	movs	r2, #65	; 0x41
 8006286:	5c9b      	ldrb	r3, [r3, r2]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b20      	cmp	r3, #32
 800628c:	d000      	beq.n	8006290 <HAL_I2C_Master_Transmit+0x2c>
 800628e:	e0e7      	b.n	8006460 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2240      	movs	r2, #64	; 0x40
 8006294:	5c9b      	ldrb	r3, [r3, r2]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_I2C_Master_Transmit+0x3a>
 800629a:	2302      	movs	r3, #2
 800629c:	e0e1      	b.n	8006462 <HAL_I2C_Master_Transmit+0x1fe>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2240      	movs	r2, #64	; 0x40
 80062a2:	2101      	movs	r1, #1
 80062a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062a6:	f7fe fed5 	bl	8005054 <HAL_GetTick>
 80062aa:	0003      	movs	r3, r0
 80062ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	0219      	lsls	r1, r3, #8
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2319      	movs	r3, #25
 80062ba:	2201      	movs	r2, #1
 80062bc:	f000 fa04 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 80062c0:	1e03      	subs	r3, r0, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0cc      	b.n	8006462 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2241      	movs	r2, #65	; 0x41
 80062cc:	2121      	movs	r1, #33	; 0x21
 80062ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2242      	movs	r2, #66	; 0x42
 80062d4:	2110      	movs	r1, #16
 80062d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2208      	movs	r2, #8
 80062e8:	18ba      	adds	r2, r7, r2
 80062ea:	8812      	ldrh	r2, [r2, #0]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2bff      	cmp	r3, #255	; 0xff
 80062fc:	d911      	bls.n	8006322 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	22ff      	movs	r2, #255	; 0xff
 8006302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006308:	b2da      	uxtb	r2, r3
 800630a:	2380      	movs	r3, #128	; 0x80
 800630c:	045c      	lsls	r4, r3, #17
 800630e:	230a      	movs	r3, #10
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	8819      	ldrh	r1, [r3, #0]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	4b55      	ldr	r3, [pc, #340]	; (800646c <HAL_I2C_Master_Transmit+0x208>)
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	0023      	movs	r3, r4
 800631c:	f000 fb60 	bl	80069e0 <I2C_TransferConfig>
 8006320:	e075      	b.n	800640e <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006330:	b2da      	uxtb	r2, r3
 8006332:	2380      	movs	r3, #128	; 0x80
 8006334:	049c      	lsls	r4, r3, #18
 8006336:	230a      	movs	r3, #10
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	8819      	ldrh	r1, [r3, #0]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	4b4b      	ldr	r3, [pc, #300]	; (800646c <HAL_I2C_Master_Transmit+0x208>)
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	0023      	movs	r3, r4
 8006344:	f000 fb4c 	bl	80069e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006348:	e061      	b.n	800640e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f9f8 	bl	8006746 <I2C_WaitOnTXISFlagUntilTimeout>
 8006356:	1e03      	subs	r3, r0, #0
 8006358:	d001      	beq.n	800635e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e081      	b.n	8006462 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d03a      	beq.n	800640e <HAL_I2C_Master_Transmit+0x1aa>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d136      	bne.n	800640e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	0013      	movs	r3, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	2180      	movs	r1, #128	; 0x80
 80063ae:	f000 f98b 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 80063b2:	1e03      	subs	r3, r0, #0
 80063b4:	d001      	beq.n	80063ba <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e053      	b.n	8006462 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2bff      	cmp	r3, #255	; 0xff
 80063c2:	d911      	bls.n	80063e8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	22ff      	movs	r2, #255	; 0xff
 80063c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	045c      	lsls	r4, r3, #17
 80063d4:	230a      	movs	r3, #10
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	8819      	ldrh	r1, [r3, #0]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	2300      	movs	r3, #0
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	0023      	movs	r3, r4
 80063e2:	f000 fafd 	bl	80069e0 <I2C_TransferConfig>
 80063e6:	e012      	b.n	800640e <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	049c      	lsls	r4, r3, #18
 80063fc:	230a      	movs	r3, #10
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	8819      	ldrh	r1, [r3, #0]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	2300      	movs	r3, #0
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	0023      	movs	r3, r4
 800640a:	f000 fae9 	bl	80069e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d198      	bne.n	800634a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	0018      	movs	r0, r3
 8006420:	f000 f9d0 	bl	80067c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006424:	1e03      	subs	r3, r0, #0
 8006426:	d001      	beq.n	800642c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e01a      	b.n	8006462 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2220      	movs	r2, #32
 8006432:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	490c      	ldr	r1, [pc, #48]	; (8006470 <HAL_I2C_Master_Transmit+0x20c>)
 8006440:	400a      	ands	r2, r1
 8006442:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2241      	movs	r2, #65	; 0x41
 8006448:	2120      	movs	r1, #32
 800644a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2242      	movs	r2, #66	; 0x42
 8006450:	2100      	movs	r1, #0
 8006452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	2100      	movs	r1, #0
 800645a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	e000      	b.n	8006462 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006460:	2302      	movs	r3, #2
  }
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b007      	add	sp, #28
 8006468:	bd90      	pop	{r4, r7, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	80002000 	.word	0x80002000
 8006470:	fe00e800 	.word	0xfe00e800

08006474 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b089      	sub	sp, #36	; 0x24
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	0008      	movs	r0, r1
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	0019      	movs	r1, r3
 8006482:	230a      	movs	r3, #10
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	1c02      	adds	r2, r0, #0
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	2308      	movs	r3, #8
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	1c0a      	adds	r2, r1, #0
 8006490:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2241      	movs	r2, #65	; 0x41
 8006496:	5c9b      	ldrb	r3, [r3, r2]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b20      	cmp	r3, #32
 800649c:	d000      	beq.n	80064a0 <HAL_I2C_Master_Receive+0x2c>
 800649e:	e0e8      	b.n	8006672 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2240      	movs	r2, #64	; 0x40
 80064a4:	5c9b      	ldrb	r3, [r3, r2]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_I2C_Master_Receive+0x3a>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e0e2      	b.n	8006674 <HAL_I2C_Master_Receive+0x200>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2240      	movs	r2, #64	; 0x40
 80064b2:	2101      	movs	r1, #1
 80064b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064b6:	f7fe fdcd 	bl	8005054 <HAL_GetTick>
 80064ba:	0003      	movs	r3, r0
 80064bc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064be:	2380      	movs	r3, #128	; 0x80
 80064c0:	0219      	lsls	r1, r3, #8
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2319      	movs	r3, #25
 80064ca:	2201      	movs	r2, #1
 80064cc:	f000 f8fc 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 80064d0:	1e03      	subs	r3, r0, #0
 80064d2:	d001      	beq.n	80064d8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0cd      	b.n	8006674 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2241      	movs	r2, #65	; 0x41
 80064dc:	2122      	movs	r1, #34	; 0x22
 80064de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2242      	movs	r2, #66	; 0x42
 80064e4:	2110      	movs	r1, #16
 80064e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2208      	movs	r2, #8
 80064f8:	18ba      	adds	r2, r7, r2
 80064fa:	8812      	ldrh	r2, [r2, #0]
 80064fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006508:	b29b      	uxth	r3, r3
 800650a:	2bff      	cmp	r3, #255	; 0xff
 800650c:	d911      	bls.n	8006532 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	22ff      	movs	r2, #255	; 0xff
 8006512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006518:	b2da      	uxtb	r2, r3
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	045c      	lsls	r4, r3, #17
 800651e:	230a      	movs	r3, #10
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	8819      	ldrh	r1, [r3, #0]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	4b55      	ldr	r3, [pc, #340]	; (800667c <HAL_I2C_Master_Receive+0x208>)
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	0023      	movs	r3, r4
 800652c:	f000 fa58 	bl	80069e0 <I2C_TransferConfig>
 8006530:	e076      	b.n	8006620 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006540:	b2da      	uxtb	r2, r3
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	049c      	lsls	r4, r3, #18
 8006546:	230a      	movs	r3, #10
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	8819      	ldrh	r1, [r3, #0]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	4b4b      	ldr	r3, [pc, #300]	; (800667c <HAL_I2C_Master_Receive+0x208>)
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	0023      	movs	r3, r4
 8006554:	f000 fa44 	bl	80069e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006558:	e062      	b.n	8006620 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	0018      	movs	r0, r3
 8006562:	f000 f96b 	bl	800683c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006566:	1e03      	subs	r3, r0, #0
 8006568:	d001      	beq.n	800656e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e082      	b.n	8006674 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d03a      	beq.n	8006620 <HAL_I2C_Master_Receive+0x1ac>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d136      	bne.n	8006620 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	0013      	movs	r3, r2
 80065bc:	2200      	movs	r2, #0
 80065be:	2180      	movs	r1, #128	; 0x80
 80065c0:	f000 f882 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 80065c4:	1e03      	subs	r3, r0, #0
 80065c6:	d001      	beq.n	80065cc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e053      	b.n	8006674 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2bff      	cmp	r3, #255	; 0xff
 80065d4:	d911      	bls.n	80065fa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	; 0xff
 80065da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	2380      	movs	r3, #128	; 0x80
 80065e4:	045c      	lsls	r4, r3, #17
 80065e6:	230a      	movs	r3, #10
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	8819      	ldrh	r1, [r3, #0]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	2300      	movs	r3, #0
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	0023      	movs	r3, r4
 80065f4:	f000 f9f4 	bl	80069e0 <I2C_TransferConfig>
 80065f8:	e012      	b.n	8006620 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006608:	b2da      	uxtb	r2, r3
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	049c      	lsls	r4, r3, #18
 800660e:	230a      	movs	r3, #10
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	8819      	ldrh	r1, [r3, #0]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	2300      	movs	r3, #0
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	0023      	movs	r3, r4
 800661c:	f000 f9e0 	bl	80069e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d197      	bne.n	800655a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	0018      	movs	r0, r3
 8006632:	f000 f8c7 	bl	80067c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006636:	1e03      	subs	r3, r0, #0
 8006638:	d001      	beq.n	800663e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e01a      	b.n	8006674 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2220      	movs	r2, #32
 8006644:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	490b      	ldr	r1, [pc, #44]	; (8006680 <HAL_I2C_Master_Receive+0x20c>)
 8006652:	400a      	ands	r2, r1
 8006654:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2241      	movs	r2, #65	; 0x41
 800665a:	2120      	movs	r1, #32
 800665c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2242      	movs	r2, #66	; 0x42
 8006662:	2100      	movs	r1, #0
 8006664:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2240      	movs	r2, #64	; 0x40
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8006672:	2302      	movs	r3, #2
  }
}
 8006674:	0018      	movs	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	b007      	add	sp, #28
 800667a:	bd90      	pop	{r4, r7, pc}
 800667c:	80002400 	.word	0x80002400
 8006680:	fe00e800 	.word	0xfe00e800

08006684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	2202      	movs	r2, #2
 8006694:	4013      	ands	r3, r2
 8006696:	2b02      	cmp	r3, #2
 8006698:	d103      	bne.n	80066a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2200      	movs	r2, #0
 80066a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2201      	movs	r2, #1
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d007      	beq.n	80066c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2101      	movs	r1, #1
 80066bc:	430a      	orrs	r2, r1
 80066be:	619a      	str	r2, [r3, #24]
  }
}
 80066c0:	46c0      	nop			; (mov r8, r8)
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b002      	add	sp, #8
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	1dfb      	adds	r3, r7, #7
 80066d6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d8:	e021      	b.n	800671e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	d01e      	beq.n	800671e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e0:	f7fe fcb8 	bl	8005054 <HAL_GetTick>
 80066e4:	0002      	movs	r2, r0
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d302      	bcc.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d113      	bne.n	800671e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	2220      	movs	r2, #32
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2241      	movs	r2, #65	; 0x41
 8006706:	2120      	movs	r1, #32
 8006708:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2242      	movs	r2, #66	; 0x42
 800670e:	2100      	movs	r1, #0
 8006710:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2240      	movs	r2, #64	; 0x40
 8006716:	2100      	movs	r1, #0
 8006718:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e00f      	b.n	800673e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	425a      	negs	r2, r3
 800672e:	4153      	adcs	r3, r2
 8006730:	b2db      	uxtb	r3, r3
 8006732:	001a      	movs	r2, r3
 8006734:	1dfb      	adds	r3, r7, #7
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d0ce      	beq.n	80066da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	0018      	movs	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	b004      	add	sp, #16
 8006744:	bd80      	pop	{r7, pc}

08006746 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006752:	e02b      	b.n	80067ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	0018      	movs	r0, r3
 800675c:	f000 f8da 	bl	8006914 <I2C_IsAcknowledgeFailed>
 8006760:	1e03      	subs	r3, r0, #0
 8006762:	d001      	beq.n	8006768 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e029      	b.n	80067bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	3301      	adds	r3, #1
 800676c:	d01e      	beq.n	80067ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676e:	f7fe fc71 	bl	8005054 <HAL_GetTick>
 8006772:	0002      	movs	r2, r0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	429a      	cmp	r2, r3
 800677c:	d302      	bcc.n	8006784 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d113      	bne.n	80067ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	2220      	movs	r2, #32
 800678a:	431a      	orrs	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2241      	movs	r2, #65	; 0x41
 8006794:	2120      	movs	r1, #32
 8006796:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2242      	movs	r2, #66	; 0x42
 800679c:	2100      	movs	r1, #0
 800679e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2240      	movs	r2, #64	; 0x40
 80067a4:	2100      	movs	r1, #0
 80067a6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e007      	b.n	80067bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	2202      	movs	r2, #2
 80067b4:	4013      	ands	r3, r2
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d1cc      	bne.n	8006754 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	0018      	movs	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	b004      	add	sp, #16
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067d0:	e028      	b.n	8006824 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	0018      	movs	r0, r3
 80067da:	f000 f89b 	bl	8006914 <I2C_IsAcknowledgeFailed>
 80067de:	1e03      	subs	r3, r0, #0
 80067e0:	d001      	beq.n	80067e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e026      	b.n	8006834 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e6:	f7fe fc35 	bl	8005054 <HAL_GetTick>
 80067ea:	0002      	movs	r2, r0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d302      	bcc.n	80067fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d113      	bne.n	8006824 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006800:	2220      	movs	r2, #32
 8006802:	431a      	orrs	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2241      	movs	r2, #65	; 0x41
 800680c:	2120      	movs	r1, #32
 800680e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2242      	movs	r2, #66	; 0x42
 8006814:	2100      	movs	r1, #0
 8006816:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2240      	movs	r2, #64	; 0x40
 800681c:	2100      	movs	r1, #0
 800681e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e007      	b.n	8006834 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	2220      	movs	r2, #32
 800682c:	4013      	ands	r3, r2
 800682e:	2b20      	cmp	r3, #32
 8006830:	d1cf      	bne.n	80067d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	0018      	movs	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	b004      	add	sp, #16
 800683a:	bd80      	pop	{r7, pc}

0800683c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006848:	e055      	b.n	80068f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	0018      	movs	r0, r3
 8006852:	f000 f85f 	bl	8006914 <I2C_IsAcknowledgeFailed>
 8006856:	1e03      	subs	r3, r0, #0
 8006858:	d001      	beq.n	800685e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e053      	b.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	2220      	movs	r2, #32
 8006866:	4013      	ands	r3, r2
 8006868:	2b20      	cmp	r3, #32
 800686a:	d129      	bne.n	80068c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	2204      	movs	r2, #4
 8006874:	4013      	ands	r3, r2
 8006876:	2b04      	cmp	r3, #4
 8006878:	d105      	bne.n	8006886 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	e03f      	b.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2220      	movs	r2, #32
 800688c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	491d      	ldr	r1, [pc, #116]	; (8006910 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800689a:	400a      	ands	r2, r1
 800689c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2241      	movs	r2, #65	; 0x41
 80068a8:	2120      	movs	r1, #32
 80068aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2242      	movs	r2, #66	; 0x42
 80068b0:	2100      	movs	r1, #0
 80068b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2240      	movs	r2, #64	; 0x40
 80068b8:	2100      	movs	r1, #0
 80068ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e022      	b.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c0:	f7fe fbc8 	bl	8005054 <HAL_GetTick>
 80068c4:	0002      	movs	r2, r0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10f      	bne.n	80068f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	2220      	movs	r2, #32
 80068dc:	431a      	orrs	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2241      	movs	r2, #65	; 0x41
 80068e6:	2120      	movs	r1, #32
 80068e8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2240      	movs	r2, #64	; 0x40
 80068ee:	2100      	movs	r1, #0
 80068f0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e007      	b.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	2204      	movs	r2, #4
 80068fe:	4013      	ands	r3, r2
 8006900:	2b04      	cmp	r3, #4
 8006902:	d1a2      	bne.n	800684a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	0018      	movs	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	b004      	add	sp, #16
 800690c:	bd80      	pop	{r7, pc}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	fe00e800 	.word	0xfe00e800

08006914 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	2210      	movs	r2, #16
 8006928:	4013      	ands	r3, r2
 800692a:	2b10      	cmp	r3, #16
 800692c:	d151      	bne.n	80069d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800692e:	e021      	b.n	8006974 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	3301      	adds	r3, #1
 8006934:	d01e      	beq.n	8006974 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006936:	f7fe fb8d 	bl	8005054 <HAL_GetTick>
 800693a:	0002      	movs	r2, r0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	d302      	bcc.n	800694c <I2C_IsAcknowledgeFailed+0x38>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d113      	bne.n	8006974 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006950:	2220      	movs	r2, #32
 8006952:	431a      	orrs	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2241      	movs	r2, #65	; 0x41
 800695c:	2120      	movs	r1, #32
 800695e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2242      	movs	r2, #66	; 0x42
 8006964:	2100      	movs	r1, #0
 8006966:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2240      	movs	r2, #64	; 0x40
 800696c:	2100      	movs	r1, #0
 800696e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e02f      	b.n	80069d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	2220      	movs	r2, #32
 800697c:	4013      	ands	r3, r2
 800697e:	2b20      	cmp	r3, #32
 8006980:	d1d6      	bne.n	8006930 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2210      	movs	r2, #16
 8006988:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2220      	movs	r2, #32
 8006990:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	0018      	movs	r0, r3
 8006996:	f7ff fe75 	bl	8006684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	490d      	ldr	r1, [pc, #52]	; (80069dc <I2C_IsAcknowledgeFailed+0xc8>)
 80069a6:	400a      	ands	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	2204      	movs	r2, #4
 80069b0:	431a      	orrs	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2241      	movs	r2, #65	; 0x41
 80069ba:	2120      	movs	r1, #32
 80069bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2242      	movs	r2, #66	; 0x42
 80069c2:	2100      	movs	r1, #0
 80069c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2240      	movs	r2, #64	; 0x40
 80069ca:	2100      	movs	r1, #0
 80069cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	0018      	movs	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b004      	add	sp, #16
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	fe00e800 	.word	0xfe00e800

080069e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	0008      	movs	r0, r1
 80069ea:	0011      	movs	r1, r2
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	240a      	movs	r4, #10
 80069f0:	193b      	adds	r3, r7, r4
 80069f2:	1c02      	adds	r2, r0, #0
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	2009      	movs	r0, #9
 80069f8:	183b      	adds	r3, r7, r0
 80069fa:	1c0a      	adds	r2, r1, #0
 80069fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	6a3a      	ldr	r2, [r7, #32]
 8006a06:	0d51      	lsrs	r1, r2, #21
 8006a08:	2280      	movs	r2, #128	; 0x80
 8006a0a:	00d2      	lsls	r2, r2, #3
 8006a0c:	400a      	ands	r2, r1
 8006a0e:	490e      	ldr	r1, [pc, #56]	; (8006a48 <I2C_TransferConfig+0x68>)
 8006a10:	430a      	orrs	r2, r1
 8006a12:	43d2      	mvns	r2, r2
 8006a14:	401a      	ands	r2, r3
 8006a16:	0011      	movs	r1, r2
 8006a18:	193b      	adds	r3, r7, r4
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	059b      	lsls	r3, r3, #22
 8006a1e:	0d9a      	lsrs	r2, r3, #22
 8006a20:	183b      	adds	r3, r7, r0
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	0418      	lsls	r0, r3, #16
 8006a26:	23ff      	movs	r3, #255	; 0xff
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	4003      	ands	r3, r0
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b005      	add	sp, #20
 8006a44:	bd90      	pop	{r4, r7, pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	03ff63ff 	.word	0x03ff63ff

08006a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2241      	movs	r2, #65	; 0x41
 8006a5a:	5c9b      	ldrb	r3, [r3, r2]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d138      	bne.n	8006ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2240      	movs	r2, #64	; 0x40
 8006a66:	5c9b      	ldrb	r3, [r3, r2]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e032      	b.n	8006ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2240      	movs	r2, #64	; 0x40
 8006a74:	2101      	movs	r1, #1
 8006a76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2241      	movs	r2, #65	; 0x41
 8006a7c:	2124      	movs	r1, #36	; 0x24
 8006a7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	438a      	bics	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4911      	ldr	r1, [pc, #68]	; (8006ae0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006a9c:	400a      	ands	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6819      	ldr	r1, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2101      	movs	r1, #1
 8006abc:	430a      	orrs	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2241      	movs	r2, #65	; 0x41
 8006ac4:	2120      	movs	r1, #32
 8006ac6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2240      	movs	r2, #64	; 0x40
 8006acc:	2100      	movs	r1, #0
 8006ace:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b002      	add	sp, #8
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	ffffefff 	.word	0xffffefff

08006ae4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2241      	movs	r2, #65	; 0x41
 8006af2:	5c9b      	ldrb	r3, [r3, r2]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d139      	bne.n	8006b6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2240      	movs	r2, #64	; 0x40
 8006afe:	5c9b      	ldrb	r3, [r3, r2]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e033      	b.n	8006b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2240      	movs	r2, #64	; 0x40
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2241      	movs	r2, #65	; 0x41
 8006b14:	2124      	movs	r1, #36	; 0x24
 8006b16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2101      	movs	r1, #1
 8006b24:	438a      	bics	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2101      	movs	r1, #1
 8006b56:	430a      	orrs	r2, r1
 8006b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2241      	movs	r2, #65	; 0x41
 8006b5e:	2120      	movs	r1, #32
 8006b60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2240      	movs	r2, #64	; 0x40
 8006b66:	2100      	movs	r1, #0
 8006b68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e000      	b.n	8006b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b6e:	2302      	movs	r3, #2
  }
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b004      	add	sp, #16
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	fffff0ff 	.word	0xfffff0ff

08006b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b7c:	b5b0      	push	{r4, r5, r7, lr}
 8006b7e:	b08a      	sub	sp, #40	; 0x28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f000 fb6c 	bl	8007268 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b90:	4bc8      	ldr	r3, [pc, #800]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	220c      	movs	r2, #12
 8006b96:	4013      	ands	r3, r2
 8006b98:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b9a:	4bc6      	ldr	r3, [pc, #792]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	2380      	movs	r3, #128	; 0x80
 8006ba0:	025b      	lsls	r3, r3, #9
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2201      	movs	r2, #1
 8006bac:	4013      	ands	r3, r2
 8006bae:	d100      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x36>
 8006bb0:	e07d      	b.n	8006cae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d007      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	2b0c      	cmp	r3, #12
 8006bbc:	d112      	bne.n	8006be4 <HAL_RCC_OscConfig+0x68>
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	2380      	movs	r3, #128	; 0x80
 8006bc2:	025b      	lsls	r3, r3, #9
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d10d      	bne.n	8006be4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc8:	4bba      	ldr	r3, [pc, #744]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	029b      	lsls	r3, r3, #10
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x5a>
 8006bd4:	e06a      	b.n	8006cac <HAL_RCC_OscConfig+0x130>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d166      	bne.n	8006cac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f000 fb42 	bl	8007268 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	025b      	lsls	r3, r3, #9
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d107      	bne.n	8006c00 <HAL_RCC_OscConfig+0x84>
 8006bf0:	4bb0      	ldr	r3, [pc, #704]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4baf      	ldr	r3, [pc, #700]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006bf6:	2180      	movs	r1, #128	; 0x80
 8006bf8:	0249      	lsls	r1, r1, #9
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e027      	b.n	8006c50 <HAL_RCC_OscConfig+0xd4>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	23a0      	movs	r3, #160	; 0xa0
 8006c06:	02db      	lsls	r3, r3, #11
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d10e      	bne.n	8006c2a <HAL_RCC_OscConfig+0xae>
 8006c0c:	4ba9      	ldr	r3, [pc, #676]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	4ba8      	ldr	r3, [pc, #672]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c12:	2180      	movs	r1, #128	; 0x80
 8006c14:	02c9      	lsls	r1, r1, #11
 8006c16:	430a      	orrs	r2, r1
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	4ba6      	ldr	r3, [pc, #664]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4ba5      	ldr	r3, [pc, #660]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c20:	2180      	movs	r1, #128	; 0x80
 8006c22:	0249      	lsls	r1, r1, #9
 8006c24:	430a      	orrs	r2, r1
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e012      	b.n	8006c50 <HAL_RCC_OscConfig+0xd4>
 8006c2a:	4ba2      	ldr	r3, [pc, #648]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	4ba1      	ldr	r3, [pc, #644]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c30:	49a1      	ldr	r1, [pc, #644]	; (8006eb8 <HAL_RCC_OscConfig+0x33c>)
 8006c32:	400a      	ands	r2, r1
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	4b9f      	ldr	r3, [pc, #636]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	2380      	movs	r3, #128	; 0x80
 8006c3c:	025b      	lsls	r3, r3, #9
 8006c3e:	4013      	ands	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4b9b      	ldr	r3, [pc, #620]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4b9a      	ldr	r3, [pc, #616]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c4a:	499c      	ldr	r1, [pc, #624]	; (8006ebc <HAL_RCC_OscConfig+0x340>)
 8006c4c:	400a      	ands	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d014      	beq.n	8006c82 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c58:	f7fe f9fc 	bl	8005054 <HAL_GetTick>
 8006c5c:	0003      	movs	r3, r0
 8006c5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c60:	e008      	b.n	8006c74 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c62:	f7fe f9f7 	bl	8005054 <HAL_GetTick>
 8006c66:	0002      	movs	r2, r0
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b64      	cmp	r3, #100	; 0x64
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e2f9      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c74:	4b8f      	ldr	r3, [pc, #572]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	2380      	movs	r3, #128	; 0x80
 8006c7a:	029b      	lsls	r3, r3, #10
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	d0f0      	beq.n	8006c62 <HAL_RCC_OscConfig+0xe6>
 8006c80:	e015      	b.n	8006cae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c82:	f7fe f9e7 	bl	8005054 <HAL_GetTick>
 8006c86:	0003      	movs	r3, r0
 8006c88:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fe f9e2 	bl	8005054 <HAL_GetTick>
 8006c90:	0002      	movs	r2, r0
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	; 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e2e4      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c9e:	4b85      	ldr	r3, [pc, #532]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	2380      	movs	r3, #128	; 0x80
 8006ca4:	029b      	lsls	r3, r3, #10
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0x110>
 8006caa:	e000      	b.n	8006cae <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d100      	bne.n	8006cba <HAL_RCC_OscConfig+0x13e>
 8006cb8:	e099      	b.n	8006dee <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d009      	beq.n	8006cdc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006cc8:	4b7a      	ldr	r3, [pc, #488]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b79      	ldr	r3, [pc, #484]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006cce:	2120      	movs	r1, #32
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	4393      	bics	r3, r2
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d005      	beq.n	8006cee <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	d13e      	bne.n	8006d66 <HAL_RCC_OscConfig+0x1ea>
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d13b      	bne.n	8006d66 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006cee:	4b71      	ldr	r3, [pc, #452]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_RCC_OscConfig+0x186>
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e2b2      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d02:	4b6c      	ldr	r3, [pc, #432]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	4a6e      	ldr	r2, [pc, #440]	; (8006ec0 <HAL_RCC_OscConfig+0x344>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	0019      	movs	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	021a      	lsls	r2, r3, #8
 8006d12:	4b68      	ldr	r3, [pc, #416]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006d14:	430a      	orrs	r2, r1
 8006d16:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006d18:	4b66      	ldr	r3, [pc, #408]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2209      	movs	r2, #9
 8006d1e:	4393      	bics	r3, r2
 8006d20:	0019      	movs	r1, r3
 8006d22:	4b64      	ldr	r3, [pc, #400]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d26:	430a      	orrs	r2, r1
 8006d28:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d2a:	f000 fbeb 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8006d2e:	0001      	movs	r1, r0
 8006d30:	4b60      	ldr	r3, [pc, #384]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	220f      	movs	r2, #15
 8006d38:	4013      	ands	r3, r2
 8006d3a:	4a62      	ldr	r2, [pc, #392]	; (8006ec4 <HAL_RCC_OscConfig+0x348>)
 8006d3c:	5cd3      	ldrb	r3, [r2, r3]
 8006d3e:	000a      	movs	r2, r1
 8006d40:	40da      	lsrs	r2, r3
 8006d42:	4b61      	ldr	r3, [pc, #388]	; (8006ec8 <HAL_RCC_OscConfig+0x34c>)
 8006d44:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006d46:	4b61      	ldr	r3, [pc, #388]	; (8006ecc <HAL_RCC_OscConfig+0x350>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2513      	movs	r5, #19
 8006d4c:	197c      	adds	r4, r7, r5
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7fe f93a 	bl	8004fc8 <HAL_InitTick>
 8006d54:	0003      	movs	r3, r0
 8006d56:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006d58:	197b      	adds	r3, r7, r5
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d046      	beq.n	8006dee <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006d60:	197b      	adds	r3, r7, r5
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	e280      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d027      	beq.n	8006dbc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006d6c:	4b51      	ldr	r3, [pc, #324]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2209      	movs	r2, #9
 8006d72:	4393      	bics	r3, r2
 8006d74:	0019      	movs	r1, r3
 8006d76:	4b4f      	ldr	r3, [pc, #316]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7e:	f7fe f969 	bl	8005054 <HAL_GetTick>
 8006d82:	0003      	movs	r3, r0
 8006d84:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d88:	f7fe f964 	bl	8005054 <HAL_GetTick>
 8006d8c:	0002      	movs	r2, r0
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e266      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d9a:	4b46      	ldr	r3, [pc, #280]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	4013      	ands	r3, r2
 8006da2:	d0f1      	beq.n	8006d88 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006da4:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a45      	ldr	r2, [pc, #276]	; (8006ec0 <HAL_RCC_OscConfig+0x344>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	0019      	movs	r1, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	021a      	lsls	r2, r3, #8
 8006db4:	4b3f      	ldr	r3, [pc, #252]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006db6:	430a      	orrs	r2, r1
 8006db8:	605a      	str	r2, [r3, #4]
 8006dba:	e018      	b.n	8006dee <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dbc:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b3c      	ldr	r3, [pc, #240]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	438a      	bics	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc8:	f7fe f944 	bl	8005054 <HAL_GetTick>
 8006dcc:	0003      	movs	r3, r0
 8006dce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dd2:	f7fe f93f 	bl	8005054 <HAL_GetTick>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e241      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006de4:	4b33      	ldr	r3, [pc, #204]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2204      	movs	r2, #4
 8006dea:	4013      	ands	r3, r2
 8006dec:	d1f1      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2210      	movs	r2, #16
 8006df4:	4013      	ands	r3, r2
 8006df6:	d100      	bne.n	8006dfa <HAL_RCC_OscConfig+0x27e>
 8006df8:	e0a1      	b.n	8006f3e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d140      	bne.n	8006e82 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e00:	4b2c      	ldr	r3, [pc, #176]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	2380      	movs	r3, #128	; 0x80
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCC_OscConfig+0x29c>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e227      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e18:	4b26      	ldr	r3, [pc, #152]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4a2c      	ldr	r2, [pc, #176]	; (8006ed0 <HAL_RCC_OscConfig+0x354>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	0019      	movs	r1, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e2c:	4b21      	ldr	r3, [pc, #132]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	0a19      	lsrs	r1, r3, #8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	061a      	lsls	r2, r3, #24
 8006e3a:	4b1e      	ldr	r3, [pc, #120]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	0b5b      	lsrs	r3, r3, #13
 8006e46:	3301      	adds	r3, #1
 8006e48:	2280      	movs	r2, #128	; 0x80
 8006e4a:	0212      	lsls	r2, r2, #8
 8006e4c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006e4e:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	091b      	lsrs	r3, r3, #4
 8006e54:	210f      	movs	r1, #15
 8006e56:	400b      	ands	r3, r1
 8006e58:	491a      	ldr	r1, [pc, #104]	; (8006ec4 <HAL_RCC_OscConfig+0x348>)
 8006e5a:	5ccb      	ldrb	r3, [r1, r3]
 8006e5c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006e5e:	4b1a      	ldr	r3, [pc, #104]	; (8006ec8 <HAL_RCC_OscConfig+0x34c>)
 8006e60:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006e62:	4b1a      	ldr	r3, [pc, #104]	; (8006ecc <HAL_RCC_OscConfig+0x350>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2513      	movs	r5, #19
 8006e68:	197c      	adds	r4, r7, r5
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f7fe f8ac 	bl	8004fc8 <HAL_InitTick>
 8006e70:	0003      	movs	r3, r0
 8006e72:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006e74:	197b      	adds	r3, r7, r5
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d060      	beq.n	8006f3e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8006e7c:	197b      	adds	r3, r7, r5
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	e1f2      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d03f      	beq.n	8006f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e8a:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <HAL_RCC_OscConfig+0x338>)
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	0049      	lsls	r1, r1, #1
 8006e94:	430a      	orrs	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e98:	f7fe f8dc 	bl	8005054 <HAL_GetTick>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006ea0:	e018      	b.n	8006ed4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ea2:	f7fe f8d7 	bl	8005054 <HAL_GetTick>
 8006ea6:	0002      	movs	r2, r0
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d911      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e1d9      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	fffeffff 	.word	0xfffeffff
 8006ebc:	fffbffff 	.word	0xfffbffff
 8006ec0:	ffffe0ff 	.word	0xffffe0ff
 8006ec4:	0800a0d4 	.word	0x0800a0d4
 8006ec8:	20000000 	.word	0x20000000
 8006ecc:	20000008 	.word	0x20000008
 8006ed0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006ed4:	4bc9      	ldr	r3, [pc, #804]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4013      	ands	r3, r2
 8006ede:	d0e0      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ee0:	4bc6      	ldr	r3, [pc, #792]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4ac6      	ldr	r2, [pc, #792]	; (8007200 <HAL_RCC_OscConfig+0x684>)
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	0019      	movs	r1, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1a      	ldr	r2, [r3, #32]
 8006eee:	4bc3      	ldr	r3, [pc, #780]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ef4:	4bc1      	ldr	r3, [pc, #772]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	0a19      	lsrs	r1, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	061a      	lsls	r2, r3, #24
 8006f02:	4bbe      	ldr	r3, [pc, #760]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
 8006f08:	e019      	b.n	8006f3e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f0a:	4bbc      	ldr	r3, [pc, #752]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4bbb      	ldr	r3, [pc, #748]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f10:	49bc      	ldr	r1, [pc, #752]	; (8007204 <HAL_RCC_OscConfig+0x688>)
 8006f12:	400a      	ands	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f16:	f7fe f89d 	bl	8005054 <HAL_GetTick>
 8006f1a:	0003      	movs	r3, r0
 8006f1c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f20:	f7fe f898 	bl	8005054 <HAL_GetTick>
 8006f24:	0002      	movs	r2, r0
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e19a      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006f32:	4bb2      	ldr	r3, [pc, #712]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d1f0      	bne.n	8006f20 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2208      	movs	r2, #8
 8006f44:	4013      	ands	r3, r2
 8006f46:	d036      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d019      	beq.n	8006f84 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f50:	4baa      	ldr	r3, [pc, #680]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f54:	4ba9      	ldr	r3, [pc, #676]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f56:	2101      	movs	r1, #1
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f5c:	f7fe f87a 	bl	8005054 <HAL_GetTick>
 8006f60:	0003      	movs	r3, r0
 8006f62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f66:	f7fe f875 	bl	8005054 <HAL_GetTick>
 8006f6a:	0002      	movs	r2, r0
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e177      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f78:	4ba0      	ldr	r3, [pc, #640]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	4013      	ands	r3, r2
 8006f80:	d0f1      	beq.n	8006f66 <HAL_RCC_OscConfig+0x3ea>
 8006f82:	e018      	b.n	8006fb6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f84:	4b9d      	ldr	r3, [pc, #628]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f88:	4b9c      	ldr	r3, [pc, #624]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	438a      	bics	r2, r1
 8006f8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f90:	f7fe f860 	bl	8005054 <HAL_GetTick>
 8006f94:	0003      	movs	r3, r0
 8006f96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f9a:	f7fe f85b 	bl	8005054 <HAL_GetTick>
 8006f9e:	0002      	movs	r2, r0
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e15d      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fac:	4b93      	ldr	r3, [pc, #588]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	d1f1      	bne.n	8006f9a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2204      	movs	r2, #4
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d100      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x446>
 8006fc0:	e0ae      	b.n	8007120 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fc2:	2023      	movs	r0, #35	; 0x23
 8006fc4:	183b      	adds	r3, r7, r0
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fca:	4b8c      	ldr	r3, [pc, #560]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	055b      	lsls	r3, r3, #21
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d109      	bne.n	8006fea <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fd6:	4b89      	ldr	r3, [pc, #548]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fda:	4b88      	ldr	r3, [pc, #544]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8006fdc:	2180      	movs	r1, #128	; 0x80
 8006fde:	0549      	lsls	r1, r1, #21
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006fe4:	183b      	adds	r3, r7, r0
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fea:	4b87      	ldr	r3, [pc, #540]	; (8007208 <HAL_RCC_OscConfig+0x68c>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	2380      	movs	r3, #128	; 0x80
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	d11a      	bne.n	800702c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ff6:	4b84      	ldr	r3, [pc, #528]	; (8007208 <HAL_RCC_OscConfig+0x68c>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4b83      	ldr	r3, [pc, #524]	; (8007208 <HAL_RCC_OscConfig+0x68c>)
 8006ffc:	2180      	movs	r1, #128	; 0x80
 8006ffe:	0049      	lsls	r1, r1, #1
 8007000:	430a      	orrs	r2, r1
 8007002:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007004:	f7fe f826 	bl	8005054 <HAL_GetTick>
 8007008:	0003      	movs	r3, r0
 800700a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800700e:	f7fe f821 	bl	8005054 <HAL_GetTick>
 8007012:	0002      	movs	r2, r0
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b64      	cmp	r3, #100	; 0x64
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e123      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007020:	4b79      	ldr	r3, [pc, #484]	; (8007208 <HAL_RCC_OscConfig+0x68c>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	4013      	ands	r3, r2
 800702a:	d0f0      	beq.n	800700e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	429a      	cmp	r2, r3
 8007036:	d107      	bne.n	8007048 <HAL_RCC_OscConfig+0x4cc>
 8007038:	4b70      	ldr	r3, [pc, #448]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800703a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800703c:	4b6f      	ldr	r3, [pc, #444]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800703e:	2180      	movs	r1, #128	; 0x80
 8007040:	0049      	lsls	r1, r1, #1
 8007042:	430a      	orrs	r2, r1
 8007044:	651a      	str	r2, [r3, #80]	; 0x50
 8007046:	e031      	b.n	80070ac <HAL_RCC_OscConfig+0x530>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10c      	bne.n	800706a <HAL_RCC_OscConfig+0x4ee>
 8007050:	4b6a      	ldr	r3, [pc, #424]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007054:	4b69      	ldr	r3, [pc, #420]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007056:	496b      	ldr	r1, [pc, #428]	; (8007204 <HAL_RCC_OscConfig+0x688>)
 8007058:	400a      	ands	r2, r1
 800705a:	651a      	str	r2, [r3, #80]	; 0x50
 800705c:	4b67      	ldr	r3, [pc, #412]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800705e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007060:	4b66      	ldr	r3, [pc, #408]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007062:	496a      	ldr	r1, [pc, #424]	; (800720c <HAL_RCC_OscConfig+0x690>)
 8007064:	400a      	ands	r2, r1
 8007066:	651a      	str	r2, [r3, #80]	; 0x50
 8007068:	e020      	b.n	80070ac <HAL_RCC_OscConfig+0x530>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	23a0      	movs	r3, #160	; 0xa0
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	429a      	cmp	r2, r3
 8007074:	d10e      	bne.n	8007094 <HAL_RCC_OscConfig+0x518>
 8007076:	4b61      	ldr	r3, [pc, #388]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800707a:	4b60      	ldr	r3, [pc, #384]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800707c:	2180      	movs	r1, #128	; 0x80
 800707e:	00c9      	lsls	r1, r1, #3
 8007080:	430a      	orrs	r2, r1
 8007082:	651a      	str	r2, [r3, #80]	; 0x50
 8007084:	4b5d      	ldr	r3, [pc, #372]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007088:	4b5c      	ldr	r3, [pc, #368]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800708a:	2180      	movs	r1, #128	; 0x80
 800708c:	0049      	lsls	r1, r1, #1
 800708e:	430a      	orrs	r2, r1
 8007090:	651a      	str	r2, [r3, #80]	; 0x50
 8007092:	e00b      	b.n	80070ac <HAL_RCC_OscConfig+0x530>
 8007094:	4b59      	ldr	r3, [pc, #356]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007098:	4b58      	ldr	r3, [pc, #352]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800709a:	495a      	ldr	r1, [pc, #360]	; (8007204 <HAL_RCC_OscConfig+0x688>)
 800709c:	400a      	ands	r2, r1
 800709e:	651a      	str	r2, [r3, #80]	; 0x50
 80070a0:	4b56      	ldr	r3, [pc, #344]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 80070a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070a4:	4b55      	ldr	r3, [pc, #340]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 80070a6:	4959      	ldr	r1, [pc, #356]	; (800720c <HAL_RCC_OscConfig+0x690>)
 80070a8:	400a      	ands	r2, r1
 80070aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d015      	beq.n	80070e0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070b4:	f7fd ffce 	bl	8005054 <HAL_GetTick>
 80070b8:	0003      	movs	r3, r0
 80070ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070bc:	e009      	b.n	80070d2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070be:	f7fd ffc9 	bl	8005054 <HAL_GetTick>
 80070c2:	0002      	movs	r2, r0
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	4a51      	ldr	r2, [pc, #324]	; (8007210 <HAL_RCC_OscConfig+0x694>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e0ca      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070d2:	4b4a      	ldr	r3, [pc, #296]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 80070d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4013      	ands	r3, r2
 80070dc:	d0ef      	beq.n	80070be <HAL_RCC_OscConfig+0x542>
 80070de:	e014      	b.n	800710a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070e0:	f7fd ffb8 	bl	8005054 <HAL_GetTick>
 80070e4:	0003      	movs	r3, r0
 80070e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070e8:	e009      	b.n	80070fe <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ea:	f7fd ffb3 	bl	8005054 <HAL_GetTick>
 80070ee:	0002      	movs	r2, r0
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	4a46      	ldr	r2, [pc, #280]	; (8007210 <HAL_RCC_OscConfig+0x694>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e0b4      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070fe:	4b3f      	ldr	r3, [pc, #252]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007102:	2380      	movs	r3, #128	; 0x80
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4013      	ands	r3, r2
 8007108:	d1ef      	bne.n	80070ea <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800710a:	2323      	movs	r3, #35	; 0x23
 800710c:	18fb      	adds	r3, r7, r3
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d105      	bne.n	8007120 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007114:	4b39      	ldr	r3, [pc, #228]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007118:	4b38      	ldr	r3, [pc, #224]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800711a:	493e      	ldr	r1, [pc, #248]	; (8007214 <HAL_RCC_OscConfig+0x698>)
 800711c:	400a      	ands	r2, r1
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b00      	cmp	r3, #0
 8007126:	d100      	bne.n	800712a <HAL_RCC_OscConfig+0x5ae>
 8007128:	e09d      	b.n	8007266 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2b0c      	cmp	r3, #12
 800712e:	d100      	bne.n	8007132 <HAL_RCC_OscConfig+0x5b6>
 8007130:	e076      	b.n	8007220 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	2b02      	cmp	r3, #2
 8007138:	d145      	bne.n	80071c6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713a:	4b30      	ldr	r3, [pc, #192]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4b2f      	ldr	r3, [pc, #188]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007140:	4935      	ldr	r1, [pc, #212]	; (8007218 <HAL_RCC_OscConfig+0x69c>)
 8007142:	400a      	ands	r2, r1
 8007144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fd ff85 	bl	8005054 <HAL_GetTick>
 800714a:	0003      	movs	r3, r0
 800714c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007150:	f7fd ff80 	bl	8005054 <HAL_GetTick>
 8007154:	0002      	movs	r2, r0
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e082      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007162:	4b26      	ldr	r3, [pc, #152]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	2380      	movs	r3, #128	; 0x80
 8007168:	049b      	lsls	r3, r3, #18
 800716a:	4013      	ands	r3, r2
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800716e:	4b23      	ldr	r3, [pc, #140]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	4a2a      	ldr	r2, [pc, #168]	; (800721c <HAL_RCC_OscConfig+0x6a0>)
 8007174:	4013      	ands	r3, r2
 8007176:	0019      	movs	r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	431a      	orrs	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	431a      	orrs	r2, r3
 8007188:	4b1c      	ldr	r3, [pc, #112]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 800718a:	430a      	orrs	r2, r1
 800718c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800718e:	4b1b      	ldr	r3, [pc, #108]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 8007194:	2180      	movs	r1, #128	; 0x80
 8007196:	0449      	lsls	r1, r1, #17
 8007198:	430a      	orrs	r2, r1
 800719a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719c:	f7fd ff5a 	bl	8005054 <HAL_GetTick>
 80071a0:	0003      	movs	r3, r0
 80071a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80071a4:	e008      	b.n	80071b8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071a6:	f7fd ff55 	bl	8005054 <HAL_GetTick>
 80071aa:	0002      	movs	r2, r0
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e057      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80071b8:	4b10      	ldr	r3, [pc, #64]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	2380      	movs	r3, #128	; 0x80
 80071be:	049b      	lsls	r3, r3, #18
 80071c0:	4013      	ands	r3, r2
 80071c2:	d0f0      	beq.n	80071a6 <HAL_RCC_OscConfig+0x62a>
 80071c4:	e04f      	b.n	8007266 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c6:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 80071cc:	4912      	ldr	r1, [pc, #72]	; (8007218 <HAL_RCC_OscConfig+0x69c>)
 80071ce:	400a      	ands	r2, r1
 80071d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d2:	f7fd ff3f 	bl	8005054 <HAL_GetTick>
 80071d6:	0003      	movs	r3, r0
 80071d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071dc:	f7fd ff3a 	bl	8005054 <HAL_GetTick>
 80071e0:	0002      	movs	r2, r0
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e03c      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80071ee:	4b03      	ldr	r3, [pc, #12]	; (80071fc <HAL_RCC_OscConfig+0x680>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	2380      	movs	r3, #128	; 0x80
 80071f4:	049b      	lsls	r3, r3, #18
 80071f6:	4013      	ands	r3, r2
 80071f8:	d1f0      	bne.n	80071dc <HAL_RCC_OscConfig+0x660>
 80071fa:	e034      	b.n	8007266 <HAL_RCC_OscConfig+0x6ea>
 80071fc:	40021000 	.word	0x40021000
 8007200:	ffff1fff 	.word	0xffff1fff
 8007204:	fffffeff 	.word	0xfffffeff
 8007208:	40007000 	.word	0x40007000
 800720c:	fffffbff 	.word	0xfffffbff
 8007210:	00001388 	.word	0x00001388
 8007214:	efffffff 	.word	0xefffffff
 8007218:	feffffff 	.word	0xfeffffff
 800721c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e01d      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800722c:	4b10      	ldr	r3, [pc, #64]	; (8007270 <HAL_RCC_OscConfig+0x6f4>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	2380      	movs	r3, #128	; 0x80
 8007236:	025b      	lsls	r3, r3, #9
 8007238:	401a      	ands	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	429a      	cmp	r2, r3
 8007240:	d10f      	bne.n	8007262 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	23f0      	movs	r3, #240	; 0xf0
 8007246:	039b      	lsls	r3, r3, #14
 8007248:	401a      	ands	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800724e:	429a      	cmp	r2, r3
 8007250:	d107      	bne.n	8007262 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	23c0      	movs	r3, #192	; 0xc0
 8007256:	041b      	lsls	r3, r3, #16
 8007258:	401a      	ands	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800725e:	429a      	cmp	r2, r3
 8007260:	d001      	beq.n	8007266 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b00a      	add	sp, #40	; 0x28
 800726e:	bdb0      	pop	{r4, r5, r7, pc}
 8007270:	40021000 	.word	0x40021000

08007274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007274:	b5b0      	push	{r4, r5, r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e128      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007288:	4b96      	ldr	r3, [pc, #600]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	4013      	ands	r3, r2
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d91e      	bls.n	80072d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007296:	4b93      	ldr	r3, [pc, #588]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2201      	movs	r2, #1
 800729c:	4393      	bics	r3, r2
 800729e:	0019      	movs	r1, r3
 80072a0:	4b90      	ldr	r3, [pc, #576]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80072a8:	f7fd fed4 	bl	8005054 <HAL_GetTick>
 80072ac:	0003      	movs	r3, r0
 80072ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b0:	e009      	b.n	80072c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b2:	f7fd fecf 	bl	8005054 <HAL_GetTick>
 80072b6:	0002      	movs	r2, r0
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	4a8a      	ldr	r2, [pc, #552]	; (80074e8 <HAL_RCC_ClockConfig+0x274>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e109      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c6:	4b87      	ldr	r3, [pc, #540]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2201      	movs	r2, #1
 80072cc:	4013      	ands	r3, r2
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d1ee      	bne.n	80072b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2202      	movs	r2, #2
 80072da:	4013      	ands	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072de:	4b83      	ldr	r3, [pc, #524]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	22f0      	movs	r2, #240	; 0xf0
 80072e4:	4393      	bics	r3, r2
 80072e6:	0019      	movs	r1, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	4b7f      	ldr	r3, [pc, #508]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 80072ee:	430a      	orrs	r2, r1
 80072f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2201      	movs	r2, #1
 80072f8:	4013      	ands	r3, r2
 80072fa:	d100      	bne.n	80072fe <HAL_RCC_ClockConfig+0x8a>
 80072fc:	e089      	b.n	8007412 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b02      	cmp	r3, #2
 8007304:	d107      	bne.n	8007316 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007306:	4b79      	ldr	r3, [pc, #484]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	2380      	movs	r3, #128	; 0x80
 800730c:	029b      	lsls	r3, r3, #10
 800730e:	4013      	ands	r3, r2
 8007310:	d120      	bne.n	8007354 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e0e1      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d107      	bne.n	800732e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800731e:	4b73      	ldr	r3, [pc, #460]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	2380      	movs	r3, #128	; 0x80
 8007324:	049b      	lsls	r3, r3, #18
 8007326:	4013      	ands	r3, r2
 8007328:	d114      	bne.n	8007354 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e0d5      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d106      	bne.n	8007344 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007336:	4b6d      	ldr	r3, [pc, #436]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2204      	movs	r2, #4
 800733c:	4013      	ands	r3, r2
 800733e:	d109      	bne.n	8007354 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0ca      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007344:	4b69      	ldr	r3, [pc, #420]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	2380      	movs	r3, #128	; 0x80
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4013      	ands	r3, r2
 800734e:	d101      	bne.n	8007354 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e0c2      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007354:	4b65      	ldr	r3, [pc, #404]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2203      	movs	r2, #3
 800735a:	4393      	bics	r3, r2
 800735c:	0019      	movs	r1, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	4b62      	ldr	r3, [pc, #392]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007364:	430a      	orrs	r2, r1
 8007366:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007368:	f7fd fe74 	bl	8005054 <HAL_GetTick>
 800736c:	0003      	movs	r3, r0
 800736e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d111      	bne.n	800739c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007378:	e009      	b.n	800738e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800737a:	f7fd fe6b 	bl	8005054 <HAL_GetTick>
 800737e:	0002      	movs	r2, r0
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	4a58      	ldr	r2, [pc, #352]	; (80074e8 <HAL_RCC_ClockConfig+0x274>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d901      	bls.n	800738e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e0a5      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800738e:	4b57      	ldr	r3, [pc, #348]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	220c      	movs	r2, #12
 8007394:	4013      	ands	r3, r2
 8007396:	2b08      	cmp	r3, #8
 8007398:	d1ef      	bne.n	800737a <HAL_RCC_ClockConfig+0x106>
 800739a:	e03a      	b.n	8007412 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d111      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073a4:	e009      	b.n	80073ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073a6:	f7fd fe55 	bl	8005054 <HAL_GetTick>
 80073aa:	0002      	movs	r2, r0
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	4a4d      	ldr	r2, [pc, #308]	; (80074e8 <HAL_RCC_ClockConfig+0x274>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e08f      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073ba:	4b4c      	ldr	r3, [pc, #304]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	220c      	movs	r2, #12
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b0c      	cmp	r3, #12
 80073c4:	d1ef      	bne.n	80073a6 <HAL_RCC_ClockConfig+0x132>
 80073c6:	e024      	b.n	8007412 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d11b      	bne.n	8007408 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80073d0:	e009      	b.n	80073e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073d2:	f7fd fe3f 	bl	8005054 <HAL_GetTick>
 80073d6:	0002      	movs	r2, r0
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	4a42      	ldr	r2, [pc, #264]	; (80074e8 <HAL_RCC_ClockConfig+0x274>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e079      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80073e6:	4b41      	ldr	r3, [pc, #260]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	220c      	movs	r2, #12
 80073ec:	4013      	ands	r3, r2
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d1ef      	bne.n	80073d2 <HAL_RCC_ClockConfig+0x15e>
 80073f2:	e00e      	b.n	8007412 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073f4:	f7fd fe2e 	bl	8005054 <HAL_GetTick>
 80073f8:	0002      	movs	r2, r0
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	4a3a      	ldr	r2, [pc, #232]	; (80074e8 <HAL_RCC_ClockConfig+0x274>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d901      	bls.n	8007408 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e068      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007408:	4b38      	ldr	r3, [pc, #224]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	220c      	movs	r2, #12
 800740e:	4013      	ands	r3, r2
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007412:	4b34      	ldr	r3, [pc, #208]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2201      	movs	r2, #1
 8007418:	4013      	ands	r3, r2
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d21e      	bcs.n	800745e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007420:	4b30      	ldr	r3, [pc, #192]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2201      	movs	r2, #1
 8007426:	4393      	bics	r3, r2
 8007428:	0019      	movs	r1, r3
 800742a:	4b2e      	ldr	r3, [pc, #184]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007432:	f7fd fe0f 	bl	8005054 <HAL_GetTick>
 8007436:	0003      	movs	r3, r0
 8007438:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743a:	e009      	b.n	8007450 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743c:	f7fd fe0a 	bl	8005054 <HAL_GetTick>
 8007440:	0002      	movs	r2, r0
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	4a28      	ldr	r2, [pc, #160]	; (80074e8 <HAL_RCC_ClockConfig+0x274>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d901      	bls.n	8007450 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e044      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007450:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2201      	movs	r2, #1
 8007456:	4013      	ands	r3, r2
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d1ee      	bne.n	800743c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2204      	movs	r2, #4
 8007464:	4013      	ands	r3, r2
 8007466:	d009      	beq.n	800747c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007468:	4b20      	ldr	r3, [pc, #128]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4a20      	ldr	r2, [pc, #128]	; (80074f0 <HAL_RCC_ClockConfig+0x27c>)
 800746e:	4013      	ands	r3, r2
 8007470:	0019      	movs	r1, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007478:	430a      	orrs	r2, r1
 800747a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2208      	movs	r2, #8
 8007482:	4013      	ands	r3, r2
 8007484:	d00a      	beq.n	800749c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007486:	4b19      	ldr	r3, [pc, #100]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	4a1a      	ldr	r2, [pc, #104]	; (80074f4 <HAL_RCC_ClockConfig+0x280>)
 800748c:	4013      	ands	r3, r2
 800748e:	0019      	movs	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	00da      	lsls	r2, r3, #3
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 8007498:	430a      	orrs	r2, r1
 800749a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800749c:	f000 f832 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 80074a0:	0001      	movs	r1, r0
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <HAL_RCC_ClockConfig+0x278>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	091b      	lsrs	r3, r3, #4
 80074a8:	220f      	movs	r2, #15
 80074aa:	4013      	ands	r3, r2
 80074ac:	4a12      	ldr	r2, [pc, #72]	; (80074f8 <HAL_RCC_ClockConfig+0x284>)
 80074ae:	5cd3      	ldrb	r3, [r2, r3]
 80074b0:	000a      	movs	r2, r1
 80074b2:	40da      	lsrs	r2, r3
 80074b4:	4b11      	ldr	r3, [pc, #68]	; (80074fc <HAL_RCC_ClockConfig+0x288>)
 80074b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80074b8:	4b11      	ldr	r3, [pc, #68]	; (8007500 <HAL_RCC_ClockConfig+0x28c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	250b      	movs	r5, #11
 80074be:	197c      	adds	r4, r7, r5
 80074c0:	0018      	movs	r0, r3
 80074c2:	f7fd fd81 	bl	8004fc8 <HAL_InitTick>
 80074c6:	0003      	movs	r3, r0
 80074c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80074ca:	197b      	adds	r3, r7, r5
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80074d2:	197b      	adds	r3, r7, r5
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	e000      	b.n	80074da <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b004      	add	sp, #16
 80074e0:	bdb0      	pop	{r4, r5, r7, pc}
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	40022000 	.word	0x40022000
 80074e8:	00001388 	.word	0x00001388
 80074ec:	40021000 	.word	0x40021000
 80074f0:	fffff8ff 	.word	0xfffff8ff
 80074f4:	ffffc7ff 	.word	0xffffc7ff
 80074f8:	0800a0d4 	.word	0x0800a0d4
 80074fc:	20000000 	.word	0x20000000
 8007500:	20000008 	.word	0x20000008

08007504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007504:	b5b0      	push	{r4, r5, r7, lr}
 8007506:	b08e      	sub	sp, #56	; 0x38
 8007508:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800750a:	4b4c      	ldr	r3, [pc, #304]	; (800763c <HAL_RCC_GetSysClockFreq+0x138>)
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007512:	230c      	movs	r3, #12
 8007514:	4013      	ands	r3, r2
 8007516:	2b0c      	cmp	r3, #12
 8007518:	d014      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0x40>
 800751a:	d900      	bls.n	800751e <HAL_RCC_GetSysClockFreq+0x1a>
 800751c:	e07b      	b.n	8007616 <HAL_RCC_GetSysClockFreq+0x112>
 800751e:	2b04      	cmp	r3, #4
 8007520:	d002      	beq.n	8007528 <HAL_RCC_GetSysClockFreq+0x24>
 8007522:	2b08      	cmp	r3, #8
 8007524:	d00b      	beq.n	800753e <HAL_RCC_GetSysClockFreq+0x3a>
 8007526:	e076      	b.n	8007616 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007528:	4b44      	ldr	r3, [pc, #272]	; (800763c <HAL_RCC_GetSysClockFreq+0x138>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2210      	movs	r2, #16
 800752e:	4013      	ands	r3, r2
 8007530:	d002      	beq.n	8007538 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007532:	4b43      	ldr	r3, [pc, #268]	; (8007640 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007534:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007536:	e07c      	b.n	8007632 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8007538:	4b42      	ldr	r3, [pc, #264]	; (8007644 <HAL_RCC_GetSysClockFreq+0x140>)
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800753c:	e079      	b.n	8007632 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800753e:	4b42      	ldr	r3, [pc, #264]	; (8007648 <HAL_RCC_GetSysClockFreq+0x144>)
 8007540:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007542:	e076      	b.n	8007632 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	0c9a      	lsrs	r2, r3, #18
 8007548:	230f      	movs	r3, #15
 800754a:	401a      	ands	r2, r3
 800754c:	4b3f      	ldr	r3, [pc, #252]	; (800764c <HAL_RCC_GetSysClockFreq+0x148>)
 800754e:	5c9b      	ldrb	r3, [r3, r2]
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	0d9a      	lsrs	r2, r3, #22
 8007556:	2303      	movs	r3, #3
 8007558:	4013      	ands	r3, r2
 800755a:	3301      	adds	r3, #1
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800755e:	4b37      	ldr	r3, [pc, #220]	; (800763c <HAL_RCC_GetSysClockFreq+0x138>)
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	2380      	movs	r3, #128	; 0x80
 8007564:	025b      	lsls	r3, r3, #9
 8007566:	4013      	ands	r3, r2
 8007568:	d01a      	beq.n	80075a0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	2300      	movs	r3, #0
 8007570:	61fb      	str	r3, [r7, #28]
 8007572:	4a35      	ldr	r2, [pc, #212]	; (8007648 <HAL_RCC_GetSysClockFreq+0x144>)
 8007574:	2300      	movs	r3, #0
 8007576:	69b8      	ldr	r0, [r7, #24]
 8007578:	69f9      	ldr	r1, [r7, #28]
 800757a:	f7f8 feb5 	bl	80002e8 <__aeabi_lmul>
 800757e:	0002      	movs	r2, r0
 8007580:	000b      	movs	r3, r1
 8007582:	0010      	movs	r0, r2
 8007584:	0019      	movs	r1, r3
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f7f8 fe89 	bl	80002a8 <__aeabi_uldivmod>
 8007596:	0002      	movs	r2, r0
 8007598:	000b      	movs	r3, r1
 800759a:	0013      	movs	r3, r2
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
 800759e:	e037      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80075a0:	4b26      	ldr	r3, [pc, #152]	; (800763c <HAL_RCC_GetSysClockFreq+0x138>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2210      	movs	r2, #16
 80075a6:	4013      	ands	r3, r2
 80075a8:	d01a      	beq.n	80075e0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	60bb      	str	r3, [r7, #8]
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	4a23      	ldr	r2, [pc, #140]	; (8007640 <HAL_RCC_GetSysClockFreq+0x13c>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	68b8      	ldr	r0, [r7, #8]
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	f7f8 fe95 	bl	80002e8 <__aeabi_lmul>
 80075be:	0002      	movs	r2, r0
 80075c0:	000b      	movs	r3, r1
 80075c2:	0010      	movs	r0, r2
 80075c4:	0019      	movs	r1, r3
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	2300      	movs	r3, #0
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f7f8 fe69 	bl	80002a8 <__aeabi_uldivmod>
 80075d6:	0002      	movs	r2, r0
 80075d8:	000b      	movs	r3, r1
 80075da:	0013      	movs	r3, r2
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
 80075de:	e017      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	0018      	movs	r0, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	0019      	movs	r1, r3
 80075e8:	4a16      	ldr	r2, [pc, #88]	; (8007644 <HAL_RCC_GetSysClockFreq+0x140>)
 80075ea:	2300      	movs	r3, #0
 80075ec:	f7f8 fe7c 	bl	80002e8 <__aeabi_lmul>
 80075f0:	0002      	movs	r2, r0
 80075f2:	000b      	movs	r3, r1
 80075f4:	0010      	movs	r0, r2
 80075f6:	0019      	movs	r1, r3
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	001c      	movs	r4, r3
 80075fc:	2300      	movs	r3, #0
 80075fe:	001d      	movs	r5, r3
 8007600:	0022      	movs	r2, r4
 8007602:	002b      	movs	r3, r5
 8007604:	f7f8 fe50 	bl	80002a8 <__aeabi_uldivmod>
 8007608:	0002      	movs	r2, r0
 800760a:	000b      	movs	r3, r1
 800760c:	0013      	movs	r3, r2
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8007610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007612:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007614:	e00d      	b.n	8007632 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007616:	4b09      	ldr	r3, [pc, #36]	; (800763c <HAL_RCC_GetSysClockFreq+0x138>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	0b5b      	lsrs	r3, r3, #13
 800761c:	2207      	movs	r2, #7
 800761e:	4013      	ands	r3, r2
 8007620:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	3301      	adds	r3, #1
 8007626:	2280      	movs	r2, #128	; 0x80
 8007628:	0212      	lsls	r2, r2, #8
 800762a:	409a      	lsls	r2, r3
 800762c:	0013      	movs	r3, r2
 800762e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007630:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007634:	0018      	movs	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	b00e      	add	sp, #56	; 0x38
 800763a:	bdb0      	pop	{r4, r5, r7, pc}
 800763c:	40021000 	.word	0x40021000
 8007640:	003d0900 	.word	0x003d0900
 8007644:	00f42400 	.word	0x00f42400
 8007648:	007a1200 	.word	0x007a1200
 800764c:	0800a0ec 	.word	0x0800a0ec

08007650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <HAL_RCC_GetHCLKFreq+0x10>)
 8007656:	681b      	ldr	r3, [r3, #0]
}
 8007658:	0018      	movs	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	20000000 	.word	0x20000000

08007664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007668:	f7ff fff2 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 800766c:	0001      	movs	r1, r0
 800766e:	4b06      	ldr	r3, [pc, #24]	; (8007688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	0a1b      	lsrs	r3, r3, #8
 8007674:	2207      	movs	r2, #7
 8007676:	4013      	ands	r3, r2
 8007678:	4a04      	ldr	r2, [pc, #16]	; (800768c <HAL_RCC_GetPCLK1Freq+0x28>)
 800767a:	5cd3      	ldrb	r3, [r2, r3]
 800767c:	40d9      	lsrs	r1, r3
 800767e:	000b      	movs	r3, r1
}
 8007680:	0018      	movs	r0, r3
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	40021000 	.word	0x40021000
 800768c:	0800a0e4 	.word	0x0800a0e4

08007690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007694:	f7ff ffdc 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 8007698:	0001      	movs	r1, r0
 800769a:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	0adb      	lsrs	r3, r3, #11
 80076a0:	2207      	movs	r2, #7
 80076a2:	4013      	ands	r3, r2
 80076a4:	4a04      	ldr	r2, [pc, #16]	; (80076b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076a6:	5cd3      	ldrb	r3, [r2, r3]
 80076a8:	40d9      	lsrs	r1, r3
 80076aa:	000b      	movs	r3, r1
}
 80076ac:	0018      	movs	r0, r3
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	40021000 	.word	0x40021000
 80076b8:	0800a0e4 	.word	0x0800a0e4

080076bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80076c4:	2017      	movs	r0, #23
 80076c6:	183b      	adds	r3, r7, r0
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2220      	movs	r2, #32
 80076d2:	4013      	ands	r3, r2
 80076d4:	d100      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80076d6:	e0c2      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076d8:	4b91      	ldr	r3, [pc, #580]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80076da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076dc:	2380      	movs	r3, #128	; 0x80
 80076de:	055b      	lsls	r3, r3, #21
 80076e0:	4013      	ands	r3, r2
 80076e2:	d109      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076e4:	4b8e      	ldr	r3, [pc, #568]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80076e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e8:	4b8d      	ldr	r3, [pc, #564]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	0549      	lsls	r1, r1, #21
 80076ee:	430a      	orrs	r2, r1
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80076f2:	183b      	adds	r3, r7, r0
 80076f4:	2201      	movs	r2, #1
 80076f6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f8:	4b8a      	ldr	r3, [pc, #552]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	2380      	movs	r3, #128	; 0x80
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	4013      	ands	r3, r2
 8007702:	d11a      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007704:	4b87      	ldr	r3, [pc, #540]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	4b86      	ldr	r3, [pc, #536]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800770a:	2180      	movs	r1, #128	; 0x80
 800770c:	0049      	lsls	r1, r1, #1
 800770e:	430a      	orrs	r2, r1
 8007710:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007712:	f7fd fc9f 	bl	8005054 <HAL_GetTick>
 8007716:	0003      	movs	r3, r0
 8007718:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800771a:	e008      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800771c:	f7fd fc9a 	bl	8005054 <HAL_GetTick>
 8007720:	0002      	movs	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b64      	cmp	r3, #100	; 0x64
 8007728:	d901      	bls.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e0f3      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800772e:	4b7d      	ldr	r3, [pc, #500]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	2380      	movs	r3, #128	; 0x80
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	4013      	ands	r3, r2
 8007738:	d0f0      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800773a:	4b79      	ldr	r3, [pc, #484]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	23c0      	movs	r3, #192	; 0xc0
 8007740:	039b      	lsls	r3, r3, #14
 8007742:	4013      	ands	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	23c0      	movs	r3, #192	; 0xc0
 800774c:	039b      	lsls	r3, r3, #14
 800774e:	4013      	ands	r3, r2
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	429a      	cmp	r2, r3
 8007754:	d013      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	23c0      	movs	r3, #192	; 0xc0
 800775c:	029b      	lsls	r3, r3, #10
 800775e:	401a      	ands	r2, r3
 8007760:	23c0      	movs	r3, #192	; 0xc0
 8007762:	029b      	lsls	r3, r3, #10
 8007764:	429a      	cmp	r2, r3
 8007766:	d10a      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007768:	4b6d      	ldr	r3, [pc, #436]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	2380      	movs	r3, #128	; 0x80
 800776e:	029b      	lsls	r3, r3, #10
 8007770:	401a      	ands	r2, r3
 8007772:	2380      	movs	r3, #128	; 0x80
 8007774:	029b      	lsls	r3, r3, #10
 8007776:	429a      	cmp	r2, r3
 8007778:	d101      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e0cb      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800777e:	4b68      	ldr	r3, [pc, #416]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007782:	23c0      	movs	r3, #192	; 0xc0
 8007784:	029b      	lsls	r3, r3, #10
 8007786:	4013      	ands	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d03b      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	23c0      	movs	r3, #192	; 0xc0
 8007796:	029b      	lsls	r3, r3, #10
 8007798:	4013      	ands	r3, r2
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	429a      	cmp	r2, r3
 800779e:	d033      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2220      	movs	r2, #32
 80077a6:	4013      	ands	r3, r2
 80077a8:	d02e      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80077aa:	4b5d      	ldr	r3, [pc, #372]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ae:	4a5e      	ldr	r2, [pc, #376]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077b4:	4b5a      	ldr	r3, [pc, #360]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077b8:	4b59      	ldr	r3, [pc, #356]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077ba:	2180      	movs	r1, #128	; 0x80
 80077bc:	0309      	lsls	r1, r1, #12
 80077be:	430a      	orrs	r2, r1
 80077c0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077c2:	4b57      	ldr	r3, [pc, #348]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077c6:	4b56      	ldr	r3, [pc, #344]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077c8:	4958      	ldr	r1, [pc, #352]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80077ca:	400a      	ands	r2, r1
 80077cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80077ce:	4b54      	ldr	r3, [pc, #336]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	2380      	movs	r3, #128	; 0x80
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	d014      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077de:	f7fd fc39 	bl	8005054 <HAL_GetTick>
 80077e2:	0003      	movs	r3, r0
 80077e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077e6:	e009      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077e8:	f7fd fc34 	bl	8005054 <HAL_GetTick>
 80077ec:	0002      	movs	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	4a4f      	ldr	r2, [pc, #316]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e08c      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077fc:	4b48      	ldr	r3, [pc, #288]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4013      	ands	r3, r2
 8007806:	d0ef      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	23c0      	movs	r3, #192	; 0xc0
 800780e:	029b      	lsls	r3, r3, #10
 8007810:	401a      	ands	r2, r3
 8007812:	23c0      	movs	r3, #192	; 0xc0
 8007814:	029b      	lsls	r3, r3, #10
 8007816:	429a      	cmp	r2, r3
 8007818:	d10c      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800781a:	4b41      	ldr	r3, [pc, #260]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a45      	ldr	r2, [pc, #276]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8007820:	4013      	ands	r3, r2
 8007822:	0019      	movs	r1, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	23c0      	movs	r3, #192	; 0xc0
 800782a:	039b      	lsls	r3, r3, #14
 800782c:	401a      	ands	r2, r3
 800782e:	4b3c      	ldr	r3, [pc, #240]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007830:	430a      	orrs	r2, r1
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	4b3a      	ldr	r3, [pc, #232]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007836:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	23c0      	movs	r3, #192	; 0xc0
 800783e:	029b      	lsls	r3, r3, #10
 8007840:	401a      	ands	r2, r3
 8007842:	4b37      	ldr	r3, [pc, #220]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007844:	430a      	orrs	r2, r1
 8007846:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007848:	2317      	movs	r3, #23
 800784a:	18fb      	adds	r3, r7, r3
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d105      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007852:	4b33      	ldr	r3, [pc, #204]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007856:	4b32      	ldr	r3, [pc, #200]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007858:	4937      	ldr	r1, [pc, #220]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800785a:	400a      	ands	r2, r1
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2201      	movs	r2, #1
 8007864:	4013      	ands	r3, r2
 8007866:	d009      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007868:	4b2d      	ldr	r3, [pc, #180]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800786a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786c:	2203      	movs	r2, #3
 800786e:	4393      	bics	r3, r2
 8007870:	0019      	movs	r1, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007878:	430a      	orrs	r2, r1
 800787a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2202      	movs	r2, #2
 8007882:	4013      	ands	r3, r2
 8007884:	d009      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007886:	4b26      	ldr	r3, [pc, #152]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788a:	220c      	movs	r2, #12
 800788c:	4393      	bics	r3, r2
 800788e:	0019      	movs	r1, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	4b22      	ldr	r3, [pc, #136]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007896:	430a      	orrs	r2, r1
 8007898:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2204      	movs	r2, #4
 80078a0:	4013      	ands	r3, r2
 80078a2:	d009      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078a4:	4b1e      	ldr	r3, [pc, #120]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a8:	4a24      	ldr	r2, [pc, #144]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	0019      	movs	r1, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078b4:	430a      	orrs	r2, r1
 80078b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2208      	movs	r2, #8
 80078be:	4013      	ands	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078c2:	4b17      	ldr	r3, [pc, #92]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c6:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	0019      	movs	r1, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	4b13      	ldr	r3, [pc, #76]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078d2:	430a      	orrs	r2, r1
 80078d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	2380      	movs	r3, #128	; 0x80
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	4013      	ands	r3, r2
 80078e0:	d009      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078e2:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e6:	4a10      	ldr	r2, [pc, #64]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	0019      	movs	r1, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078f2:	430a      	orrs	r2, r1
 80078f4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2280      	movs	r2, #128	; 0x80
 80078fc:	4013      	ands	r3, r2
 80078fe:	d009      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007900:	4b07      	ldr	r3, [pc, #28]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007904:	4a0f      	ldr	r2, [pc, #60]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007906:	4013      	ands	r3, r2
 8007908:	0019      	movs	r1, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69da      	ldr	r2, [r3, #28]
 800790e:	4b04      	ldr	r3, [pc, #16]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007910:	430a      	orrs	r2, r1
 8007912:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	0018      	movs	r0, r3
 8007918:	46bd      	mov	sp, r7
 800791a:	b006      	add	sp, #24
 800791c:	bd80      	pop	{r7, pc}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	40021000 	.word	0x40021000
 8007924:	40007000 	.word	0x40007000
 8007928:	fffcffff 	.word	0xfffcffff
 800792c:	fff7ffff 	.word	0xfff7ffff
 8007930:	00001388 	.word	0x00001388
 8007934:	ffcfffff 	.word	0xffcfffff
 8007938:	efffffff 	.word	0xefffffff
 800793c:	fffff3ff 	.word	0xfffff3ff
 8007940:	ffffcfff 	.word	0xffffcfff
 8007944:	fff3ffff 	.word	0xfff3ffff

08007948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e032      	b.n	80079c0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2239      	movs	r2, #57	; 0x39
 800795e:	5c9b      	ldrb	r3, [r3, r2]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d107      	bne.n	8007976 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2238      	movs	r2, #56	; 0x38
 800796a:	2100      	movs	r1, #0
 800796c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	0018      	movs	r0, r3
 8007972:	f7fb ff87 	bl	8003884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2239      	movs	r2, #57	; 0x39
 800797a:	2102      	movs	r1, #2
 800797c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3304      	adds	r3, #4
 8007986:	0019      	movs	r1, r3
 8007988:	0010      	movs	r0, r2
 800798a:	f000 fb3f 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	223e      	movs	r2, #62	; 0x3e
 8007992:	2101      	movs	r1, #1
 8007994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	223a      	movs	r2, #58	; 0x3a
 800799a:	2101      	movs	r1, #1
 800799c:	5499      	strb	r1, [r3, r2]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	223b      	movs	r2, #59	; 0x3b
 80079a2:	2101      	movs	r1, #1
 80079a4:	5499      	strb	r1, [r3, r2]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	223c      	movs	r2, #60	; 0x3c
 80079aa:	2101      	movs	r1, #1
 80079ac:	5499      	strb	r1, [r3, r2]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	223d      	movs	r2, #61	; 0x3d
 80079b2:	2101      	movs	r1, #1
 80079b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2239      	movs	r2, #57	; 0x39
 80079ba:	2101      	movs	r1, #1
 80079bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	0018      	movs	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2239      	movs	r2, #57	; 0x39
 80079d4:	5c9b      	ldrb	r3, [r3, r2]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d001      	beq.n	80079e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e033      	b.n	8007a48 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2239      	movs	r2, #57	; 0x39
 80079e4:	2102      	movs	r1, #2
 80079e6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	05db      	lsls	r3, r3, #23
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d00e      	beq.n	8007a12 <HAL_TIM_Base_Start+0x4a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a15      	ldr	r2, [pc, #84]	; (8007a50 <HAL_TIM_Base_Start+0x88>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d009      	beq.n	8007a12 <HAL_TIM_Base_Start+0x4a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <HAL_TIM_Base_Start+0x8c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d004      	beq.n	8007a12 <HAL_TIM_Base_Start+0x4a>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a12      	ldr	r2, [pc, #72]	; (8007a58 <HAL_TIM_Base_Start+0x90>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d111      	bne.n	8007a36 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2207      	movs	r2, #7
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	d010      	beq.n	8007a46 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2101      	movs	r1, #1
 8007a30:	430a      	orrs	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a34:	e007      	b.n	8007a46 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2101      	movs	r1, #1
 8007a42:	430a      	orrs	r2, r1
 8007a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	0018      	movs	r0, r3
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b004      	add	sp, #16
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40000400 	.word	0x40000400
 8007a54:	40010800 	.word	0x40010800
 8007a58:	40011400 	.word	0x40011400

08007a5c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	4a0a      	ldr	r2, [pc, #40]	; (8007a94 <HAL_TIM_Base_Stop+0x38>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	d107      	bne.n	8007a80 <HAL_TIM_Base_Stop+0x24>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	438a      	bics	r2, r1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2239      	movs	r2, #57	; 0x39
 8007a84:	2101      	movs	r1, #1
 8007a86:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b002      	add	sp, #8
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	00001111 	.word	0x00001111

08007a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2239      	movs	r2, #57	; 0x39
 8007aa4:	5c9b      	ldrb	r3, [r3, r2]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d001      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e03b      	b.n	8007b28 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2239      	movs	r2, #57	; 0x39
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	2380      	movs	r3, #128	; 0x80
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d00e      	beq.n	8007af2 <HAL_TIM_Base_Start_IT+0x5a>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a15      	ldr	r2, [pc, #84]	; (8007b30 <HAL_TIM_Base_Start_IT+0x98>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d009      	beq.n	8007af2 <HAL_TIM_Base_Start_IT+0x5a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a14      	ldr	r2, [pc, #80]	; (8007b34 <HAL_TIM_Base_Start_IT+0x9c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <HAL_TIM_Base_Start_IT+0x5a>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <HAL_TIM_Base_Start_IT+0xa0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d111      	bne.n	8007b16 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2207      	movs	r2, #7
 8007afa:	4013      	ands	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b06      	cmp	r3, #6
 8007b02:	d010      	beq.n	8007b26 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2101      	movs	r1, #1
 8007b10:	430a      	orrs	r2, r1
 8007b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b14:	e007      	b.n	8007b26 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2101      	movs	r1, #1
 8007b22:	430a      	orrs	r2, r1
 8007b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	0018      	movs	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b004      	add	sp, #16
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40000400 	.word	0x40000400
 8007b34:	40010800 	.word	0x40010800
 8007b38:	40011400 	.word	0x40011400

08007b3c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e032      	b.n	8007bb4 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2239      	movs	r2, #57	; 0x39
 8007b52:	5c9b      	ldrb	r3, [r3, r2]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d107      	bne.n	8007b6a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2238      	movs	r2, #56	; 0x38
 8007b5e:	2100      	movs	r1, #0
 8007b60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	0018      	movs	r0, r3
 8007b66:	f7fb fecf 	bl	8003908 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2239      	movs	r2, #57	; 0x39
 8007b6e:	2102      	movs	r1, #2
 8007b70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	0019      	movs	r1, r3
 8007b7c:	0010      	movs	r0, r2
 8007b7e:	f000 fa45 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	223e      	movs	r2, #62	; 0x3e
 8007b86:	2101      	movs	r1, #1
 8007b88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	223a      	movs	r2, #58	; 0x3a
 8007b8e:	2101      	movs	r1, #1
 8007b90:	5499      	strb	r1, [r3, r2]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	223b      	movs	r2, #59	; 0x3b
 8007b96:	2101      	movs	r1, #1
 8007b98:	5499      	strb	r1, [r3, r2]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	223c      	movs	r2, #60	; 0x3c
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	5499      	strb	r1, [r3, r2]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	223d      	movs	r2, #61	; 0x3d
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2239      	movs	r2, #57	; 0x39
 8007bae:	2101      	movs	r1, #1
 8007bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b002      	add	sp, #8
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	4013      	ands	r3, r2
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d124      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	4013      	ands	r3, r2
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d11d      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2203      	movs	r2, #3
 8007be6:	4252      	negs	r2, r2
 8007be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f000 f9ec 	bl	8007fdc <HAL_TIM_IC_CaptureCallback>
 8007c04:	e007      	b.n	8007c16 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	0018      	movs	r0, r3
 8007c0a:	f000 f9df 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	0018      	movs	r0, r3
 8007c12:	f000 f9eb 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2204      	movs	r2, #4
 8007c24:	4013      	ands	r3, r2
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d125      	bne.n	8007c76 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2204      	movs	r2, #4
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d11e      	bne.n	8007c76 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2205      	movs	r2, #5
 8007c3e:	4252      	negs	r2, r2
 8007c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	23c0      	movs	r3, #192	; 0xc0
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4013      	ands	r3, r2
 8007c54:	d004      	beq.n	8007c60 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	0018      	movs	r0, r3
 8007c5a:	f000 f9bf 	bl	8007fdc <HAL_TIM_IC_CaptureCallback>
 8007c5e:	e007      	b.n	8007c70 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	0018      	movs	r0, r3
 8007c64:	f000 f9b2 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	f000 f9be 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2208      	movs	r2, #8
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d124      	bne.n	8007cce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d11d      	bne.n	8007cce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2209      	movs	r2, #9
 8007c98:	4252      	negs	r2, r2
 8007c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2204      	movs	r2, #4
 8007ca0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	4013      	ands	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f000 f993 	bl	8007fdc <HAL_TIM_IC_CaptureCallback>
 8007cb6:	e007      	b.n	8007cc8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f000 f986 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f000 f992 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	2210      	movs	r2, #16
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	2b10      	cmp	r3, #16
 8007cda:	d125      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	2210      	movs	r2, #16
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d11e      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2211      	movs	r2, #17
 8007cf0:	4252      	negs	r2, r2
 8007cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	23c0      	movs	r3, #192	; 0xc0
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4013      	ands	r3, r2
 8007d06:	d004      	beq.n	8007d12 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f000 f966 	bl	8007fdc <HAL_TIM_IC_CaptureCallback>
 8007d10:	e007      	b.n	8007d22 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	0018      	movs	r0, r3
 8007d16:	f000 f959 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f000 f965 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d10f      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	4013      	ands	r3, r2
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d108      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	4252      	negs	r2, r2
 8007d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	0018      	movs	r0, r3
 8007d52:	f000 f933 	bl	8007fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2240      	movs	r2, #64	; 0x40
 8007d5e:	4013      	ands	r3, r2
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d10f      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	2240      	movs	r2, #64	; 0x40
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	d108      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2241      	movs	r2, #65	; 0x41
 8007d78:	4252      	negs	r2, r2
 8007d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	0018      	movs	r0, r3
 8007d80:	f000 f93c 	bl	8007ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d84:	46c0      	nop			; (mov r8, r8)
 8007d86:	46bd      	mov	sp, r7
 8007d88:	b002      	add	sp, #8
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2238      	movs	r2, #56	; 0x38
 8007d9c:	5c9b      	ldrb	r3, [r3, r2]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e03c      	b.n	8007e20 <HAL_TIM_OC_ConfigChannel+0x94>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2238      	movs	r2, #56	; 0x38
 8007daa:	2101      	movs	r1, #1
 8007dac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b0c      	cmp	r3, #12
 8007db2:	d027      	beq.n	8007e04 <HAL_TIM_OC_ConfigChannel+0x78>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b0c      	cmp	r3, #12
 8007db8:	d82c      	bhi.n	8007e14 <HAL_TIM_OC_ConfigChannel+0x88>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d019      	beq.n	8007df4 <HAL_TIM_OC_ConfigChannel+0x68>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d826      	bhi.n	8007e14 <HAL_TIM_OC_ConfigChannel+0x88>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <HAL_TIM_OC_ConfigChannel+0x48>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d008      	beq.n	8007de4 <HAL_TIM_OC_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8007dd2:	e01f      	b.n	8007e14 <HAL_TIM_OC_ConfigChannel+0x88>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	0011      	movs	r1, r2
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f000 f973 	bl	80080c8 <TIM_OC1_SetConfig>
      break;
 8007de2:	e018      	b.n	8007e16 <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	0011      	movs	r1, r2
 8007dec:	0018      	movs	r0, r3
 8007dee:	f000 f9a7 	bl	8008140 <TIM_OC2_SetConfig>
      break;
 8007df2:	e010      	b.n	8007e16 <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	0011      	movs	r1, r2
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f000 f9e1 	bl	80081c4 <TIM_OC3_SetConfig>
      break;
 8007e02:	e008      	b.n	8007e16 <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	0011      	movs	r1, r2
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f000 fa19 	bl	8008244 <TIM_OC4_SetConfig>
      break;
 8007e12:	e000      	b.n	8007e16 <HAL_TIM_OC_ConfigChannel+0x8a>
      break;
 8007e14:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2238      	movs	r2, #56	; 0x38
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	0018      	movs	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b004      	add	sp, #16
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2238      	movs	r2, #56	; 0x38
 8007e36:	5c9b      	ldrb	r3, [r3, r2]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_TIM_ConfigClockSource+0x18>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e0b7      	b.n	8007fb0 <HAL_TIM_ConfigClockSource+0x188>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2238      	movs	r2, #56	; 0x38
 8007e44:	2101      	movs	r1, #1
 8007e46:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2239      	movs	r2, #57	; 0x39
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2277      	movs	r2, #119	; 0x77
 8007e5c:	4393      	bics	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4a55      	ldr	r2, [pc, #340]	; (8007fb8 <HAL_TIM_ConfigClockSource+0x190>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2280      	movs	r2, #128	; 0x80
 8007e76:	0192      	lsls	r2, r2, #6
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d040      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0xd6>
 8007e7c:	2280      	movs	r2, #128	; 0x80
 8007e7e:	0192      	lsls	r2, r2, #6
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d900      	bls.n	8007e86 <HAL_TIM_ConfigClockSource+0x5e>
 8007e84:	e088      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007e86:	2280      	movs	r2, #128	; 0x80
 8007e88:	0152      	lsls	r2, r2, #5
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d100      	bne.n	8007e90 <HAL_TIM_ConfigClockSource+0x68>
 8007e8e:	e085      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x174>
 8007e90:	2280      	movs	r2, #128	; 0x80
 8007e92:	0152      	lsls	r2, r2, #5
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d900      	bls.n	8007e9a <HAL_TIM_ConfigClockSource+0x72>
 8007e98:	e07e      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007e9a:	2b70      	cmp	r3, #112	; 0x70
 8007e9c:	d018      	beq.n	8007ed0 <HAL_TIM_ConfigClockSource+0xa8>
 8007e9e:	d900      	bls.n	8007ea2 <HAL_TIM_ConfigClockSource+0x7a>
 8007ea0:	e07a      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007ea2:	2b60      	cmp	r3, #96	; 0x60
 8007ea4:	d04f      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x11e>
 8007ea6:	d900      	bls.n	8007eaa <HAL_TIM_ConfigClockSource+0x82>
 8007ea8:	e076      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007eaa:	2b50      	cmp	r3, #80	; 0x50
 8007eac:	d03b      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0xfe>
 8007eae:	d900      	bls.n	8007eb2 <HAL_TIM_ConfigClockSource+0x8a>
 8007eb0:	e072      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007eb2:	2b40      	cmp	r3, #64	; 0x40
 8007eb4:	d057      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x13e>
 8007eb6:	d900      	bls.n	8007eba <HAL_TIM_ConfigClockSource+0x92>
 8007eb8:	e06e      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007eba:	2b30      	cmp	r3, #48	; 0x30
 8007ebc:	d063      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x15e>
 8007ebe:	d86b      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d060      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x15e>
 8007ec4:	d868      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d05d      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x15e>
 8007eca:	2b10      	cmp	r3, #16
 8007ecc:	d05b      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ece:	e063      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6899      	ldr	r1, [r3, #8]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f000 fa70 	bl	80083c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2277      	movs	r2, #119	; 0x77
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	609a      	str	r2, [r3, #8]
      break;
 8007efc:	e04f      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6899      	ldr	r1, [r3, #8]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f000 fa59 	bl	80083c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2180      	movs	r1, #128	; 0x80
 8007f1e:	01c9      	lsls	r1, r1, #7
 8007f20:	430a      	orrs	r2, r1
 8007f22:	609a      	str	r2, [r3, #8]
      break;
 8007f24:	e03b      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6859      	ldr	r1, [r3, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	001a      	movs	r2, r3
 8007f34:	f000 f9cc 	bl	80082d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2150      	movs	r1, #80	; 0x50
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f000 fa26 	bl	8008390 <TIM_ITRx_SetConfig>
      break;
 8007f44:	e02b      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6859      	ldr	r1, [r3, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	001a      	movs	r2, r3
 8007f54:	f000 f9ea 	bl	800832c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2160      	movs	r1, #96	; 0x60
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f000 fa16 	bl	8008390 <TIM_ITRx_SetConfig>
      break;
 8007f64:	e01b      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	001a      	movs	r2, r3
 8007f74:	f000 f9ac 	bl	80082d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2140      	movs	r1, #64	; 0x40
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f000 fa06 	bl	8008390 <TIM_ITRx_SetConfig>
      break;
 8007f84:	e00b      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	0019      	movs	r1, r3
 8007f90:	0010      	movs	r0, r2
 8007f92:	f000 f9fd 	bl	8008390 <TIM_ITRx_SetConfig>
        break;
 8007f96:	e002      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007f98:	46c0      	nop			; (mov r8, r8)
 8007f9a:	e000      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007f9c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2239      	movs	r2, #57	; 0x39
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2238      	movs	r2, #56	; 0x38
 8007faa:	2100      	movs	r1, #0
 8007fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	b004      	add	sp, #16
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	ffff00ff 	.word	0xffff00ff

08007fbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007fc4:	46c0      	nop			; (mov r8, r8)
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fd4:	46c0      	nop			; (mov r8, r8)
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	b002      	add	sp, #8
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b002      	add	sp, #8
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ff4:	46c0      	nop			; (mov r8, r8)
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	b002      	add	sp, #8
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008004:	46c0      	nop			; (mov r8, r8)
 8008006:	46bd      	mov	sp, r7
 8008008:	b002      	add	sp, #8
 800800a:	bd80      	pop	{r7, pc}

0800800c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	2380      	movs	r3, #128	; 0x80
 8008020:	05db      	lsls	r3, r3, #23
 8008022:	429a      	cmp	r2, r3
 8008024:	d00b      	beq.n	800803e <TIM_Base_SetConfig+0x32>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a23      	ldr	r2, [pc, #140]	; (80080b8 <TIM_Base_SetConfig+0xac>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d007      	beq.n	800803e <TIM_Base_SetConfig+0x32>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a22      	ldr	r2, [pc, #136]	; (80080bc <TIM_Base_SetConfig+0xb0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d003      	beq.n	800803e <TIM_Base_SetConfig+0x32>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a21      	ldr	r2, [pc, #132]	; (80080c0 <TIM_Base_SetConfig+0xb4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d108      	bne.n	8008050 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2270      	movs	r2, #112	; 0x70
 8008042:	4393      	bics	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	2380      	movs	r3, #128	; 0x80
 8008054:	05db      	lsls	r3, r3, #23
 8008056:	429a      	cmp	r2, r3
 8008058:	d00b      	beq.n	8008072 <TIM_Base_SetConfig+0x66>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a16      	ldr	r2, [pc, #88]	; (80080b8 <TIM_Base_SetConfig+0xac>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d007      	beq.n	8008072 <TIM_Base_SetConfig+0x66>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a15      	ldr	r2, [pc, #84]	; (80080bc <TIM_Base_SetConfig+0xb0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d003      	beq.n	8008072 <TIM_Base_SetConfig+0x66>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a14      	ldr	r2, [pc, #80]	; (80080c0 <TIM_Base_SetConfig+0xb4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d108      	bne.n	8008084 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4a13      	ldr	r2, [pc, #76]	; (80080c4 <TIM_Base_SetConfig+0xb8>)
 8008076:	4013      	ands	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	4313      	orrs	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2280      	movs	r2, #128	; 0x80
 8008088:	4393      	bics	r3, r2
 800808a:	001a      	movs	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	615a      	str	r2, [r3, #20]
}
 80080b0:	46c0      	nop			; (mov r8, r8)
 80080b2:	46bd      	mov	sp, r7
 80080b4:	b004      	add	sp, #16
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40000400 	.word	0x40000400
 80080bc:	40010800 	.word	0x40010800
 80080c0:	40011400 	.word	0x40011400
 80080c4:	fffffcff 	.word	0xfffffcff

080080c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	2201      	movs	r2, #1
 80080d8:	4393      	bics	r3, r2
 80080da:	001a      	movs	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2270      	movs	r2, #112	; 0x70
 80080f6:	4393      	bics	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2203      	movs	r2, #3
 80080fe:	4393      	bics	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2202      	movs	r2, #2
 8008110:	4393      	bics	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	621a      	str	r2, [r3, #32]
}
 8008138:	46c0      	nop			; (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b006      	add	sp, #24
 800813e:	bd80      	pop	{r7, pc}

08008140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	2210      	movs	r2, #16
 8008150:	4393      	bics	r3, r2
 8008152:	001a      	movs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a13      	ldr	r2, [pc, #76]	; (80081bc <TIM_OC2_SetConfig+0x7c>)
 800816e:	4013      	ands	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4a12      	ldr	r2, [pc, #72]	; (80081c0 <TIM_OC2_SetConfig+0x80>)
 8008176:	4013      	ands	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2220      	movs	r2, #32
 800818a:	4393      	bics	r3, r2
 800818c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	621a      	str	r2, [r3, #32]
}
 80081b4:	46c0      	nop			; (mov r8, r8)
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b006      	add	sp, #24
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	ffff8fff 	.word	0xffff8fff
 80081c0:	fffffcff 	.word	0xfffffcff

080081c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	4a1a      	ldr	r2, [pc, #104]	; (800823c <TIM_OC3_SetConfig+0x78>)
 80081d4:	401a      	ands	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2270      	movs	r2, #112	; 0x70
 80081f0:	4393      	bics	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2203      	movs	r2, #3
 80081f8:	4393      	bics	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	4a0d      	ldr	r2, [pc, #52]	; (8008240 <TIM_OC3_SetConfig+0x7c>)
 800820a:	4013      	ands	r3, r2
 800820c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	621a      	str	r2, [r3, #32]
}
 8008234:	46c0      	nop			; (mov r8, r8)
 8008236:	46bd      	mov	sp, r7
 8008238:	b006      	add	sp, #24
 800823a:	bd80      	pop	{r7, pc}
 800823c:	fffffeff 	.word	0xfffffeff
 8008240:	fffffdff 	.word	0xfffffdff

08008244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	4a1b      	ldr	r2, [pc, #108]	; (80082c0 <TIM_OC4_SetConfig+0x7c>)
 8008254:	401a      	ands	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <TIM_OC4_SetConfig+0x80>)
 8008270:	4013      	ands	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4a14      	ldr	r2, [pc, #80]	; (80082c8 <TIM_OC4_SetConfig+0x84>)
 8008278:	4013      	ands	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	4313      	orrs	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	4a10      	ldr	r2, [pc, #64]	; (80082cc <TIM_OC4_SetConfig+0x88>)
 800828c:	4013      	ands	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	031b      	lsls	r3, r3, #12
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	46bd      	mov	sp, r7
 80082ba:	b006      	add	sp, #24
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	ffffefff 	.word	0xffffefff
 80082c4:	ffff8fff 	.word	0xffff8fff
 80082c8:	fffffcff 	.word	0xfffffcff
 80082cc:	ffffdfff 	.word	0xffffdfff

080082d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	2201      	movs	r2, #1
 80082e8:	4393      	bics	r3, r2
 80082ea:	001a      	movs	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	22f0      	movs	r2, #240	; 0xf0
 80082fa:	4393      	bics	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	220a      	movs	r2, #10
 800830c:	4393      	bics	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	4313      	orrs	r3, r2
 8008316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	46c0      	nop			; (mov r8, r8)
 8008326:	46bd      	mov	sp, r7
 8008328:	b006      	add	sp, #24
 800832a:	bd80      	pop	{r7, pc}

0800832c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	2210      	movs	r2, #16
 800833e:	4393      	bics	r3, r2
 8008340:	001a      	movs	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	4a0d      	ldr	r2, [pc, #52]	; (800838c <TIM_TI2_ConfigInputStage+0x60>)
 8008356:	4013      	ands	r3, r2
 8008358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	22a0      	movs	r2, #160	; 0xa0
 8008368:	4393      	bics	r3, r2
 800836a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	011b      	lsls	r3, r3, #4
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4313      	orrs	r3, r2
 8008374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	621a      	str	r2, [r3, #32]
}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b006      	add	sp, #24
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	ffff0fff 	.word	0xffff0fff

08008390 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2270      	movs	r2, #112	; 0x70
 80083a4:	4393      	bics	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	2207      	movs	r2, #7
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	609a      	str	r2, [r3, #8]
}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	46bd      	mov	sp, r7
 80083be:	b004      	add	sp, #16
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4a09      	ldr	r2, [pc, #36]	; (8008400 <TIM_ETR_SetConfig+0x3c>)
 80083dc:	4013      	ands	r3, r2
 80083de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	021a      	lsls	r2, r3, #8
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	609a      	str	r2, [r3, #8]
}
 80083f8:	46c0      	nop			; (mov r8, r8)
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b006      	add	sp, #24
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	ffff00ff 	.word	0xffff00ff

08008404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2238      	movs	r2, #56	; 0x38
 8008412:	5c9b      	ldrb	r3, [r3, r2]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008418:	2302      	movs	r3, #2
 800841a:	e047      	b.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2238      	movs	r2, #56	; 0x38
 8008420:	2101      	movs	r1, #1
 8008422:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2239      	movs	r2, #57	; 0x39
 8008428:	2102      	movs	r1, #2
 800842a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2270      	movs	r2, #112	; 0x70
 8008440:	4393      	bics	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	2380      	movs	r3, #128	; 0x80
 800845c:	05db      	lsls	r3, r3, #23
 800845e:	429a      	cmp	r2, r3
 8008460:	d00e      	beq.n	8008480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d009      	beq.n	8008480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a10      	ldr	r2, [pc, #64]	; (80084bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d10c      	bne.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2280      	movs	r2, #128	; 0x80
 8008484:	4393      	bics	r3, r2
 8008486:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	4313      	orrs	r3, r2
 8008490:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2239      	movs	r2, #57	; 0x39
 800849e:	2101      	movs	r1, #1
 80084a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2238      	movs	r2, #56	; 0x38
 80084a6:	2100      	movs	r1, #0
 80084a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	0018      	movs	r0, r3
 80084ae:	46bd      	mov	sp, r7
 80084b0:	b004      	add	sp, #16
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	40000400 	.word	0x40000400
 80084b8:	40010800 	.word	0x40010800
 80084bc:	40011400 	.word	0x40011400

080084c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e044      	b.n	800855c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d107      	bne.n	80084ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2274      	movs	r2, #116	; 0x74
 80084de:	2100      	movs	r1, #0
 80084e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	0018      	movs	r0, r3
 80084e6:	f7fb fa27 	bl	8003938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2224      	movs	r2, #36	; 0x24
 80084ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2101      	movs	r1, #1
 80084fc:	438a      	bics	r2, r1
 80084fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	0018      	movs	r0, r3
 8008504:	f000 faf8 	bl	8008af8 <UART_SetConfig>
 8008508:	0003      	movs	r3, r0
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e024      	b.n	800855c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	0018      	movs	r0, r3
 800851e:	f000 fda9 	bl	8009074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	490d      	ldr	r1, [pc, #52]	; (8008564 <HAL_UART_Init+0xa4>)
 800852e:	400a      	ands	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	212a      	movs	r1, #42	; 0x2a
 800853e:	438a      	bics	r2, r1
 8008540:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2101      	movs	r1, #1
 800854e:	430a      	orrs	r2, r1
 8008550:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	0018      	movs	r0, r3
 8008556:	f000 fe41 	bl	80091dc <UART_CheckIdleState>
 800855a:	0003      	movs	r3, r0
}
 800855c:	0018      	movs	r0, r3
 800855e:	46bd      	mov	sp, r7
 8008560:	b002      	add	sp, #8
 8008562:	bd80      	pop	{r7, pc}
 8008564:	ffffb7ff 	.word	0xffffb7ff

08008568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08a      	sub	sp, #40	; 0x28
 800856c:	af02      	add	r7, sp, #8
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	1dbb      	adds	r3, r7, #6
 8008576:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800857c:	2b20      	cmp	r3, #32
 800857e:	d000      	beq.n	8008582 <HAL_UART_Transmit+0x1a>
 8008580:	e095      	b.n	80086ae <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <HAL_UART_Transmit+0x28>
 8008588:	1dbb      	adds	r3, r7, #6
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e08d      	b.n	80086b0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	2380      	movs	r3, #128	; 0x80
 800859a:	015b      	lsls	r3, r3, #5
 800859c:	429a      	cmp	r2, r3
 800859e:	d109      	bne.n	80085b4 <HAL_UART_Transmit+0x4c>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2201      	movs	r2, #1
 80085ac:	4013      	ands	r3, r2
 80085ae:	d001      	beq.n	80085b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e07d      	b.n	80086b0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2274      	movs	r2, #116	; 0x74
 80085b8:	5c9b      	ldrb	r3, [r3, r2]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d101      	bne.n	80085c2 <HAL_UART_Transmit+0x5a>
 80085be:	2302      	movs	r3, #2
 80085c0:	e076      	b.n	80086b0 <HAL_UART_Transmit+0x148>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2274      	movs	r2, #116	; 0x74
 80085c6:	2101      	movs	r1, #1
 80085c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2280      	movs	r2, #128	; 0x80
 80085ce:	2100      	movs	r1, #0
 80085d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2221      	movs	r2, #33	; 0x21
 80085d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085d8:	f7fc fd3c 	bl	8005054 <HAL_GetTick>
 80085dc:	0003      	movs	r3, r0
 80085de:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	1dba      	adds	r2, r7, #6
 80085e4:	2150      	movs	r1, #80	; 0x50
 80085e6:	8812      	ldrh	r2, [r2, #0]
 80085e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	1dba      	adds	r2, r7, #6
 80085ee:	2152      	movs	r1, #82	; 0x52
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	2380      	movs	r3, #128	; 0x80
 80085fa:	015b      	lsls	r3, r3, #5
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d108      	bne.n	8008612 <HAL_UART_Transmit+0xaa>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	e003      	b.n	800861a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008616:	2300      	movs	r3, #0
 8008618:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2274      	movs	r2, #116	; 0x74
 800861e:	2100      	movs	r1, #0
 8008620:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8008622:	e02c      	b.n	800867e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	0013      	movs	r3, r2
 800862e:	2200      	movs	r2, #0
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	f000 fe1b 	bl	800926c <UART_WaitOnFlagUntilTimeout>
 8008636:	1e03      	subs	r3, r0, #0
 8008638:	d001      	beq.n	800863e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e038      	b.n	80086b0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	001a      	movs	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	05d2      	lsls	r2, r2, #23
 8008650:	0dd2      	lsrs	r2, r2, #23
 8008652:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	3302      	adds	r3, #2
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	e007      	b.n	800866c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	781a      	ldrb	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3301      	adds	r3, #1
 800866a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2252      	movs	r2, #82	; 0x52
 8008670:	5a9b      	ldrh	r3, [r3, r2]
 8008672:	b29b      	uxth	r3, r3
 8008674:	3b01      	subs	r3, #1
 8008676:	b299      	uxth	r1, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2252      	movs	r2, #82	; 0x52
 800867c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2252      	movs	r2, #82	; 0x52
 8008682:	5a9b      	ldrh	r3, [r3, r2]
 8008684:	b29b      	uxth	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1cc      	bne.n	8008624 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	0013      	movs	r3, r2
 8008694:	2200      	movs	r2, #0
 8008696:	2140      	movs	r1, #64	; 0x40
 8008698:	f000 fde8 	bl	800926c <UART_WaitOnFlagUntilTimeout>
 800869c:	1e03      	subs	r3, r0, #0
 800869e:	d001      	beq.n	80086a4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e005      	b.n	80086b0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2220      	movs	r2, #32
 80086a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	e000      	b.n	80086b0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80086ae:	2302      	movs	r3, #2
  }
}
 80086b0:	0018      	movs	r0, r3
 80086b2:	46bd      	mov	sp, r7
 80086b4:	b008      	add	sp, #32
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	4ab5      	ldr	r2, [pc, #724]	; (80089b0 <HAL_UART_IRQHandler+0x2f8>)
 80086dc:	4013      	ands	r3, r2
 80086de:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d112      	bne.n	800870c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	2220      	movs	r2, #32
 80086ea:	4013      	ands	r3, r2
 80086ec:	d00e      	beq.n	800870c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2220      	movs	r2, #32
 80086f2:	4013      	ands	r3, r2
 80086f4:	d00a      	beq.n	800870c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d100      	bne.n	8008700 <HAL_UART_IRQHandler+0x48>
 80086fe:	e1d1      	b.n	8008aa4 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	0010      	movs	r0, r2
 8008708:	4798      	blx	r3
      }
      return;
 800870a:	e1cb      	b.n	8008aa4 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d100      	bne.n	8008714 <HAL_UART_IRQHandler+0x5c>
 8008712:	e0d9      	b.n	80088c8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2201      	movs	r2, #1
 8008718:	4013      	ands	r3, r2
 800871a:	d104      	bne.n	8008726 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	4aa5      	ldr	r2, [pc, #660]	; (80089b4 <HAL_UART_IRQHandler+0x2fc>)
 8008720:	4013      	ands	r3, r2
 8008722:	d100      	bne.n	8008726 <HAL_UART_IRQHandler+0x6e>
 8008724:	e0d0      	b.n	80088c8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2201      	movs	r2, #1
 800872a:	4013      	ands	r3, r2
 800872c:	d010      	beq.n	8008750 <HAL_UART_IRQHandler+0x98>
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	4013      	ands	r3, r2
 8008736:	d00b      	beq.n	8008750 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2201      	movs	r2, #1
 800873e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2280      	movs	r2, #128	; 0x80
 8008744:	589b      	ldr	r3, [r3, r2]
 8008746:	2201      	movs	r2, #1
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2180      	movs	r1, #128	; 0x80
 800874e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	2202      	movs	r2, #2
 8008754:	4013      	ands	r3, r2
 8008756:	d00f      	beq.n	8008778 <HAL_UART_IRQHandler+0xc0>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2201      	movs	r2, #1
 800875c:	4013      	ands	r3, r2
 800875e:	d00b      	beq.n	8008778 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2202      	movs	r2, #2
 8008766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2280      	movs	r2, #128	; 0x80
 800876c:	589b      	ldr	r3, [r3, r2]
 800876e:	2204      	movs	r2, #4
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2180      	movs	r1, #128	; 0x80
 8008776:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2204      	movs	r2, #4
 800877c:	4013      	ands	r3, r2
 800877e:	d00f      	beq.n	80087a0 <HAL_UART_IRQHandler+0xe8>
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2201      	movs	r2, #1
 8008784:	4013      	ands	r3, r2
 8008786:	d00b      	beq.n	80087a0 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2204      	movs	r2, #4
 800878e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2280      	movs	r2, #128	; 0x80
 8008794:	589b      	ldr	r3, [r3, r2]
 8008796:	2202      	movs	r2, #2
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2180      	movs	r1, #128	; 0x80
 800879e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	2208      	movs	r2, #8
 80087a4:	4013      	ands	r3, r2
 80087a6:	d013      	beq.n	80087d0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	2220      	movs	r2, #32
 80087ac:	4013      	ands	r3, r2
 80087ae:	d103      	bne.n	80087b8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2201      	movs	r2, #1
 80087b4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80087b6:	d00b      	beq.n	80087d0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2208      	movs	r2, #8
 80087be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2280      	movs	r2, #128	; 0x80
 80087c4:	589b      	ldr	r3, [r3, r2]
 80087c6:	2208      	movs	r2, #8
 80087c8:	431a      	orrs	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2180      	movs	r1, #128	; 0x80
 80087ce:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	2380      	movs	r3, #128	; 0x80
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	4013      	ands	r3, r2
 80087d8:	d011      	beq.n	80087fe <HAL_UART_IRQHandler+0x146>
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	2380      	movs	r3, #128	; 0x80
 80087de:	04db      	lsls	r3, r3, #19
 80087e0:	4013      	ands	r3, r2
 80087e2:	d00c      	beq.n	80087fe <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2280      	movs	r2, #128	; 0x80
 80087ea:	0112      	lsls	r2, r2, #4
 80087ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2280      	movs	r2, #128	; 0x80
 80087f2:	589b      	ldr	r3, [r3, r2]
 80087f4:	2220      	movs	r2, #32
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2180      	movs	r1, #128	; 0x80
 80087fc:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2280      	movs	r2, #128	; 0x80
 8008802:	589b      	ldr	r3, [r3, r2]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d100      	bne.n	800880a <HAL_UART_IRQHandler+0x152>
 8008808:	e14e      	b.n	8008aa8 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2220      	movs	r2, #32
 800880e:	4013      	ands	r3, r2
 8008810:	d00c      	beq.n	800882c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2220      	movs	r2, #32
 8008816:	4013      	ands	r3, r2
 8008818:	d008      	beq.n	800882c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	0010      	movs	r0, r2
 800882a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2280      	movs	r2, #128	; 0x80
 8008830:	589b      	ldr	r3, [r3, r2]
 8008832:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	2240      	movs	r2, #64	; 0x40
 800883c:	4013      	ands	r3, r2
 800883e:	2b40      	cmp	r3, #64	; 0x40
 8008840:	d003      	beq.n	800884a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2228      	movs	r2, #40	; 0x28
 8008846:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008848:	d033      	beq.n	80088b2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	0018      	movs	r0, r3
 800884e:	f000 fd8b 	bl	8009368 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	2240      	movs	r2, #64	; 0x40
 800885a:	4013      	ands	r3, r2
 800885c:	2b40      	cmp	r3, #64	; 0x40
 800885e:	d123      	bne.n	80088a8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2140      	movs	r1, #64	; 0x40
 800886c:	438a      	bics	r2, r1
 800886e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008874:	2b00      	cmp	r3, #0
 8008876:	d012      	beq.n	800889e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887c:	4a4e      	ldr	r2, [pc, #312]	; (80089b8 <HAL_UART_IRQHandler+0x300>)
 800887e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008884:	0018      	movs	r0, r3
 8008886:	f7fd f97b 	bl	8005b80 <HAL_DMA_Abort_IT>
 800888a:	1e03      	subs	r3, r0, #0
 800888c:	d01a      	beq.n	80088c4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	0018      	movs	r0, r3
 800889a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889c:	e012      	b.n	80088c4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	0018      	movs	r0, r3
 80088a2:	f000 f915 	bl	8008ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a6:	e00d      	b.n	80088c4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	0018      	movs	r0, r3
 80088ac:	f000 f910 	bl	8008ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b0:	e008      	b.n	80088c4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	0018      	movs	r0, r3
 80088b6:	f000 f90b 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2280      	movs	r2, #128	; 0x80
 80088be:	2100      	movs	r1, #0
 80088c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80088c2:	e0f1      	b.n	8008aa8 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	46c0      	nop			; (mov r8, r8)
    return;
 80088c6:	e0ef      	b.n	8008aa8 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d000      	beq.n	80088d2 <HAL_UART_IRQHandler+0x21a>
 80088d0:	e0b5      	b.n	8008a3e <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	2210      	movs	r2, #16
 80088d6:	4013      	ands	r3, r2
 80088d8:	d100      	bne.n	80088dc <HAL_UART_IRQHandler+0x224>
 80088da:	e0b0      	b.n	8008a3e <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	2210      	movs	r2, #16
 80088e0:	4013      	ands	r3, r2
 80088e2:	d100      	bne.n	80088e6 <HAL_UART_IRQHandler+0x22e>
 80088e4:	e0ab      	b.n	8008a3e <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2210      	movs	r2, #16
 80088ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2240      	movs	r2, #64	; 0x40
 80088f6:	4013      	ands	r3, r2
 80088f8:	2b40      	cmp	r3, #64	; 0x40
 80088fa:	d161      	bne.n	80089c0 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	2108      	movs	r1, #8
 8008906:	187b      	adds	r3, r7, r1
 8008908:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800890a:	187b      	adds	r3, r7, r1
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d100      	bne.n	8008914 <HAL_UART_IRQHandler+0x25c>
 8008912:	e0cb      	b.n	8008aac <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2258      	movs	r2, #88	; 0x58
 8008918:	5a9b      	ldrh	r3, [r3, r2]
 800891a:	187a      	adds	r2, r7, r1
 800891c:	8812      	ldrh	r2, [r2, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	d300      	bcc.n	8008924 <HAL_UART_IRQHandler+0x26c>
 8008922:	e0c3      	b.n	8008aac <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	187a      	adds	r2, r7, r1
 8008928:	215a      	movs	r1, #90	; 0x5a
 800892a:	8812      	ldrh	r2, [r2, #0]
 800892c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2220      	movs	r2, #32
 8008938:	4013      	ands	r3, r2
 800893a:	d12a      	bne.n	8008992 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	491d      	ldr	r1, [pc, #116]	; (80089bc <HAL_UART_IRQHandler+0x304>)
 8008948:	400a      	ands	r2, r1
 800894a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2101      	movs	r1, #1
 8008958:	438a      	bics	r2, r1
 800895a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2140      	movs	r1, #64	; 0x40
 8008968:	438a      	bics	r2, r1
 800896a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2220      	movs	r2, #32
 8008970:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2110      	movs	r1, #16
 8008984:	438a      	bics	r2, r1
 8008986:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898c:	0018      	movs	r0, r3
 800898e:	f7fd f8b7 	bl	8005b00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2258      	movs	r2, #88	; 0x58
 8008996:	5a9a      	ldrh	r2, [r3, r2]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	215a      	movs	r1, #90	; 0x5a
 800899c:	5a5b      	ldrh	r3, [r3, r1]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	0011      	movs	r1, r2
 80089a8:	0018      	movs	r0, r3
 80089aa:	f000 f899 	bl	8008ae0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80089ae:	e07d      	b.n	8008aac <HAL_UART_IRQHandler+0x3f4>
 80089b0:	0000080f 	.word	0x0000080f
 80089b4:	04000120 	.word	0x04000120
 80089b8:	080093c9 	.word	0x080093c9
 80089bc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2258      	movs	r2, #88	; 0x58
 80089c4:	5a99      	ldrh	r1, [r3, r2]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	225a      	movs	r2, #90	; 0x5a
 80089ca:	5a9b      	ldrh	r3, [r3, r2]
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	200a      	movs	r0, #10
 80089d0:	183b      	adds	r3, r7, r0
 80089d2:	1a8a      	subs	r2, r1, r2
 80089d4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	225a      	movs	r2, #90	; 0x5a
 80089da:	5a9b      	ldrh	r3, [r3, r2]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d100      	bne.n	80089e4 <HAL_UART_IRQHandler+0x32c>
 80089e2:	e065      	b.n	8008ab0 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 80089e4:	183b      	adds	r3, r7, r0
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d061      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4931      	ldr	r1, [pc, #196]	; (8008abc <HAL_UART_IRQHandler+0x404>)
 80089f8:	400a      	ands	r2, r1
 80089fa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2101      	movs	r1, #1
 8008a08:	438a      	bics	r2, r1
 8008a0a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2110      	movs	r1, #16
 8008a2a:	438a      	bics	r2, r1
 8008a2c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a2e:	183b      	adds	r3, r7, r0
 8008a30:	881a      	ldrh	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	0011      	movs	r1, r2
 8008a36:	0018      	movs	r0, r3
 8008a38:	f000 f852 	bl	8008ae0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008a3c:	e038      	b.n	8008ab0 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	035b      	lsls	r3, r3, #13
 8008a44:	4013      	ands	r3, r2
 8008a46:	d00e      	beq.n	8008a66 <HAL_UART_IRQHandler+0x3ae>
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	2380      	movs	r3, #128	; 0x80
 8008a4c:	03db      	lsls	r3, r3, #15
 8008a4e:	4013      	ands	r3, r2
 8008a50:	d009      	beq.n	8008a66 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2280      	movs	r2, #128	; 0x80
 8008a58:	0352      	lsls	r2, r2, #13
 8008a5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f000 fce3 	bl	800942a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a64:	e027      	b.n	8008ab6 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	2280      	movs	r2, #128	; 0x80
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	d00d      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2280      	movs	r2, #128	; 0x80
 8008a72:	4013      	ands	r3, r2
 8008a74:	d009      	beq.n	8008a8a <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01a      	beq.n	8008ab4 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	0010      	movs	r0, r2
 8008a86:	4798      	blx	r3
    }
    return;
 8008a88:	e014      	b.n	8008ab4 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2240      	movs	r2, #64	; 0x40
 8008a8e:	4013      	ands	r3, r2
 8008a90:	d011      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x3fe>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2240      	movs	r2, #64	; 0x40
 8008a96:	4013      	ands	r3, r2
 8008a98:	d00d      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f000 fcaa 	bl	80093f6 <UART_EndTransmit_IT>
    return;
 8008aa2:	e008      	b.n	8008ab6 <HAL_UART_IRQHandler+0x3fe>
      return;
 8008aa4:	46c0      	nop			; (mov r8, r8)
 8008aa6:	e006      	b.n	8008ab6 <HAL_UART_IRQHandler+0x3fe>
    return;
 8008aa8:	46c0      	nop			; (mov r8, r8)
 8008aaa:	e004      	b.n	8008ab6 <HAL_UART_IRQHandler+0x3fe>
      return;
 8008aac:	46c0      	nop			; (mov r8, r8)
 8008aae:	e002      	b.n	8008ab6 <HAL_UART_IRQHandler+0x3fe>
      return;
 8008ab0:	46c0      	nop			; (mov r8, r8)
 8008ab2:	e000      	b.n	8008ab6 <HAL_UART_IRQHandler+0x3fe>
    return;
 8008ab4:	46c0      	nop			; (mov r8, r8)
  }

}
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	b008      	add	sp, #32
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	fffffedf 	.word	0xfffffedf

08008ac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ac8:	46c0      	nop			; (mov r8, r8)
 8008aca:	46bd      	mov	sp, r7
 8008acc:	b002      	add	sp, #8
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ad8:	46c0      	nop			; (mov r8, r8)
 8008ada:	46bd      	mov	sp, r7
 8008adc:	b002      	add	sp, #8
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	000a      	movs	r2, r1
 8008aea:	1cbb      	adds	r3, r7, #2
 8008aec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008aee:	46c0      	nop			; (mov r8, r8)
 8008af0:	46bd      	mov	sp, r7
 8008af2:	b002      	add	sp, #8
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008af8:	b5b0      	push	{r4, r5, r7, lr}
 8008afa:	b08e      	sub	sp, #56	; 0x38
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b00:	231a      	movs	r3, #26
 8008b02:	2218      	movs	r2, #24
 8008b04:	4694      	mov	ip, r2
 8008b06:	44bc      	add	ip, r7
 8008b08:	4463      	add	r3, ip
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	431a      	orrs	r2, r3
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4ab0      	ldr	r2, [pc, #704]	; (8008df0 <UART_SetConfig+0x2f8>)
 8008b2e:	4013      	ands	r3, r2
 8008b30:	0019      	movs	r1, r3
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4aac      	ldr	r2, [pc, #688]	; (8008df4 <UART_SetConfig+0x2fc>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	0019      	movs	r1, r3
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4aa6      	ldr	r2, [pc, #664]	; (8008df8 <UART_SetConfig+0x300>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d004      	beq.n	8008b6e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	4aa1      	ldr	r2, [pc, #644]	; (8008dfc <UART_SetConfig+0x304>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	0019      	movs	r1, r3
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b80:	430a      	orrs	r2, r1
 8008b82:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a9d      	ldr	r2, [pc, #628]	; (8008e00 <UART_SetConfig+0x308>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d136      	bne.n	8008bfc <UART_SetConfig+0x104>
 8008b8e:	4b9d      	ldr	r3, [pc, #628]	; (8008e04 <UART_SetConfig+0x30c>)
 8008b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b92:	2203      	movs	r2, #3
 8008b94:	4013      	ands	r3, r2
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d020      	beq.n	8008bdc <UART_SetConfig+0xe4>
 8008b9a:	d827      	bhi.n	8008bec <UART_SetConfig+0xf4>
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d00d      	beq.n	8008bbc <UART_SetConfig+0xc4>
 8008ba0:	d824      	bhi.n	8008bec <UART_SetConfig+0xf4>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <UART_SetConfig+0xb4>
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d010      	beq.n	8008bcc <UART_SetConfig+0xd4>
 8008baa:	e01f      	b.n	8008bec <UART_SetConfig+0xf4>
 8008bac:	231b      	movs	r3, #27
 8008bae:	2218      	movs	r2, #24
 8008bb0:	4694      	mov	ip, r2
 8008bb2:	44bc      	add	ip, r7
 8008bb4:	4463      	add	r3, ip
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	e0c5      	b.n	8008d48 <UART_SetConfig+0x250>
 8008bbc:	231b      	movs	r3, #27
 8008bbe:	2218      	movs	r2, #24
 8008bc0:	4694      	mov	ip, r2
 8008bc2:	44bc      	add	ip, r7
 8008bc4:	4463      	add	r3, ip
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	e0bd      	b.n	8008d48 <UART_SetConfig+0x250>
 8008bcc:	231b      	movs	r3, #27
 8008bce:	2218      	movs	r2, #24
 8008bd0:	4694      	mov	ip, r2
 8008bd2:	44bc      	add	ip, r7
 8008bd4:	4463      	add	r3, ip
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	e0b5      	b.n	8008d48 <UART_SetConfig+0x250>
 8008bdc:	231b      	movs	r3, #27
 8008bde:	2218      	movs	r2, #24
 8008be0:	4694      	mov	ip, r2
 8008be2:	44bc      	add	ip, r7
 8008be4:	4463      	add	r3, ip
 8008be6:	2208      	movs	r2, #8
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	e0ad      	b.n	8008d48 <UART_SetConfig+0x250>
 8008bec:	231b      	movs	r3, #27
 8008bee:	2218      	movs	r2, #24
 8008bf0:	4694      	mov	ip, r2
 8008bf2:	44bc      	add	ip, r7
 8008bf4:	4463      	add	r3, ip
 8008bf6:	2210      	movs	r2, #16
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	e0a5      	b.n	8008d48 <UART_SetConfig+0x250>
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a81      	ldr	r2, [pc, #516]	; (8008e08 <UART_SetConfig+0x310>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d136      	bne.n	8008c74 <UART_SetConfig+0x17c>
 8008c06:	4b7f      	ldr	r3, [pc, #508]	; (8008e04 <UART_SetConfig+0x30c>)
 8008c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c0a:	220c      	movs	r2, #12
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b0c      	cmp	r3, #12
 8008c10:	d020      	beq.n	8008c54 <UART_SetConfig+0x15c>
 8008c12:	d827      	bhi.n	8008c64 <UART_SetConfig+0x16c>
 8008c14:	2b08      	cmp	r3, #8
 8008c16:	d00d      	beq.n	8008c34 <UART_SetConfig+0x13c>
 8008c18:	d824      	bhi.n	8008c64 <UART_SetConfig+0x16c>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <UART_SetConfig+0x12c>
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d010      	beq.n	8008c44 <UART_SetConfig+0x14c>
 8008c22:	e01f      	b.n	8008c64 <UART_SetConfig+0x16c>
 8008c24:	231b      	movs	r3, #27
 8008c26:	2218      	movs	r2, #24
 8008c28:	4694      	mov	ip, r2
 8008c2a:	44bc      	add	ip, r7
 8008c2c:	4463      	add	r3, ip
 8008c2e:	2200      	movs	r2, #0
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	e089      	b.n	8008d48 <UART_SetConfig+0x250>
 8008c34:	231b      	movs	r3, #27
 8008c36:	2218      	movs	r2, #24
 8008c38:	4694      	mov	ip, r2
 8008c3a:	44bc      	add	ip, r7
 8008c3c:	4463      	add	r3, ip
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e081      	b.n	8008d48 <UART_SetConfig+0x250>
 8008c44:	231b      	movs	r3, #27
 8008c46:	2218      	movs	r2, #24
 8008c48:	4694      	mov	ip, r2
 8008c4a:	44bc      	add	ip, r7
 8008c4c:	4463      	add	r3, ip
 8008c4e:	2204      	movs	r2, #4
 8008c50:	701a      	strb	r2, [r3, #0]
 8008c52:	e079      	b.n	8008d48 <UART_SetConfig+0x250>
 8008c54:	231b      	movs	r3, #27
 8008c56:	2218      	movs	r2, #24
 8008c58:	4694      	mov	ip, r2
 8008c5a:	44bc      	add	ip, r7
 8008c5c:	4463      	add	r3, ip
 8008c5e:	2208      	movs	r2, #8
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	e071      	b.n	8008d48 <UART_SetConfig+0x250>
 8008c64:	231b      	movs	r3, #27
 8008c66:	2218      	movs	r2, #24
 8008c68:	4694      	mov	ip, r2
 8008c6a:	44bc      	add	ip, r7
 8008c6c:	4463      	add	r3, ip
 8008c6e:	2210      	movs	r2, #16
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	e069      	b.n	8008d48 <UART_SetConfig+0x250>
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a64      	ldr	r2, [pc, #400]	; (8008e0c <UART_SetConfig+0x314>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d107      	bne.n	8008c8e <UART_SetConfig+0x196>
 8008c7e:	231b      	movs	r3, #27
 8008c80:	2218      	movs	r2, #24
 8008c82:	4694      	mov	ip, r2
 8008c84:	44bc      	add	ip, r7
 8008c86:	4463      	add	r3, ip
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e05c      	b.n	8008d48 <UART_SetConfig+0x250>
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a5f      	ldr	r2, [pc, #380]	; (8008e10 <UART_SetConfig+0x318>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d107      	bne.n	8008ca8 <UART_SetConfig+0x1b0>
 8008c98:	231b      	movs	r3, #27
 8008c9a:	2218      	movs	r2, #24
 8008c9c:	4694      	mov	ip, r2
 8008c9e:	44bc      	add	ip, r7
 8008ca0:	4463      	add	r3, ip
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e04f      	b.n	8008d48 <UART_SetConfig+0x250>
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a52      	ldr	r2, [pc, #328]	; (8008df8 <UART_SetConfig+0x300>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d143      	bne.n	8008d3a <UART_SetConfig+0x242>
 8008cb2:	4b54      	ldr	r3, [pc, #336]	; (8008e04 <UART_SetConfig+0x30c>)
 8008cb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb6:	23c0      	movs	r3, #192	; 0xc0
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	4013      	ands	r3, r2
 8008cbc:	22c0      	movs	r2, #192	; 0xc0
 8008cbe:	0112      	lsls	r2, r2, #4
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d02a      	beq.n	8008d1a <UART_SetConfig+0x222>
 8008cc4:	22c0      	movs	r2, #192	; 0xc0
 8008cc6:	0112      	lsls	r2, r2, #4
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d82e      	bhi.n	8008d2a <UART_SetConfig+0x232>
 8008ccc:	2280      	movs	r2, #128	; 0x80
 8008cce:	0112      	lsls	r2, r2, #4
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d012      	beq.n	8008cfa <UART_SetConfig+0x202>
 8008cd4:	2280      	movs	r2, #128	; 0x80
 8008cd6:	0112      	lsls	r2, r2, #4
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d826      	bhi.n	8008d2a <UART_SetConfig+0x232>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <UART_SetConfig+0x1f2>
 8008ce0:	2280      	movs	r2, #128	; 0x80
 8008ce2:	00d2      	lsls	r2, r2, #3
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d010      	beq.n	8008d0a <UART_SetConfig+0x212>
 8008ce8:	e01f      	b.n	8008d2a <UART_SetConfig+0x232>
 8008cea:	231b      	movs	r3, #27
 8008cec:	2218      	movs	r2, #24
 8008cee:	4694      	mov	ip, r2
 8008cf0:	44bc      	add	ip, r7
 8008cf2:	4463      	add	r3, ip
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	e026      	b.n	8008d48 <UART_SetConfig+0x250>
 8008cfa:	231b      	movs	r3, #27
 8008cfc:	2218      	movs	r2, #24
 8008cfe:	4694      	mov	ip, r2
 8008d00:	44bc      	add	ip, r7
 8008d02:	4463      	add	r3, ip
 8008d04:	2202      	movs	r2, #2
 8008d06:	701a      	strb	r2, [r3, #0]
 8008d08:	e01e      	b.n	8008d48 <UART_SetConfig+0x250>
 8008d0a:	231b      	movs	r3, #27
 8008d0c:	2218      	movs	r2, #24
 8008d0e:	4694      	mov	ip, r2
 8008d10:	44bc      	add	ip, r7
 8008d12:	4463      	add	r3, ip
 8008d14:	2204      	movs	r2, #4
 8008d16:	701a      	strb	r2, [r3, #0]
 8008d18:	e016      	b.n	8008d48 <UART_SetConfig+0x250>
 8008d1a:	231b      	movs	r3, #27
 8008d1c:	2218      	movs	r2, #24
 8008d1e:	4694      	mov	ip, r2
 8008d20:	44bc      	add	ip, r7
 8008d22:	4463      	add	r3, ip
 8008d24:	2208      	movs	r2, #8
 8008d26:	701a      	strb	r2, [r3, #0]
 8008d28:	e00e      	b.n	8008d48 <UART_SetConfig+0x250>
 8008d2a:	231b      	movs	r3, #27
 8008d2c:	2218      	movs	r2, #24
 8008d2e:	4694      	mov	ip, r2
 8008d30:	44bc      	add	ip, r7
 8008d32:	4463      	add	r3, ip
 8008d34:	2210      	movs	r2, #16
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	e006      	b.n	8008d48 <UART_SetConfig+0x250>
 8008d3a:	231b      	movs	r3, #27
 8008d3c:	2218      	movs	r2, #24
 8008d3e:	4694      	mov	ip, r2
 8008d40:	44bc      	add	ip, r7
 8008d42:	4463      	add	r3, ip
 8008d44:	2210      	movs	r2, #16
 8008d46:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2a      	ldr	r2, [pc, #168]	; (8008df8 <UART_SetConfig+0x300>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d000      	beq.n	8008d54 <UART_SetConfig+0x25c>
 8008d52:	e09e      	b.n	8008e92 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d54:	231b      	movs	r3, #27
 8008d56:	2218      	movs	r2, #24
 8008d58:	4694      	mov	ip, r2
 8008d5a:	44bc      	add	ip, r7
 8008d5c:	4463      	add	r3, ip
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d01d      	beq.n	8008da0 <UART_SetConfig+0x2a8>
 8008d64:	dc20      	bgt.n	8008da8 <UART_SetConfig+0x2b0>
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d015      	beq.n	8008d96 <UART_SetConfig+0x29e>
 8008d6a:	dc1d      	bgt.n	8008da8 <UART_SetConfig+0x2b0>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <UART_SetConfig+0x27e>
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d005      	beq.n	8008d80 <UART_SetConfig+0x288>
 8008d74:	e018      	b.n	8008da8 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d76:	f7fe fc75 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
 8008d7a:	0003      	movs	r3, r0
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d7e:	e01d      	b.n	8008dbc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d80:	4b20      	ldr	r3, [pc, #128]	; (8008e04 <UART_SetConfig+0x30c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2210      	movs	r2, #16
 8008d86:	4013      	ands	r3, r2
 8008d88:	d002      	beq.n	8008d90 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008d8a:	4b22      	ldr	r3, [pc, #136]	; (8008e14 <UART_SetConfig+0x31c>)
 8008d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d8e:	e015      	b.n	8008dbc <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8008d90:	4b21      	ldr	r3, [pc, #132]	; (8008e18 <UART_SetConfig+0x320>)
 8008d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d94:	e012      	b.n	8008dbc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d96:	f7fe fbb5 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8008d9a:	0003      	movs	r3, r0
 8008d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d9e:	e00d      	b.n	8008dbc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008da0:	2380      	movs	r3, #128	; 0x80
 8008da2:	021b      	lsls	r3, r3, #8
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008da6:	e009      	b.n	8008dbc <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008dac:	231a      	movs	r3, #26
 8008dae:	2218      	movs	r2, #24
 8008db0:	4694      	mov	ip, r2
 8008db2:	44bc      	add	ip, r7
 8008db4:	4463      	add	r3, ip
 8008db6:	2201      	movs	r2, #1
 8008db8:	701a      	strb	r2, [r3, #0]
        break;
 8008dba:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d100      	bne.n	8008dc4 <UART_SetConfig+0x2cc>
 8008dc2:	e13c      	b.n	800903e <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	0013      	movs	r3, r2
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	189b      	adds	r3, r3, r2
 8008dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d305      	bcc.n	8008de0 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d91d      	bls.n	8008e1c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8008de0:	231a      	movs	r3, #26
 8008de2:	2218      	movs	r2, #24
 8008de4:	4694      	mov	ip, r2
 8008de6:	44bc      	add	ip, r7
 8008de8:	4463      	add	r3, ip
 8008dea:	2201      	movs	r2, #1
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	e126      	b.n	800903e <UART_SetConfig+0x546>
 8008df0:	efff69f3 	.word	0xefff69f3
 8008df4:	ffffcfff 	.word	0xffffcfff
 8008df8:	40004800 	.word	0x40004800
 8008dfc:	fffff4ff 	.word	0xfffff4ff
 8008e00:	40013800 	.word	0x40013800
 8008e04:	40021000 	.word	0x40021000
 8008e08:	40004400 	.word	0x40004400
 8008e0c:	40004c00 	.word	0x40004c00
 8008e10:	40005000 	.word	0x40005000
 8008e14:	003d0900 	.word	0x003d0900
 8008e18:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	6939      	ldr	r1, [r7, #16]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	000b      	movs	r3, r1
 8008e2a:	0e1b      	lsrs	r3, r3, #24
 8008e2c:	0010      	movs	r0, r2
 8008e2e:	0205      	lsls	r5, r0, #8
 8008e30:	431d      	orrs	r5, r3
 8008e32:	000b      	movs	r3, r1
 8008e34:	021c      	lsls	r4, r3, #8
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	085b      	lsrs	r3, r3, #1
 8008e3c:	60bb      	str	r3, [r7, #8]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	68b8      	ldr	r0, [r7, #8]
 8008e44:	68f9      	ldr	r1, [r7, #12]
 8008e46:	1900      	adds	r0, r0, r4
 8008e48:	4169      	adcs	r1, r5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	2300      	movs	r3, #0
 8008e52:	607b      	str	r3, [r7, #4]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f7f7 fa26 	bl	80002a8 <__aeabi_uldivmod>
 8008e5c:	0002      	movs	r2, r0
 8008e5e:	000b      	movs	r3, r1
 8008e60:	0013      	movs	r3, r2
 8008e62:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e66:	23c0      	movs	r3, #192	; 0xc0
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d309      	bcc.n	8008e82 <UART_SetConfig+0x38a>
 8008e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e70:	2380      	movs	r3, #128	; 0x80
 8008e72:	035b      	lsls	r3, r3, #13
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d204      	bcs.n	8008e82 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e7e:	60da      	str	r2, [r3, #12]
 8008e80:	e0dd      	b.n	800903e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8008e82:	231a      	movs	r3, #26
 8008e84:	2218      	movs	r2, #24
 8008e86:	4694      	mov	ip, r2
 8008e88:	44bc      	add	ip, r7
 8008e8a:	4463      	add	r3, ip
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	e0d5      	b.n	800903e <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	69da      	ldr	r2, [r3, #28]
 8008e96:	2380      	movs	r3, #128	; 0x80
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d000      	beq.n	8008ea0 <UART_SetConfig+0x3a8>
 8008e9e:	e074      	b.n	8008f8a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8008ea0:	231b      	movs	r3, #27
 8008ea2:	2218      	movs	r2, #24
 8008ea4:	4694      	mov	ip, r2
 8008ea6:	44bc      	add	ip, r7
 8008ea8:	4463      	add	r3, ip
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d822      	bhi.n	8008ef6 <UART_SetConfig+0x3fe>
 8008eb0:	009a      	lsls	r2, r3, #2
 8008eb2:	4b6b      	ldr	r3, [pc, #428]	; (8009060 <UART_SetConfig+0x568>)
 8008eb4:	18d3      	adds	r3, r2, r3
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eba:	f7fe fbd3 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
 8008ebe:	0003      	movs	r3, r0
 8008ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ec2:	e022      	b.n	8008f0a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec4:	f7fe fbe4 	bl	8007690 <HAL_RCC_GetPCLK2Freq>
 8008ec8:	0003      	movs	r3, r0
 8008eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ecc:	e01d      	b.n	8008f0a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ece:	4b65      	ldr	r3, [pc, #404]	; (8009064 <UART_SetConfig+0x56c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2210      	movs	r2, #16
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	d002      	beq.n	8008ede <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008ed8:	4b63      	ldr	r3, [pc, #396]	; (8009068 <UART_SetConfig+0x570>)
 8008eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008edc:	e015      	b.n	8008f0a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8008ede:	4b63      	ldr	r3, [pc, #396]	; (800906c <UART_SetConfig+0x574>)
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ee2:	e012      	b.n	8008f0a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ee4:	f7fe fb0e 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8008ee8:	0003      	movs	r3, r0
 8008eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eec:	e00d      	b.n	8008f0a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eee:	2380      	movs	r3, #128	; 0x80
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ef4:	e009      	b.n	8008f0a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008efa:	231a      	movs	r3, #26
 8008efc:	2218      	movs	r2, #24
 8008efe:	4694      	mov	ip, r2
 8008f00:	44bc      	add	ip, r7
 8008f02:	4463      	add	r3, ip
 8008f04:	2201      	movs	r2, #1
 8008f06:	701a      	strb	r2, [r3, #0]
        break;
 8008f08:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d100      	bne.n	8008f12 <UART_SetConfig+0x41a>
 8008f10:	e095      	b.n	800903e <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	005a      	lsls	r2, r3, #1
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	085b      	lsrs	r3, r3, #1
 8008f1c:	18d2      	adds	r2, r2, r3
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	0019      	movs	r1, r3
 8008f24:	0010      	movs	r0, r2
 8008f26:	f7f7 f8f9 	bl	800011c <__udivsi3>
 8008f2a:	0003      	movs	r3, r0
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	2b0f      	cmp	r3, #15
 8008f34:	d921      	bls.n	8008f7a <UART_SetConfig+0x482>
 8008f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f38:	2380      	movs	r3, #128	; 0x80
 8008f3a:	025b      	lsls	r3, r3, #9
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d21c      	bcs.n	8008f7a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	200e      	movs	r0, #14
 8008f46:	2418      	movs	r4, #24
 8008f48:	193b      	adds	r3, r7, r4
 8008f4a:	181b      	adds	r3, r3, r0
 8008f4c:	210f      	movs	r1, #15
 8008f4e:	438a      	bics	r2, r1
 8008f50:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	085b      	lsrs	r3, r3, #1
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	2207      	movs	r2, #7
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	b299      	uxth	r1, r3
 8008f5e:	193b      	adds	r3, r7, r4
 8008f60:	181b      	adds	r3, r3, r0
 8008f62:	193a      	adds	r2, r7, r4
 8008f64:	1812      	adds	r2, r2, r0
 8008f66:	8812      	ldrh	r2, [r2, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	193a      	adds	r2, r7, r4
 8008f72:	1812      	adds	r2, r2, r0
 8008f74:	8812      	ldrh	r2, [r2, #0]
 8008f76:	60da      	str	r2, [r3, #12]
 8008f78:	e061      	b.n	800903e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8008f7a:	231a      	movs	r3, #26
 8008f7c:	2218      	movs	r2, #24
 8008f7e:	4694      	mov	ip, r2
 8008f80:	44bc      	add	ip, r7
 8008f82:	4463      	add	r3, ip
 8008f84:	2201      	movs	r2, #1
 8008f86:	701a      	strb	r2, [r3, #0]
 8008f88:	e059      	b.n	800903e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f8a:	231b      	movs	r3, #27
 8008f8c:	2218      	movs	r2, #24
 8008f8e:	4694      	mov	ip, r2
 8008f90:	44bc      	add	ip, r7
 8008f92:	4463      	add	r3, ip
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b08      	cmp	r3, #8
 8008f98:	d822      	bhi.n	8008fe0 <UART_SetConfig+0x4e8>
 8008f9a:	009a      	lsls	r2, r3, #2
 8008f9c:	4b34      	ldr	r3, [pc, #208]	; (8009070 <UART_SetConfig+0x578>)
 8008f9e:	18d3      	adds	r3, r2, r3
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fa4:	f7fe fb5e 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fac:	e022      	b.n	8008ff4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fae:	f7fe fb6f 	bl	8007690 <HAL_RCC_GetPCLK2Freq>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fb6:	e01d      	b.n	8008ff4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fb8:	4b2a      	ldr	r3, [pc, #168]	; (8009064 <UART_SetConfig+0x56c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2210      	movs	r2, #16
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	d002      	beq.n	8008fc8 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008fc2:	4b29      	ldr	r3, [pc, #164]	; (8009068 <UART_SetConfig+0x570>)
 8008fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fc6:	e015      	b.n	8008ff4 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8008fc8:	4b28      	ldr	r3, [pc, #160]	; (800906c <UART_SetConfig+0x574>)
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fcc:	e012      	b.n	8008ff4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fce:	f7fe fa99 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 8008fd2:	0003      	movs	r3, r0
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fd6:	e00d      	b.n	8008ff4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fd8:	2380      	movs	r3, #128	; 0x80
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fde:	e009      	b.n	8008ff4 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008fe4:	231a      	movs	r3, #26
 8008fe6:	2218      	movs	r2, #24
 8008fe8:	4694      	mov	ip, r2
 8008fea:	44bc      	add	ip, r7
 8008fec:	4463      	add	r3, ip
 8008fee:	2201      	movs	r2, #1
 8008ff0:	701a      	strb	r2, [r3, #0]
        break;
 8008ff2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d021      	beq.n	800903e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	085a      	lsrs	r2, r3, #1
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	18d2      	adds	r2, r2, r3
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	0019      	movs	r1, r3
 800900a:	0010      	movs	r0, r2
 800900c:	f7f7 f886 	bl	800011c <__udivsi3>
 8009010:	0003      	movs	r3, r0
 8009012:	b29b      	uxth	r3, r3
 8009014:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	2b0f      	cmp	r3, #15
 800901a:	d909      	bls.n	8009030 <UART_SetConfig+0x538>
 800901c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800901e:	2380      	movs	r3, #128	; 0x80
 8009020:	025b      	lsls	r3, r3, #9
 8009022:	429a      	cmp	r2, r3
 8009024:	d204      	bcs.n	8009030 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	e006      	b.n	800903e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8009030:	231a      	movs	r3, #26
 8009032:	2218      	movs	r2, #24
 8009034:	4694      	mov	ip, r2
 8009036:	44bc      	add	ip, r7
 8009038:	4463      	add	r3, ip
 800903a:	2201      	movs	r2, #1
 800903c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2200      	movs	r2, #0
 8009042:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	2200      	movs	r2, #0
 8009048:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800904a:	231a      	movs	r3, #26
 800904c:	2218      	movs	r2, #24
 800904e:	4694      	mov	ip, r2
 8009050:	44bc      	add	ip, r7
 8009052:	4463      	add	r3, ip
 8009054:	781b      	ldrb	r3, [r3, #0]
}
 8009056:	0018      	movs	r0, r3
 8009058:	46bd      	mov	sp, r7
 800905a:	b00e      	add	sp, #56	; 0x38
 800905c:	bdb0      	pop	{r4, r5, r7, pc}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	0800a1a4 	.word	0x0800a1a4
 8009064:	40021000 	.word	0x40021000
 8009068:	003d0900 	.word	0x003d0900
 800906c:	00f42400 	.word	0x00f42400
 8009070:	0800a1c8 	.word	0x0800a1c8

08009074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2201      	movs	r2, #1
 8009082:	4013      	ands	r3, r2
 8009084:	d00b      	beq.n	800909e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	4a4a      	ldr	r2, [pc, #296]	; (80091b8 <UART_AdvFeatureConfig+0x144>)
 800908e:	4013      	ands	r3, r2
 8009090:	0019      	movs	r1, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	430a      	orrs	r2, r1
 800909c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	2202      	movs	r2, #2
 80090a4:	4013      	ands	r3, r2
 80090a6:	d00b      	beq.n	80090c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	4a43      	ldr	r2, [pc, #268]	; (80091bc <UART_AdvFeatureConfig+0x148>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	0019      	movs	r1, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	2204      	movs	r2, #4
 80090c6:	4013      	ands	r3, r2
 80090c8:	d00b      	beq.n	80090e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	4a3b      	ldr	r2, [pc, #236]	; (80091c0 <UART_AdvFeatureConfig+0x14c>)
 80090d2:	4013      	ands	r3, r2
 80090d4:	0019      	movs	r1, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	2208      	movs	r2, #8
 80090e8:	4013      	ands	r3, r2
 80090ea:	d00b      	beq.n	8009104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	4a34      	ldr	r2, [pc, #208]	; (80091c4 <UART_AdvFeatureConfig+0x150>)
 80090f4:	4013      	ands	r3, r2
 80090f6:	0019      	movs	r1, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	2210      	movs	r2, #16
 800910a:	4013      	ands	r3, r2
 800910c:	d00b      	beq.n	8009126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	4a2c      	ldr	r2, [pc, #176]	; (80091c8 <UART_AdvFeatureConfig+0x154>)
 8009116:	4013      	ands	r3, r2
 8009118:	0019      	movs	r1, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	2220      	movs	r2, #32
 800912c:	4013      	ands	r3, r2
 800912e:	d00b      	beq.n	8009148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	4a25      	ldr	r2, [pc, #148]	; (80091cc <UART_AdvFeatureConfig+0x158>)
 8009138:	4013      	ands	r3, r2
 800913a:	0019      	movs	r1, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2240      	movs	r2, #64	; 0x40
 800914e:	4013      	ands	r3, r2
 8009150:	d01d      	beq.n	800918e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	4a1d      	ldr	r2, [pc, #116]	; (80091d0 <UART_AdvFeatureConfig+0x15c>)
 800915a:	4013      	ands	r3, r2
 800915c:	0019      	movs	r1, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800916e:	2380      	movs	r3, #128	; 0x80
 8009170:	035b      	lsls	r3, r3, #13
 8009172:	429a      	cmp	r2, r3
 8009174:	d10b      	bne.n	800918e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	4a15      	ldr	r2, [pc, #84]	; (80091d4 <UART_AdvFeatureConfig+0x160>)
 800917e:	4013      	ands	r3, r2
 8009180:	0019      	movs	r1, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	2280      	movs	r2, #128	; 0x80
 8009194:	4013      	ands	r3, r2
 8009196:	d00b      	beq.n	80091b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	4a0e      	ldr	r2, [pc, #56]	; (80091d8 <UART_AdvFeatureConfig+0x164>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	0019      	movs	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	605a      	str	r2, [r3, #4]
  }
}
 80091b0:	46c0      	nop			; (mov r8, r8)
 80091b2:	46bd      	mov	sp, r7
 80091b4:	b002      	add	sp, #8
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	fffdffff 	.word	0xfffdffff
 80091bc:	fffeffff 	.word	0xfffeffff
 80091c0:	fffbffff 	.word	0xfffbffff
 80091c4:	ffff7fff 	.word	0xffff7fff
 80091c8:	ffffefff 	.word	0xffffefff
 80091cc:	ffffdfff 	.word	0xffffdfff
 80091d0:	ffefffff 	.word	0xffefffff
 80091d4:	ff9fffff 	.word	0xff9fffff
 80091d8:	fff7ffff 	.word	0xfff7ffff

080091dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2280      	movs	r2, #128	; 0x80
 80091e8:	2100      	movs	r1, #0
 80091ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091ec:	f7fb ff32 	bl	8005054 <HAL_GetTick>
 80091f0:	0003      	movs	r3, r0
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2208      	movs	r2, #8
 80091fc:	4013      	ands	r3, r2
 80091fe:	2b08      	cmp	r3, #8
 8009200:	d10c      	bne.n	800921c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2280      	movs	r2, #128	; 0x80
 8009206:	0391      	lsls	r1, r2, #14
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	4a17      	ldr	r2, [pc, #92]	; (8009268 <UART_CheckIdleState+0x8c>)
 800920c:	9200      	str	r2, [sp, #0]
 800920e:	2200      	movs	r2, #0
 8009210:	f000 f82c 	bl	800926c <UART_WaitOnFlagUntilTimeout>
 8009214:	1e03      	subs	r3, r0, #0
 8009216:	d001      	beq.n	800921c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e021      	b.n	8009260 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2204      	movs	r2, #4
 8009224:	4013      	ands	r3, r2
 8009226:	2b04      	cmp	r3, #4
 8009228:	d10c      	bne.n	8009244 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2280      	movs	r2, #128	; 0x80
 800922e:	03d1      	lsls	r1, r2, #15
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	4a0d      	ldr	r2, [pc, #52]	; (8009268 <UART_CheckIdleState+0x8c>)
 8009234:	9200      	str	r2, [sp, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	f000 f818 	bl	800926c <UART_WaitOnFlagUntilTimeout>
 800923c:	1e03      	subs	r3, r0, #0
 800923e:	d001      	beq.n	8009244 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e00d      	b.n	8009260 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2220      	movs	r2, #32
 8009248:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2274      	movs	r2, #116	; 0x74
 800925a:	2100      	movs	r1, #0
 800925c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	0018      	movs	r0, r3
 8009262:	46bd      	mov	sp, r7
 8009264:	b004      	add	sp, #16
 8009266:	bd80      	pop	{r7, pc}
 8009268:	01ffffff 	.word	0x01ffffff

0800926c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	1dfb      	adds	r3, r7, #7
 800927a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800927c:	e05e      	b.n	800933c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	3301      	adds	r3, #1
 8009282:	d05b      	beq.n	800933c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009284:	f7fb fee6 	bl	8005054 <HAL_GetTick>
 8009288:	0002      	movs	r2, r0
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	429a      	cmp	r2, r3
 8009292:	d302      	bcc.n	800929a <UART_WaitOnFlagUntilTimeout+0x2e>
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d11b      	bne.n	80092d2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	492f      	ldr	r1, [pc, #188]	; (8009364 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80092a6:	400a      	ands	r2, r1
 80092a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2101      	movs	r1, #1
 80092b6:	438a      	bics	r2, r1
 80092b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2220      	movs	r2, #32
 80092be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2220      	movs	r2, #32
 80092c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2274      	movs	r2, #116	; 0x74
 80092ca:	2100      	movs	r1, #0
 80092cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e044      	b.n	800935c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2204      	movs	r2, #4
 80092da:	4013      	ands	r3, r2
 80092dc:	d02e      	beq.n	800933c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69da      	ldr	r2, [r3, #28]
 80092e4:	2380      	movs	r3, #128	; 0x80
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	401a      	ands	r2, r3
 80092ea:	2380      	movs	r3, #128	; 0x80
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d124      	bne.n	800933c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2280      	movs	r2, #128	; 0x80
 80092f8:	0112      	lsls	r2, r2, #4
 80092fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4917      	ldr	r1, [pc, #92]	; (8009364 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8009308:	400a      	ands	r2, r1
 800930a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2101      	movs	r1, #1
 8009318:	438a      	bics	r2, r1
 800931a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2220      	movs	r2, #32
 8009320:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2220      	movs	r2, #32
 8009326:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2280      	movs	r2, #128	; 0x80
 800932c:	2120      	movs	r1, #32
 800932e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2274      	movs	r2, #116	; 0x74
 8009334:	2100      	movs	r1, #0
 8009336:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e00f      	b.n	800935c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	4013      	ands	r3, r2
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	425a      	negs	r2, r3
 800934c:	4153      	adcs	r3, r2
 800934e:	b2db      	uxtb	r3, r3
 8009350:	001a      	movs	r2, r3
 8009352:	1dfb      	adds	r3, r7, #7
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d091      	beq.n	800927e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	0018      	movs	r0, r3
 800935e:	46bd      	mov	sp, r7
 8009360:	b004      	add	sp, #16
 8009362:	bd80      	pop	{r7, pc}
 8009364:	fffffe5f 	.word	0xfffffe5f

08009368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4912      	ldr	r1, [pc, #72]	; (80093c4 <UART_EndRxTransfer+0x5c>)
 800937c:	400a      	ands	r2, r1
 800937e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2101      	movs	r1, #1
 800938c:	438a      	bics	r2, r1
 800938e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009394:	2b01      	cmp	r3, #1
 8009396:	d107      	bne.n	80093a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2110      	movs	r1, #16
 80093a4:	438a      	bics	r2, r1
 80093a6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2220      	movs	r2, #32
 80093ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	46bd      	mov	sp, r7
 80093be:	b002      	add	sp, #8
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	fffffedf 	.word	0xfffffedf

080093c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	225a      	movs	r2, #90	; 0x5a
 80093da:	2100      	movs	r1, #0
 80093dc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2252      	movs	r2, #82	; 0x52
 80093e2:	2100      	movs	r1, #0
 80093e4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	0018      	movs	r0, r3
 80093ea:	f7ff fb71 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b004      	add	sp, #16
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2140      	movs	r1, #64	; 0x40
 800940a:	438a      	bics	r2, r1
 800940c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2220      	movs	r2, #32
 8009412:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	0018      	movs	r0, r3
 800941e:	f7ff fb4f 	bl	8008ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009422:	46c0      	nop			; (mov r8, r8)
 8009424:	46bd      	mov	sp, r7
 8009426:	b002      	add	sp, #8
 8009428:	bd80      	pop	{r7, pc}

0800942a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009432:	46c0      	nop			; (mov r8, r8)
 8009434:	46bd      	mov	sp, r7
 8009436:	b002      	add	sp, #8
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <__errno>:
 800943c:	4b01      	ldr	r3, [pc, #4]	; (8009444 <__errno+0x8>)
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	4770      	bx	lr
 8009442:	46c0      	nop			; (mov r8, r8)
 8009444:	20000010 	.word	0x20000010

08009448 <__libc_init_array>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	2600      	movs	r6, #0
 800944c:	4d0c      	ldr	r5, [pc, #48]	; (8009480 <__libc_init_array+0x38>)
 800944e:	4c0d      	ldr	r4, [pc, #52]	; (8009484 <__libc_init_array+0x3c>)
 8009450:	1b64      	subs	r4, r4, r5
 8009452:	10a4      	asrs	r4, r4, #2
 8009454:	42a6      	cmp	r6, r4
 8009456:	d109      	bne.n	800946c <__libc_init_array+0x24>
 8009458:	2600      	movs	r6, #0
 800945a:	f000 fc69 	bl	8009d30 <_init>
 800945e:	4d0a      	ldr	r5, [pc, #40]	; (8009488 <__libc_init_array+0x40>)
 8009460:	4c0a      	ldr	r4, [pc, #40]	; (800948c <__libc_init_array+0x44>)
 8009462:	1b64      	subs	r4, r4, r5
 8009464:	10a4      	asrs	r4, r4, #2
 8009466:	42a6      	cmp	r6, r4
 8009468:	d105      	bne.n	8009476 <__libc_init_array+0x2e>
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	00b3      	lsls	r3, r6, #2
 800946e:	58eb      	ldr	r3, [r5, r3]
 8009470:	4798      	blx	r3
 8009472:	3601      	adds	r6, #1
 8009474:	e7ee      	b.n	8009454 <__libc_init_array+0xc>
 8009476:	00b3      	lsls	r3, r6, #2
 8009478:	58eb      	ldr	r3, [r5, r3]
 800947a:	4798      	blx	r3
 800947c:	3601      	adds	r6, #1
 800947e:	e7f2      	b.n	8009466 <__libc_init_array+0x1e>
 8009480:	0800a228 	.word	0x0800a228
 8009484:	0800a228 	.word	0x0800a228
 8009488:	0800a228 	.word	0x0800a228
 800948c:	0800a22c 	.word	0x0800a22c

08009490 <memcpy>:
 8009490:	2300      	movs	r3, #0
 8009492:	b510      	push	{r4, lr}
 8009494:	429a      	cmp	r2, r3
 8009496:	d100      	bne.n	800949a <memcpy+0xa>
 8009498:	bd10      	pop	{r4, pc}
 800949a:	5ccc      	ldrb	r4, [r1, r3]
 800949c:	54c4      	strb	r4, [r0, r3]
 800949e:	3301      	adds	r3, #1
 80094a0:	e7f8      	b.n	8009494 <memcpy+0x4>

080094a2 <memmove>:
 80094a2:	b510      	push	{r4, lr}
 80094a4:	4288      	cmp	r0, r1
 80094a6:	d902      	bls.n	80094ae <memmove+0xc>
 80094a8:	188b      	adds	r3, r1, r2
 80094aa:	4298      	cmp	r0, r3
 80094ac:	d303      	bcc.n	80094b6 <memmove+0x14>
 80094ae:	2300      	movs	r3, #0
 80094b0:	e007      	b.n	80094c2 <memmove+0x20>
 80094b2:	5c8b      	ldrb	r3, [r1, r2]
 80094b4:	5483      	strb	r3, [r0, r2]
 80094b6:	3a01      	subs	r2, #1
 80094b8:	d2fb      	bcs.n	80094b2 <memmove+0x10>
 80094ba:	bd10      	pop	{r4, pc}
 80094bc:	5ccc      	ldrb	r4, [r1, r3]
 80094be:	54c4      	strb	r4, [r0, r3]
 80094c0:	3301      	adds	r3, #1
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d1fa      	bne.n	80094bc <memmove+0x1a>
 80094c6:	e7f8      	b.n	80094ba <memmove+0x18>

080094c8 <memset>:
 80094c8:	0003      	movs	r3, r0
 80094ca:	1882      	adds	r2, r0, r2
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d100      	bne.n	80094d2 <memset+0xa>
 80094d0:	4770      	bx	lr
 80094d2:	7019      	strb	r1, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	e7f9      	b.n	80094cc <memset+0x4>

080094d8 <siprintf>:
 80094d8:	b40e      	push	{r1, r2, r3}
 80094da:	b500      	push	{lr}
 80094dc:	490b      	ldr	r1, [pc, #44]	; (800950c <siprintf+0x34>)
 80094de:	b09c      	sub	sp, #112	; 0x70
 80094e0:	ab1d      	add	r3, sp, #116	; 0x74
 80094e2:	9002      	str	r0, [sp, #8]
 80094e4:	9006      	str	r0, [sp, #24]
 80094e6:	9107      	str	r1, [sp, #28]
 80094e8:	9104      	str	r1, [sp, #16]
 80094ea:	4809      	ldr	r0, [pc, #36]	; (8009510 <siprintf+0x38>)
 80094ec:	4909      	ldr	r1, [pc, #36]	; (8009514 <siprintf+0x3c>)
 80094ee:	cb04      	ldmia	r3!, {r2}
 80094f0:	9105      	str	r1, [sp, #20]
 80094f2:	6800      	ldr	r0, [r0, #0]
 80094f4:	a902      	add	r1, sp, #8
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	f000 f892 	bl	8009620 <_svfiprintf_r>
 80094fc:	2300      	movs	r3, #0
 80094fe:	9a02      	ldr	r2, [sp, #8]
 8009500:	7013      	strb	r3, [r2, #0]
 8009502:	b01c      	add	sp, #112	; 0x70
 8009504:	bc08      	pop	{r3}
 8009506:	b003      	add	sp, #12
 8009508:	4718      	bx	r3
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	7fffffff 	.word	0x7fffffff
 8009510:	20000010 	.word	0x20000010
 8009514:	ffff0208 	.word	0xffff0208

08009518 <_vsiprintf_r>:
 8009518:	b500      	push	{lr}
 800951a:	b09b      	sub	sp, #108	; 0x6c
 800951c:	9100      	str	r1, [sp, #0]
 800951e:	9104      	str	r1, [sp, #16]
 8009520:	4906      	ldr	r1, [pc, #24]	; (800953c <_vsiprintf_r+0x24>)
 8009522:	9105      	str	r1, [sp, #20]
 8009524:	9102      	str	r1, [sp, #8]
 8009526:	4906      	ldr	r1, [pc, #24]	; (8009540 <_vsiprintf_r+0x28>)
 8009528:	9103      	str	r1, [sp, #12]
 800952a:	4669      	mov	r1, sp
 800952c:	f000 f878 	bl	8009620 <_svfiprintf_r>
 8009530:	2300      	movs	r3, #0
 8009532:	9a00      	ldr	r2, [sp, #0]
 8009534:	7013      	strb	r3, [r2, #0]
 8009536:	b01b      	add	sp, #108	; 0x6c
 8009538:	bd00      	pop	{pc}
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	7fffffff 	.word	0x7fffffff
 8009540:	ffff0208 	.word	0xffff0208

08009544 <vsiprintf>:
 8009544:	b510      	push	{r4, lr}
 8009546:	0013      	movs	r3, r2
 8009548:	000a      	movs	r2, r1
 800954a:	0001      	movs	r1, r0
 800954c:	4802      	ldr	r0, [pc, #8]	; (8009558 <vsiprintf+0x14>)
 800954e:	6800      	ldr	r0, [r0, #0]
 8009550:	f7ff ffe2 	bl	8009518 <_vsiprintf_r>
 8009554:	bd10      	pop	{r4, pc}
 8009556:	46c0      	nop			; (mov r8, r8)
 8009558:	20000010 	.word	0x20000010

0800955c <__ssputs_r>:
 800955c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800955e:	688e      	ldr	r6, [r1, #8]
 8009560:	b085      	sub	sp, #20
 8009562:	0007      	movs	r7, r0
 8009564:	000c      	movs	r4, r1
 8009566:	9203      	str	r2, [sp, #12]
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	429e      	cmp	r6, r3
 800956c:	d83c      	bhi.n	80095e8 <__ssputs_r+0x8c>
 800956e:	2390      	movs	r3, #144	; 0x90
 8009570:	898a      	ldrh	r2, [r1, #12]
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	421a      	tst	r2, r3
 8009576:	d034      	beq.n	80095e2 <__ssputs_r+0x86>
 8009578:	2503      	movs	r5, #3
 800957a:	6909      	ldr	r1, [r1, #16]
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	1a5b      	subs	r3, r3, r1
 8009580:	9302      	str	r3, [sp, #8]
 8009582:	6963      	ldr	r3, [r4, #20]
 8009584:	9802      	ldr	r0, [sp, #8]
 8009586:	435d      	muls	r5, r3
 8009588:	0feb      	lsrs	r3, r5, #31
 800958a:	195d      	adds	r5, r3, r5
 800958c:	9b01      	ldr	r3, [sp, #4]
 800958e:	106d      	asrs	r5, r5, #1
 8009590:	3301      	adds	r3, #1
 8009592:	181b      	adds	r3, r3, r0
 8009594:	42ab      	cmp	r3, r5
 8009596:	d900      	bls.n	800959a <__ssputs_r+0x3e>
 8009598:	001d      	movs	r5, r3
 800959a:	0553      	lsls	r3, r2, #21
 800959c:	d532      	bpl.n	8009604 <__ssputs_r+0xa8>
 800959e:	0029      	movs	r1, r5
 80095a0:	0038      	movs	r0, r7
 80095a2:	f000 fb15 	bl	8009bd0 <_malloc_r>
 80095a6:	1e06      	subs	r6, r0, #0
 80095a8:	d109      	bne.n	80095be <__ssputs_r+0x62>
 80095aa:	230c      	movs	r3, #12
 80095ac:	603b      	str	r3, [r7, #0]
 80095ae:	2340      	movs	r3, #64	; 0x40
 80095b0:	2001      	movs	r0, #1
 80095b2:	89a2      	ldrh	r2, [r4, #12]
 80095b4:	4240      	negs	r0, r0
 80095b6:	4313      	orrs	r3, r2
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	b005      	add	sp, #20
 80095bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095be:	9a02      	ldr	r2, [sp, #8]
 80095c0:	6921      	ldr	r1, [r4, #16]
 80095c2:	f7ff ff65 	bl	8009490 <memcpy>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	4a14      	ldr	r2, [pc, #80]	; (800961c <__ssputs_r+0xc0>)
 80095ca:	401a      	ands	r2, r3
 80095cc:	2380      	movs	r3, #128	; 0x80
 80095ce:	4313      	orrs	r3, r2
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	9b02      	ldr	r3, [sp, #8]
 80095d4:	6126      	str	r6, [r4, #16]
 80095d6:	18f6      	adds	r6, r6, r3
 80095d8:	6026      	str	r6, [r4, #0]
 80095da:	6165      	str	r5, [r4, #20]
 80095dc:	9e01      	ldr	r6, [sp, #4]
 80095de:	1aed      	subs	r5, r5, r3
 80095e0:	60a5      	str	r5, [r4, #8]
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	429e      	cmp	r6, r3
 80095e6:	d900      	bls.n	80095ea <__ssputs_r+0x8e>
 80095e8:	9e01      	ldr	r6, [sp, #4]
 80095ea:	0032      	movs	r2, r6
 80095ec:	9903      	ldr	r1, [sp, #12]
 80095ee:	6820      	ldr	r0, [r4, #0]
 80095f0:	f7ff ff57 	bl	80094a2 <memmove>
 80095f4:	68a3      	ldr	r3, [r4, #8]
 80095f6:	2000      	movs	r0, #0
 80095f8:	1b9b      	subs	r3, r3, r6
 80095fa:	60a3      	str	r3, [r4, #8]
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	199e      	adds	r6, r3, r6
 8009600:	6026      	str	r6, [r4, #0]
 8009602:	e7da      	b.n	80095ba <__ssputs_r+0x5e>
 8009604:	002a      	movs	r2, r5
 8009606:	0038      	movs	r0, r7
 8009608:	f000 fb40 	bl	8009c8c <_realloc_r>
 800960c:	1e06      	subs	r6, r0, #0
 800960e:	d1e0      	bne.n	80095d2 <__ssputs_r+0x76>
 8009610:	0038      	movs	r0, r7
 8009612:	6921      	ldr	r1, [r4, #16]
 8009614:	f000 fa92 	bl	8009b3c <_free_r>
 8009618:	e7c7      	b.n	80095aa <__ssputs_r+0x4e>
 800961a:	46c0      	nop			; (mov r8, r8)
 800961c:	fffffb7f 	.word	0xfffffb7f

08009620 <_svfiprintf_r>:
 8009620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009622:	b0a1      	sub	sp, #132	; 0x84
 8009624:	9003      	str	r0, [sp, #12]
 8009626:	001d      	movs	r5, r3
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	000f      	movs	r7, r1
 800962c:	0016      	movs	r6, r2
 800962e:	061b      	lsls	r3, r3, #24
 8009630:	d511      	bpl.n	8009656 <_svfiprintf_r+0x36>
 8009632:	690b      	ldr	r3, [r1, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10e      	bne.n	8009656 <_svfiprintf_r+0x36>
 8009638:	2140      	movs	r1, #64	; 0x40
 800963a:	f000 fac9 	bl	8009bd0 <_malloc_r>
 800963e:	6038      	str	r0, [r7, #0]
 8009640:	6138      	str	r0, [r7, #16]
 8009642:	2800      	cmp	r0, #0
 8009644:	d105      	bne.n	8009652 <_svfiprintf_r+0x32>
 8009646:	230c      	movs	r3, #12
 8009648:	9a03      	ldr	r2, [sp, #12]
 800964a:	3801      	subs	r0, #1
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	b021      	add	sp, #132	; 0x84
 8009650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	2300      	movs	r3, #0
 8009658:	ac08      	add	r4, sp, #32
 800965a:	6163      	str	r3, [r4, #20]
 800965c:	3320      	adds	r3, #32
 800965e:	7663      	strb	r3, [r4, #25]
 8009660:	3310      	adds	r3, #16
 8009662:	76a3      	strb	r3, [r4, #26]
 8009664:	9507      	str	r5, [sp, #28]
 8009666:	0035      	movs	r5, r6
 8009668:	782b      	ldrb	r3, [r5, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <_svfiprintf_r+0x52>
 800966e:	2b25      	cmp	r3, #37	; 0x25
 8009670:	d147      	bne.n	8009702 <_svfiprintf_r+0xe2>
 8009672:	1bab      	subs	r3, r5, r6
 8009674:	9305      	str	r3, [sp, #20]
 8009676:	42b5      	cmp	r5, r6
 8009678:	d00c      	beq.n	8009694 <_svfiprintf_r+0x74>
 800967a:	0032      	movs	r2, r6
 800967c:	0039      	movs	r1, r7
 800967e:	9803      	ldr	r0, [sp, #12]
 8009680:	f7ff ff6c 	bl	800955c <__ssputs_r>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d100      	bne.n	800968a <_svfiprintf_r+0x6a>
 8009688:	e0ae      	b.n	80097e8 <_svfiprintf_r+0x1c8>
 800968a:	6962      	ldr	r2, [r4, #20]
 800968c:	9b05      	ldr	r3, [sp, #20]
 800968e:	4694      	mov	ip, r2
 8009690:	4463      	add	r3, ip
 8009692:	6163      	str	r3, [r4, #20]
 8009694:	782b      	ldrb	r3, [r5, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d100      	bne.n	800969c <_svfiprintf_r+0x7c>
 800969a:	e0a5      	b.n	80097e8 <_svfiprintf_r+0x1c8>
 800969c:	2201      	movs	r2, #1
 800969e:	2300      	movs	r3, #0
 80096a0:	4252      	negs	r2, r2
 80096a2:	6062      	str	r2, [r4, #4]
 80096a4:	a904      	add	r1, sp, #16
 80096a6:	3254      	adds	r2, #84	; 0x54
 80096a8:	1852      	adds	r2, r2, r1
 80096aa:	1c6e      	adds	r6, r5, #1
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	60e3      	str	r3, [r4, #12]
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	7013      	strb	r3, [r2, #0]
 80096b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80096b6:	2205      	movs	r2, #5
 80096b8:	7831      	ldrb	r1, [r6, #0]
 80096ba:	4854      	ldr	r0, [pc, #336]	; (800980c <_svfiprintf_r+0x1ec>)
 80096bc:	f000 fa32 	bl	8009b24 <memchr>
 80096c0:	1c75      	adds	r5, r6, #1
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d11f      	bne.n	8009706 <_svfiprintf_r+0xe6>
 80096c6:	6822      	ldr	r2, [r4, #0]
 80096c8:	06d3      	lsls	r3, r2, #27
 80096ca:	d504      	bpl.n	80096d6 <_svfiprintf_r+0xb6>
 80096cc:	2353      	movs	r3, #83	; 0x53
 80096ce:	a904      	add	r1, sp, #16
 80096d0:	185b      	adds	r3, r3, r1
 80096d2:	2120      	movs	r1, #32
 80096d4:	7019      	strb	r1, [r3, #0]
 80096d6:	0713      	lsls	r3, r2, #28
 80096d8:	d504      	bpl.n	80096e4 <_svfiprintf_r+0xc4>
 80096da:	2353      	movs	r3, #83	; 0x53
 80096dc:	a904      	add	r1, sp, #16
 80096de:	185b      	adds	r3, r3, r1
 80096e0:	212b      	movs	r1, #43	; 0x2b
 80096e2:	7019      	strb	r1, [r3, #0]
 80096e4:	7833      	ldrb	r3, [r6, #0]
 80096e6:	2b2a      	cmp	r3, #42	; 0x2a
 80096e8:	d016      	beq.n	8009718 <_svfiprintf_r+0xf8>
 80096ea:	0035      	movs	r5, r6
 80096ec:	2100      	movs	r1, #0
 80096ee:	200a      	movs	r0, #10
 80096f0:	68e3      	ldr	r3, [r4, #12]
 80096f2:	782a      	ldrb	r2, [r5, #0]
 80096f4:	1c6e      	adds	r6, r5, #1
 80096f6:	3a30      	subs	r2, #48	; 0x30
 80096f8:	2a09      	cmp	r2, #9
 80096fa:	d94e      	bls.n	800979a <_svfiprintf_r+0x17a>
 80096fc:	2900      	cmp	r1, #0
 80096fe:	d111      	bne.n	8009724 <_svfiprintf_r+0x104>
 8009700:	e017      	b.n	8009732 <_svfiprintf_r+0x112>
 8009702:	3501      	adds	r5, #1
 8009704:	e7b0      	b.n	8009668 <_svfiprintf_r+0x48>
 8009706:	4b41      	ldr	r3, [pc, #260]	; (800980c <_svfiprintf_r+0x1ec>)
 8009708:	6822      	ldr	r2, [r4, #0]
 800970a:	1ac0      	subs	r0, r0, r3
 800970c:	2301      	movs	r3, #1
 800970e:	4083      	lsls	r3, r0
 8009710:	4313      	orrs	r3, r2
 8009712:	002e      	movs	r6, r5
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	e7ce      	b.n	80096b6 <_svfiprintf_r+0x96>
 8009718:	9b07      	ldr	r3, [sp, #28]
 800971a:	1d19      	adds	r1, r3, #4
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	9107      	str	r1, [sp, #28]
 8009720:	2b00      	cmp	r3, #0
 8009722:	db01      	blt.n	8009728 <_svfiprintf_r+0x108>
 8009724:	930b      	str	r3, [sp, #44]	; 0x2c
 8009726:	e004      	b.n	8009732 <_svfiprintf_r+0x112>
 8009728:	425b      	negs	r3, r3
 800972a:	60e3      	str	r3, [r4, #12]
 800972c:	2302      	movs	r3, #2
 800972e:	4313      	orrs	r3, r2
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	782b      	ldrb	r3, [r5, #0]
 8009734:	2b2e      	cmp	r3, #46	; 0x2e
 8009736:	d10a      	bne.n	800974e <_svfiprintf_r+0x12e>
 8009738:	786b      	ldrb	r3, [r5, #1]
 800973a:	2b2a      	cmp	r3, #42	; 0x2a
 800973c:	d135      	bne.n	80097aa <_svfiprintf_r+0x18a>
 800973e:	9b07      	ldr	r3, [sp, #28]
 8009740:	3502      	adds	r5, #2
 8009742:	1d1a      	adds	r2, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	9207      	str	r2, [sp, #28]
 8009748:	2b00      	cmp	r3, #0
 800974a:	db2b      	blt.n	80097a4 <_svfiprintf_r+0x184>
 800974c:	9309      	str	r3, [sp, #36]	; 0x24
 800974e:	4e30      	ldr	r6, [pc, #192]	; (8009810 <_svfiprintf_r+0x1f0>)
 8009750:	2203      	movs	r2, #3
 8009752:	0030      	movs	r0, r6
 8009754:	7829      	ldrb	r1, [r5, #0]
 8009756:	f000 f9e5 	bl	8009b24 <memchr>
 800975a:	2800      	cmp	r0, #0
 800975c:	d006      	beq.n	800976c <_svfiprintf_r+0x14c>
 800975e:	2340      	movs	r3, #64	; 0x40
 8009760:	1b80      	subs	r0, r0, r6
 8009762:	4083      	lsls	r3, r0
 8009764:	6822      	ldr	r2, [r4, #0]
 8009766:	3501      	adds	r5, #1
 8009768:	4313      	orrs	r3, r2
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	7829      	ldrb	r1, [r5, #0]
 800976e:	2206      	movs	r2, #6
 8009770:	4828      	ldr	r0, [pc, #160]	; (8009814 <_svfiprintf_r+0x1f4>)
 8009772:	1c6e      	adds	r6, r5, #1
 8009774:	7621      	strb	r1, [r4, #24]
 8009776:	f000 f9d5 	bl	8009b24 <memchr>
 800977a:	2800      	cmp	r0, #0
 800977c:	d03c      	beq.n	80097f8 <_svfiprintf_r+0x1d8>
 800977e:	4b26      	ldr	r3, [pc, #152]	; (8009818 <_svfiprintf_r+0x1f8>)
 8009780:	2b00      	cmp	r3, #0
 8009782:	d125      	bne.n	80097d0 <_svfiprintf_r+0x1b0>
 8009784:	2207      	movs	r2, #7
 8009786:	9b07      	ldr	r3, [sp, #28]
 8009788:	3307      	adds	r3, #7
 800978a:	4393      	bics	r3, r2
 800978c:	3308      	adds	r3, #8
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	6963      	ldr	r3, [r4, #20]
 8009792:	9a04      	ldr	r2, [sp, #16]
 8009794:	189b      	adds	r3, r3, r2
 8009796:	6163      	str	r3, [r4, #20]
 8009798:	e765      	b.n	8009666 <_svfiprintf_r+0x46>
 800979a:	4343      	muls	r3, r0
 800979c:	0035      	movs	r5, r6
 800979e:	2101      	movs	r1, #1
 80097a0:	189b      	adds	r3, r3, r2
 80097a2:	e7a6      	b.n	80096f2 <_svfiprintf_r+0xd2>
 80097a4:	2301      	movs	r3, #1
 80097a6:	425b      	negs	r3, r3
 80097a8:	e7d0      	b.n	800974c <_svfiprintf_r+0x12c>
 80097aa:	2300      	movs	r3, #0
 80097ac:	200a      	movs	r0, #10
 80097ae:	001a      	movs	r2, r3
 80097b0:	3501      	adds	r5, #1
 80097b2:	6063      	str	r3, [r4, #4]
 80097b4:	7829      	ldrb	r1, [r5, #0]
 80097b6:	1c6e      	adds	r6, r5, #1
 80097b8:	3930      	subs	r1, #48	; 0x30
 80097ba:	2909      	cmp	r1, #9
 80097bc:	d903      	bls.n	80097c6 <_svfiprintf_r+0x1a6>
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0c5      	beq.n	800974e <_svfiprintf_r+0x12e>
 80097c2:	9209      	str	r2, [sp, #36]	; 0x24
 80097c4:	e7c3      	b.n	800974e <_svfiprintf_r+0x12e>
 80097c6:	4342      	muls	r2, r0
 80097c8:	0035      	movs	r5, r6
 80097ca:	2301      	movs	r3, #1
 80097cc:	1852      	adds	r2, r2, r1
 80097ce:	e7f1      	b.n	80097b4 <_svfiprintf_r+0x194>
 80097d0:	ab07      	add	r3, sp, #28
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	003a      	movs	r2, r7
 80097d6:	0021      	movs	r1, r4
 80097d8:	4b10      	ldr	r3, [pc, #64]	; (800981c <_svfiprintf_r+0x1fc>)
 80097da:	9803      	ldr	r0, [sp, #12]
 80097dc:	e000      	b.n	80097e0 <_svfiprintf_r+0x1c0>
 80097de:	bf00      	nop
 80097e0:	9004      	str	r0, [sp, #16]
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	3301      	adds	r3, #1
 80097e6:	d1d3      	bne.n	8009790 <_svfiprintf_r+0x170>
 80097e8:	89bb      	ldrh	r3, [r7, #12]
 80097ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80097ec:	065b      	lsls	r3, r3, #25
 80097ee:	d400      	bmi.n	80097f2 <_svfiprintf_r+0x1d2>
 80097f0:	e72d      	b.n	800964e <_svfiprintf_r+0x2e>
 80097f2:	2001      	movs	r0, #1
 80097f4:	4240      	negs	r0, r0
 80097f6:	e72a      	b.n	800964e <_svfiprintf_r+0x2e>
 80097f8:	ab07      	add	r3, sp, #28
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	003a      	movs	r2, r7
 80097fe:	0021      	movs	r1, r4
 8009800:	4b06      	ldr	r3, [pc, #24]	; (800981c <_svfiprintf_r+0x1fc>)
 8009802:	9803      	ldr	r0, [sp, #12]
 8009804:	f000 f87c 	bl	8009900 <_printf_i>
 8009808:	e7ea      	b.n	80097e0 <_svfiprintf_r+0x1c0>
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	0800a1ec 	.word	0x0800a1ec
 8009810:	0800a1f2 	.word	0x0800a1f2
 8009814:	0800a1f6 	.word	0x0800a1f6
 8009818:	00000000 	.word	0x00000000
 800981c:	0800955d 	.word	0x0800955d

08009820 <_printf_common>:
 8009820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009822:	0015      	movs	r5, r2
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	688a      	ldr	r2, [r1, #8]
 8009828:	690b      	ldr	r3, [r1, #16]
 800982a:	000c      	movs	r4, r1
 800982c:	9000      	str	r0, [sp, #0]
 800982e:	4293      	cmp	r3, r2
 8009830:	da00      	bge.n	8009834 <_printf_common+0x14>
 8009832:	0013      	movs	r3, r2
 8009834:	0022      	movs	r2, r4
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	3243      	adds	r2, #67	; 0x43
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	2a00      	cmp	r2, #0
 800983e:	d001      	beq.n	8009844 <_printf_common+0x24>
 8009840:	3301      	adds	r3, #1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	069b      	lsls	r3, r3, #26
 8009848:	d502      	bpl.n	8009850 <_printf_common+0x30>
 800984a:	682b      	ldr	r3, [r5, #0]
 800984c:	3302      	adds	r3, #2
 800984e:	602b      	str	r3, [r5, #0]
 8009850:	6822      	ldr	r2, [r4, #0]
 8009852:	2306      	movs	r3, #6
 8009854:	0017      	movs	r7, r2
 8009856:	401f      	ands	r7, r3
 8009858:	421a      	tst	r2, r3
 800985a:	d027      	beq.n	80098ac <_printf_common+0x8c>
 800985c:	0023      	movs	r3, r4
 800985e:	3343      	adds	r3, #67	; 0x43
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	1e5a      	subs	r2, r3, #1
 8009864:	4193      	sbcs	r3, r2
 8009866:	6822      	ldr	r2, [r4, #0]
 8009868:	0692      	lsls	r2, r2, #26
 800986a:	d430      	bmi.n	80098ce <_printf_common+0xae>
 800986c:	0022      	movs	r2, r4
 800986e:	9901      	ldr	r1, [sp, #4]
 8009870:	9800      	ldr	r0, [sp, #0]
 8009872:	9e08      	ldr	r6, [sp, #32]
 8009874:	3243      	adds	r2, #67	; 0x43
 8009876:	47b0      	blx	r6
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d025      	beq.n	80098c8 <_printf_common+0xa8>
 800987c:	2306      	movs	r3, #6
 800987e:	6820      	ldr	r0, [r4, #0]
 8009880:	682a      	ldr	r2, [r5, #0]
 8009882:	68e1      	ldr	r1, [r4, #12]
 8009884:	2500      	movs	r5, #0
 8009886:	4003      	ands	r3, r0
 8009888:	2b04      	cmp	r3, #4
 800988a:	d103      	bne.n	8009894 <_printf_common+0x74>
 800988c:	1a8d      	subs	r5, r1, r2
 800988e:	43eb      	mvns	r3, r5
 8009890:	17db      	asrs	r3, r3, #31
 8009892:	401d      	ands	r5, r3
 8009894:	68a3      	ldr	r3, [r4, #8]
 8009896:	6922      	ldr	r2, [r4, #16]
 8009898:	4293      	cmp	r3, r2
 800989a:	dd01      	ble.n	80098a0 <_printf_common+0x80>
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	18ed      	adds	r5, r5, r3
 80098a0:	2700      	movs	r7, #0
 80098a2:	42bd      	cmp	r5, r7
 80098a4:	d120      	bne.n	80098e8 <_printf_common+0xc8>
 80098a6:	2000      	movs	r0, #0
 80098a8:	e010      	b.n	80098cc <_printf_common+0xac>
 80098aa:	3701      	adds	r7, #1
 80098ac:	68e3      	ldr	r3, [r4, #12]
 80098ae:	682a      	ldr	r2, [r5, #0]
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	42bb      	cmp	r3, r7
 80098b4:	ddd2      	ble.n	800985c <_printf_common+0x3c>
 80098b6:	0022      	movs	r2, r4
 80098b8:	2301      	movs	r3, #1
 80098ba:	9901      	ldr	r1, [sp, #4]
 80098bc:	9800      	ldr	r0, [sp, #0]
 80098be:	9e08      	ldr	r6, [sp, #32]
 80098c0:	3219      	adds	r2, #25
 80098c2:	47b0      	blx	r6
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d1f0      	bne.n	80098aa <_printf_common+0x8a>
 80098c8:	2001      	movs	r0, #1
 80098ca:	4240      	negs	r0, r0
 80098cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098ce:	2030      	movs	r0, #48	; 0x30
 80098d0:	18e1      	adds	r1, r4, r3
 80098d2:	3143      	adds	r1, #67	; 0x43
 80098d4:	7008      	strb	r0, [r1, #0]
 80098d6:	0021      	movs	r1, r4
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	3145      	adds	r1, #69	; 0x45
 80098dc:	7809      	ldrb	r1, [r1, #0]
 80098de:	18a2      	adds	r2, r4, r2
 80098e0:	3243      	adds	r2, #67	; 0x43
 80098e2:	3302      	adds	r3, #2
 80098e4:	7011      	strb	r1, [r2, #0]
 80098e6:	e7c1      	b.n	800986c <_printf_common+0x4c>
 80098e8:	0022      	movs	r2, r4
 80098ea:	2301      	movs	r3, #1
 80098ec:	9901      	ldr	r1, [sp, #4]
 80098ee:	9800      	ldr	r0, [sp, #0]
 80098f0:	9e08      	ldr	r6, [sp, #32]
 80098f2:	321a      	adds	r2, #26
 80098f4:	47b0      	blx	r6
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	d0e6      	beq.n	80098c8 <_printf_common+0xa8>
 80098fa:	3701      	adds	r7, #1
 80098fc:	e7d1      	b.n	80098a2 <_printf_common+0x82>
	...

08009900 <_printf_i>:
 8009900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009902:	b08b      	sub	sp, #44	; 0x2c
 8009904:	9206      	str	r2, [sp, #24]
 8009906:	000a      	movs	r2, r1
 8009908:	3243      	adds	r2, #67	; 0x43
 800990a:	9307      	str	r3, [sp, #28]
 800990c:	9005      	str	r0, [sp, #20]
 800990e:	9204      	str	r2, [sp, #16]
 8009910:	7e0a      	ldrb	r2, [r1, #24]
 8009912:	000c      	movs	r4, r1
 8009914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009916:	2a78      	cmp	r2, #120	; 0x78
 8009918:	d806      	bhi.n	8009928 <_printf_i+0x28>
 800991a:	2a62      	cmp	r2, #98	; 0x62
 800991c:	d808      	bhi.n	8009930 <_printf_i+0x30>
 800991e:	2a00      	cmp	r2, #0
 8009920:	d100      	bne.n	8009924 <_printf_i+0x24>
 8009922:	e0c0      	b.n	8009aa6 <_printf_i+0x1a6>
 8009924:	2a58      	cmp	r2, #88	; 0x58
 8009926:	d052      	beq.n	80099ce <_printf_i+0xce>
 8009928:	0026      	movs	r6, r4
 800992a:	3642      	adds	r6, #66	; 0x42
 800992c:	7032      	strb	r2, [r6, #0]
 800992e:	e022      	b.n	8009976 <_printf_i+0x76>
 8009930:	0010      	movs	r0, r2
 8009932:	3863      	subs	r0, #99	; 0x63
 8009934:	2815      	cmp	r0, #21
 8009936:	d8f7      	bhi.n	8009928 <_printf_i+0x28>
 8009938:	f7f6 fbe6 	bl	8000108 <__gnu_thumb1_case_shi>
 800993c:	001f0016 	.word	0x001f0016
 8009940:	fff6fff6 	.word	0xfff6fff6
 8009944:	fff6fff6 	.word	0xfff6fff6
 8009948:	fff6001f 	.word	0xfff6001f
 800994c:	fff6fff6 	.word	0xfff6fff6
 8009950:	00a8fff6 	.word	0x00a8fff6
 8009954:	009a0036 	.word	0x009a0036
 8009958:	fff6fff6 	.word	0xfff6fff6
 800995c:	fff600b9 	.word	0xfff600b9
 8009960:	fff60036 	.word	0xfff60036
 8009964:	009efff6 	.word	0x009efff6
 8009968:	0026      	movs	r6, r4
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	3642      	adds	r6, #66	; 0x42
 800996e:	1d11      	adds	r1, r2, #4
 8009970:	6019      	str	r1, [r3, #0]
 8009972:	6813      	ldr	r3, [r2, #0]
 8009974:	7033      	strb	r3, [r6, #0]
 8009976:	2301      	movs	r3, #1
 8009978:	e0a7      	b.n	8009aca <_printf_i+0x1ca>
 800997a:	6808      	ldr	r0, [r1, #0]
 800997c:	6819      	ldr	r1, [r3, #0]
 800997e:	1d0a      	adds	r2, r1, #4
 8009980:	0605      	lsls	r5, r0, #24
 8009982:	d50b      	bpl.n	800999c <_printf_i+0x9c>
 8009984:	680d      	ldr	r5, [r1, #0]
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	2d00      	cmp	r5, #0
 800998a:	da03      	bge.n	8009994 <_printf_i+0x94>
 800998c:	232d      	movs	r3, #45	; 0x2d
 800998e:	9a04      	ldr	r2, [sp, #16]
 8009990:	426d      	negs	r5, r5
 8009992:	7013      	strb	r3, [r2, #0]
 8009994:	4b61      	ldr	r3, [pc, #388]	; (8009b1c <_printf_i+0x21c>)
 8009996:	270a      	movs	r7, #10
 8009998:	9303      	str	r3, [sp, #12]
 800999a:	e032      	b.n	8009a02 <_printf_i+0x102>
 800999c:	680d      	ldr	r5, [r1, #0]
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	0641      	lsls	r1, r0, #25
 80099a2:	d5f1      	bpl.n	8009988 <_printf_i+0x88>
 80099a4:	b22d      	sxth	r5, r5
 80099a6:	e7ef      	b.n	8009988 <_printf_i+0x88>
 80099a8:	680d      	ldr	r5, [r1, #0]
 80099aa:	6819      	ldr	r1, [r3, #0]
 80099ac:	1d08      	adds	r0, r1, #4
 80099ae:	6018      	str	r0, [r3, #0]
 80099b0:	062e      	lsls	r6, r5, #24
 80099b2:	d501      	bpl.n	80099b8 <_printf_i+0xb8>
 80099b4:	680d      	ldr	r5, [r1, #0]
 80099b6:	e003      	b.n	80099c0 <_printf_i+0xc0>
 80099b8:	066d      	lsls	r5, r5, #25
 80099ba:	d5fb      	bpl.n	80099b4 <_printf_i+0xb4>
 80099bc:	680d      	ldr	r5, [r1, #0]
 80099be:	b2ad      	uxth	r5, r5
 80099c0:	4b56      	ldr	r3, [pc, #344]	; (8009b1c <_printf_i+0x21c>)
 80099c2:	270a      	movs	r7, #10
 80099c4:	9303      	str	r3, [sp, #12]
 80099c6:	2a6f      	cmp	r2, #111	; 0x6f
 80099c8:	d117      	bne.n	80099fa <_printf_i+0xfa>
 80099ca:	2708      	movs	r7, #8
 80099cc:	e015      	b.n	80099fa <_printf_i+0xfa>
 80099ce:	3145      	adds	r1, #69	; 0x45
 80099d0:	700a      	strb	r2, [r1, #0]
 80099d2:	4a52      	ldr	r2, [pc, #328]	; (8009b1c <_printf_i+0x21c>)
 80099d4:	9203      	str	r2, [sp, #12]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	6821      	ldr	r1, [r4, #0]
 80099da:	ca20      	ldmia	r2!, {r5}
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	0608      	lsls	r0, r1, #24
 80099e0:	d550      	bpl.n	8009a84 <_printf_i+0x184>
 80099e2:	07cb      	lsls	r3, r1, #31
 80099e4:	d502      	bpl.n	80099ec <_printf_i+0xec>
 80099e6:	2320      	movs	r3, #32
 80099e8:	4319      	orrs	r1, r3
 80099ea:	6021      	str	r1, [r4, #0]
 80099ec:	2710      	movs	r7, #16
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	d103      	bne.n	80099fa <_printf_i+0xfa>
 80099f2:	2320      	movs	r3, #32
 80099f4:	6822      	ldr	r2, [r4, #0]
 80099f6:	439a      	bics	r2, r3
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	0023      	movs	r3, r4
 80099fc:	2200      	movs	r2, #0
 80099fe:	3343      	adds	r3, #67	; 0x43
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	6863      	ldr	r3, [r4, #4]
 8009a04:	60a3      	str	r3, [r4, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	db03      	blt.n	8009a12 <_printf_i+0x112>
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	6821      	ldr	r1, [r4, #0]
 8009a0e:	4391      	bics	r1, r2
 8009a10:	6021      	str	r1, [r4, #0]
 8009a12:	2d00      	cmp	r5, #0
 8009a14:	d102      	bne.n	8009a1c <_printf_i+0x11c>
 8009a16:	9e04      	ldr	r6, [sp, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00c      	beq.n	8009a36 <_printf_i+0x136>
 8009a1c:	9e04      	ldr	r6, [sp, #16]
 8009a1e:	0028      	movs	r0, r5
 8009a20:	0039      	movs	r1, r7
 8009a22:	f7f6 fc01 	bl	8000228 <__aeabi_uidivmod>
 8009a26:	9b03      	ldr	r3, [sp, #12]
 8009a28:	3e01      	subs	r6, #1
 8009a2a:	5c5b      	ldrb	r3, [r3, r1]
 8009a2c:	7033      	strb	r3, [r6, #0]
 8009a2e:	002b      	movs	r3, r5
 8009a30:	0005      	movs	r5, r0
 8009a32:	429f      	cmp	r7, r3
 8009a34:	d9f3      	bls.n	8009a1e <_printf_i+0x11e>
 8009a36:	2f08      	cmp	r7, #8
 8009a38:	d109      	bne.n	8009a4e <_printf_i+0x14e>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	07db      	lsls	r3, r3, #31
 8009a3e:	d506      	bpl.n	8009a4e <_printf_i+0x14e>
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	6922      	ldr	r2, [r4, #16]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	dc02      	bgt.n	8009a4e <_printf_i+0x14e>
 8009a48:	2330      	movs	r3, #48	; 0x30
 8009a4a:	3e01      	subs	r6, #1
 8009a4c:	7033      	strb	r3, [r6, #0]
 8009a4e:	9b04      	ldr	r3, [sp, #16]
 8009a50:	1b9b      	subs	r3, r3, r6
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	0021      	movs	r1, r4
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	9805      	ldr	r0, [sp, #20]
 8009a5c:	9b06      	ldr	r3, [sp, #24]
 8009a5e:	aa09      	add	r2, sp, #36	; 0x24
 8009a60:	f7ff fede 	bl	8009820 <_printf_common>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d135      	bne.n	8009ad4 <_printf_i+0x1d4>
 8009a68:	2001      	movs	r0, #1
 8009a6a:	4240      	negs	r0, r0
 8009a6c:	b00b      	add	sp, #44	; 0x2c
 8009a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a70:	2220      	movs	r2, #32
 8009a72:	6809      	ldr	r1, [r1, #0]
 8009a74:	430a      	orrs	r2, r1
 8009a76:	6022      	str	r2, [r4, #0]
 8009a78:	0022      	movs	r2, r4
 8009a7a:	2178      	movs	r1, #120	; 0x78
 8009a7c:	3245      	adds	r2, #69	; 0x45
 8009a7e:	7011      	strb	r1, [r2, #0]
 8009a80:	4a27      	ldr	r2, [pc, #156]	; (8009b20 <_printf_i+0x220>)
 8009a82:	e7a7      	b.n	80099d4 <_printf_i+0xd4>
 8009a84:	0648      	lsls	r0, r1, #25
 8009a86:	d5ac      	bpl.n	80099e2 <_printf_i+0xe2>
 8009a88:	b2ad      	uxth	r5, r5
 8009a8a:	e7aa      	b.n	80099e2 <_printf_i+0xe2>
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	680d      	ldr	r5, [r1, #0]
 8009a90:	1d10      	adds	r0, r2, #4
 8009a92:	6949      	ldr	r1, [r1, #20]
 8009a94:	6018      	str	r0, [r3, #0]
 8009a96:	6813      	ldr	r3, [r2, #0]
 8009a98:	062e      	lsls	r6, r5, #24
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_i+0x1a0>
 8009a9c:	6019      	str	r1, [r3, #0]
 8009a9e:	e002      	b.n	8009aa6 <_printf_i+0x1a6>
 8009aa0:	066d      	lsls	r5, r5, #25
 8009aa2:	d5fb      	bpl.n	8009a9c <_printf_i+0x19c>
 8009aa4:	8019      	strh	r1, [r3, #0]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9e04      	ldr	r6, [sp, #16]
 8009aaa:	6123      	str	r3, [r4, #16]
 8009aac:	e7d2      	b.n	8009a54 <_printf_i+0x154>
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	1d11      	adds	r1, r2, #4
 8009ab2:	6019      	str	r1, [r3, #0]
 8009ab4:	6816      	ldr	r6, [r2, #0]
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	0030      	movs	r0, r6
 8009aba:	6862      	ldr	r2, [r4, #4]
 8009abc:	f000 f832 	bl	8009b24 <memchr>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d001      	beq.n	8009ac8 <_printf_i+0x1c8>
 8009ac4:	1b80      	subs	r0, r0, r6
 8009ac6:	6060      	str	r0, [r4, #4]
 8009ac8:	6863      	ldr	r3, [r4, #4]
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	2300      	movs	r3, #0
 8009ace:	9a04      	ldr	r2, [sp, #16]
 8009ad0:	7013      	strb	r3, [r2, #0]
 8009ad2:	e7bf      	b.n	8009a54 <_printf_i+0x154>
 8009ad4:	6923      	ldr	r3, [r4, #16]
 8009ad6:	0032      	movs	r2, r6
 8009ad8:	9906      	ldr	r1, [sp, #24]
 8009ada:	9805      	ldr	r0, [sp, #20]
 8009adc:	9d07      	ldr	r5, [sp, #28]
 8009ade:	47a8      	blx	r5
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d0c1      	beq.n	8009a68 <_printf_i+0x168>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	079b      	lsls	r3, r3, #30
 8009ae8:	d415      	bmi.n	8009b16 <_printf_i+0x216>
 8009aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aec:	68e0      	ldr	r0, [r4, #12]
 8009aee:	4298      	cmp	r0, r3
 8009af0:	dabc      	bge.n	8009a6c <_printf_i+0x16c>
 8009af2:	0018      	movs	r0, r3
 8009af4:	e7ba      	b.n	8009a6c <_printf_i+0x16c>
 8009af6:	0022      	movs	r2, r4
 8009af8:	2301      	movs	r3, #1
 8009afa:	9906      	ldr	r1, [sp, #24]
 8009afc:	9805      	ldr	r0, [sp, #20]
 8009afe:	9e07      	ldr	r6, [sp, #28]
 8009b00:	3219      	adds	r2, #25
 8009b02:	47b0      	blx	r6
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d0af      	beq.n	8009a68 <_printf_i+0x168>
 8009b08:	3501      	adds	r5, #1
 8009b0a:	68e3      	ldr	r3, [r4, #12]
 8009b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	42ab      	cmp	r3, r5
 8009b12:	dcf0      	bgt.n	8009af6 <_printf_i+0x1f6>
 8009b14:	e7e9      	b.n	8009aea <_printf_i+0x1ea>
 8009b16:	2500      	movs	r5, #0
 8009b18:	e7f7      	b.n	8009b0a <_printf_i+0x20a>
 8009b1a:	46c0      	nop			; (mov r8, r8)
 8009b1c:	0800a1fd 	.word	0x0800a1fd
 8009b20:	0800a20e 	.word	0x0800a20e

08009b24 <memchr>:
 8009b24:	b2c9      	uxtb	r1, r1
 8009b26:	1882      	adds	r2, r0, r2
 8009b28:	4290      	cmp	r0, r2
 8009b2a:	d101      	bne.n	8009b30 <memchr+0xc>
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	4770      	bx	lr
 8009b30:	7803      	ldrb	r3, [r0, #0]
 8009b32:	428b      	cmp	r3, r1
 8009b34:	d0fb      	beq.n	8009b2e <memchr+0xa>
 8009b36:	3001      	adds	r0, #1
 8009b38:	e7f6      	b.n	8009b28 <memchr+0x4>
	...

08009b3c <_free_r>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	0005      	movs	r5, r0
 8009b40:	2900      	cmp	r1, #0
 8009b42:	d010      	beq.n	8009b66 <_free_r+0x2a>
 8009b44:	1f0c      	subs	r4, r1, #4
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	da00      	bge.n	8009b4e <_free_r+0x12>
 8009b4c:	18e4      	adds	r4, r4, r3
 8009b4e:	0028      	movs	r0, r5
 8009b50:	f000 f8d4 	bl	8009cfc <__malloc_lock>
 8009b54:	4a1d      	ldr	r2, [pc, #116]	; (8009bcc <_free_r+0x90>)
 8009b56:	6813      	ldr	r3, [r2, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d105      	bne.n	8009b68 <_free_r+0x2c>
 8009b5c:	6063      	str	r3, [r4, #4]
 8009b5e:	6014      	str	r4, [r2, #0]
 8009b60:	0028      	movs	r0, r5
 8009b62:	f000 f8d3 	bl	8009d0c <__malloc_unlock>
 8009b66:	bd70      	pop	{r4, r5, r6, pc}
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	d908      	bls.n	8009b7e <_free_r+0x42>
 8009b6c:	6821      	ldr	r1, [r4, #0]
 8009b6e:	1860      	adds	r0, r4, r1
 8009b70:	4283      	cmp	r3, r0
 8009b72:	d1f3      	bne.n	8009b5c <_free_r+0x20>
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	1841      	adds	r1, r0, r1
 8009b7a:	6021      	str	r1, [r4, #0]
 8009b7c:	e7ee      	b.n	8009b5c <_free_r+0x20>
 8009b7e:	001a      	movs	r2, r3
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <_free_r+0x4e>
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	d9f9      	bls.n	8009b7e <_free_r+0x42>
 8009b8a:	6811      	ldr	r1, [r2, #0]
 8009b8c:	1850      	adds	r0, r2, r1
 8009b8e:	42a0      	cmp	r0, r4
 8009b90:	d10b      	bne.n	8009baa <_free_r+0x6e>
 8009b92:	6820      	ldr	r0, [r4, #0]
 8009b94:	1809      	adds	r1, r1, r0
 8009b96:	1850      	adds	r0, r2, r1
 8009b98:	6011      	str	r1, [r2, #0]
 8009b9a:	4283      	cmp	r3, r0
 8009b9c:	d1e0      	bne.n	8009b60 <_free_r+0x24>
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	1841      	adds	r1, r0, r1
 8009ba4:	6011      	str	r1, [r2, #0]
 8009ba6:	6053      	str	r3, [r2, #4]
 8009ba8:	e7da      	b.n	8009b60 <_free_r+0x24>
 8009baa:	42a0      	cmp	r0, r4
 8009bac:	d902      	bls.n	8009bb4 <_free_r+0x78>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	e7d5      	b.n	8009b60 <_free_r+0x24>
 8009bb4:	6821      	ldr	r1, [r4, #0]
 8009bb6:	1860      	adds	r0, r4, r1
 8009bb8:	4283      	cmp	r3, r0
 8009bba:	d103      	bne.n	8009bc4 <_free_r+0x88>
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	1841      	adds	r1, r0, r1
 8009bc2:	6021      	str	r1, [r4, #0]
 8009bc4:	6063      	str	r3, [r4, #4]
 8009bc6:	6054      	str	r4, [r2, #4]
 8009bc8:	e7ca      	b.n	8009b60 <_free_r+0x24>
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	200000c0 	.word	0x200000c0

08009bd0 <_malloc_r>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	1ccd      	adds	r5, r1, #3
 8009bd6:	439d      	bics	r5, r3
 8009bd8:	3508      	adds	r5, #8
 8009bda:	0006      	movs	r6, r0
 8009bdc:	2d0c      	cmp	r5, #12
 8009bde:	d21f      	bcs.n	8009c20 <_malloc_r+0x50>
 8009be0:	250c      	movs	r5, #12
 8009be2:	42a9      	cmp	r1, r5
 8009be4:	d81e      	bhi.n	8009c24 <_malloc_r+0x54>
 8009be6:	0030      	movs	r0, r6
 8009be8:	f000 f888 	bl	8009cfc <__malloc_lock>
 8009bec:	4925      	ldr	r1, [pc, #148]	; (8009c84 <_malloc_r+0xb4>)
 8009bee:	680a      	ldr	r2, [r1, #0]
 8009bf0:	0014      	movs	r4, r2
 8009bf2:	2c00      	cmp	r4, #0
 8009bf4:	d11a      	bne.n	8009c2c <_malloc_r+0x5c>
 8009bf6:	4f24      	ldr	r7, [pc, #144]	; (8009c88 <_malloc_r+0xb8>)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d104      	bne.n	8009c08 <_malloc_r+0x38>
 8009bfe:	0021      	movs	r1, r4
 8009c00:	0030      	movs	r0, r6
 8009c02:	f000 f869 	bl	8009cd8 <_sbrk_r>
 8009c06:	6038      	str	r0, [r7, #0]
 8009c08:	0029      	movs	r1, r5
 8009c0a:	0030      	movs	r0, r6
 8009c0c:	f000 f864 	bl	8009cd8 <_sbrk_r>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d12b      	bne.n	8009c6c <_malloc_r+0x9c>
 8009c14:	230c      	movs	r3, #12
 8009c16:	0030      	movs	r0, r6
 8009c18:	6033      	str	r3, [r6, #0]
 8009c1a:	f000 f877 	bl	8009d0c <__malloc_unlock>
 8009c1e:	e003      	b.n	8009c28 <_malloc_r+0x58>
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	dade      	bge.n	8009be2 <_malloc_r+0x12>
 8009c24:	230c      	movs	r3, #12
 8009c26:	6033      	str	r3, [r6, #0]
 8009c28:	2000      	movs	r0, #0
 8009c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	1b5b      	subs	r3, r3, r5
 8009c30:	d419      	bmi.n	8009c66 <_malloc_r+0x96>
 8009c32:	2b0b      	cmp	r3, #11
 8009c34:	d903      	bls.n	8009c3e <_malloc_r+0x6e>
 8009c36:	6023      	str	r3, [r4, #0]
 8009c38:	18e4      	adds	r4, r4, r3
 8009c3a:	6025      	str	r5, [r4, #0]
 8009c3c:	e003      	b.n	8009c46 <_malloc_r+0x76>
 8009c3e:	6863      	ldr	r3, [r4, #4]
 8009c40:	42a2      	cmp	r2, r4
 8009c42:	d10e      	bne.n	8009c62 <_malloc_r+0x92>
 8009c44:	600b      	str	r3, [r1, #0]
 8009c46:	0030      	movs	r0, r6
 8009c48:	f000 f860 	bl	8009d0c <__malloc_unlock>
 8009c4c:	0020      	movs	r0, r4
 8009c4e:	2207      	movs	r2, #7
 8009c50:	300b      	adds	r0, #11
 8009c52:	1d23      	adds	r3, r4, #4
 8009c54:	4390      	bics	r0, r2
 8009c56:	1ac2      	subs	r2, r0, r3
 8009c58:	4298      	cmp	r0, r3
 8009c5a:	d0e6      	beq.n	8009c2a <_malloc_r+0x5a>
 8009c5c:	1a1b      	subs	r3, r3, r0
 8009c5e:	50a3      	str	r3, [r4, r2]
 8009c60:	e7e3      	b.n	8009c2a <_malloc_r+0x5a>
 8009c62:	6053      	str	r3, [r2, #4]
 8009c64:	e7ef      	b.n	8009c46 <_malloc_r+0x76>
 8009c66:	0022      	movs	r2, r4
 8009c68:	6864      	ldr	r4, [r4, #4]
 8009c6a:	e7c2      	b.n	8009bf2 <_malloc_r+0x22>
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	1cc4      	adds	r4, r0, #3
 8009c70:	439c      	bics	r4, r3
 8009c72:	42a0      	cmp	r0, r4
 8009c74:	d0e1      	beq.n	8009c3a <_malloc_r+0x6a>
 8009c76:	1a21      	subs	r1, r4, r0
 8009c78:	0030      	movs	r0, r6
 8009c7a:	f000 f82d 	bl	8009cd8 <_sbrk_r>
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d1db      	bne.n	8009c3a <_malloc_r+0x6a>
 8009c82:	e7c7      	b.n	8009c14 <_malloc_r+0x44>
 8009c84:	200000c0 	.word	0x200000c0
 8009c88:	200000c4 	.word	0x200000c4

08009c8c <_realloc_r>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	0007      	movs	r7, r0
 8009c90:	000d      	movs	r5, r1
 8009c92:	0016      	movs	r6, r2
 8009c94:	2900      	cmp	r1, #0
 8009c96:	d105      	bne.n	8009ca4 <_realloc_r+0x18>
 8009c98:	0011      	movs	r1, r2
 8009c9a:	f7ff ff99 	bl	8009bd0 <_malloc_r>
 8009c9e:	0004      	movs	r4, r0
 8009ca0:	0020      	movs	r0, r4
 8009ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca4:	2a00      	cmp	r2, #0
 8009ca6:	d103      	bne.n	8009cb0 <_realloc_r+0x24>
 8009ca8:	f7ff ff48 	bl	8009b3c <_free_r>
 8009cac:	0034      	movs	r4, r6
 8009cae:	e7f7      	b.n	8009ca0 <_realloc_r+0x14>
 8009cb0:	f000 f834 	bl	8009d1c <_malloc_usable_size_r>
 8009cb4:	002c      	movs	r4, r5
 8009cb6:	42b0      	cmp	r0, r6
 8009cb8:	d2f2      	bcs.n	8009ca0 <_realloc_r+0x14>
 8009cba:	0031      	movs	r1, r6
 8009cbc:	0038      	movs	r0, r7
 8009cbe:	f7ff ff87 	bl	8009bd0 <_malloc_r>
 8009cc2:	1e04      	subs	r4, r0, #0
 8009cc4:	d0ec      	beq.n	8009ca0 <_realloc_r+0x14>
 8009cc6:	0029      	movs	r1, r5
 8009cc8:	0032      	movs	r2, r6
 8009cca:	f7ff fbe1 	bl	8009490 <memcpy>
 8009cce:	0029      	movs	r1, r5
 8009cd0:	0038      	movs	r0, r7
 8009cd2:	f7ff ff33 	bl	8009b3c <_free_r>
 8009cd6:	e7e3      	b.n	8009ca0 <_realloc_r+0x14>

08009cd8 <_sbrk_r>:
 8009cd8:	2300      	movs	r3, #0
 8009cda:	b570      	push	{r4, r5, r6, lr}
 8009cdc:	4d06      	ldr	r5, [pc, #24]	; (8009cf8 <_sbrk_r+0x20>)
 8009cde:	0004      	movs	r4, r0
 8009ce0:	0008      	movs	r0, r1
 8009ce2:	602b      	str	r3, [r5, #0]
 8009ce4:	f7f9 ff10 	bl	8003b08 <_sbrk>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d103      	bne.n	8009cf4 <_sbrk_r+0x1c>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d000      	beq.n	8009cf4 <_sbrk_r+0x1c>
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	bd70      	pop	{r4, r5, r6, pc}
 8009cf6:	46c0      	nop			; (mov r8, r8)
 8009cf8:	20000468 	.word	0x20000468

08009cfc <__malloc_lock>:
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	4802      	ldr	r0, [pc, #8]	; (8009d08 <__malloc_lock+0xc>)
 8009d00:	f000 f814 	bl	8009d2c <__retarget_lock_acquire_recursive>
 8009d04:	bd10      	pop	{r4, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	20000470 	.word	0x20000470

08009d0c <__malloc_unlock>:
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	4802      	ldr	r0, [pc, #8]	; (8009d18 <__malloc_unlock+0xc>)
 8009d10:	f000 f80d 	bl	8009d2e <__retarget_lock_release_recursive>
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	20000470 	.word	0x20000470

08009d1c <_malloc_usable_size_r>:
 8009d1c:	1f0b      	subs	r3, r1, #4
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	1f18      	subs	r0, r3, #4
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	da01      	bge.n	8009d2a <_malloc_usable_size_r+0xe>
 8009d26:	580b      	ldr	r3, [r1, r0]
 8009d28:	18c0      	adds	r0, r0, r3
 8009d2a:	4770      	bx	lr

08009d2c <__retarget_lock_acquire_recursive>:
 8009d2c:	4770      	bx	lr

08009d2e <__retarget_lock_release_recursive>:
 8009d2e:	4770      	bx	lr

08009d30 <_init>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d36:	bc08      	pop	{r3}
 8009d38:	469e      	mov	lr, r3
 8009d3a:	4770      	bx	lr

08009d3c <_fini>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	46c0      	nop			; (mov r8, r8)
 8009d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d42:	bc08      	pop	{r3}
 8009d44:	469e      	mov	lr, r3
 8009d46:	4770      	bx	lr
