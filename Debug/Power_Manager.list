
Power_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000359c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c8  080036c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036c8  080036c8  000136c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036d0  080036d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d0  080036d0  000136d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  080036e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080036e4  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd1b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eee  00000000  00000000  0002dd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00030aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012dd1  00000000  00000000  00031848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001009c  00000000  00000000  00044619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000788cb  00000000  00000000  000546b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccf80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b4  00000000  00000000  000ccfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003644 	.word	0x08003644

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003644 	.word	0x08003644

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fcca 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f810 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 fa50 	bl	800094c <MX_GPIO_Init>
  MX_ADC_Init();
 80004ac:	f000 f87a 	bl	80005a4 <MX_ADC_Init>
  MX_I2C1_Init();
 80004b0:	f000 f918 	bl	80006e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004b4:	f000 f956 	bl	8000764 <MX_I2C2_Init>
  MX_TIM2_Init();
 80004b8:	f000 f994 	bl	80007e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004bc:	f000 f9e6 	bl	800088c <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 80004c0:	f000 fa14 	bl	80008ec <MX_USART5_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <main+0x28>
	...

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b09b      	sub	sp, #108	; 0x6c
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	2434      	movs	r4, #52	; 0x34
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2334      	movs	r3, #52	; 0x34
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f003 f8ab 	bl	8003634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	2320      	movs	r3, #32
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2314      	movs	r3, #20
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f003 f8a3 	bl	8003634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	2320      	movs	r3, #32
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f003 f89c 	bl	8003634 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <SystemClock_Config+0xd4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <SystemClock_Config+0xd8>)
 8000502:	401a      	ands	r2, r3
 8000504:	4b25      	ldr	r3, [pc, #148]	; (800059c <SystemClock_Config+0xd4>)
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0109      	lsls	r1, r1, #4
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800050e:	0021      	movs	r1, r4
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2210      	movs	r2, #16
 8000514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	22a0      	movs	r2, #160	; 0xa0
 8000526:	0212      	lsls	r2, r2, #8
 8000528:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	187b      	adds	r3, r7, r1
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fa88 	bl	8001a48 <HAL_RCC_OscConfig>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800053c:	f000 fadc 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	2120      	movs	r1, #32
 8000542:	187b      	adds	r3, r7, r1
 8000544:	220f      	movs	r2, #15
 8000546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f001 fdeb 	bl	8002140 <HAL_RCC_ClockConfig>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800056e:	f000 fac3 	bl	8000af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000572:	003b      	movs	r3, r7
 8000574:	2209      	movs	r2, #9
 8000576:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000578:	003b      	movs	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800057e:	003b      	movs	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000584:	003b      	movs	r3, r7
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fffe 	bl	8002588 <HAL_RCCEx_PeriphCLKConfig>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000590:	f000 fab2 	bl	8000af8 <Error_Handler>
  }
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b01b      	add	sp, #108	; 0x6c
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	40007000 	.word	0x40007000
 80005a0:	ffffe7ff 	.word	0xffffe7ff

080005a4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	003b      	movs	r3, r7
 80005ac:	0018      	movs	r0, r3
 80005ae:	2308      	movs	r3, #8
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f003 f83e 	bl	8003634 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005b8:	4b44      	ldr	r3, [pc, #272]	; (80006cc <MX_ADC_Init+0x128>)
 80005ba:	4a45      	ldr	r2, [pc, #276]	; (80006d0 <MX_ADC_Init+0x12c>)
 80005bc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005be:	4b43      	ldr	r3, [pc, #268]	; (80006cc <MX_ADC_Init+0x128>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005c4:	4b41      	ldr	r3, [pc, #260]	; (80006cc <MX_ADC_Init+0x128>)
 80005c6:	22c0      	movs	r2, #192	; 0xc0
 80005c8:	0612      	lsls	r2, r2, #24
 80005ca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005cc:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <MX_ADC_Init+0x128>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005d2:	4b3e      	ldr	r3, [pc, #248]	; (80006cc <MX_ADC_Init+0x128>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005d8:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <MX_ADC_Init+0x128>)
 80005da:	2201      	movs	r2, #1
 80005dc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <MX_ADC_Init+0x128>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80005e4:	4b39      	ldr	r3, [pc, #228]	; (80006cc <MX_ADC_Init+0x128>)
 80005e6:	2220      	movs	r2, #32
 80005e8:	2101      	movs	r1, #1
 80005ea:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <MX_ADC_Init+0x128>)
 80005ee:	2221      	movs	r2, #33	; 0x21
 80005f0:	2100      	movs	r1, #0
 80005f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <MX_ADC_Init+0x128>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <MX_ADC_Init+0x128>)
 80005fc:	22c2      	movs	r2, #194	; 0xc2
 80005fe:	32ff      	adds	r2, #255	; 0xff
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <MX_ADC_Init+0x128>)
 8000604:	222c      	movs	r2, #44	; 0x2c
 8000606:	2100      	movs	r1, #0
 8000608:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <MX_ADC_Init+0x128>)
 800060c:	2204      	movs	r2, #4
 800060e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_ADC_Init+0x128>)
 8000612:	2200      	movs	r2, #0
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <MX_ADC_Init+0x128>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_ADC_Init+0x128>)
 800061e:	2201      	movs	r2, #1
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_ADC_Init+0x128>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_ADC_Init+0x128>)
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fc74 	bl	8000f18 <HAL_ADC_Init>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000634:	f000 fa60 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000638:	003b      	movs	r3, r7
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800063e:	003b      	movs	r3, r7
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	0152      	lsls	r2, r2, #5
 8000644:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000646:	003a      	movs	r2, r7
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_ADC_Init+0x128>)
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fdd7 	bl	8001200 <HAL_ADC_ConfigChannel>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000656:	f000 fa4f 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800065a:	003b      	movs	r3, r7
 800065c:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <MX_ADC_Init+0x130>)
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000660:	003a      	movs	r2, r7
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_ADC_Init+0x128>)
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fdca 	bl	8001200 <HAL_ADC_ConfigChannel>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000670:	f000 fa42 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000674:	003b      	movs	r3, r7
 8000676:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <MX_ADC_Init+0x134>)
 8000678:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800067a:	003a      	movs	r2, r7
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_ADC_Init+0x128>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fdbd 	bl	8001200 <HAL_ADC_ConfigChannel>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800068a:	f000 fa35 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800068e:	003b      	movs	r3, r7
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_ADC_Init+0x138>)
 8000692:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000694:	003a      	movs	r2, r7
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_ADC_Init+0x128>)
 8000698:	0011      	movs	r1, r2
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fdb0 	bl	8001200 <HAL_ADC_ConfigChannel>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80006a4:	f000 fa28 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006a8:	003b      	movs	r3, r7
 80006aa:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <MX_ADC_Init+0x13c>)
 80006ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ae:	003a      	movs	r2, r7
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_ADC_Init+0x128>)
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fda3 	bl	8001200 <HAL_ADC_ConfigChannel>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 80006be:	f000 fa1b 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	20000208 	.word	0x20000208
 80006d0:	40012400 	.word	0x40012400
 80006d4:	04000002 	.word	0x04000002
 80006d8:	08000004 	.word	0x08000004
 80006dc:	0c000008 	.word	0x0c000008
 80006e0:	10000010 	.word	0x10000010

080006e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_I2C1_Init+0x78>)
 80006ea:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <MX_I2C1_Init+0x7c>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_I2C1_Init+0x78>)
 80006f0:	22e1      	movs	r2, #225	; 0xe1
 80006f2:	00d2      	lsls	r2, r2, #3
 80006f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_I2C1_Init+0x78>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_I2C1_Init+0x78>)
 80006fe:	2201      	movs	r2, #1
 8000700:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_I2C1_Init+0x78>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_I2C1_Init+0x78>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_I2C1_Init+0x78>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x78>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_I2C1_Init+0x78>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2C1_Init+0x78>)
 8000722:	0018      	movs	r0, r3
 8000724:	f001 f862 	bl	80017ec <HAL_I2C_Init>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f9e4 	bl	8000af8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_I2C1_Init+0x78>)
 8000732:	2100      	movs	r1, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f001 f8ef 	bl	8001918 <HAL_I2CEx_ConfigAnalogFilter>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800073e:	f000 f9db 	bl	8000af8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2C1_Init+0x78>)
 8000744:	2100      	movs	r1, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f001 f932 	bl	80019b0 <HAL_I2CEx_ConfigDigitalFilter>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000750:	f000 f9d2 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000028 	.word	0x20000028
 8000760:	40005400 	.word	0x40005400

08000764 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_I2C2_Init+0x78>)
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <MX_I2C2_Init+0x7c>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_I2C2_Init+0x78>)
 8000770:	22e1      	movs	r2, #225	; 0xe1
 8000772:	00d2      	lsls	r2, r2, #3
 8000774:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_I2C2_Init+0x78>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_I2C2_Init+0x78>)
 800077e:	2201      	movs	r2, #1
 8000780:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_I2C2_Init+0x78>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_I2C2_Init+0x78>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_I2C2_Init+0x78>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C2_Init+0x78>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_I2C2_Init+0x78>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C2_Init+0x78>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 f822 	bl	80017ec <HAL_I2C_Init>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 f9a4 	bl	8000af8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C2_Init+0x78>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 f8af 	bl	8001918 <HAL_I2CEx_ConfigAnalogFilter>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80007be:	f000 f99b 	bl	8000af8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C2_Init+0x78>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f8f2 	bl	80019b0 <HAL_I2CEx_ConfigDigitalFilter>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 f992 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000074 	.word	0x20000074
 80007e0:	40005800 	.word	0x40005800

080007e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	2308      	movs	r3, #8
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	2310      	movs	r3, #16
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f002 ff1d 	bl	8003634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fa:	003b      	movs	r3, r7
 80007fc:	0018      	movs	r0, r3
 80007fe:	2308      	movs	r3, #8
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f002 ff16 	bl	8003634 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM2_Init+0xa0>)
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	05d2      	lsls	r2, r2, #23
 800080e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM2_Init+0xa0>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_TIM2_Init+0xa0>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM2_Init+0xa0>)
 800081e:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <MX_TIM2_Init+0xa4>)
 8000820:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_TIM2_Init+0xa0>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_TIM2_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_TIM2_Init+0xa0>)
 8000830:	0018      	movs	r0, r3
 8000832:	f001 ffef 	bl	8002814 <HAL_TIM_Base_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800083a:	f000 f95d 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083e:	2108      	movs	r1, #8
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	0152      	lsls	r2, r2, #5
 8000846:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000848:	187a      	adds	r2, r7, r1
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_TIM2_Init+0xa0>)
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f002 f820 	bl	8002894 <HAL_TIM_ConfigClockSource>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000858:	f000 f94e 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	003b      	movs	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000868:	003a      	movs	r2, r7
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_TIM2_Init+0xa0>)
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f002 f9d2 	bl	8002c18 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000878:	f000 f93e 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b006      	add	sp, #24
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200001c8 	.word	0x200001c8
 8000888:	0000ffff 	.word	0x0000ffff

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART1_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 8000898:	22e1      	movs	r2, #225	; 0xe1
 800089a:	0252      	lsls	r2, r2, #9
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_USART1_UART_Init+0x58>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 f9ff 	bl	8002cd4 <HAL_UART_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f90d 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000144 	.word	0x20000144
 80008e8:	40013800 	.word	0x40013800

080008ec <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART5_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_USART5_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART5_UART_Init+0x58>)
 80008f8:	22e1      	movs	r2, #225	; 0xe1
 80008fa:	0252      	lsls	r2, r2, #9
 80008fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART5_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART5_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART5_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART5_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART5_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART5_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART5_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART5_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_USART5_UART_Init+0x58>)
 8000930:	0018      	movs	r0, r3
 8000932:	f002 f9cf 	bl	8002cd4 <HAL_UART_Init>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f8dd 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000c0 	.word	0x200000c0
 8000948:	40005000 	.word	0x40005000

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b08b      	sub	sp, #44	; 0x2c
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	2414      	movs	r4, #20
 8000954:	193b      	adds	r3, r7, r4
 8000956:	0018      	movs	r0, r3
 8000958:	2314      	movs	r3, #20
 800095a:	001a      	movs	r2, r3
 800095c:	2100      	movs	r1, #0
 800095e:	f002 fe69 	bl	8003634 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b5f      	ldr	r3, [pc, #380]	; (8000ae0 <MX_GPIO_Init+0x194>)
 8000964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000966:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <MX_GPIO_Init+0x194>)
 8000968:	2104      	movs	r1, #4
 800096a:	430a      	orrs	r2, r1
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
 800096e:	4b5c      	ldr	r3, [pc, #368]	; (8000ae0 <MX_GPIO_Init+0x194>)
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	2204      	movs	r2, #4
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	4b59      	ldr	r3, [pc, #356]	; (8000ae0 <MX_GPIO_Init+0x194>)
 800097c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800097e:	4b58      	ldr	r3, [pc, #352]	; (8000ae0 <MX_GPIO_Init+0x194>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	430a      	orrs	r2, r1
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
 8000986:	4b56      	ldr	r3, [pc, #344]	; (8000ae0 <MX_GPIO_Init+0x194>)
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <MX_GPIO_Init+0x194>)
 8000994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000996:	4b52      	ldr	r3, [pc, #328]	; (8000ae0 <MX_GPIO_Init+0x194>)
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
 800099e:	4b50      	ldr	r3, [pc, #320]	; (8000ae0 <MX_GPIO_Init+0x194>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b4d      	ldr	r3, [pc, #308]	; (8000ae0 <MX_GPIO_Init+0x194>)
 80009ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ae:	4b4c      	ldr	r3, [pc, #304]	; (8000ae0 <MX_GPIO_Init+0x194>)
 80009b0:	2102      	movs	r1, #2
 80009b2:	430a      	orrs	r2, r1
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009b6:	4b4a      	ldr	r3, [pc, #296]	; (8000ae0 <MX_GPIO_Init+0x194>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	2202      	movs	r2, #2
 80009bc:	4013      	ands	r3, r2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	019b      	lsls	r3, r3, #6
 80009c6:	4847      	ldr	r0, [pc, #284]	; (8000ae4 <MX_GPIO_Init+0x198>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	0019      	movs	r1, r3
 80009cc:	f000 fef0 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80009d0:	4b45      	ldr	r3, [pc, #276]	; (8000ae8 <MX_GPIO_Init+0x19c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	2103      	movs	r1, #3
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 feea 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_CTRL_Pin|POWER_CTRL_Pin|HEATING_CTRL_Pin, GPIO_PIN_RESET);
 80009dc:	2398      	movs	r3, #152	; 0x98
 80009de:	015b      	lsls	r3, r3, #5
 80009e0:	4842      	ldr	r0, [pc, #264]	; (8000aec <MX_GPIO_Init+0x1a0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	0019      	movs	r1, r3
 80009e6:	f000 fee3 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	0059      	lsls	r1, r3, #1
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2200      	movs	r2, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fedb 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	0192      	lsls	r2, r2, #6
 8000a00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2201      	movs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	4a33      	ldr	r2, [pc, #204]	; (8000ae4 <MX_GPIO_Init+0x198>)
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0010      	movs	r0, r2
 8000a1c:	f000 fd4a 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2203      	movs	r2, #3
 8000a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2201      	movs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <MX_GPIO_Init+0x19c>)
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	0010      	movs	r0, r2
 8000a40:	f000 fd38 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTARY1_P1_Pin ROTARY1_P2_Pin ROTARY1_P3_Pin CHARGE_STAT2_Pin */
  GPIO_InitStruct.Pin = ROTARY1_P1_Pin|ROTARY1_P2_Pin|ROTARY1_P3_Pin|CHARGE_STAT2_Pin;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	4a2a      	ldr	r2, [pc, #168]	; (8000af0 <MX_GPIO_Init+0x1a4>)
 8000a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	193a      	adds	r2, r7, r4
 8000a58:	23a0      	movs	r3, #160	; 0xa0
 8000a5a:	05db      	lsls	r3, r3, #23
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 fd28 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTARY1_P4_Pin ROTARY2_P1_Pin ROTARY2_P2_Pin ROTARY2_P3_Pin
                           ROTARY2_P4_Pin MODE_BTN_Pin CHARGE_STAT1_Pin */
  GPIO_InitStruct.Pin = ROTARY1_P4_Pin|ROTARY2_P1_Pin|ROTARY2_P2_Pin|ROTARY2_P3_Pin
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_GPIO_Init+0x1a8>)
 8000a68:	601a      	str	r2, [r3, #0]
                          |ROTARY2_P4_Pin|MODE_BTN_Pin|CHARGE_STAT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f000 fd19 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_CTRL_Pin POWER_CTRL_Pin HEATING_CTRL_Pin */
  GPIO_InitStruct.Pin = FAN_CTRL_Pin|POWER_CTRL_Pin|HEATING_CTRL_Pin;
 8000a82:	0021      	movs	r1, r4
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2298      	movs	r2, #152	; 0x98
 8000a88:	0152      	lsls	r2, r2, #5
 8000a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	000c      	movs	r4, r1
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2201      	movs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_GPIO_Init+0x1a0>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f000 fd04 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin;
 8000aac:	0021      	movs	r1, r4
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	0052      	lsls	r2, r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LORA_RST_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	187a      	adds	r2, r7, r1
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fcef 	bl	80014b4 <HAL_GPIO_Init>

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b00b      	add	sp, #44	; 0x2c
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	50000800 	.word	0x50000800
 8000ae8:	50001c00 	.word	0x50001c00
 8000aec:	50000400 	.word	0x50000400
 8000af0:	000080e0 	.word	0x000080e0
 8000af4:	00008c27 	.word	0x00008c27

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <HAL_MspInit+0x24>)
 8000b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x24>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	430a      	orrs	r2, r1
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <HAL_MspInit+0x24>)
 8000b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_MspInit+0x24>)
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	0549      	lsls	r1, r1, #21
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	240c      	movs	r4, #12
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f002 fd78 	bl	8003634 <memset>
  if(hadc->Instance==ADC1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <HAL_ADC_MspInit+0x70>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d122      	bne.n	8000b94 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_ADC_MspInit+0x74>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_ADC_MspInit+0x74>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0089      	lsls	r1, r1, #2
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_ADC_MspInit+0x74>)
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_ADC_MspInit+0x74>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	430a      	orrs	r2, r1
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_ADC_MspInit+0x74>)
 8000b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	221f      	movs	r2, #31
 8000b78:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	193a      	adds	r2, r7, r4
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fc90 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b009      	add	sp, #36	; 0x24
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b08b      	sub	sp, #44	; 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	2414      	movs	r4, #20
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	2314      	movs	r3, #20
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f002 fd3c 	bl	8003634 <memset>
  if(hi2c->Instance==I2C1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <HAL_I2C_MspInit+0xdc>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d129      	bne.n	8000c1a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000bcc:	2102      	movs	r1, #2
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bde:	0021      	movs	r1, r4
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	22c0      	movs	r2, #192	; 0xc0
 8000be4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2212      	movs	r2, #18
 8000bea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2201      	movs	r2, #1
 8000bf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_I2C_MspInit+0xe4>)
 8000c02:	0019      	movs	r1, r3
 8000c04:	0010      	movs	r0, r2
 8000c06:	f000 fc55 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	0389      	lsls	r1, r1, #14
 8000c14:	430a      	orrs	r2, r1
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c18:	e02e      	b.n	8000c78 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_I2C_MspInit+0xe8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d129      	bne.n	8000c78 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	2202      	movs	r2, #2
 8000c36:	4013      	ands	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c3c:	2114      	movs	r1, #20
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	22c0      	movs	r2, #192	; 0xc0
 8000c42:	01d2      	lsls	r2, r2, #7
 8000c44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2212      	movs	r2, #18
 8000c4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2201      	movs	r2, #1
 8000c50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2203      	movs	r2, #3
 8000c56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2205      	movs	r2, #5
 8000c5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_I2C_MspInit+0xe4>)
 8000c62:	0019      	movs	r1, r3
 8000c64:	0010      	movs	r0, r2
 8000c66:	f000 fc25 	bl	80014b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_I2C_MspInit+0xe0>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	03c9      	lsls	r1, r1, #15
 8000c74:	430a      	orrs	r2, r1
 8000c76:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b00b      	add	sp, #44	; 0x2c
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	50000400 	.word	0x50000400
 8000c8c:	40005800 	.word	0x40005800

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d105      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_TIM_Base_MspInit+0x28>)
 8000ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_TIM_Base_MspInit+0x28>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	430a      	orrs	r2, r1
 8000cae:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	2414      	movs	r4, #20
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	0018      	movs	r0, r3
 8000cca:	2314      	movs	r3, #20
 8000ccc:	001a      	movs	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f002 fcb0 	bl	8003634 <memset>
  if(huart->Instance==USART1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <HAL_UART_MspInit+0xe0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cde:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	01c9      	lsls	r1, r1, #7
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	22c0      	movs	r2, #192	; 0xc0
 8000d08:	00d2      	lsls	r2, r2, #3
 8000d0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2202      	movs	r2, #2
 8000d12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2204      	movs	r2, #4
 8000d24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	187a      	adds	r2, r7, r1
 8000d28:	23a0      	movs	r3, #160	; 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fbc0 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000d34:	e02d      	b.n	8000d92 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART5)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <HAL_UART_MspInit+0xe8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d128      	bne.n	8000d92 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	0349      	lsls	r1, r1, #13
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000d54:	2102      	movs	r1, #2
 8000d56:	430a      	orrs	r2, r1
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0xe4>)
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	2202      	movs	r2, #2
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d66:	2114      	movs	r1, #20
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2218      	movs	r2, #24
 8000d6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2202      	movs	r2, #2
 8000d72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2206      	movs	r2, #6
 8000d84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_UART_MspInit+0xec>)
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	0010      	movs	r0, r2
 8000d8e:	f000 fb91 	bl	80014b4 <HAL_GPIO_Init>
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b00b      	add	sp, #44	; 0x2c
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40013800 	.word	0x40013800
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40005000 	.word	0x40005000
 8000da8:	50000400 	.word	0x50000400

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f886 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000de6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e0e:	f7ff ffe4 	bl	8000dda <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f002 fbeb 	bl	80035ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fb41 	bl	800049c <main>

08000e1a <LoopForever>:

LoopForever:
    b LoopForever
 8000e1a:	e7fe      	b.n	8000e1a <LoopForever>
   ldr   r0, =_estack
 8000e1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e28:	080036d8 	.word	0x080036d8
  ldr r2, =_sbss
 8000e2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e30:	20000268 	.word	0x20000268

08000e34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_COMP_IRQHandler>
	...

08000e38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x3c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Init+0x3c>)
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f811 	bl	8000e78 <HAL_InitTick>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	e001      	b.n	8000e66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e62:	f7ff fe4f 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000e82:	681c      	ldr	r4, [r3, #0]
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_InitTick+0x60>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	0019      	movs	r1, r3
 8000e8a:	23fa      	movs	r3, #250	; 0xfa
 8000e8c:	0098      	lsls	r0, r3, #2
 8000e8e:	f7ff f93b 	bl	8000108 <__udivsi3>
 8000e92:	0003      	movs	r3, r0
 8000e94:	0019      	movs	r1, r3
 8000e96:	0020      	movs	r0, r4
 8000e98:	f7ff f936 	bl	8000108 <__udivsi3>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fafb 	bl	800149a <HAL_SYSTICK_Config>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00f      	b.n	8000ecc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d80b      	bhi.n	8000eca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fad8 	bl	8001470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_InitTick+0x64>)
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	001a      	movs	r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x20>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	18d2      	adds	r2, r2, r3
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_IncTick+0x20>)
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000264 	.word	0x20000264

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_GetTick+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000264 	.word	0x20000264

08000f18 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e159      	b.n	80011de <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10a      	bne.n	8000f48 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2250      	movs	r2, #80	; 0x50
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff fdf2 	bl	8000b2c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	d005      	beq.n	8000f60 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f5e:	d00b      	beq.n	8000f78 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f64:	2210      	movs	r2, #16
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2250      	movs	r2, #80	; 0x50
 8000f70:	2100      	movs	r1, #0
 8000f72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e132      	b.n	80011de <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7c:	4a9a      	ldr	r2, [pc, #616]	; (80011e8 <HAL_ADC_Init+0x2d0>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2202      	movs	r2, #2
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d108      	bne.n	8000fa8 <HAL_ADC_Init+0x90>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_ADC_Init+0x90>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_ADC_Init+0x92>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d149      	bne.n	8001042 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	23c0      	movs	r3, #192	; 0xc0
 8000fb4:	061b      	lsls	r3, r3, #24
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d00b      	beq.n	8000fd2 <HAL_ADC_Init+0xba>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d005      	beq.n	8000fd2 <HAL_ADC_Init+0xba>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	061b      	lsls	r3, r3, #24
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d111      	bne.n	8000ff6 <HAL_ADC_Init+0xde>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	0892      	lsrs	r2, r2, #2
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6919      	ldr	r1, [r3, #16]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	e014      	b.n	8001020 <HAL_ADC_Init+0x108>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	0892      	lsrs	r2, r2, #2
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	4b79      	ldr	r3, [pc, #484]	; (80011ec <HAL_ADC_Init+0x2d4>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b78      	ldr	r3, [pc, #480]	; (80011ec <HAL_ADC_Init+0x2d4>)
 800100c:	4978      	ldr	r1, [pc, #480]	; (80011f0 <HAL_ADC_Init+0x2d8>)
 800100e:	400a      	ands	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	4b76      	ldr	r3, [pc, #472]	; (80011ec <HAL_ADC_Init+0x2d4>)
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	4b74      	ldr	r3, [pc, #464]	; (80011ec <HAL_ADC_Init+0x2d4>)
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2118      	movs	r1, #24
 800102c:	438a      	bics	r2, r1
 800102e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68d9      	ldr	r1, [r3, #12]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001042:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <HAL_ADC_Init+0x2d4>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b69      	ldr	r3, [pc, #420]	; (80011ec <HAL_ADC_Init+0x2d4>)
 8001048:	496a      	ldr	r1, [pc, #424]	; (80011f4 <HAL_ADC_Init+0x2dc>)
 800104a:	400a      	ands	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800104e:	4b67      	ldr	r3, [pc, #412]	; (80011ec <HAL_ADC_Init+0x2d4>)
 8001050:	6819      	ldr	r1, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001056:	065a      	lsls	r2, r3, #25
 8001058:	4b64      	ldr	r3, [pc, #400]	; (80011ec <HAL_ADC_Init+0x2d4>)
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	055b      	lsls	r3, r3, #21
 8001068:	4013      	ands	r3, r2
 800106a:	d108      	bne.n	800107e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0549      	lsls	r1, r1, #21
 800107a:	430a      	orrs	r2, r1
 800107c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	495b      	ldr	r1, [pc, #364]	; (80011f8 <HAL_ADC_Init+0x2e0>)
 800108a:	400a      	ands	r2, r1
 800108c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68d9      	ldr	r1, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_Init+0x18c>
 80010a0:	2304      	movs	r3, #4
 80010a2:	e000      	b.n	80010a6 <HAL_ADC_Init+0x18e>
 80010a4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010a6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2020      	movs	r0, #32
 80010ac:	5c1b      	ldrb	r3, [r3, r0]
 80010ae:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80010b0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	202c      	movs	r0, #44	; 0x2c
 80010b6:	5c1b      	ldrb	r3, [r3, r0]
 80010b8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010ba:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010c0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80010c8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010d0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010de:	23c2      	movs	r3, #194	; 0xc2
 80010e0:	33ff      	adds	r3, #255	; 0xff
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d00b      	beq.n	80010fe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68d9      	ldr	r1, [r3, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2221      	movs	r2, #33	; 0x21
 8001102:	5c9b      	ldrb	r3, [r3, r2]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d11a      	bne.n	800113e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2220      	movs	r2, #32
 800110c:	5c9b      	ldrb	r3, [r3, r2]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	0249      	lsls	r1, r1, #9
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	e00b      	b.n	800113e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	2220      	movs	r2, #32
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	2201      	movs	r2, #1
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001142:	2b01      	cmp	r3, #1
 8001144:	d11f      	bne.n	8001186 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	492a      	ldr	r1, [pc, #168]	; (80011fc <HAL_ADC_Init+0x2e4>)
 8001152:	400a      	ands	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6919      	ldr	r1, [r3, #16]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001164:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800116a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2101      	movs	r1, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	e00e      	b.n	80011a4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	2201      	movs	r2, #1
 800118e:	4013      	ands	r3, r2
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	438a      	bics	r2, r1
 80011a2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2107      	movs	r1, #7
 80011b0:	438a      	bics	r2, r1
 80011b2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6959      	ldr	r1, [r3, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	2203      	movs	r2, #3
 80011d2:	4393      	bics	r3, r2
 80011d4:	2201      	movs	r2, #1
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	fffffefd 	.word	0xfffffefd
 80011ec:	40012708 	.word	0x40012708
 80011f0:	ffc3ffff 	.word	0xffc3ffff
 80011f4:	fdffffff 	.word	0xfdffffff
 80011f8:	fffe0219 	.word	0xfffe0219
 80011fc:	fffffc03 	.word	0xfffffc03

08001200 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2250      	movs	r2, #80	; 0x50
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x18>
 8001214:	2302      	movs	r3, #2
 8001216:	e06c      	b.n	80012f2 <HAL_ADC_ConfigChannel+0xf2>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2250      	movs	r2, #80	; 0x50
 800121c:	2101      	movs	r1, #1
 800121e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2204      	movs	r2, #4
 8001228:	4013      	ands	r3, r2
 800122a:	d00b      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001230:	2220      	movs	r2, #32
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2250      	movs	r2, #80	; 0x50
 800123c:	2100      	movs	r1, #0
 800123e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e056      	b.n	80012f2 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <HAL_ADC_ConfigChannel+0xfc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d028      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	035b      	lsls	r3, r3, #13
 800125a:	0b5a      	lsrs	r2, r3, #13
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	02db      	lsls	r3, r3, #11
 800126c:	4013      	ands	r3, r2
 800126e:	d009      	beq.n	8001284 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_ADC_ConfigChannel+0x100>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_ADC_ConfigChannel+0x100>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0409      	lsls	r1, r1, #16
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800127e:	200a      	movs	r0, #10
 8001280:	f000 f844 	bl	800130c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	029b      	lsls	r3, r3, #10
 800128c:	4013      	ands	r3, r2
 800128e:	d02b      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_ADC_ConfigChannel+0x100>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_ADC_ConfigChannel+0x100>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	03c9      	lsls	r1, r1, #15
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e023      	b.n	80012e8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	035b      	lsls	r3, r3, #13
 80012ac:	0b5b      	lsrs	r3, r3, #13
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	400a      	ands	r2, r1
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	02db      	lsls	r3, r3, #11
 80012c0:	4013      	ands	r3, r2
 80012c2:	d005      	beq.n	80012d0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_ADC_ConfigChannel+0x100>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_ADC_ConfigChannel+0x100>)
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <HAL_ADC_ConfigChannel+0x104>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	029b      	lsls	r3, r3, #10
 80012d8:	4013      	ands	r3, r2
 80012da:	d005      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_ADC_ConfigChannel+0x100>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_ADC_ConfigChannel+0x100>)
 80012e2:	4909      	ldr	r1, [pc, #36]	; (8001308 <HAL_ADC_ConfigChannel+0x108>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2250      	movs	r2, #80	; 0x50
 80012ec:	2100      	movs	r1, #0
 80012ee:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	00001001 	.word	0x00001001
 8001300:	40012708 	.word	0x40012708
 8001304:	ff7fffff 	.word	0xff7fffff
 8001308:	ffbfffff 	.word	0xffbfffff

0800130c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <ADC_DelayMicroSecond+0x38>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	490b      	ldr	r1, [pc, #44]	; (8001348 <ADC_DelayMicroSecond+0x3c>)
 800131a:	0018      	movs	r0, r3
 800131c:	f7fe fef4 	bl	8000108 <__udivsi3>
 8001320:	0003      	movs	r3, r0
 8001322:	001a      	movs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4353      	muls	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800132a:	e002      	b.n	8001332 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b01      	subs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	20000000 	.word	0x20000000
 8001348:	000f4240 	.word	0x000f4240

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	d828      	bhi.n	80013b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <__NVIC_SetPriority+0xd4>)
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	33c0      	adds	r3, #192	; 0xc0
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	589b      	ldr	r3, [r3, r2]
 8001372:	1dfa      	adds	r2, r7, #7
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	0011      	movs	r1, r2
 8001378:	2203      	movs	r2, #3
 800137a:	400a      	ands	r2, r1
 800137c:	00d2      	lsls	r2, r2, #3
 800137e:	21ff      	movs	r1, #255	; 0xff
 8001380:	4091      	lsls	r1, r2
 8001382:	000a      	movs	r2, r1
 8001384:	43d2      	mvns	r2, r2
 8001386:	401a      	ands	r2, r3
 8001388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	019b      	lsls	r3, r3, #6
 800138e:	22ff      	movs	r2, #255	; 0xff
 8001390:	401a      	ands	r2, r3
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	0018      	movs	r0, r3
 8001398:	2303      	movs	r3, #3
 800139a:	4003      	ands	r3, r0
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a0:	481f      	ldr	r0, [pc, #124]	; (8001420 <__NVIC_SetPriority+0xd4>)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	430a      	orrs	r2, r1
 80013ac:	33c0      	adds	r3, #192	; 0xc0
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013b2:	e031      	b.n	8001418 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <__NVIC_SetPriority+0xd8>)
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	0019      	movs	r1, r3
 80013bc:	230f      	movs	r3, #15
 80013be:	400b      	ands	r3, r1
 80013c0:	3b08      	subs	r3, #8
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3306      	adds	r3, #6
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	3304      	adds	r3, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	1dfa      	adds	r2, r7, #7
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	0011      	movs	r1, r2
 80013d4:	2203      	movs	r2, #3
 80013d6:	400a      	ands	r2, r1
 80013d8:	00d2      	lsls	r2, r2, #3
 80013da:	21ff      	movs	r1, #255	; 0xff
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	43d2      	mvns	r2, r2
 80013e2:	401a      	ands	r2, r3
 80013e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	019b      	lsls	r3, r3, #6
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	401a      	ands	r2, r3
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0018      	movs	r0, r3
 80013f4:	2303      	movs	r3, #3
 80013f6:	4003      	ands	r3, r0
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <__NVIC_SetPriority+0xd8>)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	001c      	movs	r4, r3
 8001404:	230f      	movs	r3, #15
 8001406:	4023      	ands	r3, r4
 8001408:	3b08      	subs	r3, #8
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	430a      	orrs	r2, r1
 800140e:	3306      	adds	r3, #6
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	18c3      	adds	r3, r0, r3
 8001414:	3304      	adds	r3, #4
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b003      	add	sp, #12
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	045b      	lsls	r3, r3, #17
 8001438:	429a      	cmp	r2, r3
 800143a:	d301      	bcc.n	8001440 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143c:	2301      	movs	r3, #1
 800143e:	e010      	b.n	8001462 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <SysTick_Config+0x44>)
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	3a01      	subs	r2, #1
 8001446:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001448:	2301      	movs	r3, #1
 800144a:	425b      	negs	r3, r3
 800144c:	2103      	movs	r1, #3
 800144e:	0018      	movs	r0, r3
 8001450:	f7ff ff7c 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x44>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x44>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	210f      	movs	r1, #15
 800147c:	187b      	adds	r3, r7, r1
 800147e:	1c02      	adds	r2, r0, #0
 8001480:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	187b      	adds	r3, r7, r1
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b004      	add	sp, #16
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ffbf 	bl	8001428 <SysTick_Config>
 80014aa:	0003      	movs	r3, r0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014ca:	e155      	b.n	8001778 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4091      	lsls	r1, r2
 80014d6:	000a      	movs	r2, r1
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d100      	bne.n	80014e4 <HAL_GPIO_Init+0x30>
 80014e2:	e146      	b.n	8001772 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d00b      	beq.n	8001504 <HAL_GPIO_Init+0x50>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d007      	beq.n	8001504 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b12      	cmp	r3, #18
 8001502:	d130      	bne.n	8001566 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	409a      	lsls	r2, r3
 8001512:	0013      	movs	r3, r2
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153a:	2201      	movs	r2, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	2201      	movs	r2, #1
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0xf2>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d123      	bne.n	80015ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	58d3      	ldr	r3, [r2, r3]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2207      	movs	r2, #7
 80015b8:	4013      	ands	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2107      	movs	r1, #7
 80015d2:	400b      	ands	r3, r1
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	6939      	ldr	r1, [r7, #16]
 80015ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	401a      	ands	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	055b      	lsls	r3, r3, #21
 800162a:	4013      	ands	r3, r2
 800162c:	d100      	bne.n	8001630 <HAL_GPIO_Init+0x17c>
 800162e:	e0a0      	b.n	8001772 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001630:	4b57      	ldr	r3, [pc, #348]	; (8001790 <HAL_GPIO_Init+0x2dc>)
 8001632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_GPIO_Init+0x2dc>)
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800163c:	4a55      	ldr	r2, [pc, #340]	; (8001794 <HAL_GPIO_Init+0x2e0>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	589b      	ldr	r3, [r3, r2]
 8001648:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2203      	movs	r2, #3
 800164e:	4013      	ands	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	409a      	lsls	r2, r3
 8001656:	0013      	movs	r3, r2
 8001658:	43da      	mvns	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	23a0      	movs	r3, #160	; 0xa0
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	429a      	cmp	r2, r3
 8001668:	d01f      	beq.n	80016aa <HAL_GPIO_Init+0x1f6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x2e4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_GPIO_Init+0x1f2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a49      	ldr	r2, [pc, #292]	; (800179c <HAL_GPIO_Init+0x2e8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x1ee>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a48      	ldr	r2, [pc, #288]	; (80017a0 <HAL_GPIO_Init+0x2ec>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x1ea>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a47      	ldr	r2, [pc, #284]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x1e6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a46      	ldr	r2, [pc, #280]	; (80017a8 <HAL_GPIO_Init+0x2f4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x1e2>
 8001692:	2305      	movs	r3, #5
 8001694:	e00a      	b.n	80016ac <HAL_GPIO_Init+0x1f8>
 8001696:	2306      	movs	r3, #6
 8001698:	e008      	b.n	80016ac <HAL_GPIO_Init+0x1f8>
 800169a:	2304      	movs	r3, #4
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x1f8>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x1f8>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x1f8>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x1f8>
 80016aa:	2300      	movs	r3, #0
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	2103      	movs	r1, #3
 80016b0:	400a      	ands	r2, r1
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	; (8001794 <HAL_GPIO_Init+0x2e0>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4013      	ands	r3, r2
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016ee:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43da      	mvns	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	029b      	lsls	r3, r3, #10
 800170c:	4013      	ands	r3, r2
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	035b      	lsls	r3, r3, #13
 8001736:	4013      	ands	r3, r2
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43da      	mvns	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	039b      	lsls	r3, r3, #14
 8001760:	4013      	ands	r3, r2
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	40da      	lsrs	r2, r3
 8001780:	1e13      	subs	r3, r2, #0
 8001782:	d000      	beq.n	8001786 <HAL_GPIO_Init+0x2d2>
 8001784:	e6a2      	b.n	80014cc <HAL_GPIO_Init+0x18>
  }
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b006      	add	sp, #24
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	50000400 	.word	0x50000400
 800179c:	50000800 	.word	0x50000800
 80017a0:	50000c00 	.word	0x50000c00
 80017a4:	50001000 	.word	0x50001000
 80017a8:	50001c00 	.word	0x50001c00
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	0008      	movs	r0, r1
 80017ba:	0011      	movs	r1, r2
 80017bc:	1cbb      	adds	r3, r7, #2
 80017be:	1c02      	adds	r2, r0, #0
 80017c0:	801a      	strh	r2, [r3, #0]
 80017c2:	1c7b      	adds	r3, r7, #1
 80017c4:	1c0a      	adds	r2, r1, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c8:	1c7b      	adds	r3, r7, #1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d0:	1cbb      	adds	r3, r7, #2
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017da:	1cbb      	adds	r3, r7, #2
 80017dc:	881a      	ldrh	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e082      	b.n	8001904 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2241      	movs	r2, #65	; 0x41
 8001802:	5c9b      	ldrb	r3, [r3, r2]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d107      	bne.n	800181a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	2100      	movs	r1, #0
 8001810:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff f9c5 	bl	8000ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2241      	movs	r2, #65	; 0x41
 800181e:	2124      	movs	r1, #36	; 0x24
 8001820:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	438a      	bics	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_I2C_Init+0x120>)
 800183c:	400a      	ands	r2, r1
 800183e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4931      	ldr	r1, [pc, #196]	; (8001910 <HAL_I2C_Init+0x124>)
 800184c:	400a      	ands	r2, r1
 800184e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d108      	bne.n	800186a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	0209      	lsls	r1, r1, #8
 8001864:	430a      	orrs	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e007      	b.n	800187a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2184      	movs	r1, #132	; 0x84
 8001874:	0209      	lsls	r1, r1, #8
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d104      	bne.n	800188c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	491f      	ldr	r1, [pc, #124]	; (8001914 <HAL_I2C_Init+0x128>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	491a      	ldr	r1, [pc, #104]	; (8001910 <HAL_I2C_Init+0x124>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	0011      	movs	r1, r2
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69d9      	ldr	r1, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2241      	movs	r2, #65	; 0x41
 80018f0:	2120      	movs	r1, #32
 80018f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2242      	movs	r2, #66	; 0x42
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}
 800190c:	f0ffffff 	.word	0xf0ffffff
 8001910:	ffff7fff 	.word	0xffff7fff
 8001914:	02008000 	.word	0x02008000

08001918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2241      	movs	r2, #65	; 0x41
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b20      	cmp	r3, #32
 800192c:	d138      	bne.n	80019a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2240      	movs	r2, #64	; 0x40
 8001932:	5c9b      	ldrb	r3, [r3, r2]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001938:	2302      	movs	r3, #2
 800193a:	e032      	b.n	80019a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	2101      	movs	r1, #1
 8001942:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2241      	movs	r2, #65	; 0x41
 8001948:	2124      	movs	r1, #36	; 0x24
 800194a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	438a      	bics	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4911      	ldr	r1, [pc, #68]	; (80019ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001968:	400a      	ands	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2241      	movs	r2, #65	; 0x41
 8001990:	2120      	movs	r1, #32
 8001992:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	2100      	movs	r1, #0
 800199a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
  }
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	ffffefff 	.word	0xffffefff

080019b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2241      	movs	r2, #65	; 0x41
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d139      	bne.n	8001a3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e033      	b.n	8001a3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2240      	movs	r2, #64	; 0x40
 80019d8:	2101      	movs	r1, #1
 80019da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2241      	movs	r2, #65	; 0x41
 80019e0:	2124      	movs	r1, #36	; 0x24
 80019e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2101      	movs	r1, #1
 80019f0:	438a      	bics	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2241      	movs	r2, #65	; 0x41
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	2100      	movs	r1, #0
 8001a34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a3a:	2302      	movs	r3, #2
  }
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	fffff0ff 	.word	0xfffff0ff

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f000 fb6c 	bl	8002134 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5c:	4bc8      	ldr	r3, [pc, #800]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	220c      	movs	r2, #12
 8001a62:	4013      	ands	r3, r2
 8001a64:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a66:	4bc6      	ldr	r3, [pc, #792]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	025b      	lsls	r3, r3, #9
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCC_OscConfig+0x36>
 8001a7c:	e07d      	b.n	8001b7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d007      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x68>
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d10d      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	4bba      	ldr	r3, [pc, #744]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	029b      	lsls	r3, r3, #10
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5a>
 8001aa0:	e06a      	b.n	8001b78 <HAL_RCC_OscConfig+0x130>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d166      	bne.n	8001b78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f000 fb42 	bl	8002134 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x84>
 8001abc:	4bb0      	ldr	r3, [pc, #704]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4baf      	ldr	r3, [pc, #700]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0249      	lsls	r1, r1, #9
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e027      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	23a0      	movs	r3, #160	; 0xa0
 8001ad2:	02db      	lsls	r3, r3, #11
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d10e      	bne.n	8001af6 <HAL_RCC_OscConfig+0xae>
 8001ad8:	4ba9      	ldr	r3, [pc, #676]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4ba8      	ldr	r3, [pc, #672]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	02c9      	lsls	r1, r1, #11
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4ba6      	ldr	r3, [pc, #664]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4ba5      	ldr	r3, [pc, #660]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0249      	lsls	r1, r1, #9
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e012      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001af6:	4ba2      	ldr	r3, [pc, #648]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001afc:	49a1      	ldr	r1, [pc, #644]	; (8001d84 <HAL_RCC_OscConfig+0x33c>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	4b9f      	ldr	r3, [pc, #636]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4b9b      	ldr	r3, [pc, #620]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b9a      	ldr	r3, [pc, #616]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b16:	499c      	ldr	r1, [pc, #624]	; (8001d88 <HAL_RCC_OscConfig+0x340>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d014      	beq.n	8001b4e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff f9ee 	bl	8000f04 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f9e9 	bl	8000f04 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e2f9      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b40:	4b8f      	ldr	r3, [pc, #572]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0xe6>
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f9d9 	bl	8000f04 <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff f9d4 	bl	8000f04 <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e2e4      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b6a:	4b85      	ldr	r3, [pc, #532]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	4013      	ands	r3, r2
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x110>
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d100      	bne.n	8001b86 <HAL_RCC_OscConfig+0x13e>
 8001b84:	e099      	b.n	8001cba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	2220      	movs	r2, #32
 8001b90:	4013      	ands	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b94:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b79      	ldr	r3, [pc, #484]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	d13e      	bne.n	8001c32 <HAL_RCC_OscConfig+0x1ea>
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d13b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bba:	4b71      	ldr	r3, [pc, #452]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_RCC_OscConfig+0x186>
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e2b2      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a6e      	ldr	r2, [pc, #440]	; (8001d8c <HAL_RCC_OscConfig+0x344>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	021a      	lsls	r2, r3, #8
 8001bde:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001be4:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2209      	movs	r2, #9
 8001bea:	4393      	bics	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf6:	f000 fbeb 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8001bfa:	0001      	movs	r1, r0
 8001bfc:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	220f      	movs	r2, #15
 8001c04:	4013      	ands	r3, r2
 8001c06:	4a62      	ldr	r2, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x348>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	000a      	movs	r2, r1
 8001c0c:	40da      	lsrs	r2, r3
 8001c0e:	4b61      	ldr	r3, [pc, #388]	; (8001d94 <HAL_RCC_OscConfig+0x34c>)
 8001c10:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c12:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <HAL_RCC_OscConfig+0x350>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2513      	movs	r5, #19
 8001c18:	197c      	adds	r4, r7, r5
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7ff f92c 	bl	8000e78 <HAL_InitTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c24:	197b      	adds	r3, r7, r5
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d046      	beq.n	8001cba <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001c2c:	197b      	adds	r3, r7, r5
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	e280      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d027      	beq.n	8001c88 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c38:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2209      	movs	r2, #9
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f95b 	bl	8000f04 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff f956 	bl	8000f04 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e266      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c66:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d0f1      	beq.n	8001c54 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a45      	ldr	r2, [pc, #276]	; (8001d8c <HAL_RCC_OscConfig+0x344>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	021a      	lsls	r2, r3, #8
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	e018      	b.n	8001cba <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	438a      	bics	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f936 	bl	8000f04 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f931 	bl	8000f04 <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e241      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d1f1      	bne.n	8001c9e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x27e>
 8001cc4:	e0a1      	b.n	8001e0a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d140      	bne.n	8001d4e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x29c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e227      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <HAL_RCC_OscConfig+0x354>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	0a19      	lsrs	r1, r3, #8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	061a      	lsls	r2, r3, #24
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	0b5b      	lsrs	r3, r3, #13
 8001d12:	3301      	adds	r3, #1
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0212      	lsls	r2, r2, #8
 8001d18:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	210f      	movs	r1, #15
 8001d22:	400b      	ands	r3, r1
 8001d24:	491a      	ldr	r1, [pc, #104]	; (8001d90 <HAL_RCC_OscConfig+0x348>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_RCC_OscConfig+0x34c>)
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_RCC_OscConfig+0x350>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2513      	movs	r5, #19
 8001d34:	197c      	adds	r4, r7, r5
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7ff f89e 	bl	8000e78 <HAL_InitTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d40:	197b      	adds	r3, r7, r5
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d060      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001d48:	197b      	adds	r3, r7, r5
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	e1f2      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03f      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	0049      	lsls	r1, r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f8ce 	bl	8000f04 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d6c:	e018      	b.n	8001da0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f8c9 	bl	8000f04 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d911      	bls.n	8001da0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1d9      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
 8001d80:	40021000 	.word	0x40021000
 8001d84:	fffeffff 	.word	0xfffeffff
 8001d88:	fffbffff 	.word	0xfffbffff
 8001d8c:	ffffe0ff 	.word	0xffffe0ff
 8001d90:	0800365c 	.word	0x0800365c
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001da0:	4bc9      	ldr	r3, [pc, #804]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0e0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dac:	4bc6      	ldr	r3, [pc, #792]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4ac6      	ldr	r2, [pc, #792]	; (80020cc <HAL_RCC_OscConfig+0x684>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1a      	ldr	r2, [r3, #32]
 8001dba:	4bc3      	ldr	r3, [pc, #780]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc0:	4bc1      	ldr	r3, [pc, #772]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	0a19      	lsrs	r1, r3, #8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	061a      	lsls	r2, r3, #24
 8001dce:	4bbe      	ldr	r3, [pc, #760]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	e019      	b.n	8001e0a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dd6:	4bbc      	ldr	r3, [pc, #752]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4bbb      	ldr	r3, [pc, #748]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001ddc:	49bc      	ldr	r1, [pc, #752]	; (80020d0 <HAL_RCC_OscConfig+0x688>)
 8001dde:	400a      	ands	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff f88f 	bl	8000f04 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dec:	f7ff f88a 	bl	8000f04 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e19a      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dfe:	4bb2      	ldr	r3, [pc, #712]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2208      	movs	r2, #8
 8001e10:	4013      	ands	r3, r2
 8001e12:	d036      	beq.n	8001e82 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d019      	beq.n	8001e50 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1c:	4baa      	ldr	r3, [pc, #680]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e20:	4ba9      	ldr	r3, [pc, #676]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7ff f86c 	bl	8000f04 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e32:	f7ff f867 	bl	8000f04 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e177      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e44:	4ba0      	ldr	r3, [pc, #640]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d0f1      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3ea>
 8001e4e:	e018      	b.n	8001e82 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b9d      	ldr	r3, [pc, #628]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e54:	4b9c      	ldr	r3, [pc, #624]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	438a      	bics	r2, r1
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f852 	bl	8000f04 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e66:	f7ff f84d 	bl	8000f04 <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e15d      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e78:	4b93      	ldr	r3, [pc, #588]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d1f1      	bne.n	8001e66 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2204      	movs	r2, #4
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d100      	bne.n	8001e8e <HAL_RCC_OscConfig+0x446>
 8001e8c:	e0ae      	b.n	8001fec <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8e:	2023      	movs	r0, #35	; 0x23
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e96:	4b8c      	ldr	r3, [pc, #560]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	055b      	lsls	r3, r3, #21
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d109      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b89      	ldr	r3, [pc, #548]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea6:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	0549      	lsls	r1, r1, #21
 8001eac:	430a      	orrs	r2, r1
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001eb0:	183b      	adds	r3, r7, r0
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b87      	ldr	r3, [pc, #540]	; (80020d4 <HAL_RCC_OscConfig+0x68c>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d11a      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec2:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <HAL_RCC_OscConfig+0x68c>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b83      	ldr	r3, [pc, #524]	; (80020d4 <HAL_RCC_OscConfig+0x68c>)
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	0049      	lsls	r1, r1, #1
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f818 	bl	8000f04 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7ff f813 	bl	8000f04 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e123      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b79      	ldr	r3, [pc, #484]	; (80020d4 <HAL_RCC_OscConfig+0x68c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4cc>
 8001f04:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0049      	lsls	r1, r1, #1
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	651a      	str	r2, [r3, #80]	; 0x50
 8001f12:	e031      	b.n	8001f78 <HAL_RCC_OscConfig+0x530>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4ee>
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f20:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f22:	496b      	ldr	r1, [pc, #428]	; (80020d0 <HAL_RCC_OscConfig+0x688>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	651a      	str	r2, [r3, #80]	; 0x50
 8001f28:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f2e:	496a      	ldr	r1, [pc, #424]	; (80020d8 <HAL_RCC_OscConfig+0x690>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	651a      	str	r2, [r3, #80]	; 0x50
 8001f34:	e020      	b.n	8001f78 <HAL_RCC_OscConfig+0x530>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	23a0      	movs	r3, #160	; 0xa0
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d10e      	bne.n	8001f60 <HAL_RCC_OscConfig+0x518>
 8001f42:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f46:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	00c9      	lsls	r1, r1, #3
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f50:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f54:	4b5c      	ldr	r3, [pc, #368]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0049      	lsls	r1, r1, #1
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0x530>
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f64:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f66:	495a      	ldr	r1, [pc, #360]	; (80020d0 <HAL_RCC_OscConfig+0x688>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f70:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f72:	4959      	ldr	r1, [pc, #356]	; (80020d8 <HAL_RCC_OscConfig+0x690>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7fe ffc0 	bl	8000f04 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f88:	e009      	b.n	8001f9e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe ffbb 	bl	8000f04 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	4a51      	ldr	r2, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x694>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0ca      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d0ef      	beq.n	8001f8a <HAL_RCC_OscConfig+0x542>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7fe ffaa 	bl	8000f04 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fb4:	e009      	b.n	8001fca <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7fe ffa5 	bl	8000f04 <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	4a46      	ldr	r2, [pc, #280]	; (80020dc <HAL_RCC_OscConfig+0x694>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0b4      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001fcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d1ef      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fd6:	2323      	movs	r3, #35	; 0x23
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001fe6:	493e      	ldr	r1, [pc, #248]	; (80020e0 <HAL_RCC_OscConfig+0x698>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5ae>
 8001ff4:	e09d      	b.n	8002132 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d100      	bne.n	8001ffe <HAL_RCC_OscConfig+0x5b6>
 8001ffc:	e076      	b.n	80020ec <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	2b02      	cmp	r3, #2
 8002004:	d145      	bne.n	8002092 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 800200c:	4935      	ldr	r1, [pc, #212]	; (80020e4 <HAL_RCC_OscConfig+0x69c>)
 800200e:	400a      	ands	r2, r1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe ff77 	bl	8000f04 <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ff72 	bl	8000f04 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e082      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	049b      	lsls	r3, r3, #18
 8002036:	4013      	ands	r3, r2
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_RCC_OscConfig+0x6a0>)
 8002040:	4013      	ands	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	431a      	orrs	r2, r3
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8002056:	430a      	orrs	r2, r1
 8002058:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0449      	lsls	r1, r1, #17
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe ff4c 	bl	8000f04 <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe ff47 	bl	8000f04 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e057      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	049b      	lsls	r3, r3, #18
 800208c:	4013      	ands	r3, r2
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x62a>
 8002090:	e04f      	b.n	8002132 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8002098:	4912      	ldr	r1, [pc, #72]	; (80020e4 <HAL_RCC_OscConfig+0x69c>)
 800209a:	400a      	ands	r2, r1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe ff31 	bl	8000f04 <HAL_GetTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe ff2c 	bl	8000f04 <HAL_GetTick>
 80020ac:	0002      	movs	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e03c      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020ba:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	049b      	lsls	r3, r3, #18
 80020c2:	4013      	ands	r3, r2
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x660>
 80020c6:	e034      	b.n	8002132 <HAL_RCC_OscConfig+0x6ea>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	ffff1fff 	.word	0xffff1fff
 80020d0:	fffffeff 	.word	0xfffffeff
 80020d4:	40007000 	.word	0x40007000
 80020d8:	fffffbff 	.word	0xfffffbff
 80020dc:	00001388 	.word	0x00001388
 80020e0:	efffffff 	.word	0xefffffff
 80020e4:	feffffff 	.word	0xfeffffff
 80020e8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e01d      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_RCC_OscConfig+0x6f4>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	401a      	ands	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	429a      	cmp	r2, r3
 800210c:	d10f      	bne.n	800212e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	23f0      	movs	r3, #240	; 0xf0
 8002112:	039b      	lsls	r3, r3, #14
 8002114:	401a      	ands	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d107      	bne.n	800212e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	401a      	ands	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b00a      	add	sp, #40	; 0x28
 800213a:	bdb0      	pop	{r4, r5, r7, pc}
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e128      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b96      	ldr	r3, [pc, #600]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2201      	movs	r2, #1
 800215a:	4013      	ands	r3, r2
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d91e      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b93      	ldr	r3, [pc, #588]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2201      	movs	r2, #1
 8002168:	4393      	bics	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	4b90      	ldr	r3, [pc, #576]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002174:	f7fe fec6 	bl	8000f04 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217c:	e009      	b.n	8002192 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217e:	f7fe fec1 	bl	8000f04 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	4a8a      	ldr	r2, [pc, #552]	; (80023b4 <HAL_RCC_ClockConfig+0x274>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e109      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b87      	ldr	r3, [pc, #540]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2202      	movs	r2, #2
 80021a6:	4013      	ands	r3, r2
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021aa:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	22f0      	movs	r2, #240	; 0xf0
 80021b0:	4393      	bics	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b7f      	ldr	r3, [pc, #508]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 80021ba:	430a      	orrs	r2, r1
 80021bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	d100      	bne.n	80021ca <HAL_RCC_ClockConfig+0x8a>
 80021c8:	e089      	b.n	80022de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021d2:	4b79      	ldr	r3, [pc, #484]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	029b      	lsls	r3, r3, #10
 80021da:	4013      	ands	r3, r2
 80021dc:	d120      	bne.n	8002220 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0e1      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021ea:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	049b      	lsls	r3, r3, #18
 80021f2:	4013      	ands	r3, r2
 80021f4:	d114      	bne.n	8002220 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0d5      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d106      	bne.n	8002210 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002202:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2204      	movs	r2, #4
 8002208:	4013      	ands	r3, r2
 800220a:	d109      	bne.n	8002220 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0ca      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002210:	4b69      	ldr	r3, [pc, #420]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0c2      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002220:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2203      	movs	r2, #3
 8002226:	4393      	bics	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7fe fe66 	bl	8000f04 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d111      	bne.n	8002268 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002244:	e009      	b.n	800225a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002246:	f7fe fe5d 	bl	8000f04 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_RCC_ClockConfig+0x274>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0a5      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	220c      	movs	r2, #12
 8002260:	4013      	ands	r3, r2
 8002262:	2b08      	cmp	r3, #8
 8002264:	d1ef      	bne.n	8002246 <HAL_RCC_ClockConfig+0x106>
 8002266:	e03a      	b.n	80022de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d111      	bne.n	8002294 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002270:	e009      	b.n	8002286 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002272:	f7fe fe47 	bl	8000f04 <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	4a4d      	ldr	r2, [pc, #308]	; (80023b4 <HAL_RCC_ClockConfig+0x274>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e08f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002286:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	220c      	movs	r2, #12
 800228c:	4013      	ands	r3, r2
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d1ef      	bne.n	8002272 <HAL_RCC_ClockConfig+0x132>
 8002292:	e024      	b.n	80022de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d11b      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800229c:	e009      	b.n	80022b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229e:	f7fe fe31 	bl	8000f04 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <HAL_RCC_ClockConfig+0x274>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e079      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	220c      	movs	r2, #12
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d1ef      	bne.n	800229e <HAL_RCC_ClockConfig+0x15e>
 80022be:	e00e      	b.n	80022de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7fe fe20 	bl	8000f04 <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <HAL_RCC_ClockConfig+0x274>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e068      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022d4:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	220c      	movs	r2, #12
 80022da:	4013      	ands	r3, r2
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022de:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d21e      	bcs.n	800232a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4393      	bics	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022fe:	f7fe fe01 	bl	8000f04 <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	e009      	b.n	800231c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fdfc 	bl	8000f04 <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_RCC_ClockConfig+0x274>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e044      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d1ee      	bne.n	8002308 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2204      	movs	r2, #4
 8002330:	4013      	ands	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a20      	ldr	r2, [pc, #128]	; (80023bc <HAL_RCC_ClockConfig+0x27c>)
 800233a:	4013      	ands	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2208      	movs	r2, #8
 800234e:	4013      	ands	r3, r2
 8002350:	d00a      	beq.n	8002368 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_RCC_ClockConfig+0x280>)
 8002358:	4013      	ands	r3, r2
 800235a:	0019      	movs	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	00da      	lsls	r2, r3, #3
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002364:	430a      	orrs	r2, r1
 8002366:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002368:	f000 f832 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800236c:	0001      	movs	r1, r0
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	220f      	movs	r2, #15
 8002376:	4013      	ands	r3, r2
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_RCC_ClockConfig+0x284>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	000a      	movs	r2, r1
 800237e:	40da      	lsrs	r2, r3
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_RCC_ClockConfig+0x288>)
 8002382:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_RCC_ClockConfig+0x28c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	250b      	movs	r5, #11
 800238a:	197c      	adds	r4, r7, r5
 800238c:	0018      	movs	r0, r3
 800238e:	f7fe fd73 	bl	8000e78 <HAL_InitTick>
 8002392:	0003      	movs	r3, r0
 8002394:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002396:	197b      	adds	r3, r7, r5
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800239e:	197b      	adds	r3, r7, r5
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b004      	add	sp, #16
 80023ac:	bdb0      	pop	{r4, r5, r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40022000 	.word	0x40022000
 80023b4:	00001388 	.word	0x00001388
 80023b8:	40021000 	.word	0x40021000
 80023bc:	fffff8ff 	.word	0xfffff8ff
 80023c0:	ffffc7ff 	.word	0xffffc7ff
 80023c4:	0800365c 	.word	0x0800365c
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b08e      	sub	sp, #56	; 0x38
 80023d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023d6:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_RCC_GetSysClockFreq+0x138>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023de:	230c      	movs	r3, #12
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d014      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x40>
 80023e6:	d900      	bls.n	80023ea <HAL_RCC_GetSysClockFreq+0x1a>
 80023e8:	e07b      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x112>
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x24>
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d00b      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0x3a>
 80023f2:	e076      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023f4:	4b44      	ldr	r3, [pc, #272]	; (8002508 <HAL_RCC_GetSysClockFreq+0x138>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2210      	movs	r2, #16
 80023fa:	4013      	ands	r3, r2
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80023fe:	4b43      	ldr	r3, [pc, #268]	; (800250c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002402:	e07c      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002404:	4b42      	ldr	r3, [pc, #264]	; (8002510 <HAL_RCC_GetSysClockFreq+0x140>)
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002408:	e079      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_RCC_GetSysClockFreq+0x144>)
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800240e:	e076      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	0c9a      	lsrs	r2, r3, #18
 8002414:	230f      	movs	r3, #15
 8002416:	401a      	ands	r2, r3
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_GetSysClockFreq+0x148>)
 800241a:	5c9b      	ldrb	r3, [r3, r2]
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	0d9a      	lsrs	r2, r3, #22
 8002422:	2303      	movs	r3, #3
 8002424:	4013      	ands	r3, r2
 8002426:	3301      	adds	r3, #1
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <HAL_RCC_GetSysClockFreq+0x138>)
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	025b      	lsls	r3, r3, #9
 8002432:	4013      	ands	r3, r2
 8002434:	d01a      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	4a35      	ldr	r2, [pc, #212]	; (8002514 <HAL_RCC_GetSysClockFreq+0x144>)
 8002440:	2300      	movs	r3, #0
 8002442:	69b8      	ldr	r0, [r7, #24]
 8002444:	69f9      	ldr	r1, [r7, #28]
 8002446:	f7fd ff0b 	bl	8000260 <__aeabi_lmul>
 800244a:	0002      	movs	r2, r0
 800244c:	000b      	movs	r3, r1
 800244e:	0010      	movs	r0, r2
 8002450:	0019      	movs	r1, r3
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f7fd fedf 	bl	8000220 <__aeabi_uldivmod>
 8002462:	0002      	movs	r2, r0
 8002464:	000b      	movs	r3, r1
 8002466:	0013      	movs	r3, r2
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
 800246a:	e037      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800246c:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_RCC_GetSysClockFreq+0x138>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2210      	movs	r2, #16
 8002472:	4013      	ands	r3, r2
 8002474:	d01a      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4a23      	ldr	r2, [pc, #140]	; (800250c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002480:	2300      	movs	r3, #0
 8002482:	68b8      	ldr	r0, [r7, #8]
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	f7fd feeb 	bl	8000260 <__aeabi_lmul>
 800248a:	0002      	movs	r2, r0
 800248c:	000b      	movs	r3, r1
 800248e:	0010      	movs	r0, r2
 8002490:	0019      	movs	r1, r3
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f7fd febf 	bl	8000220 <__aeabi_uldivmod>
 80024a2:	0002      	movs	r2, r0
 80024a4:	000b      	movs	r3, r1
 80024a6:	0013      	movs	r3, r2
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
 80024aa:	e017      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	0018      	movs	r0, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	0019      	movs	r1, r3
 80024b4:	4a16      	ldr	r2, [pc, #88]	; (8002510 <HAL_RCC_GetSysClockFreq+0x140>)
 80024b6:	2300      	movs	r3, #0
 80024b8:	f7fd fed2 	bl	8000260 <__aeabi_lmul>
 80024bc:	0002      	movs	r2, r0
 80024be:	000b      	movs	r3, r1
 80024c0:	0010      	movs	r0, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	001c      	movs	r4, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	001d      	movs	r5, r3
 80024cc:	0022      	movs	r2, r4
 80024ce:	002b      	movs	r3, r5
 80024d0:	f7fd fea6 	bl	8000220 <__aeabi_uldivmod>
 80024d4:	0002      	movs	r2, r0
 80024d6:	000b      	movs	r3, r1
 80024d8:	0013      	movs	r3, r2
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80024dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024e0:	e00d      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_GetSysClockFreq+0x138>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0b5b      	lsrs	r3, r3, #13
 80024e8:	2207      	movs	r2, #7
 80024ea:	4013      	ands	r3, r2
 80024ec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	3301      	adds	r3, #1
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	0212      	lsls	r2, r2, #8
 80024f6:	409a      	lsls	r2, r3
 80024f8:	0013      	movs	r3, r2
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024fc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b00e      	add	sp, #56	; 0x38
 8002506:	bdb0      	pop	{r4, r5, r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	003d0900 	.word	0x003d0900
 8002510:	00f42400 	.word	0x00f42400
 8002514:	007a1200 	.word	0x007a1200
 8002518:	08003674 	.word	0x08003674

0800251c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <HAL_RCC_GetHCLKFreq+0x10>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	20000000 	.word	0x20000000

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002534:	f7ff fff2 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002538:	0001      	movs	r1, r0
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	2207      	movs	r2, #7
 8002542:	4013      	ands	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	40d9      	lsrs	r1, r3
 800254a:	000b      	movs	r3, r1
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40021000 	.word	0x40021000
 8002558:	0800366c 	.word	0x0800366c

0800255c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002560:	f7ff ffdc 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002564:	0001      	movs	r1, r0
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	0adb      	lsrs	r3, r3, #11
 800256c:	2207      	movs	r2, #7
 800256e:	4013      	ands	r3, r2
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	40d9      	lsrs	r1, r3
 8002576:	000b      	movs	r3, r1
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	40021000 	.word	0x40021000
 8002584:	0800366c 	.word	0x0800366c

08002588 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002590:	2017      	movs	r0, #23
 8002592:	183b      	adds	r3, r7, r0
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2220      	movs	r2, #32
 800259e:	4013      	ands	r3, r2
 80025a0:	d100      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80025a2:	e0c2      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a4:	4b91      	ldr	r3, [pc, #580]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	055b      	lsls	r3, r3, #21
 80025ac:	4013      	ands	r3, r2
 80025ae:	d109      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b0:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b4:	4b8d      	ldr	r3, [pc, #564]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	0549      	lsls	r1, r1, #21
 80025ba:	430a      	orrs	r2, r1
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025be:	183b      	adds	r3, r7, r0
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b8a      	ldr	r3, [pc, #552]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d11a      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d0:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	0049      	lsls	r1, r1, #1
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe fc91 	bl	8000f04 <HAL_GetTick>
 80025e2:	0003      	movs	r3, r0
 80025e4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	e008      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7fe fc8c 	bl	8000f04 <HAL_GetTick>
 80025ec:	0002      	movs	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0f3      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4013      	ands	r3, r2
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002606:	4b79      	ldr	r3, [pc, #484]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	23c0      	movs	r3, #192	; 0xc0
 800260c:	039b      	lsls	r3, r3, #14
 800260e:	4013      	ands	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	23c0      	movs	r3, #192	; 0xc0
 8002618:	039b      	lsls	r3, r3, #14
 800261a:	4013      	ands	r3, r2
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	429a      	cmp	r2, r3
 8002620:	d013      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	23c0      	movs	r3, #192	; 0xc0
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	401a      	ands	r2, r3
 800262c:	23c0      	movs	r3, #192	; 0xc0
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	429a      	cmp	r2, r3
 8002632:	d10a      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002634:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	401a      	ands	r2, r3
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	029b      	lsls	r3, r3, #10
 8002642:	429a      	cmp	r2, r3
 8002644:	d101      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0cb      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800264a:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800264c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264e:	23c0      	movs	r3, #192	; 0xc0
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	4013      	ands	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03b      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	23c0      	movs	r3, #192	; 0xc0
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d033      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2220      	movs	r2, #32
 8002672:	4013      	ands	r3, r2
 8002674:	d02e      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002676:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267a:	4a5e      	ldr	r2, [pc, #376]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800267c:	4013      	ands	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002680:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	0309      	lsls	r1, r1, #12
 800268a:	430a      	orrs	r2, r1
 800268c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800268e:	4b57      	ldr	r3, [pc, #348]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002690:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002692:	4b56      	ldr	r3, [pc, #344]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002694:	4958      	ldr	r1, [pc, #352]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002696:	400a      	ands	r2, r1
 8002698:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d014      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fc2b 	bl	8000f04 <HAL_GetTick>
 80026ae:	0003      	movs	r3, r0
 80026b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026b2:	e009      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe fc26 	bl	8000f04 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	4a4f      	ldr	r2, [pc, #316]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e08c      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c8:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d0ef      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	23c0      	movs	r3, #192	; 0xc0
 80026da:	029b      	lsls	r3, r3, #10
 80026dc:	401a      	ands	r2, r3
 80026de:	23c0      	movs	r3, #192	; 0xc0
 80026e0:	029b      	lsls	r3, r3, #10
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a45      	ldr	r2, [pc, #276]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	23c0      	movs	r3, #192	; 0xc0
 80026f6:	039b      	lsls	r3, r3, #14
 80026f8:	401a      	ands	r2, r3
 80026fa:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002702:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	23c0      	movs	r3, #192	; 0xc0
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	401a      	ands	r2, r3
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002710:	430a      	orrs	r2, r1
 8002712:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002714:	2317      	movs	r3, #23
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002722:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002724:	4937      	ldr	r1, [pc, #220]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002726:	400a      	ands	r2, r1
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	2203      	movs	r2, #3
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002744:	430a      	orrs	r2, r1
 8002746:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2202      	movs	r2, #2
 800274e:	4013      	ands	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	220c      	movs	r2, #12
 8002758:	4393      	bics	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002762:	430a      	orrs	r2, r1
 8002764:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2204      	movs	r2, #4
 800276c:	4013      	ands	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002770:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	4a24      	ldr	r2, [pc, #144]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002780:	430a      	orrs	r2, r1
 8002782:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2208      	movs	r2, #8
 800278a:	4013      	ands	r3, r2
 800278c:	d009      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a1e      	ldr	r2, [pc, #120]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002794:	4013      	ands	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	4013      	ands	r3, r2
 80027ca:	d009      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d0:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027dc:	430a      	orrs	r2, r1
 80027de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b006      	add	sp, #24
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	fffcffff 	.word	0xfffcffff
 80027f8:	fff7ffff 	.word	0xfff7ffff
 80027fc:	00001388 	.word	0x00001388
 8002800:	ffcfffff 	.word	0xffcfffff
 8002804:	efffffff 	.word	0xefffffff
 8002808:	fffff3ff 	.word	0xfffff3ff
 800280c:	ffffcfff 	.word	0xffffcfff
 8002810:	fff3ffff 	.word	0xfff3ffff

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e032      	b.n	800288c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2239      	movs	r2, #57	; 0x39
 800282a:	5c9b      	ldrb	r3, [r3, r2]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2238      	movs	r2, #56	; 0x38
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fe fa27 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2239      	movs	r2, #57	; 0x39
 8002846:	2102      	movs	r1, #2
 8002848:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	0019      	movs	r1, r3
 8002854:	0010      	movs	r0, r2
 8002856:	f000 f8e7 	bl	8002a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	223e      	movs	r2, #62	; 0x3e
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223a      	movs	r2, #58	; 0x3a
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	223b      	movs	r2, #59	; 0x3b
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	223c      	movs	r2, #60	; 0x3c
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	223d      	movs	r2, #61	; 0x3d
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2239      	movs	r2, #57	; 0x39
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2238      	movs	r2, #56	; 0x38
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_TIM_ConfigClockSource+0x18>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e0b7      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x188>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2238      	movs	r2, #56	; 0x38
 80028b0:	2101      	movs	r1, #1
 80028b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2239      	movs	r2, #57	; 0x39
 80028b8:	2102      	movs	r1, #2
 80028ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2277      	movs	r2, #119	; 0x77
 80028c8:	4393      	bics	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a55      	ldr	r2, [pc, #340]	; (8002a24 <HAL_TIM_ConfigClockSource+0x190>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	0192      	lsls	r2, r2, #6
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d040      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xd6>
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	0192      	lsls	r2, r2, #6
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d900      	bls.n	80028f2 <HAL_TIM_ConfigClockSource+0x5e>
 80028f0:	e088      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	0152      	lsls	r2, r2, #5
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d100      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
 80028fa:	e085      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	0152      	lsls	r2, r2, #5
 8002900:	4293      	cmp	r3, r2
 8002902:	d900      	bls.n	8002906 <HAL_TIM_ConfigClockSource+0x72>
 8002904:	e07e      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 8002906:	2b70      	cmp	r3, #112	; 0x70
 8002908:	d018      	beq.n	800293c <HAL_TIM_ConfigClockSource+0xa8>
 800290a:	d900      	bls.n	800290e <HAL_TIM_ConfigClockSource+0x7a>
 800290c:	e07a      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 800290e:	2b60      	cmp	r3, #96	; 0x60
 8002910:	d04f      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x11e>
 8002912:	d900      	bls.n	8002916 <HAL_TIM_ConfigClockSource+0x82>
 8002914:	e076      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 8002916:	2b50      	cmp	r3, #80	; 0x50
 8002918:	d03b      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0xfe>
 800291a:	d900      	bls.n	800291e <HAL_TIM_ConfigClockSource+0x8a>
 800291c:	e072      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d057      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x13e>
 8002922:	d900      	bls.n	8002926 <HAL_TIM_ConfigClockSource+0x92>
 8002924:	e06e      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 8002926:	2b30      	cmp	r3, #48	; 0x30
 8002928:	d063      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15e>
 800292a:	d86b      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d060      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15e>
 8002930:	d868      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d05d      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15e>
 8002936:	2b10      	cmp	r3, #16
 8002938:	d05b      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800293a:	e063      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f000 f944 	bl	8002bd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2277      	movs	r2, #119	; 0x77
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]
      break;
 8002968:	e04f      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f000 f92d 	bl	8002bd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	01c9      	lsls	r1, r1, #7
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]
      break;
 8002990:	e03b      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	001a      	movs	r2, r3
 80029a0:	f000 f8a0 	bl	8002ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2150      	movs	r1, #80	; 0x50
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f8fa 	bl	8002ba4 <TIM_ITRx_SetConfig>
      break;
 80029b0:	e02b      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	001a      	movs	r2, r3
 80029c0:	f000 f8be 	bl	8002b40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2160      	movs	r1, #96	; 0x60
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f8ea 	bl	8002ba4 <TIM_ITRx_SetConfig>
      break;
 80029d0:	e01b      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	001a      	movs	r2, r3
 80029e0:	f000 f880 	bl	8002ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 f8da 	bl	8002ba4 <TIM_ITRx_SetConfig>
      break;
 80029f0:	e00b      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0019      	movs	r1, r3
 80029fc:	0010      	movs	r0, r2
 80029fe:	f000 f8d1 	bl	8002ba4 <TIM_ITRx_SetConfig>
        break;
 8002a02:	e002      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	e000      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002a08:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2239      	movs	r2, #57	; 0x39
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2238      	movs	r2, #56	; 0x38
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b004      	add	sp, #16
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	ffff00ff 	.word	0xffff00ff

08002a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	05db      	lsls	r3, r3, #23
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d00b      	beq.n	8002a5a <TIM_Base_SetConfig+0x32>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <TIM_Base_SetConfig+0xac>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <TIM_Base_SetConfig+0x32>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <TIM_Base_SetConfig+0xb0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d003      	beq.n	8002a5a <TIM_Base_SetConfig+0x32>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a21      	ldr	r2, [pc, #132]	; (8002adc <TIM_Base_SetConfig+0xb4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d108      	bne.n	8002a6c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2270      	movs	r2, #112	; 0x70
 8002a5e:	4393      	bics	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	05db      	lsls	r3, r3, #23
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d00b      	beq.n	8002a8e <TIM_Base_SetConfig+0x66>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <TIM_Base_SetConfig+0xac>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <TIM_Base_SetConfig+0x66>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <TIM_Base_SetConfig+0xb0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0x66>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <TIM_Base_SetConfig+0xb4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d108      	bne.n	8002aa0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <TIM_Base_SetConfig+0xb8>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	4393      	bics	r3, r2
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	615a      	str	r2, [r3, #20]
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b004      	add	sp, #16
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40010800 	.word	0x40010800
 8002adc:	40011400 	.word	0x40011400
 8002ae0:	fffffcff 	.word	0xfffffcff

08002ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4393      	bics	r3, r2
 8002afe:	001a      	movs	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	22f0      	movs	r2, #240	; 0xf0
 8002b0e:	4393      	bics	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	220a      	movs	r2, #10
 8002b20:	4393      	bics	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	621a      	str	r2, [r3, #32]
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b006      	add	sp, #24
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	2210      	movs	r2, #16
 8002b52:	4393      	bics	r3, r2
 8002b54:	001a      	movs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <TIM_TI2_ConfigInputStage+0x60>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	031b      	lsls	r3, r3, #12
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	22a0      	movs	r2, #160	; 0xa0
 8002b7c:	4393      	bics	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	ffff0fff 	.word	0xffff0fff

08002ba4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2270      	movs	r2, #112	; 0x70
 8002bb8:	4393      	bics	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	609a      	str	r2, [r3, #8]
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b004      	add	sp, #16
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <TIM_ETR_SetConfig+0x3c>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	021a      	lsls	r2, r3, #8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	609a      	str	r2, [r3, #8]
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b006      	add	sp, #24
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	ffff00ff 	.word	0xffff00ff

08002c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2238      	movs	r2, #56	; 0x38
 8002c26:	5c9b      	ldrb	r3, [r3, r2]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e047      	b.n	8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2238      	movs	r2, #56	; 0x38
 8002c34:	2101      	movs	r1, #1
 8002c36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2239      	movs	r2, #57	; 0x39
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2270      	movs	r2, #112	; 0x70
 8002c54:	4393      	bics	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d00e      	beq.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10c      	bne.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	4393      	bics	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2239      	movs	r2, #57	; 0x39
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2238      	movs	r2, #56	; 0x38
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b004      	add	sp, #16
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40010800 	.word	0x40010800
 8002cd0:	40011400 	.word	0x40011400

08002cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e044      	b.n	8002d70 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2274      	movs	r2, #116	; 0x74
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7fd ffdf 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2224      	movs	r2, #36	; 0x24
 8002d02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2101      	movs	r1, #1
 8002d10:	438a      	bics	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 f830 	bl	8002d7c <UART_SetConfig>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e024      	b.n	8002d70 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 fae1 	bl	80032f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	490d      	ldr	r1, [pc, #52]	; (8002d78 <HAL_UART_Init+0xa4>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	212a      	movs	r1, #42	; 0x2a
 8002d52:	438a      	bics	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	430a      	orrs	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 fb79 	bl	8003460 <UART_CheckIdleState>
 8002d6e:	0003      	movs	r3, r0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	ffffb7ff 	.word	0xffffb7ff

08002d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	b5b0      	push	{r4, r5, r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d84:	231a      	movs	r3, #26
 8002d86:	2218      	movs	r2, #24
 8002d88:	4694      	mov	ip, r2
 8002d8a:	44bc      	add	ip, r7
 8002d8c:	4463      	add	r3, ip
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4ab0      	ldr	r2, [pc, #704]	; (8003074 <UART_SetConfig+0x2f8>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4aac      	ldr	r2, [pc, #688]	; (8003078 <UART_SetConfig+0x2fc>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4aa6      	ldr	r2, [pc, #664]	; (800307c <UART_SetConfig+0x300>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d004      	beq.n	8002df2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dee:	4313      	orrs	r3, r2
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4aa1      	ldr	r2, [pc, #644]	; (8003080 <UART_SetConfig+0x304>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a9d      	ldr	r2, [pc, #628]	; (8003084 <UART_SetConfig+0x308>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d136      	bne.n	8002e80 <UART_SetConfig+0x104>
 8002e12:	4b9d      	ldr	r3, [pc, #628]	; (8003088 <UART_SetConfig+0x30c>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	2203      	movs	r2, #3
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d020      	beq.n	8002e60 <UART_SetConfig+0xe4>
 8002e1e:	d827      	bhi.n	8002e70 <UART_SetConfig+0xf4>
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d00d      	beq.n	8002e40 <UART_SetConfig+0xc4>
 8002e24:	d824      	bhi.n	8002e70 <UART_SetConfig+0xf4>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <UART_SetConfig+0xb4>
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d010      	beq.n	8002e50 <UART_SetConfig+0xd4>
 8002e2e:	e01f      	b.n	8002e70 <UART_SetConfig+0xf4>
 8002e30:	231b      	movs	r3, #27
 8002e32:	2218      	movs	r2, #24
 8002e34:	4694      	mov	ip, r2
 8002e36:	44bc      	add	ip, r7
 8002e38:	4463      	add	r3, ip
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e0c5      	b.n	8002fcc <UART_SetConfig+0x250>
 8002e40:	231b      	movs	r3, #27
 8002e42:	2218      	movs	r2, #24
 8002e44:	4694      	mov	ip, r2
 8002e46:	44bc      	add	ip, r7
 8002e48:	4463      	add	r3, ip
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e0bd      	b.n	8002fcc <UART_SetConfig+0x250>
 8002e50:	231b      	movs	r3, #27
 8002e52:	2218      	movs	r2, #24
 8002e54:	4694      	mov	ip, r2
 8002e56:	44bc      	add	ip, r7
 8002e58:	4463      	add	r3, ip
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e0b5      	b.n	8002fcc <UART_SetConfig+0x250>
 8002e60:	231b      	movs	r3, #27
 8002e62:	2218      	movs	r2, #24
 8002e64:	4694      	mov	ip, r2
 8002e66:	44bc      	add	ip, r7
 8002e68:	4463      	add	r3, ip
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e0ad      	b.n	8002fcc <UART_SetConfig+0x250>
 8002e70:	231b      	movs	r3, #27
 8002e72:	2218      	movs	r2, #24
 8002e74:	4694      	mov	ip, r2
 8002e76:	44bc      	add	ip, r7
 8002e78:	4463      	add	r3, ip
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e0a5      	b.n	8002fcc <UART_SetConfig+0x250>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a81      	ldr	r2, [pc, #516]	; (800308c <UART_SetConfig+0x310>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d136      	bne.n	8002ef8 <UART_SetConfig+0x17c>
 8002e8a:	4b7f      	ldr	r3, [pc, #508]	; (8003088 <UART_SetConfig+0x30c>)
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8e:	220c      	movs	r2, #12
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d020      	beq.n	8002ed8 <UART_SetConfig+0x15c>
 8002e96:	d827      	bhi.n	8002ee8 <UART_SetConfig+0x16c>
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d00d      	beq.n	8002eb8 <UART_SetConfig+0x13c>
 8002e9c:	d824      	bhi.n	8002ee8 <UART_SetConfig+0x16c>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <UART_SetConfig+0x12c>
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d010      	beq.n	8002ec8 <UART_SetConfig+0x14c>
 8002ea6:	e01f      	b.n	8002ee8 <UART_SetConfig+0x16c>
 8002ea8:	231b      	movs	r3, #27
 8002eaa:	2218      	movs	r2, #24
 8002eac:	4694      	mov	ip, r2
 8002eae:	44bc      	add	ip, r7
 8002eb0:	4463      	add	r3, ip
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e089      	b.n	8002fcc <UART_SetConfig+0x250>
 8002eb8:	231b      	movs	r3, #27
 8002eba:	2218      	movs	r2, #24
 8002ebc:	4694      	mov	ip, r2
 8002ebe:	44bc      	add	ip, r7
 8002ec0:	4463      	add	r3, ip
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e081      	b.n	8002fcc <UART_SetConfig+0x250>
 8002ec8:	231b      	movs	r3, #27
 8002eca:	2218      	movs	r2, #24
 8002ecc:	4694      	mov	ip, r2
 8002ece:	44bc      	add	ip, r7
 8002ed0:	4463      	add	r3, ip
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e079      	b.n	8002fcc <UART_SetConfig+0x250>
 8002ed8:	231b      	movs	r3, #27
 8002eda:	2218      	movs	r2, #24
 8002edc:	4694      	mov	ip, r2
 8002ede:	44bc      	add	ip, r7
 8002ee0:	4463      	add	r3, ip
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	e071      	b.n	8002fcc <UART_SetConfig+0x250>
 8002ee8:	231b      	movs	r3, #27
 8002eea:	2218      	movs	r2, #24
 8002eec:	4694      	mov	ip, r2
 8002eee:	44bc      	add	ip, r7
 8002ef0:	4463      	add	r3, ip
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e069      	b.n	8002fcc <UART_SetConfig+0x250>
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a64      	ldr	r2, [pc, #400]	; (8003090 <UART_SetConfig+0x314>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d107      	bne.n	8002f12 <UART_SetConfig+0x196>
 8002f02:	231b      	movs	r3, #27
 8002f04:	2218      	movs	r2, #24
 8002f06:	4694      	mov	ip, r2
 8002f08:	44bc      	add	ip, r7
 8002f0a:	4463      	add	r3, ip
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e05c      	b.n	8002fcc <UART_SetConfig+0x250>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5f      	ldr	r2, [pc, #380]	; (8003094 <UART_SetConfig+0x318>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d107      	bne.n	8002f2c <UART_SetConfig+0x1b0>
 8002f1c:	231b      	movs	r3, #27
 8002f1e:	2218      	movs	r2, #24
 8002f20:	4694      	mov	ip, r2
 8002f22:	44bc      	add	ip, r7
 8002f24:	4463      	add	r3, ip
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e04f      	b.n	8002fcc <UART_SetConfig+0x250>
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a52      	ldr	r2, [pc, #328]	; (800307c <UART_SetConfig+0x300>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d143      	bne.n	8002fbe <UART_SetConfig+0x242>
 8002f36:	4b54      	ldr	r3, [pc, #336]	; (8003088 <UART_SetConfig+0x30c>)
 8002f38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f3a:	23c0      	movs	r3, #192	; 0xc0
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4013      	ands	r3, r2
 8002f40:	22c0      	movs	r2, #192	; 0xc0
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d02a      	beq.n	8002f9e <UART_SetConfig+0x222>
 8002f48:	22c0      	movs	r2, #192	; 0xc0
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d82e      	bhi.n	8002fae <UART_SetConfig+0x232>
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d012      	beq.n	8002f7e <UART_SetConfig+0x202>
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	0112      	lsls	r2, r2, #4
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d826      	bhi.n	8002fae <UART_SetConfig+0x232>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <UART_SetConfig+0x1f2>
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	00d2      	lsls	r2, r2, #3
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d010      	beq.n	8002f8e <UART_SetConfig+0x212>
 8002f6c:	e01f      	b.n	8002fae <UART_SetConfig+0x232>
 8002f6e:	231b      	movs	r3, #27
 8002f70:	2218      	movs	r2, #24
 8002f72:	4694      	mov	ip, r2
 8002f74:	44bc      	add	ip, r7
 8002f76:	4463      	add	r3, ip
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e026      	b.n	8002fcc <UART_SetConfig+0x250>
 8002f7e:	231b      	movs	r3, #27
 8002f80:	2218      	movs	r2, #24
 8002f82:	4694      	mov	ip, r2
 8002f84:	44bc      	add	ip, r7
 8002f86:	4463      	add	r3, ip
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	e01e      	b.n	8002fcc <UART_SetConfig+0x250>
 8002f8e:	231b      	movs	r3, #27
 8002f90:	2218      	movs	r2, #24
 8002f92:	4694      	mov	ip, r2
 8002f94:	44bc      	add	ip, r7
 8002f96:	4463      	add	r3, ip
 8002f98:	2204      	movs	r2, #4
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e016      	b.n	8002fcc <UART_SetConfig+0x250>
 8002f9e:	231b      	movs	r3, #27
 8002fa0:	2218      	movs	r2, #24
 8002fa2:	4694      	mov	ip, r2
 8002fa4:	44bc      	add	ip, r7
 8002fa6:	4463      	add	r3, ip
 8002fa8:	2208      	movs	r2, #8
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e00e      	b.n	8002fcc <UART_SetConfig+0x250>
 8002fae:	231b      	movs	r3, #27
 8002fb0:	2218      	movs	r2, #24
 8002fb2:	4694      	mov	ip, r2
 8002fb4:	44bc      	add	ip, r7
 8002fb6:	4463      	add	r3, ip
 8002fb8:	2210      	movs	r2, #16
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e006      	b.n	8002fcc <UART_SetConfig+0x250>
 8002fbe:	231b      	movs	r3, #27
 8002fc0:	2218      	movs	r2, #24
 8002fc2:	4694      	mov	ip, r2
 8002fc4:	44bc      	add	ip, r7
 8002fc6:	4463      	add	r3, ip
 8002fc8:	2210      	movs	r2, #16
 8002fca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <UART_SetConfig+0x300>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d000      	beq.n	8002fd8 <UART_SetConfig+0x25c>
 8002fd6:	e09e      	b.n	8003116 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fd8:	231b      	movs	r3, #27
 8002fda:	2218      	movs	r2, #24
 8002fdc:	4694      	mov	ip, r2
 8002fde:	44bc      	add	ip, r7
 8002fe0:	4463      	add	r3, ip
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d01d      	beq.n	8003024 <UART_SetConfig+0x2a8>
 8002fe8:	dc20      	bgt.n	800302c <UART_SetConfig+0x2b0>
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d015      	beq.n	800301a <UART_SetConfig+0x29e>
 8002fee:	dc1d      	bgt.n	800302c <UART_SetConfig+0x2b0>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <UART_SetConfig+0x27e>
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d005      	beq.n	8003004 <UART_SetConfig+0x288>
 8002ff8:	e018      	b.n	800302c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ffa:	f7ff fa99 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002ffe:	0003      	movs	r3, r0
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003002:	e01d      	b.n	8003040 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <UART_SetConfig+0x30c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2210      	movs	r2, #16
 800300a:	4013      	ands	r3, r2
 800300c:	d002      	beq.n	8003014 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800300e:	4b22      	ldr	r3, [pc, #136]	; (8003098 <UART_SetConfig+0x31c>)
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003012:	e015      	b.n	8003040 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8003014:	4b21      	ldr	r3, [pc, #132]	; (800309c <UART_SetConfig+0x320>)
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003018:	e012      	b.n	8003040 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301a:	f7ff f9d9 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800301e:	0003      	movs	r3, r0
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003022:	e00d      	b.n	8003040 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800302a:	e009      	b.n	8003040 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003030:	231a      	movs	r3, #26
 8003032:	2218      	movs	r2, #24
 8003034:	4694      	mov	ip, r2
 8003036:	44bc      	add	ip, r7
 8003038:	4463      	add	r3, ip
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
        break;
 800303e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d100      	bne.n	8003048 <UART_SetConfig+0x2cc>
 8003046:	e13c      	b.n	80032c2 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	0013      	movs	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	189b      	adds	r3, r3, r2
 8003052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003054:	429a      	cmp	r2, r3
 8003056:	d305      	bcc.n	8003064 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800305e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003060:	429a      	cmp	r2, r3
 8003062:	d91d      	bls.n	80030a0 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8003064:	231a      	movs	r3, #26
 8003066:	2218      	movs	r2, #24
 8003068:	4694      	mov	ip, r2
 800306a:	44bc      	add	ip, r7
 800306c:	4463      	add	r3, ip
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e126      	b.n	80032c2 <UART_SetConfig+0x546>
 8003074:	efff69f3 	.word	0xefff69f3
 8003078:	ffffcfff 	.word	0xffffcfff
 800307c:	40004800 	.word	0x40004800
 8003080:	fffff4ff 	.word	0xfffff4ff
 8003084:	40013800 	.word	0x40013800
 8003088:	40021000 	.word	0x40021000
 800308c:	40004400 	.word	0x40004400
 8003090:	40004c00 	.word	0x40004c00
 8003094:	40005000 	.word	0x40005000
 8003098:	003d0900 	.word	0x003d0900
 800309c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	6939      	ldr	r1, [r7, #16]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	000b      	movs	r3, r1
 80030ae:	0e1b      	lsrs	r3, r3, #24
 80030b0:	0010      	movs	r0, r2
 80030b2:	0205      	lsls	r5, r0, #8
 80030b4:	431d      	orrs	r5, r3
 80030b6:	000b      	movs	r3, r1
 80030b8:	021c      	lsls	r4, r3, #8
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68b8      	ldr	r0, [r7, #8]
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	1900      	adds	r0, r0, r4
 80030cc:	4169      	adcs	r1, r5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f7fd f8a0 	bl	8000220 <__aeabi_uldivmod>
 80030e0:	0002      	movs	r2, r0
 80030e2:	000b      	movs	r3, r1
 80030e4:	0013      	movs	r3, r2
 80030e6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ea:	23c0      	movs	r3, #192	; 0xc0
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d309      	bcc.n	8003106 <UART_SetConfig+0x38a>
 80030f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	035b      	lsls	r3, r3, #13
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d204      	bcs.n	8003106 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	e0dd      	b.n	80032c2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003106:	231a      	movs	r3, #26
 8003108:	2218      	movs	r2, #24
 800310a:	4694      	mov	ip, r2
 800310c:	44bc      	add	ip, r7
 800310e:	4463      	add	r3, ip
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e0d5      	b.n	80032c2 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	429a      	cmp	r2, r3
 8003120:	d000      	beq.n	8003124 <UART_SetConfig+0x3a8>
 8003122:	e074      	b.n	800320e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8003124:	231b      	movs	r3, #27
 8003126:	2218      	movs	r2, #24
 8003128:	4694      	mov	ip, r2
 800312a:	44bc      	add	ip, r7
 800312c:	4463      	add	r3, ip
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d822      	bhi.n	800317a <UART_SetConfig+0x3fe>
 8003134:	009a      	lsls	r2, r3, #2
 8003136:	4b6b      	ldr	r3, [pc, #428]	; (80032e4 <UART_SetConfig+0x568>)
 8003138:	18d3      	adds	r3, r2, r3
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313e:	f7ff f9f7 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8003142:	0003      	movs	r3, r0
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003146:	e022      	b.n	800318e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7ff fa08 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 800314c:	0003      	movs	r3, r0
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003150:	e01d      	b.n	800318e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003152:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <UART_SetConfig+0x56c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	4013      	ands	r3, r2
 800315a:	d002      	beq.n	8003162 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800315c:	4b63      	ldr	r3, [pc, #396]	; (80032ec <UART_SetConfig+0x570>)
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003160:	e015      	b.n	800318e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <UART_SetConfig+0x574>)
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003166:	e012      	b.n	800318e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003168:	f7ff f932 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800316c:	0003      	movs	r3, r0
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003170:	e00d      	b.n	800318e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003178:	e009      	b.n	800318e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800317e:	231a      	movs	r3, #26
 8003180:	2218      	movs	r2, #24
 8003182:	4694      	mov	ip, r2
 8003184:	44bc      	add	ip, r7
 8003186:	4463      	add	r3, ip
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]
        break;
 800318c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d100      	bne.n	8003196 <UART_SetConfig+0x41a>
 8003194:	e095      	b.n	80032c2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	005a      	lsls	r2, r3, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	18d2      	adds	r2, r2, r3
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	0019      	movs	r1, r3
 80031a8:	0010      	movs	r0, r2
 80031aa:	f7fc ffad 	bl	8000108 <__udivsi3>
 80031ae:	0003      	movs	r3, r0
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	d921      	bls.n	80031fe <UART_SetConfig+0x482>
 80031ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	025b      	lsls	r3, r3, #9
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d21c      	bcs.n	80031fe <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	200e      	movs	r0, #14
 80031ca:	2418      	movs	r4, #24
 80031cc:	193b      	adds	r3, r7, r4
 80031ce:	181b      	adds	r3, r3, r0
 80031d0:	210f      	movs	r1, #15
 80031d2:	438a      	bics	r2, r1
 80031d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2207      	movs	r2, #7
 80031de:	4013      	ands	r3, r2
 80031e0:	b299      	uxth	r1, r3
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	181b      	adds	r3, r3, r0
 80031e6:	193a      	adds	r2, r7, r4
 80031e8:	1812      	adds	r2, r2, r0
 80031ea:	8812      	ldrh	r2, [r2, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	193a      	adds	r2, r7, r4
 80031f6:	1812      	adds	r2, r2, r0
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	e061      	b.n	80032c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80031fe:	231a      	movs	r3, #26
 8003200:	2218      	movs	r2, #24
 8003202:	4694      	mov	ip, r2
 8003204:	44bc      	add	ip, r7
 8003206:	4463      	add	r3, ip
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e059      	b.n	80032c2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800320e:	231b      	movs	r3, #27
 8003210:	2218      	movs	r2, #24
 8003212:	4694      	mov	ip, r2
 8003214:	44bc      	add	ip, r7
 8003216:	4463      	add	r3, ip
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b08      	cmp	r3, #8
 800321c:	d822      	bhi.n	8003264 <UART_SetConfig+0x4e8>
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <UART_SetConfig+0x578>)
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003228:	f7ff f982 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 800322c:	0003      	movs	r3, r0
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003230:	e022      	b.n	8003278 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003232:	f7ff f993 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 8003236:	0003      	movs	r3, r0
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800323a:	e01d      	b.n	8003278 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <UART_SetConfig+0x56c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2210      	movs	r2, #16
 8003242:	4013      	ands	r3, r2
 8003244:	d002      	beq.n	800324c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <UART_SetConfig+0x570>)
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800324a:	e015      	b.n	8003278 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <UART_SetConfig+0x574>)
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003250:	e012      	b.n	8003278 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003252:	f7ff f8bd 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8003256:	0003      	movs	r3, r0
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800325a:	e00d      	b.n	8003278 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003262:	e009      	b.n	8003278 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003268:	231a      	movs	r3, #26
 800326a:	2218      	movs	r2, #24
 800326c:	4694      	mov	ip, r2
 800326e:	44bc      	add	ip, r7
 8003270:	4463      	add	r3, ip
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
        break;
 8003276:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d021      	beq.n	80032c2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	085a      	lsrs	r2, r3, #1
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	18d2      	adds	r2, r2, r3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0019      	movs	r1, r3
 800328e:	0010      	movs	r0, r2
 8003290:	f7fc ff3a 	bl	8000108 <__udivsi3>
 8003294:	0003      	movs	r3, r0
 8003296:	b29b      	uxth	r3, r3
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2b0f      	cmp	r3, #15
 800329e:	d909      	bls.n	80032b4 <UART_SetConfig+0x538>
 80032a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	025b      	lsls	r3, r3, #9
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d204      	bcs.n	80032b4 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	e006      	b.n	80032c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80032b4:	231a      	movs	r3, #26
 80032b6:	2218      	movs	r2, #24
 80032b8:	4694      	mov	ip, r2
 80032ba:	44bc      	add	ip, r7
 80032bc:	4463      	add	r3, ip
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2200      	movs	r2, #0
 80032c6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2200      	movs	r2, #0
 80032cc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032ce:	231a      	movs	r3, #26
 80032d0:	2218      	movs	r2, #24
 80032d2:	4694      	mov	ip, r2
 80032d4:	44bc      	add	ip, r7
 80032d6:	4463      	add	r3, ip
 80032d8:	781b      	ldrb	r3, [r3, #0]
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b00e      	add	sp, #56	; 0x38
 80032e0:	bdb0      	pop	{r4, r5, r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	08003680 	.word	0x08003680
 80032e8:	40021000 	.word	0x40021000
 80032ec:	003d0900 	.word	0x003d0900
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	080036a4 	.word	0x080036a4

080032f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	2201      	movs	r2, #1
 8003306:	4013      	ands	r3, r2
 8003308:	d00b      	beq.n	8003322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a4a      	ldr	r2, [pc, #296]	; (800343c <UART_AdvFeatureConfig+0x144>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2202      	movs	r2, #2
 8003328:	4013      	ands	r3, r2
 800332a:	d00b      	beq.n	8003344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4a43      	ldr	r2, [pc, #268]	; (8003440 <UART_AdvFeatureConfig+0x148>)
 8003334:	4013      	ands	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2204      	movs	r2, #4
 800334a:	4013      	ands	r3, r2
 800334c:	d00b      	beq.n	8003366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a3b      	ldr	r2, [pc, #236]	; (8003444 <UART_AdvFeatureConfig+0x14c>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2208      	movs	r2, #8
 800336c:	4013      	ands	r3, r2
 800336e:	d00b      	beq.n	8003388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a34      	ldr	r2, [pc, #208]	; (8003448 <UART_AdvFeatureConfig+0x150>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2210      	movs	r2, #16
 800338e:	4013      	ands	r3, r2
 8003390:	d00b      	beq.n	80033aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a2c      	ldr	r2, [pc, #176]	; (800344c <UART_AdvFeatureConfig+0x154>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2220      	movs	r2, #32
 80033b0:	4013      	ands	r3, r2
 80033b2:	d00b      	beq.n	80033cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4a25      	ldr	r2, [pc, #148]	; (8003450 <UART_AdvFeatureConfig+0x158>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2240      	movs	r2, #64	; 0x40
 80033d2:	4013      	ands	r3, r2
 80033d4:	d01d      	beq.n	8003412 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <UART_AdvFeatureConfig+0x15c>)
 80033de:	4013      	ands	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	035b      	lsls	r3, r3, #13
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d10b      	bne.n	8003412 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <UART_AdvFeatureConfig+0x160>)
 8003402:	4013      	ands	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2280      	movs	r2, #128	; 0x80
 8003418:	4013      	ands	r3, r2
 800341a:	d00b      	beq.n	8003434 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4a0e      	ldr	r2, [pc, #56]	; (800345c <UART_AdvFeatureConfig+0x164>)
 8003424:	4013      	ands	r3, r2
 8003426:	0019      	movs	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}
 800343c:	fffdffff 	.word	0xfffdffff
 8003440:	fffeffff 	.word	0xfffeffff
 8003444:	fffbffff 	.word	0xfffbffff
 8003448:	ffff7fff 	.word	0xffff7fff
 800344c:	ffffefff 	.word	0xffffefff
 8003450:	ffffdfff 	.word	0xffffdfff
 8003454:	ffefffff 	.word	0xffefffff
 8003458:	ff9fffff 	.word	0xff9fffff
 800345c:	fff7ffff 	.word	0xfff7ffff

08003460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af02      	add	r7, sp, #8
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	2100      	movs	r1, #0
 800346e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003470:	f7fd fd48 	bl	8000f04 <HAL_GetTick>
 8003474:	0003      	movs	r3, r0
 8003476:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2208      	movs	r2, #8
 8003480:	4013      	ands	r3, r2
 8003482:	2b08      	cmp	r3, #8
 8003484:	d10c      	bne.n	80034a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	0391      	lsls	r1, r2, #14
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <UART_CheckIdleState+0x8c>)
 8003490:	9200      	str	r2, [sp, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	f000 f82c 	bl	80034f0 <UART_WaitOnFlagUntilTimeout>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e021      	b.n	80034e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2204      	movs	r2, #4
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d10c      	bne.n	80034c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	03d1      	lsls	r1, r2, #15
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <UART_CheckIdleState+0x8c>)
 80034b8:	9200      	str	r2, [sp, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f000 f818 	bl	80034f0 <UART_WaitOnFlagUntilTimeout>
 80034c0:	1e03      	subs	r3, r0, #0
 80034c2:	d001      	beq.n	80034c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e00d      	b.n	80034e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2274      	movs	r2, #116	; 0x74
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b004      	add	sp, #16
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	01ffffff 	.word	0x01ffffff

080034f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	1dfb      	adds	r3, r7, #7
 80034fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003500:	e05e      	b.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	3301      	adds	r3, #1
 8003506:	d05b      	beq.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fd fcfc 	bl	8000f04 <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11b      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	492f      	ldr	r1, [pc, #188]	; (80035e8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800352a:	400a      	ands	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2101      	movs	r1, #1
 800353a:	438a      	bics	r2, r1
 800353c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2274      	movs	r2, #116	; 0x74
 800354e:	2100      	movs	r1, #0
 8003550:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e044      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2204      	movs	r2, #4
 800355e:	4013      	ands	r3, r2
 8003560:	d02e      	beq.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	401a      	ands	r2, r3
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	429a      	cmp	r2, r3
 8003574:	d124      	bne.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4917      	ldr	r1, [pc, #92]	; (80035e8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800358c:	400a      	ands	r2, r1
 800358e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	438a      	bics	r2, r1
 800359e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	2120      	movs	r1, #32
 80035b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2274      	movs	r2, #116	; 0x74
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e00f      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	425a      	negs	r2, r3
 80035d0:	4153      	adcs	r3, r2
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	001a      	movs	r2, r3
 80035d6:	1dfb      	adds	r3, r7, #7
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d091      	beq.n	8003502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b004      	add	sp, #16
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	fffffe5f 	.word	0xfffffe5f

080035ec <__libc_init_array>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	2600      	movs	r6, #0
 80035f0:	4d0c      	ldr	r5, [pc, #48]	; (8003624 <__libc_init_array+0x38>)
 80035f2:	4c0d      	ldr	r4, [pc, #52]	; (8003628 <__libc_init_array+0x3c>)
 80035f4:	1b64      	subs	r4, r4, r5
 80035f6:	10a4      	asrs	r4, r4, #2
 80035f8:	42a6      	cmp	r6, r4
 80035fa:	d109      	bne.n	8003610 <__libc_init_array+0x24>
 80035fc:	2600      	movs	r6, #0
 80035fe:	f000 f821 	bl	8003644 <_init>
 8003602:	4d0a      	ldr	r5, [pc, #40]	; (800362c <__libc_init_array+0x40>)
 8003604:	4c0a      	ldr	r4, [pc, #40]	; (8003630 <__libc_init_array+0x44>)
 8003606:	1b64      	subs	r4, r4, r5
 8003608:	10a4      	asrs	r4, r4, #2
 800360a:	42a6      	cmp	r6, r4
 800360c:	d105      	bne.n	800361a <__libc_init_array+0x2e>
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	00b3      	lsls	r3, r6, #2
 8003612:	58eb      	ldr	r3, [r5, r3]
 8003614:	4798      	blx	r3
 8003616:	3601      	adds	r6, #1
 8003618:	e7ee      	b.n	80035f8 <__libc_init_array+0xc>
 800361a:	00b3      	lsls	r3, r6, #2
 800361c:	58eb      	ldr	r3, [r5, r3]
 800361e:	4798      	blx	r3
 8003620:	3601      	adds	r6, #1
 8003622:	e7f2      	b.n	800360a <__libc_init_array+0x1e>
 8003624:	080036d0 	.word	0x080036d0
 8003628:	080036d0 	.word	0x080036d0
 800362c:	080036d0 	.word	0x080036d0
 8003630:	080036d4 	.word	0x080036d4

08003634 <memset>:
 8003634:	0003      	movs	r3, r0
 8003636:	1882      	adds	r2, r0, r2
 8003638:	4293      	cmp	r3, r2
 800363a:	d100      	bne.n	800363e <memset+0xa>
 800363c:	4770      	bx	lr
 800363e:	7019      	strb	r1, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	e7f9      	b.n	8003638 <memset+0x4>

08003644 <_init>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr

08003650 <_fini>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr
