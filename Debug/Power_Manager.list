
Power_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e1c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009edc  08009edc  0000aedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a330  0800a330  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a330  0800a330  0000b330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a338  0800a338  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a338  0800a338  0000b338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a33c  0800a33c  0000b33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a340  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000060  0800a3a0  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0800a3a0  0000c594  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138f9  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a33  00000000  00000000  0001f981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  000233b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e90  00000000  00000000  000246b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001674c  00000000  00000000  00025540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4c8  00000000  00000000  0003bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007df95  00000000  00000000  00056154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d40e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a7c  00000000  00000000  000d412c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d8ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009ec4 	.word	0x08009ec4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08009ec4 	.word	0x08009ec4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0008      	movs	r0, r1
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fc87 	bl	8000b50 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fc07 	bl	8000a60 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fc79 	bl	8000b50 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fc6f 	bl	8000b50 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fc15 	bl	8000ab0 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fc0b 	bl	8000ab0 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			@ (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	0008      	movs	r0, r1
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	@ (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	@ (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	ffffff65 	.word	0xffffff65
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f84c 	bl	8000374 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			@ (mov r8, r8)

080002e8 <__aeabi_lmul>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	46ce      	mov	lr, r9
 80002ec:	4699      	mov	r9, r3
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	469c      	mov	ip, r3
 80002f2:	0413      	lsls	r3, r2, #16
 80002f4:	4647      	mov	r7, r8
 80002f6:	0c1b      	lsrs	r3, r3, #16
 80002f8:	001d      	movs	r5, r3
 80002fa:	000e      	movs	r6, r1
 80002fc:	4661      	mov	r1, ip
 80002fe:	0404      	lsls	r4, r0, #16
 8000300:	0c24      	lsrs	r4, r4, #16
 8000302:	b580      	push	{r7, lr}
 8000304:	0007      	movs	r7, r0
 8000306:	0c10      	lsrs	r0, r2, #16
 8000308:	434b      	muls	r3, r1
 800030a:	4365      	muls	r5, r4
 800030c:	4341      	muls	r1, r0
 800030e:	4360      	muls	r0, r4
 8000310:	0c2c      	lsrs	r4, r5, #16
 8000312:	18c0      	adds	r0, r0, r3
 8000314:	1824      	adds	r4, r4, r0
 8000316:	468c      	mov	ip, r1
 8000318:	42a3      	cmp	r3, r4
 800031a:	d903      	bls.n	8000324 <__aeabi_lmul+0x3c>
 800031c:	2380      	movs	r3, #128	@ 0x80
 800031e:	025b      	lsls	r3, r3, #9
 8000320:	4698      	mov	r8, r3
 8000322:	44c4      	add	ip, r8
 8000324:	4649      	mov	r1, r9
 8000326:	4379      	muls	r1, r7
 8000328:	4356      	muls	r6, r2
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	042d      	lsls	r5, r5, #16
 800032e:	0c2d      	lsrs	r5, r5, #16
 8000330:	1989      	adds	r1, r1, r6
 8000332:	4463      	add	r3, ip
 8000334:	0424      	lsls	r4, r4, #16
 8000336:	1960      	adds	r0, r4, r5
 8000338:	18c9      	adds	r1, r1, r3
 800033a:	bcc0      	pop	{r6, r7}
 800033c:	46b9      	mov	r9, r7
 800033e:	46b0      	mov	r8, r6
 8000340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000342:	46c0      	nop			@ (mov r8, r8)

08000344 <__aeabi_f2uiz>:
 8000344:	219e      	movs	r1, #158	@ 0x9e
 8000346:	b510      	push	{r4, lr}
 8000348:	05c9      	lsls	r1, r1, #23
 800034a:	1c04      	adds	r4, r0, #0
 800034c:	f7ff ffa2 	bl	8000294 <__aeabi_fcmpge>
 8000350:	2800      	cmp	r0, #0
 8000352:	d103      	bne.n	800035c <__aeabi_f2uiz+0x18>
 8000354:	1c20      	adds	r0, r4, #0
 8000356:	f000 ff2b 	bl	80011b0 <__aeabi_f2iz>
 800035a:	bd10      	pop	{r4, pc}
 800035c:	219e      	movs	r1, #158	@ 0x9e
 800035e:	1c20      	adds	r0, r4, #0
 8000360:	05c9      	lsls	r1, r1, #23
 8000362:	f000 fd81 	bl	8000e68 <__aeabi_fsub>
 8000366:	f000 ff23 	bl	80011b0 <__aeabi_f2iz>
 800036a:	2380      	movs	r3, #128	@ 0x80
 800036c:	061b      	lsls	r3, r3, #24
 800036e:	469c      	mov	ip, r3
 8000370:	4460      	add	r0, ip
 8000372:	e7f2      	b.n	800035a <__aeabi_f2uiz+0x16>

08000374 <__udivmoddi4>:
 8000374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000376:	4657      	mov	r7, sl
 8000378:	464e      	mov	r6, r9
 800037a:	4645      	mov	r5, r8
 800037c:	46de      	mov	lr, fp
 800037e:	b5e0      	push	{r5, r6, r7, lr}
 8000380:	0004      	movs	r4, r0
 8000382:	000d      	movs	r5, r1
 8000384:	4692      	mov	sl, r2
 8000386:	4699      	mov	r9, r3
 8000388:	b083      	sub	sp, #12
 800038a:	428b      	cmp	r3, r1
 800038c:	d830      	bhi.n	80003f0 <__udivmoddi4+0x7c>
 800038e:	d02d      	beq.n	80003ec <__udivmoddi4+0x78>
 8000390:	4649      	mov	r1, r9
 8000392:	4650      	mov	r0, sl
 8000394:	f002 fdb4 	bl	8002f00 <__clzdi2>
 8000398:	0029      	movs	r1, r5
 800039a:	0006      	movs	r6, r0
 800039c:	0020      	movs	r0, r4
 800039e:	f002 fdaf 	bl	8002f00 <__clzdi2>
 80003a2:	1a33      	subs	r3, r6, r0
 80003a4:	4698      	mov	r8, r3
 80003a6:	3b20      	subs	r3, #32
 80003a8:	d434      	bmi.n	8000414 <__udivmoddi4+0xa0>
 80003aa:	469b      	mov	fp, r3
 80003ac:	4653      	mov	r3, sl
 80003ae:	465a      	mov	r2, fp
 80003b0:	4093      	lsls	r3, r2
 80003b2:	4642      	mov	r2, r8
 80003b4:	001f      	movs	r7, r3
 80003b6:	4653      	mov	r3, sl
 80003b8:	4093      	lsls	r3, r2
 80003ba:	001e      	movs	r6, r3
 80003bc:	42af      	cmp	r7, r5
 80003be:	d83b      	bhi.n	8000438 <__udivmoddi4+0xc4>
 80003c0:	42af      	cmp	r7, r5
 80003c2:	d100      	bne.n	80003c6 <__udivmoddi4+0x52>
 80003c4:	e079      	b.n	80004ba <__udivmoddi4+0x146>
 80003c6:	465b      	mov	r3, fp
 80003c8:	1ba4      	subs	r4, r4, r6
 80003ca:	41bd      	sbcs	r5, r7
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	da00      	bge.n	80003d2 <__udivmoddi4+0x5e>
 80003d0:	e076      	b.n	80004c0 <__udivmoddi4+0x14c>
 80003d2:	2200      	movs	r2, #0
 80003d4:	2300      	movs	r3, #0
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	2301      	movs	r3, #1
 80003dc:	465a      	mov	r2, fp
 80003de:	4093      	lsls	r3, r2
 80003e0:	9301      	str	r3, [sp, #4]
 80003e2:	2301      	movs	r3, #1
 80003e4:	4642      	mov	r2, r8
 80003e6:	4093      	lsls	r3, r2
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	e029      	b.n	8000440 <__udivmoddi4+0xcc>
 80003ec:	4282      	cmp	r2, r0
 80003ee:	d9cf      	bls.n	8000390 <__udivmoddi4+0x1c>
 80003f0:	2200      	movs	r2, #0
 80003f2:	2300      	movs	r3, #0
 80003f4:	9200      	str	r2, [sp, #0]
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <__udivmoddi4+0x8e>
 80003fe:	601c      	str	r4, [r3, #0]
 8000400:	605d      	str	r5, [r3, #4]
 8000402:	9800      	ldr	r0, [sp, #0]
 8000404:	9901      	ldr	r1, [sp, #4]
 8000406:	b003      	add	sp, #12
 8000408:	bcf0      	pop	{r4, r5, r6, r7}
 800040a:	46bb      	mov	fp, r7
 800040c:	46b2      	mov	sl, r6
 800040e:	46a9      	mov	r9, r5
 8000410:	46a0      	mov	r8, r4
 8000412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000414:	4642      	mov	r2, r8
 8000416:	469b      	mov	fp, r3
 8000418:	2320      	movs	r3, #32
 800041a:	1a9b      	subs	r3, r3, r2
 800041c:	4652      	mov	r2, sl
 800041e:	40da      	lsrs	r2, r3
 8000420:	4641      	mov	r1, r8
 8000422:	0013      	movs	r3, r2
 8000424:	464a      	mov	r2, r9
 8000426:	408a      	lsls	r2, r1
 8000428:	0017      	movs	r7, r2
 800042a:	4642      	mov	r2, r8
 800042c:	431f      	orrs	r7, r3
 800042e:	4653      	mov	r3, sl
 8000430:	4093      	lsls	r3, r2
 8000432:	001e      	movs	r6, r3
 8000434:	42af      	cmp	r7, r5
 8000436:	d9c3      	bls.n	80003c0 <__udivmoddi4+0x4c>
 8000438:	2200      	movs	r2, #0
 800043a:	2300      	movs	r3, #0
 800043c:	9200      	str	r2, [sp, #0]
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	4643      	mov	r3, r8
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0d8      	beq.n	80003f8 <__udivmoddi4+0x84>
 8000446:	07fb      	lsls	r3, r7, #31
 8000448:	0872      	lsrs	r2, r6, #1
 800044a:	431a      	orrs	r2, r3
 800044c:	4646      	mov	r6, r8
 800044e:	087b      	lsrs	r3, r7, #1
 8000450:	e00e      	b.n	8000470 <__udivmoddi4+0xfc>
 8000452:	42ab      	cmp	r3, r5
 8000454:	d101      	bne.n	800045a <__udivmoddi4+0xe6>
 8000456:	42a2      	cmp	r2, r4
 8000458:	d80c      	bhi.n	8000474 <__udivmoddi4+0x100>
 800045a:	1aa4      	subs	r4, r4, r2
 800045c:	419d      	sbcs	r5, r3
 800045e:	2001      	movs	r0, #1
 8000460:	1924      	adds	r4, r4, r4
 8000462:	416d      	adcs	r5, r5
 8000464:	2100      	movs	r1, #0
 8000466:	3e01      	subs	r6, #1
 8000468:	1824      	adds	r4, r4, r0
 800046a:	414d      	adcs	r5, r1
 800046c:	2e00      	cmp	r6, #0
 800046e:	d006      	beq.n	800047e <__udivmoddi4+0x10a>
 8000470:	42ab      	cmp	r3, r5
 8000472:	d9ee      	bls.n	8000452 <__udivmoddi4+0xde>
 8000474:	3e01      	subs	r6, #1
 8000476:	1924      	adds	r4, r4, r4
 8000478:	416d      	adcs	r5, r5
 800047a:	2e00      	cmp	r6, #0
 800047c:	d1f8      	bne.n	8000470 <__udivmoddi4+0xfc>
 800047e:	9800      	ldr	r0, [sp, #0]
 8000480:	9901      	ldr	r1, [sp, #4]
 8000482:	465b      	mov	r3, fp
 8000484:	1900      	adds	r0, r0, r4
 8000486:	4169      	adcs	r1, r5
 8000488:	2b00      	cmp	r3, #0
 800048a:	db24      	blt.n	80004d6 <__udivmoddi4+0x162>
 800048c:	002b      	movs	r3, r5
 800048e:	465a      	mov	r2, fp
 8000490:	4644      	mov	r4, r8
 8000492:	40d3      	lsrs	r3, r2
 8000494:	002a      	movs	r2, r5
 8000496:	40e2      	lsrs	r2, r4
 8000498:	001c      	movs	r4, r3
 800049a:	465b      	mov	r3, fp
 800049c:	0015      	movs	r5, r2
 800049e:	2b00      	cmp	r3, #0
 80004a0:	db2a      	blt.n	80004f8 <__udivmoddi4+0x184>
 80004a2:	0026      	movs	r6, r4
 80004a4:	409e      	lsls	r6, r3
 80004a6:	0033      	movs	r3, r6
 80004a8:	0026      	movs	r6, r4
 80004aa:	4647      	mov	r7, r8
 80004ac:	40be      	lsls	r6, r7
 80004ae:	0032      	movs	r2, r6
 80004b0:	1a80      	subs	r0, r0, r2
 80004b2:	4199      	sbcs	r1, r3
 80004b4:	9000      	str	r0, [sp, #0]
 80004b6:	9101      	str	r1, [sp, #4]
 80004b8:	e79e      	b.n	80003f8 <__udivmoddi4+0x84>
 80004ba:	42a3      	cmp	r3, r4
 80004bc:	d8bc      	bhi.n	8000438 <__udivmoddi4+0xc4>
 80004be:	e782      	b.n	80003c6 <__udivmoddi4+0x52>
 80004c0:	4642      	mov	r2, r8
 80004c2:	2320      	movs	r3, #32
 80004c4:	2100      	movs	r1, #0
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	2200      	movs	r2, #0
 80004ca:	9100      	str	r1, [sp, #0]
 80004cc:	9201      	str	r2, [sp, #4]
 80004ce:	2201      	movs	r2, #1
 80004d0:	40da      	lsrs	r2, r3
 80004d2:	9201      	str	r2, [sp, #4]
 80004d4:	e785      	b.n	80003e2 <__udivmoddi4+0x6e>
 80004d6:	4642      	mov	r2, r8
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	002a      	movs	r2, r5
 80004de:	4646      	mov	r6, r8
 80004e0:	409a      	lsls	r2, r3
 80004e2:	0023      	movs	r3, r4
 80004e4:	40f3      	lsrs	r3, r6
 80004e6:	4644      	mov	r4, r8
 80004e8:	4313      	orrs	r3, r2
 80004ea:	002a      	movs	r2, r5
 80004ec:	40e2      	lsrs	r2, r4
 80004ee:	001c      	movs	r4, r3
 80004f0:	465b      	mov	r3, fp
 80004f2:	0015      	movs	r5, r2
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	dad4      	bge.n	80004a2 <__udivmoddi4+0x12e>
 80004f8:	4642      	mov	r2, r8
 80004fa:	002f      	movs	r7, r5
 80004fc:	2320      	movs	r3, #32
 80004fe:	0026      	movs	r6, r4
 8000500:	4097      	lsls	r7, r2
 8000502:	1a9b      	subs	r3, r3, r2
 8000504:	40de      	lsrs	r6, r3
 8000506:	003b      	movs	r3, r7
 8000508:	4333      	orrs	r3, r6
 800050a:	e7cd      	b.n	80004a8 <__udivmoddi4+0x134>

0800050c <__aeabi_fadd>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	46ce      	mov	lr, r9
 8000510:	4647      	mov	r7, r8
 8000512:	0243      	lsls	r3, r0, #9
 8000514:	0a5a      	lsrs	r2, r3, #9
 8000516:	024e      	lsls	r6, r1, #9
 8000518:	0045      	lsls	r5, r0, #1
 800051a:	0fc4      	lsrs	r4, r0, #31
 800051c:	0048      	lsls	r0, r1, #1
 800051e:	4691      	mov	r9, r2
 8000520:	0e2d      	lsrs	r5, r5, #24
 8000522:	0a72      	lsrs	r2, r6, #9
 8000524:	0e00      	lsrs	r0, r0, #24
 8000526:	4694      	mov	ip, r2
 8000528:	b580      	push	{r7, lr}
 800052a:	099b      	lsrs	r3, r3, #6
 800052c:	0fc9      	lsrs	r1, r1, #31
 800052e:	09b6      	lsrs	r6, r6, #6
 8000530:	1a2a      	subs	r2, r5, r0
 8000532:	428c      	cmp	r4, r1
 8000534:	d021      	beq.n	800057a <__aeabi_fadd+0x6e>
 8000536:	2a00      	cmp	r2, #0
 8000538:	dd0d      	ble.n	8000556 <__aeabi_fadd+0x4a>
 800053a:	2800      	cmp	r0, #0
 800053c:	d12d      	bne.n	800059a <__aeabi_fadd+0x8e>
 800053e:	2e00      	cmp	r6, #0
 8000540:	d100      	bne.n	8000544 <__aeabi_fadd+0x38>
 8000542:	e08d      	b.n	8000660 <__aeabi_fadd+0x154>
 8000544:	1e51      	subs	r1, r2, #1
 8000546:	2a01      	cmp	r2, #1
 8000548:	d100      	bne.n	800054c <__aeabi_fadd+0x40>
 800054a:	e11d      	b.n	8000788 <__aeabi_fadd+0x27c>
 800054c:	2aff      	cmp	r2, #255	@ 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x46>
 8000550:	e0ab      	b.n	80006aa <__aeabi_fadd+0x19e>
 8000552:	000a      	movs	r2, r1
 8000554:	e027      	b.n	80005a6 <__aeabi_fadd+0x9a>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d04d      	beq.n	80005f6 <__aeabi_fadd+0xea>
 800055a:	1b42      	subs	r2, r0, r5
 800055c:	2d00      	cmp	r5, #0
 800055e:	d000      	beq.n	8000562 <__aeabi_fadd+0x56>
 8000560:	e0cc      	b.n	80006fc <__aeabi_fadd+0x1f0>
 8000562:	2b00      	cmp	r3, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x5c>
 8000566:	e079      	b.n	800065c <__aeabi_fadd+0x150>
 8000568:	1e54      	subs	r4, r2, #1
 800056a:	2a01      	cmp	r2, #1
 800056c:	d100      	bne.n	8000570 <__aeabi_fadd+0x64>
 800056e:	e128      	b.n	80007c2 <__aeabi_fadd+0x2b6>
 8000570:	2aff      	cmp	r2, #255	@ 0xff
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x6a>
 8000574:	e097      	b.n	80006a6 <__aeabi_fadd+0x19a>
 8000576:	0022      	movs	r2, r4
 8000578:	e0c5      	b.n	8000706 <__aeabi_fadd+0x1fa>
 800057a:	2a00      	cmp	r2, #0
 800057c:	dc00      	bgt.n	8000580 <__aeabi_fadd+0x74>
 800057e:	e096      	b.n	80006ae <__aeabi_fadd+0x1a2>
 8000580:	2800      	cmp	r0, #0
 8000582:	d04f      	beq.n	8000624 <__aeabi_fadd+0x118>
 8000584:	2dff      	cmp	r5, #255	@ 0xff
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0x7e>
 8000588:	e08f      	b.n	80006aa <__aeabi_fadd+0x19e>
 800058a:	2180      	movs	r1, #128	@ 0x80
 800058c:	04c9      	lsls	r1, r1, #19
 800058e:	430e      	orrs	r6, r1
 8000590:	2a1b      	cmp	r2, #27
 8000592:	dd51      	ble.n	8000638 <__aeabi_fadd+0x12c>
 8000594:	002a      	movs	r2, r5
 8000596:	3301      	adds	r3, #1
 8000598:	e018      	b.n	80005cc <__aeabi_fadd+0xc0>
 800059a:	2dff      	cmp	r5, #255	@ 0xff
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0x94>
 800059e:	e084      	b.n	80006aa <__aeabi_fadd+0x19e>
 80005a0:	2180      	movs	r1, #128	@ 0x80
 80005a2:	04c9      	lsls	r1, r1, #19
 80005a4:	430e      	orrs	r6, r1
 80005a6:	2101      	movs	r1, #1
 80005a8:	2a1b      	cmp	r2, #27
 80005aa:	dc08      	bgt.n	80005be <__aeabi_fadd+0xb2>
 80005ac:	0031      	movs	r1, r6
 80005ae:	2020      	movs	r0, #32
 80005b0:	40d1      	lsrs	r1, r2
 80005b2:	1a82      	subs	r2, r0, r2
 80005b4:	4096      	lsls	r6, r2
 80005b6:	0032      	movs	r2, r6
 80005b8:	1e50      	subs	r0, r2, #1
 80005ba:	4182      	sbcs	r2, r0
 80005bc:	4311      	orrs	r1, r2
 80005be:	1a5b      	subs	r3, r3, r1
 80005c0:	015a      	lsls	r2, r3, #5
 80005c2:	d459      	bmi.n	8000678 <__aeabi_fadd+0x16c>
 80005c4:	2107      	movs	r1, #7
 80005c6:	002a      	movs	r2, r5
 80005c8:	4019      	ands	r1, r3
 80005ca:	d049      	beq.n	8000660 <__aeabi_fadd+0x154>
 80005cc:	210f      	movs	r1, #15
 80005ce:	4019      	ands	r1, r3
 80005d0:	2904      	cmp	r1, #4
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fadd+0xca>
 80005d4:	3304      	adds	r3, #4
 80005d6:	0159      	lsls	r1, r3, #5
 80005d8:	d542      	bpl.n	8000660 <__aeabi_fadd+0x154>
 80005da:	1c50      	adds	r0, r2, #1
 80005dc:	2afe      	cmp	r2, #254	@ 0xfe
 80005de:	d03a      	beq.n	8000656 <__aeabi_fadd+0x14a>
 80005e0:	019b      	lsls	r3, r3, #6
 80005e2:	b2c0      	uxtb	r0, r0
 80005e4:	0a5b      	lsrs	r3, r3, #9
 80005e6:	05c0      	lsls	r0, r0, #23
 80005e8:	4318      	orrs	r0, r3
 80005ea:	07e4      	lsls	r4, r4, #31
 80005ec:	4320      	orrs	r0, r4
 80005ee:	bcc0      	pop	{r6, r7}
 80005f0:	46b9      	mov	r9, r7
 80005f2:	46b0      	mov	r8, r6
 80005f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005f6:	20fe      	movs	r0, #254	@ 0xfe
 80005f8:	4680      	mov	r8, r0
 80005fa:	1c6f      	adds	r7, r5, #1
 80005fc:	0038      	movs	r0, r7
 80005fe:	4647      	mov	r7, r8
 8000600:	4207      	tst	r7, r0
 8000602:	d000      	beq.n	8000606 <__aeabi_fadd+0xfa>
 8000604:	e08e      	b.n	8000724 <__aeabi_fadd+0x218>
 8000606:	2d00      	cmp	r5, #0
 8000608:	d000      	beq.n	800060c <__aeabi_fadd+0x100>
 800060a:	e0b4      	b.n	8000776 <__aeabi_fadd+0x26a>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d100      	bne.n	8000612 <__aeabi_fadd+0x106>
 8000610:	e0db      	b.n	80007ca <__aeabi_fadd+0x2be>
 8000612:	2e00      	cmp	r6, #0
 8000614:	d06c      	beq.n	80006f0 <__aeabi_fadd+0x1e4>
 8000616:	1b98      	subs	r0, r3, r6
 8000618:	0145      	lsls	r5, r0, #5
 800061a:	d400      	bmi.n	800061e <__aeabi_fadd+0x112>
 800061c:	e0f7      	b.n	800080e <__aeabi_fadd+0x302>
 800061e:	000c      	movs	r4, r1
 8000620:	1af3      	subs	r3, r6, r3
 8000622:	e03d      	b.n	80006a0 <__aeabi_fadd+0x194>
 8000624:	2e00      	cmp	r6, #0
 8000626:	d01b      	beq.n	8000660 <__aeabi_fadd+0x154>
 8000628:	1e51      	subs	r1, r2, #1
 800062a:	2a01      	cmp	r2, #1
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0x124>
 800062e:	e082      	b.n	8000736 <__aeabi_fadd+0x22a>
 8000630:	2aff      	cmp	r2, #255	@ 0xff
 8000632:	d03a      	beq.n	80006aa <__aeabi_fadd+0x19e>
 8000634:	000a      	movs	r2, r1
 8000636:	e7ab      	b.n	8000590 <__aeabi_fadd+0x84>
 8000638:	0031      	movs	r1, r6
 800063a:	2020      	movs	r0, #32
 800063c:	40d1      	lsrs	r1, r2
 800063e:	1a82      	subs	r2, r0, r2
 8000640:	4096      	lsls	r6, r2
 8000642:	0032      	movs	r2, r6
 8000644:	1e50      	subs	r0, r2, #1
 8000646:	4182      	sbcs	r2, r0
 8000648:	430a      	orrs	r2, r1
 800064a:	189b      	adds	r3, r3, r2
 800064c:	015a      	lsls	r2, r3, #5
 800064e:	d5b9      	bpl.n	80005c4 <__aeabi_fadd+0xb8>
 8000650:	1c6a      	adds	r2, r5, #1
 8000652:	2dfe      	cmp	r5, #254	@ 0xfe
 8000654:	d175      	bne.n	8000742 <__aeabi_fadd+0x236>
 8000656:	20ff      	movs	r0, #255	@ 0xff
 8000658:	2300      	movs	r3, #0
 800065a:	e7c4      	b.n	80005e6 <__aeabi_fadd+0xda>
 800065c:	000c      	movs	r4, r1
 800065e:	0033      	movs	r3, r6
 8000660:	08db      	lsrs	r3, r3, #3
 8000662:	2aff      	cmp	r2, #255	@ 0xff
 8000664:	d146      	bne.n	80006f4 <__aeabi_fadd+0x1e8>
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f5      	beq.n	8000656 <__aeabi_fadd+0x14a>
 800066a:	2280      	movs	r2, #128	@ 0x80
 800066c:	03d2      	lsls	r2, r2, #15
 800066e:	4313      	orrs	r3, r2
 8000670:	025b      	lsls	r3, r3, #9
 8000672:	20ff      	movs	r0, #255	@ 0xff
 8000674:	0a5b      	lsrs	r3, r3, #9
 8000676:	e7b6      	b.n	80005e6 <__aeabi_fadd+0xda>
 8000678:	019f      	lsls	r7, r3, #6
 800067a:	09bf      	lsrs	r7, r7, #6
 800067c:	0038      	movs	r0, r7
 800067e:	f002 fc21 	bl	8002ec4 <__clzsi2>
 8000682:	3805      	subs	r0, #5
 8000684:	4087      	lsls	r7, r0
 8000686:	4285      	cmp	r5, r0
 8000688:	dc24      	bgt.n	80006d4 <__aeabi_fadd+0x1c8>
 800068a:	003b      	movs	r3, r7
 800068c:	2120      	movs	r1, #32
 800068e:	1b42      	subs	r2, r0, r5
 8000690:	3201      	adds	r2, #1
 8000692:	40d3      	lsrs	r3, r2
 8000694:	1a8a      	subs	r2, r1, r2
 8000696:	4097      	lsls	r7, r2
 8000698:	1e7a      	subs	r2, r7, #1
 800069a:	4197      	sbcs	r7, r2
 800069c:	2200      	movs	r2, #0
 800069e:	433b      	orrs	r3, r7
 80006a0:	0759      	lsls	r1, r3, #29
 80006a2:	d193      	bne.n	80005cc <__aeabi_fadd+0xc0>
 80006a4:	e797      	b.n	80005d6 <__aeabi_fadd+0xca>
 80006a6:	000c      	movs	r4, r1
 80006a8:	0033      	movs	r3, r6
 80006aa:	08db      	lsrs	r3, r3, #3
 80006ac:	e7db      	b.n	8000666 <__aeabi_fadd+0x15a>
 80006ae:	2a00      	cmp	r2, #0
 80006b0:	d014      	beq.n	80006dc <__aeabi_fadd+0x1d0>
 80006b2:	1b42      	subs	r2, r0, r5
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d14b      	bne.n	8000750 <__aeabi_fadd+0x244>
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0d0      	beq.n	800065e <__aeabi_fadd+0x152>
 80006bc:	1e51      	subs	r1, r2, #1
 80006be:	2a01      	cmp	r2, #1
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x1b8>
 80006c2:	e09e      	b.n	8000802 <__aeabi_fadd+0x2f6>
 80006c4:	2aff      	cmp	r2, #255	@ 0xff
 80006c6:	d0ef      	beq.n	80006a8 <__aeabi_fadd+0x19c>
 80006c8:	000a      	movs	r2, r1
 80006ca:	2a1b      	cmp	r2, #27
 80006cc:	dd5f      	ble.n	800078e <__aeabi_fadd+0x282>
 80006ce:	0002      	movs	r2, r0
 80006d0:	1c73      	adds	r3, r6, #1
 80006d2:	e77b      	b.n	80005cc <__aeabi_fadd+0xc0>
 80006d4:	4b50      	ldr	r3, [pc, #320]	@ (8000818 <__aeabi_fadd+0x30c>)
 80006d6:	1a2a      	subs	r2, r5, r0
 80006d8:	403b      	ands	r3, r7
 80006da:	e7e1      	b.n	80006a0 <__aeabi_fadd+0x194>
 80006dc:	21fe      	movs	r1, #254	@ 0xfe
 80006de:	1c6a      	adds	r2, r5, #1
 80006e0:	4211      	tst	r1, r2
 80006e2:	d13b      	bne.n	800075c <__aeabi_fadd+0x250>
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d15d      	bne.n	80007a4 <__aeabi_fadd+0x298>
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d07f      	beq.n	80007ec <__aeabi_fadd+0x2e0>
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d17f      	bne.n	80007f0 <__aeabi_fadd+0x2e4>
 80006f0:	2200      	movs	r2, #0
 80006f2:	08db      	lsrs	r3, r3, #3
 80006f4:	025b      	lsls	r3, r3, #9
 80006f6:	0a5b      	lsrs	r3, r3, #9
 80006f8:	b2d0      	uxtb	r0, r2
 80006fa:	e774      	b.n	80005e6 <__aeabi_fadd+0xda>
 80006fc:	28ff      	cmp	r0, #255	@ 0xff
 80006fe:	d0d2      	beq.n	80006a6 <__aeabi_fadd+0x19a>
 8000700:	2480      	movs	r4, #128	@ 0x80
 8000702:	04e4      	lsls	r4, r4, #19
 8000704:	4323      	orrs	r3, r4
 8000706:	2401      	movs	r4, #1
 8000708:	2a1b      	cmp	r2, #27
 800070a:	dc07      	bgt.n	800071c <__aeabi_fadd+0x210>
 800070c:	001c      	movs	r4, r3
 800070e:	2520      	movs	r5, #32
 8000710:	40d4      	lsrs	r4, r2
 8000712:	1aaa      	subs	r2, r5, r2
 8000714:	4093      	lsls	r3, r2
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	4193      	sbcs	r3, r2
 800071a:	431c      	orrs	r4, r3
 800071c:	1b33      	subs	r3, r6, r4
 800071e:	0005      	movs	r5, r0
 8000720:	000c      	movs	r4, r1
 8000722:	e74d      	b.n	80005c0 <__aeabi_fadd+0xb4>
 8000724:	1b9f      	subs	r7, r3, r6
 8000726:	017a      	lsls	r2, r7, #5
 8000728:	d422      	bmi.n	8000770 <__aeabi_fadd+0x264>
 800072a:	2f00      	cmp	r7, #0
 800072c:	d1a6      	bne.n	800067c <__aeabi_fadd+0x170>
 800072e:	2400      	movs	r4, #0
 8000730:	2000      	movs	r0, #0
 8000732:	2300      	movs	r3, #0
 8000734:	e757      	b.n	80005e6 <__aeabi_fadd+0xda>
 8000736:	199b      	adds	r3, r3, r6
 8000738:	2501      	movs	r5, #1
 800073a:	3201      	adds	r2, #1
 800073c:	0159      	lsls	r1, r3, #5
 800073e:	d400      	bmi.n	8000742 <__aeabi_fadd+0x236>
 8000740:	e740      	b.n	80005c4 <__aeabi_fadd+0xb8>
 8000742:	2101      	movs	r1, #1
 8000744:	4835      	ldr	r0, [pc, #212]	@ (800081c <__aeabi_fadd+0x310>)
 8000746:	4019      	ands	r1, r3
 8000748:	085b      	lsrs	r3, r3, #1
 800074a:	4003      	ands	r3, r0
 800074c:	430b      	orrs	r3, r1
 800074e:	e7a7      	b.n	80006a0 <__aeabi_fadd+0x194>
 8000750:	28ff      	cmp	r0, #255	@ 0xff
 8000752:	d0a9      	beq.n	80006a8 <__aeabi_fadd+0x19c>
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	04c9      	lsls	r1, r1, #19
 8000758:	430b      	orrs	r3, r1
 800075a:	e7b6      	b.n	80006ca <__aeabi_fadd+0x1be>
 800075c:	2aff      	cmp	r2, #255	@ 0xff
 800075e:	d100      	bne.n	8000762 <__aeabi_fadd+0x256>
 8000760:	e779      	b.n	8000656 <__aeabi_fadd+0x14a>
 8000762:	199b      	adds	r3, r3, r6
 8000764:	085b      	lsrs	r3, r3, #1
 8000766:	0759      	lsls	r1, r3, #29
 8000768:	d000      	beq.n	800076c <__aeabi_fadd+0x260>
 800076a:	e72f      	b.n	80005cc <__aeabi_fadd+0xc0>
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	e7c1      	b.n	80006f4 <__aeabi_fadd+0x1e8>
 8000770:	000c      	movs	r4, r1
 8000772:	1af7      	subs	r7, r6, r3
 8000774:	e782      	b.n	800067c <__aeabi_fadd+0x170>
 8000776:	2b00      	cmp	r3, #0
 8000778:	d12c      	bne.n	80007d4 <__aeabi_fadd+0x2c8>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d193      	bne.n	80006a6 <__aeabi_fadd+0x19a>
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	2400      	movs	r4, #0
 8000782:	20ff      	movs	r0, #255	@ 0xff
 8000784:	03db      	lsls	r3, r3, #15
 8000786:	e72e      	b.n	80005e6 <__aeabi_fadd+0xda>
 8000788:	2501      	movs	r5, #1
 800078a:	1b9b      	subs	r3, r3, r6
 800078c:	e718      	b.n	80005c0 <__aeabi_fadd+0xb4>
 800078e:	0019      	movs	r1, r3
 8000790:	2520      	movs	r5, #32
 8000792:	40d1      	lsrs	r1, r2
 8000794:	1aaa      	subs	r2, r5, r2
 8000796:	4093      	lsls	r3, r2
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	4193      	sbcs	r3, r2
 800079c:	430b      	orrs	r3, r1
 800079e:	0005      	movs	r5, r0
 80007a0:	199b      	adds	r3, r3, r6
 80007a2:	e753      	b.n	800064c <__aeabi_fadd+0x140>
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d100      	bne.n	80007aa <__aeabi_fadd+0x29e>
 80007a8:	e77e      	b.n	80006a8 <__aeabi_fadd+0x19c>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x2a4>
 80007ae:	e77c      	b.n	80006aa <__aeabi_fadd+0x19e>
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	03d2      	lsls	r2, r2, #15
 80007b4:	4591      	cmp	r9, r2
 80007b6:	d302      	bcc.n	80007be <__aeabi_fadd+0x2b2>
 80007b8:	4594      	cmp	ip, r2
 80007ba:	d200      	bcs.n	80007be <__aeabi_fadd+0x2b2>
 80007bc:	0033      	movs	r3, r6
 80007be:	08db      	lsrs	r3, r3, #3
 80007c0:	e753      	b.n	800066a <__aeabi_fadd+0x15e>
 80007c2:	000c      	movs	r4, r1
 80007c4:	1af3      	subs	r3, r6, r3
 80007c6:	3501      	adds	r5, #1
 80007c8:	e6fa      	b.n	80005c0 <__aeabi_fadd+0xb4>
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d0af      	beq.n	800072e <__aeabi_fadd+0x222>
 80007ce:	000c      	movs	r4, r1
 80007d0:	0033      	movs	r3, r6
 80007d2:	e78d      	b.n	80006f0 <__aeabi_fadd+0x1e4>
 80007d4:	2e00      	cmp	r6, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x2ce>
 80007d8:	e767      	b.n	80006aa <__aeabi_fadd+0x19e>
 80007da:	2280      	movs	r2, #128	@ 0x80
 80007dc:	03d2      	lsls	r2, r2, #15
 80007de:	4591      	cmp	r9, r2
 80007e0:	d3ed      	bcc.n	80007be <__aeabi_fadd+0x2b2>
 80007e2:	4594      	cmp	ip, r2
 80007e4:	d2eb      	bcs.n	80007be <__aeabi_fadd+0x2b2>
 80007e6:	000c      	movs	r4, r1
 80007e8:	0033      	movs	r3, r6
 80007ea:	e7e8      	b.n	80007be <__aeabi_fadd+0x2b2>
 80007ec:	0033      	movs	r3, r6
 80007ee:	e77f      	b.n	80006f0 <__aeabi_fadd+0x1e4>
 80007f0:	199b      	adds	r3, r3, r6
 80007f2:	2200      	movs	r2, #0
 80007f4:	0159      	lsls	r1, r3, #5
 80007f6:	d5b9      	bpl.n	800076c <__aeabi_fadd+0x260>
 80007f8:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <__aeabi_fadd+0x30c>)
 80007fa:	4013      	ands	r3, r2
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	2201      	movs	r2, #1
 8000800:	e778      	b.n	80006f4 <__aeabi_fadd+0x1e8>
 8000802:	199b      	adds	r3, r3, r6
 8000804:	3201      	adds	r2, #1
 8000806:	3501      	adds	r5, #1
 8000808:	0159      	lsls	r1, r3, #5
 800080a:	d49a      	bmi.n	8000742 <__aeabi_fadd+0x236>
 800080c:	e6da      	b.n	80005c4 <__aeabi_fadd+0xb8>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d08d      	beq.n	800072e <__aeabi_fadd+0x222>
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	e76e      	b.n	80006f4 <__aeabi_fadd+0x1e8>
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	fbffffff 	.word	0xfbffffff
 800081c:	7dffffff 	.word	0x7dffffff

08000820 <__aeabi_fdiv>:
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	464f      	mov	r7, r9
 8000824:	4646      	mov	r6, r8
 8000826:	46d6      	mov	lr, sl
 8000828:	0244      	lsls	r4, r0, #9
 800082a:	b5c0      	push	{r6, r7, lr}
 800082c:	0047      	lsls	r7, r0, #1
 800082e:	1c0e      	adds	r6, r1, #0
 8000830:	0a64      	lsrs	r4, r4, #9
 8000832:	0e3f      	lsrs	r7, r7, #24
 8000834:	0fc5      	lsrs	r5, r0, #31
 8000836:	2f00      	cmp	r7, #0
 8000838:	d03c      	beq.n	80008b4 <__aeabi_fdiv+0x94>
 800083a:	2fff      	cmp	r7, #255	@ 0xff
 800083c:	d042      	beq.n	80008c4 <__aeabi_fdiv+0xa4>
 800083e:	2300      	movs	r3, #0
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	4699      	mov	r9, r3
 8000844:	469a      	mov	sl, r3
 8000846:	00e4      	lsls	r4, r4, #3
 8000848:	04d2      	lsls	r2, r2, #19
 800084a:	4314      	orrs	r4, r2
 800084c:	3f7f      	subs	r7, #127	@ 0x7f
 800084e:	0273      	lsls	r3, r6, #9
 8000850:	0a5b      	lsrs	r3, r3, #9
 8000852:	4698      	mov	r8, r3
 8000854:	0073      	lsls	r3, r6, #1
 8000856:	0e1b      	lsrs	r3, r3, #24
 8000858:	0ff6      	lsrs	r6, r6, #31
 800085a:	2b00      	cmp	r3, #0
 800085c:	d01b      	beq.n	8000896 <__aeabi_fdiv+0x76>
 800085e:	2bff      	cmp	r3, #255	@ 0xff
 8000860:	d013      	beq.n	800088a <__aeabi_fdiv+0x6a>
 8000862:	4642      	mov	r2, r8
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	00d2      	lsls	r2, r2, #3
 8000868:	04c9      	lsls	r1, r1, #19
 800086a:	4311      	orrs	r1, r2
 800086c:	4688      	mov	r8, r1
 800086e:	2000      	movs	r0, #0
 8000870:	3b7f      	subs	r3, #127	@ 0x7f
 8000872:	0029      	movs	r1, r5
 8000874:	1aff      	subs	r7, r7, r3
 8000876:	464b      	mov	r3, r9
 8000878:	4071      	eors	r1, r6
 800087a:	b2c9      	uxtb	r1, r1
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d900      	bls.n	8000882 <__aeabi_fdiv+0x62>
 8000880:	e0b5      	b.n	80009ee <__aeabi_fdiv+0x1ce>
 8000882:	4a74      	ldr	r2, [pc, #464]	@ (8000a54 <__aeabi_fdiv+0x234>)
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	58d3      	ldr	r3, [r2, r3]
 8000888:	469f      	mov	pc, r3
 800088a:	4643      	mov	r3, r8
 800088c:	2b00      	cmp	r3, #0
 800088e:	d13f      	bne.n	8000910 <__aeabi_fdiv+0xf0>
 8000890:	3fff      	subs	r7, #255	@ 0xff
 8000892:	3302      	adds	r3, #2
 8000894:	e003      	b.n	800089e <__aeabi_fdiv+0x7e>
 8000896:	4643      	mov	r3, r8
 8000898:	2b00      	cmp	r3, #0
 800089a:	d12d      	bne.n	80008f8 <__aeabi_fdiv+0xd8>
 800089c:	2301      	movs	r3, #1
 800089e:	0029      	movs	r1, r5
 80008a0:	464a      	mov	r2, r9
 80008a2:	4071      	eors	r1, r6
 80008a4:	b2c9      	uxtb	r1, r1
 80008a6:	431a      	orrs	r2, r3
 80008a8:	2a0e      	cmp	r2, #14
 80008aa:	d838      	bhi.n	800091e <__aeabi_fdiv+0xfe>
 80008ac:	486a      	ldr	r0, [pc, #424]	@ (8000a58 <__aeabi_fdiv+0x238>)
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	5882      	ldr	r2, [r0, r2]
 80008b2:	4697      	mov	pc, r2
 80008b4:	2c00      	cmp	r4, #0
 80008b6:	d113      	bne.n	80008e0 <__aeabi_fdiv+0xc0>
 80008b8:	2304      	movs	r3, #4
 80008ba:	4699      	mov	r9, r3
 80008bc:	3b03      	subs	r3, #3
 80008be:	2700      	movs	r7, #0
 80008c0:	469a      	mov	sl, r3
 80008c2:	e7c4      	b.n	800084e <__aeabi_fdiv+0x2e>
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d105      	bne.n	80008d4 <__aeabi_fdiv+0xb4>
 80008c8:	2308      	movs	r3, #8
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b06      	subs	r3, #6
 80008ce:	27ff      	movs	r7, #255	@ 0xff
 80008d0:	469a      	mov	sl, r3
 80008d2:	e7bc      	b.n	800084e <__aeabi_fdiv+0x2e>
 80008d4:	230c      	movs	r3, #12
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b09      	subs	r3, #9
 80008da:	27ff      	movs	r7, #255	@ 0xff
 80008dc:	469a      	mov	sl, r3
 80008de:	e7b6      	b.n	800084e <__aeabi_fdiv+0x2e>
 80008e0:	0020      	movs	r0, r4
 80008e2:	f002 faef 	bl	8002ec4 <__clzsi2>
 80008e6:	2776      	movs	r7, #118	@ 0x76
 80008e8:	1f43      	subs	r3, r0, #5
 80008ea:	409c      	lsls	r4, r3
 80008ec:	2300      	movs	r3, #0
 80008ee:	427f      	negs	r7, r7
 80008f0:	4699      	mov	r9, r3
 80008f2:	469a      	mov	sl, r3
 80008f4:	1a3f      	subs	r7, r7, r0
 80008f6:	e7aa      	b.n	800084e <__aeabi_fdiv+0x2e>
 80008f8:	4640      	mov	r0, r8
 80008fa:	f002 fae3 	bl	8002ec4 <__clzsi2>
 80008fe:	4642      	mov	r2, r8
 8000900:	1f43      	subs	r3, r0, #5
 8000902:	409a      	lsls	r2, r3
 8000904:	2376      	movs	r3, #118	@ 0x76
 8000906:	425b      	negs	r3, r3
 8000908:	1a1b      	subs	r3, r3, r0
 800090a:	4690      	mov	r8, r2
 800090c:	2000      	movs	r0, #0
 800090e:	e7b0      	b.n	8000872 <__aeabi_fdiv+0x52>
 8000910:	2303      	movs	r3, #3
 8000912:	464a      	mov	r2, r9
 8000914:	431a      	orrs	r2, r3
 8000916:	4691      	mov	r9, r2
 8000918:	2003      	movs	r0, #3
 800091a:	33fc      	adds	r3, #252	@ 0xfc
 800091c:	e7a9      	b.n	8000872 <__aeabi_fdiv+0x52>
 800091e:	000d      	movs	r5, r1
 8000920:	20ff      	movs	r0, #255	@ 0xff
 8000922:	2200      	movs	r2, #0
 8000924:	05c0      	lsls	r0, r0, #23
 8000926:	07ed      	lsls	r5, r5, #31
 8000928:	4310      	orrs	r0, r2
 800092a:	4328      	orrs	r0, r5
 800092c:	bce0      	pop	{r5, r6, r7}
 800092e:	46ba      	mov	sl, r7
 8000930:	46b1      	mov	r9, r6
 8000932:	46a8      	mov	r8, r5
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	000d      	movs	r5, r1
 8000938:	2000      	movs	r0, #0
 800093a:	2200      	movs	r2, #0
 800093c:	e7f2      	b.n	8000924 <__aeabi_fdiv+0x104>
 800093e:	4653      	mov	r3, sl
 8000940:	2b02      	cmp	r3, #2
 8000942:	d0ed      	beq.n	8000920 <__aeabi_fdiv+0x100>
 8000944:	2b03      	cmp	r3, #3
 8000946:	d033      	beq.n	80009b0 <__aeabi_fdiv+0x190>
 8000948:	46a0      	mov	r8, r4
 800094a:	2b01      	cmp	r3, #1
 800094c:	d105      	bne.n	800095a <__aeabi_fdiv+0x13a>
 800094e:	2000      	movs	r0, #0
 8000950:	2200      	movs	r2, #0
 8000952:	e7e7      	b.n	8000924 <__aeabi_fdiv+0x104>
 8000954:	0035      	movs	r5, r6
 8000956:	2803      	cmp	r0, #3
 8000958:	d07a      	beq.n	8000a50 <__aeabi_fdiv+0x230>
 800095a:	003b      	movs	r3, r7
 800095c:	337f      	adds	r3, #127	@ 0x7f
 800095e:	2b00      	cmp	r3, #0
 8000960:	dd2d      	ble.n	80009be <__aeabi_fdiv+0x19e>
 8000962:	4642      	mov	r2, r8
 8000964:	0752      	lsls	r2, r2, #29
 8000966:	d007      	beq.n	8000978 <__aeabi_fdiv+0x158>
 8000968:	220f      	movs	r2, #15
 800096a:	4641      	mov	r1, r8
 800096c:	400a      	ands	r2, r1
 800096e:	2a04      	cmp	r2, #4
 8000970:	d002      	beq.n	8000978 <__aeabi_fdiv+0x158>
 8000972:	2204      	movs	r2, #4
 8000974:	4694      	mov	ip, r2
 8000976:	44e0      	add	r8, ip
 8000978:	4642      	mov	r2, r8
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	d505      	bpl.n	800098a <__aeabi_fdiv+0x16a>
 800097e:	4642      	mov	r2, r8
 8000980:	4b36      	ldr	r3, [pc, #216]	@ (8000a5c <__aeabi_fdiv+0x23c>)
 8000982:	401a      	ands	r2, r3
 8000984:	003b      	movs	r3, r7
 8000986:	4690      	mov	r8, r2
 8000988:	3380      	adds	r3, #128	@ 0x80
 800098a:	2bfe      	cmp	r3, #254	@ 0xfe
 800098c:	dcc8      	bgt.n	8000920 <__aeabi_fdiv+0x100>
 800098e:	4642      	mov	r2, r8
 8000990:	0192      	lsls	r2, r2, #6
 8000992:	0a52      	lsrs	r2, r2, #9
 8000994:	b2d8      	uxtb	r0, r3
 8000996:	e7c5      	b.n	8000924 <__aeabi_fdiv+0x104>
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	2500      	movs	r5, #0
 800099c:	20ff      	movs	r0, #255	@ 0xff
 800099e:	03d2      	lsls	r2, r2, #15
 80009a0:	e7c0      	b.n	8000924 <__aeabi_fdiv+0x104>
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	03d2      	lsls	r2, r2, #15
 80009a6:	4214      	tst	r4, r2
 80009a8:	d002      	beq.n	80009b0 <__aeabi_fdiv+0x190>
 80009aa:	4643      	mov	r3, r8
 80009ac:	4213      	tst	r3, r2
 80009ae:	d049      	beq.n	8000a44 <__aeabi_fdiv+0x224>
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	03d2      	lsls	r2, r2, #15
 80009b4:	4322      	orrs	r2, r4
 80009b6:	0252      	lsls	r2, r2, #9
 80009b8:	20ff      	movs	r0, #255	@ 0xff
 80009ba:	0a52      	lsrs	r2, r2, #9
 80009bc:	e7b2      	b.n	8000924 <__aeabi_fdiv+0x104>
 80009be:	2201      	movs	r2, #1
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b1b      	cmp	r3, #27
 80009c4:	dcc3      	bgt.n	800094e <__aeabi_fdiv+0x12e>
 80009c6:	4642      	mov	r2, r8
 80009c8:	40da      	lsrs	r2, r3
 80009ca:	4643      	mov	r3, r8
 80009cc:	379e      	adds	r7, #158	@ 0x9e
 80009ce:	40bb      	lsls	r3, r7
 80009d0:	1e59      	subs	r1, r3, #1
 80009d2:	418b      	sbcs	r3, r1
 80009d4:	431a      	orrs	r2, r3
 80009d6:	0753      	lsls	r3, r2, #29
 80009d8:	d004      	beq.n	80009e4 <__aeabi_fdiv+0x1c4>
 80009da:	230f      	movs	r3, #15
 80009dc:	4013      	ands	r3, r2
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fdiv+0x1c4>
 80009e2:	3204      	adds	r2, #4
 80009e4:	0153      	lsls	r3, r2, #5
 80009e6:	d529      	bpl.n	8000a3c <__aeabi_fdiv+0x21c>
 80009e8:	2001      	movs	r0, #1
 80009ea:	2200      	movs	r2, #0
 80009ec:	e79a      	b.n	8000924 <__aeabi_fdiv+0x104>
 80009ee:	4642      	mov	r2, r8
 80009f0:	0163      	lsls	r3, r4, #5
 80009f2:	0155      	lsls	r5, r2, #5
 80009f4:	42ab      	cmp	r3, r5
 80009f6:	d215      	bcs.n	8000a24 <__aeabi_fdiv+0x204>
 80009f8:	201b      	movs	r0, #27
 80009fa:	2200      	movs	r2, #0
 80009fc:	3f01      	subs	r7, #1
 80009fe:	2601      	movs	r6, #1
 8000a00:	001c      	movs	r4, r3
 8000a02:	0052      	lsls	r2, r2, #1
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2c00      	cmp	r4, #0
 8000a08:	db01      	blt.n	8000a0e <__aeabi_fdiv+0x1ee>
 8000a0a:	429d      	cmp	r5, r3
 8000a0c:	d801      	bhi.n	8000a12 <__aeabi_fdiv+0x1f2>
 8000a0e:	1b5b      	subs	r3, r3, r5
 8000a10:	4332      	orrs	r2, r6
 8000a12:	3801      	subs	r0, #1
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d1f3      	bne.n	8000a00 <__aeabi_fdiv+0x1e0>
 8000a18:	1e58      	subs	r0, r3, #1
 8000a1a:	4183      	sbcs	r3, r0
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	4698      	mov	r8, r3
 8000a20:	000d      	movs	r5, r1
 8000a22:	e79a      	b.n	800095a <__aeabi_fdiv+0x13a>
 8000a24:	201a      	movs	r0, #26
 8000a26:	2201      	movs	r2, #1
 8000a28:	1b5b      	subs	r3, r3, r5
 8000a2a:	e7e8      	b.n	80009fe <__aeabi_fdiv+0x1de>
 8000a2c:	3b02      	subs	r3, #2
 8000a2e:	425a      	negs	r2, r3
 8000a30:	4153      	adcs	r3, r2
 8000a32:	425b      	negs	r3, r3
 8000a34:	0035      	movs	r5, r6
 8000a36:	2200      	movs	r2, #0
 8000a38:	b2d8      	uxtb	r0, r3
 8000a3a:	e773      	b.n	8000924 <__aeabi_fdiv+0x104>
 8000a3c:	0192      	lsls	r2, r2, #6
 8000a3e:	2000      	movs	r0, #0
 8000a40:	0a52      	lsrs	r2, r2, #9
 8000a42:	e76f      	b.n	8000924 <__aeabi_fdiv+0x104>
 8000a44:	431a      	orrs	r2, r3
 8000a46:	0252      	lsls	r2, r2, #9
 8000a48:	0035      	movs	r5, r6
 8000a4a:	20ff      	movs	r0, #255	@ 0xff
 8000a4c:	0a52      	lsrs	r2, r2, #9
 8000a4e:	e769      	b.n	8000924 <__aeabi_fdiv+0x104>
 8000a50:	4644      	mov	r4, r8
 8000a52:	e7ad      	b.n	80009b0 <__aeabi_fdiv+0x190>
 8000a54:	0800a120 	.word	0x0800a120
 8000a58:	0800a160 	.word	0x0800a160
 8000a5c:	f7ffffff 	.word	0xf7ffffff

08000a60 <__eqsf2>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	0042      	lsls	r2, r0, #1
 8000a64:	024e      	lsls	r6, r1, #9
 8000a66:	004c      	lsls	r4, r1, #1
 8000a68:	0245      	lsls	r5, r0, #9
 8000a6a:	0a6d      	lsrs	r5, r5, #9
 8000a6c:	0e12      	lsrs	r2, r2, #24
 8000a6e:	0fc3      	lsrs	r3, r0, #31
 8000a70:	0a76      	lsrs	r6, r6, #9
 8000a72:	0e24      	lsrs	r4, r4, #24
 8000a74:	0fc9      	lsrs	r1, r1, #31
 8000a76:	2aff      	cmp	r2, #255	@ 0xff
 8000a78:	d010      	beq.n	8000a9c <__eqsf2+0x3c>
 8000a7a:	2cff      	cmp	r4, #255	@ 0xff
 8000a7c:	d00c      	beq.n	8000a98 <__eqsf2+0x38>
 8000a7e:	2001      	movs	r0, #1
 8000a80:	42a2      	cmp	r2, r4
 8000a82:	d10a      	bne.n	8000a9a <__eqsf2+0x3a>
 8000a84:	42b5      	cmp	r5, r6
 8000a86:	d108      	bne.n	8000a9a <__eqsf2+0x3a>
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d00f      	beq.n	8000aac <__eqsf2+0x4c>
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d104      	bne.n	8000a9a <__eqsf2+0x3a>
 8000a90:	0028      	movs	r0, r5
 8000a92:	1e43      	subs	r3, r0, #1
 8000a94:	4198      	sbcs	r0, r3
 8000a96:	e000      	b.n	8000a9a <__eqsf2+0x3a>
 8000a98:	2001      	movs	r0, #1
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	2cff      	cmp	r4, #255	@ 0xff
 8000aa0:	d1fb      	bne.n	8000a9a <__eqsf2+0x3a>
 8000aa2:	4335      	orrs	r5, r6
 8000aa4:	d1f9      	bne.n	8000a9a <__eqsf2+0x3a>
 8000aa6:	404b      	eors	r3, r1
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	e7f6      	b.n	8000a9a <__eqsf2+0x3a>
 8000aac:	2000      	movs	r0, #0
 8000aae:	e7f4      	b.n	8000a9a <__eqsf2+0x3a>

08000ab0 <__gesf2>:
 8000ab0:	b530      	push	{r4, r5, lr}
 8000ab2:	0042      	lsls	r2, r0, #1
 8000ab4:	0244      	lsls	r4, r0, #9
 8000ab6:	024d      	lsls	r5, r1, #9
 8000ab8:	0fc3      	lsrs	r3, r0, #31
 8000aba:	0048      	lsls	r0, r1, #1
 8000abc:	0a64      	lsrs	r4, r4, #9
 8000abe:	0e12      	lsrs	r2, r2, #24
 8000ac0:	0a6d      	lsrs	r5, r5, #9
 8000ac2:	0e00      	lsrs	r0, r0, #24
 8000ac4:	0fc9      	lsrs	r1, r1, #31
 8000ac6:	2aff      	cmp	r2, #255	@ 0xff
 8000ac8:	d019      	beq.n	8000afe <__gesf2+0x4e>
 8000aca:	28ff      	cmp	r0, #255	@ 0xff
 8000acc:	d00b      	beq.n	8000ae6 <__gesf2+0x36>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d11e      	bne.n	8000b10 <__gesf2+0x60>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d10b      	bne.n	8000aee <__gesf2+0x3e>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d027      	beq.n	8000b2a <__gesf2+0x7a>
 8000ada:	2c00      	cmp	r4, #0
 8000adc:	d134      	bne.n	8000b48 <__gesf2+0x98>
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d02f      	beq.n	8000b42 <__gesf2+0x92>
 8000ae2:	0008      	movs	r0, r1
 8000ae4:	bd30      	pop	{r4, r5, pc}
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d128      	bne.n	8000b3c <__gesf2+0x8c>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d101      	bne.n	8000af2 <__gesf2+0x42>
 8000aee:	2c00      	cmp	r4, #0
 8000af0:	d0f5      	beq.n	8000ade <__gesf2+0x2e>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d107      	bne.n	8000b06 <__gesf2+0x56>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d023      	beq.n	8000b42 <__gesf2+0x92>
 8000afa:	0018      	movs	r0, r3
 8000afc:	e7f2      	b.n	8000ae4 <__gesf2+0x34>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d11c      	bne.n	8000b3c <__gesf2+0x8c>
 8000b02:	28ff      	cmp	r0, #255	@ 0xff
 8000b04:	d014      	beq.n	8000b30 <__gesf2+0x80>
 8000b06:	1e58      	subs	r0, r3, #1
 8000b08:	2302      	movs	r3, #2
 8000b0a:	4018      	ands	r0, r3
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	e7e9      	b.n	8000ae4 <__gesf2+0x34>
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d0f8      	beq.n	8000b06 <__gesf2+0x56>
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d1f6      	bne.n	8000b06 <__gesf2+0x56>
 8000b18:	4282      	cmp	r2, r0
 8000b1a:	dcf4      	bgt.n	8000b06 <__gesf2+0x56>
 8000b1c:	dbeb      	blt.n	8000af6 <__gesf2+0x46>
 8000b1e:	42ac      	cmp	r4, r5
 8000b20:	d8f1      	bhi.n	8000b06 <__gesf2+0x56>
 8000b22:	2000      	movs	r0, #0
 8000b24:	42ac      	cmp	r4, r5
 8000b26:	d2dd      	bcs.n	8000ae4 <__gesf2+0x34>
 8000b28:	e7e5      	b.n	8000af6 <__gesf2+0x46>
 8000b2a:	2c00      	cmp	r4, #0
 8000b2c:	d0da      	beq.n	8000ae4 <__gesf2+0x34>
 8000b2e:	e7ea      	b.n	8000b06 <__gesf2+0x56>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d103      	bne.n	8000b3c <__gesf2+0x8c>
 8000b34:	428b      	cmp	r3, r1
 8000b36:	d1e6      	bne.n	8000b06 <__gesf2+0x56>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	e7d3      	b.n	8000ae4 <__gesf2+0x34>
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	4240      	negs	r0, r0
 8000b40:	e7d0      	b.n	8000ae4 <__gesf2+0x34>
 8000b42:	2001      	movs	r0, #1
 8000b44:	4240      	negs	r0, r0
 8000b46:	e7cd      	b.n	8000ae4 <__gesf2+0x34>
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	d0e8      	beq.n	8000b1e <__gesf2+0x6e>
 8000b4c:	e7db      	b.n	8000b06 <__gesf2+0x56>
 8000b4e:	46c0      	nop			@ (mov r8, r8)

08000b50 <__lesf2>:
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	0042      	lsls	r2, r0, #1
 8000b54:	0244      	lsls	r4, r0, #9
 8000b56:	024d      	lsls	r5, r1, #9
 8000b58:	0fc3      	lsrs	r3, r0, #31
 8000b5a:	0048      	lsls	r0, r1, #1
 8000b5c:	0a64      	lsrs	r4, r4, #9
 8000b5e:	0e12      	lsrs	r2, r2, #24
 8000b60:	0a6d      	lsrs	r5, r5, #9
 8000b62:	0e00      	lsrs	r0, r0, #24
 8000b64:	0fc9      	lsrs	r1, r1, #31
 8000b66:	2aff      	cmp	r2, #255	@ 0xff
 8000b68:	d01a      	beq.n	8000ba0 <__lesf2+0x50>
 8000b6a:	28ff      	cmp	r0, #255	@ 0xff
 8000b6c:	d00e      	beq.n	8000b8c <__lesf2+0x3c>
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d11e      	bne.n	8000bb0 <__lesf2+0x60>
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d10e      	bne.n	8000b94 <__lesf2+0x44>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d02a      	beq.n	8000bd0 <__lesf2+0x80>
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d00c      	beq.n	8000b98 <__lesf2+0x48>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d01d      	beq.n	8000bbe <__lesf2+0x6e>
 8000b82:	1e58      	subs	r0, r3, #1
 8000b84:	2302      	movs	r3, #2
 8000b86:	4018      	ands	r0, r3
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e010      	b.n	8000bae <__lesf2+0x5e>
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d10d      	bne.n	8000bac <__lesf2+0x5c>
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d120      	bne.n	8000bd6 <__lesf2+0x86>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d11e      	bne.n	8000bd6 <__lesf2+0x86>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	d023      	beq.n	8000be4 <__lesf2+0x94>
 8000b9c:	0008      	movs	r0, r1
 8000b9e:	e006      	b.n	8000bae <__lesf2+0x5e>
 8000ba0:	2c00      	cmp	r4, #0
 8000ba2:	d103      	bne.n	8000bac <__lesf2+0x5c>
 8000ba4:	28ff      	cmp	r0, #255	@ 0xff
 8000ba6:	d1ec      	bne.n	8000b82 <__lesf2+0x32>
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d017      	beq.n	8000bdc <__lesf2+0x8c>
 8000bac:	2002      	movs	r0, #2
 8000bae:	bd30      	pop	{r4, r5, pc}
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__lesf2+0x32>
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d1e4      	bne.n	8000b82 <__lesf2+0x32>
 8000bb8:	4282      	cmp	r2, r0
 8000bba:	dce2      	bgt.n	8000b82 <__lesf2+0x32>
 8000bbc:	db04      	blt.n	8000bc8 <__lesf2+0x78>
 8000bbe:	42ac      	cmp	r4, r5
 8000bc0:	d8df      	bhi.n	8000b82 <__lesf2+0x32>
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	42ac      	cmp	r4, r5
 8000bc6:	d2f2      	bcs.n	8000bae <__lesf2+0x5e>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <__lesf2+0x94>
 8000bcc:	0018      	movs	r0, r3
 8000bce:	e7ee      	b.n	8000bae <__lesf2+0x5e>
 8000bd0:	2c00      	cmp	r4, #0
 8000bd2:	d0ec      	beq.n	8000bae <__lesf2+0x5e>
 8000bd4:	e7d5      	b.n	8000b82 <__lesf2+0x32>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d1d3      	bne.n	8000b82 <__lesf2+0x32>
 8000bda:	e7f5      	b.n	8000bc8 <__lesf2+0x78>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d0e5      	beq.n	8000bae <__lesf2+0x5e>
 8000be2:	e7ce      	b.n	8000b82 <__lesf2+0x32>
 8000be4:	2001      	movs	r0, #1
 8000be6:	4240      	negs	r0, r0
 8000be8:	e7e1      	b.n	8000bae <__lesf2+0x5e>
 8000bea:	46c0      	nop			@ (mov r8, r8)

08000bec <__aeabi_fmul>:
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	464f      	mov	r7, r9
 8000bf0:	4646      	mov	r6, r8
 8000bf2:	46d6      	mov	lr, sl
 8000bf4:	0243      	lsls	r3, r0, #9
 8000bf6:	0a5b      	lsrs	r3, r3, #9
 8000bf8:	0045      	lsls	r5, r0, #1
 8000bfa:	b5c0      	push	{r6, r7, lr}
 8000bfc:	4699      	mov	r9, r3
 8000bfe:	1c0f      	adds	r7, r1, #0
 8000c00:	0e2d      	lsrs	r5, r5, #24
 8000c02:	0fc6      	lsrs	r6, r0, #31
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fmul+0x1e>
 8000c08:	e088      	b.n	8000d1c <__aeabi_fmul+0x130>
 8000c0a:	2dff      	cmp	r5, #255	@ 0xff
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fmul+0x24>
 8000c0e:	e08d      	b.n	8000d2c <__aeabi_fmul+0x140>
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	04d2      	lsls	r2, r2, #19
 8000c16:	431a      	orrs	r2, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	4691      	mov	r9, r2
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3d7f      	subs	r5, #127	@ 0x7f
 8000c22:	027c      	lsls	r4, r7, #9
 8000c24:	007b      	lsls	r3, r7, #1
 8000c26:	0a64      	lsrs	r4, r4, #9
 8000c28:	0e1b      	lsrs	r3, r3, #24
 8000c2a:	0fff      	lsrs	r7, r7, #31
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d068      	beq.n	8000d02 <__aeabi_fmul+0x116>
 8000c30:	2bff      	cmp	r3, #255	@ 0xff
 8000c32:	d021      	beq.n	8000c78 <__aeabi_fmul+0x8c>
 8000c34:	2280      	movs	r2, #128	@ 0x80
 8000c36:	00e4      	lsls	r4, r4, #3
 8000c38:	04d2      	lsls	r2, r2, #19
 8000c3a:	4314      	orrs	r4, r2
 8000c3c:	4642      	mov	r2, r8
 8000c3e:	3b7f      	subs	r3, #127	@ 0x7f
 8000c40:	195b      	adds	r3, r3, r5
 8000c42:	2100      	movs	r1, #0
 8000c44:	1c5d      	adds	r5, r3, #1
 8000c46:	2a0a      	cmp	r2, #10
 8000c48:	dc2e      	bgt.n	8000ca8 <__aeabi_fmul+0xbc>
 8000c4a:	407e      	eors	r6, r7
 8000c4c:	4642      	mov	r2, r8
 8000c4e:	2a02      	cmp	r2, #2
 8000c50:	dc23      	bgt.n	8000c9a <__aeabi_fmul+0xae>
 8000c52:	3a01      	subs	r2, #1
 8000c54:	2a01      	cmp	r2, #1
 8000c56:	d900      	bls.n	8000c5a <__aeabi_fmul+0x6e>
 8000c58:	e0bd      	b.n	8000dd6 <__aeabi_fmul+0x1ea>
 8000c5a:	2902      	cmp	r1, #2
 8000c5c:	d06e      	beq.n	8000d3c <__aeabi_fmul+0x150>
 8000c5e:	2901      	cmp	r1, #1
 8000c60:	d12c      	bne.n	8000cbc <__aeabi_fmul+0xd0>
 8000c62:	2000      	movs	r0, #0
 8000c64:	2200      	movs	r2, #0
 8000c66:	05c0      	lsls	r0, r0, #23
 8000c68:	07f6      	lsls	r6, r6, #31
 8000c6a:	4310      	orrs	r0, r2
 8000c6c:	4330      	orrs	r0, r6
 8000c6e:	bce0      	pop	{r5, r6, r7}
 8000c70:	46ba      	mov	sl, r7
 8000c72:	46b1      	mov	r9, r6
 8000c74:	46a8      	mov	r8, r5
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	002b      	movs	r3, r5
 8000c7a:	33ff      	adds	r3, #255	@ 0xff
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d065      	beq.n	8000d4c <__aeabi_fmul+0x160>
 8000c80:	2203      	movs	r2, #3
 8000c82:	4641      	mov	r1, r8
 8000c84:	4311      	orrs	r1, r2
 8000c86:	0032      	movs	r2, r6
 8000c88:	3501      	adds	r5, #1
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	407a      	eors	r2, r7
 8000c8e:	35ff      	adds	r5, #255	@ 0xff
 8000c90:	290a      	cmp	r1, #10
 8000c92:	dd00      	ble.n	8000c96 <__aeabi_fmul+0xaa>
 8000c94:	e0d8      	b.n	8000e48 <__aeabi_fmul+0x25c>
 8000c96:	0016      	movs	r6, r2
 8000c98:	2103      	movs	r1, #3
 8000c9a:	4640      	mov	r0, r8
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4082      	lsls	r2, r0
 8000ca0:	20a6      	movs	r0, #166	@ 0xa6
 8000ca2:	00c0      	lsls	r0, r0, #3
 8000ca4:	4202      	tst	r2, r0
 8000ca6:	d020      	beq.n	8000cea <__aeabi_fmul+0xfe>
 8000ca8:	4653      	mov	r3, sl
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d046      	beq.n	8000d3c <__aeabi_fmul+0x150>
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_fmul+0xc8>
 8000cb2:	e0bb      	b.n	8000e2c <__aeabi_fmul+0x240>
 8000cb4:	4651      	mov	r1, sl
 8000cb6:	464c      	mov	r4, r9
 8000cb8:	2901      	cmp	r1, #1
 8000cba:	d0d2      	beq.n	8000c62 <__aeabi_fmul+0x76>
 8000cbc:	002b      	movs	r3, r5
 8000cbe:	337f      	adds	r3, #127	@ 0x7f
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dd70      	ble.n	8000da6 <__aeabi_fmul+0x1ba>
 8000cc4:	0762      	lsls	r2, r4, #29
 8000cc6:	d004      	beq.n	8000cd2 <__aeabi_fmul+0xe6>
 8000cc8:	220f      	movs	r2, #15
 8000cca:	4022      	ands	r2, r4
 8000ccc:	2a04      	cmp	r2, #4
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_fmul+0xe6>
 8000cd0:	3404      	adds	r4, #4
 8000cd2:	0122      	lsls	r2, r4, #4
 8000cd4:	d503      	bpl.n	8000cde <__aeabi_fmul+0xf2>
 8000cd6:	4b63      	ldr	r3, [pc, #396]	@ (8000e64 <__aeabi_fmul+0x278>)
 8000cd8:	401c      	ands	r4, r3
 8000cda:	002b      	movs	r3, r5
 8000cdc:	3380      	adds	r3, #128	@ 0x80
 8000cde:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ce0:	dc2c      	bgt.n	8000d3c <__aeabi_fmul+0x150>
 8000ce2:	01a2      	lsls	r2, r4, #6
 8000ce4:	0a52      	lsrs	r2, r2, #9
 8000ce6:	b2d8      	uxtb	r0, r3
 8000ce8:	e7bd      	b.n	8000c66 <__aeabi_fmul+0x7a>
 8000cea:	2090      	movs	r0, #144	@ 0x90
 8000cec:	0080      	lsls	r0, r0, #2
 8000cee:	4202      	tst	r2, r0
 8000cf0:	d127      	bne.n	8000d42 <__aeabi_fmul+0x156>
 8000cf2:	38b9      	subs	r0, #185	@ 0xb9
 8000cf4:	38ff      	subs	r0, #255	@ 0xff
 8000cf6:	4210      	tst	r0, r2
 8000cf8:	d06d      	beq.n	8000dd6 <__aeabi_fmul+0x1ea>
 8000cfa:	003e      	movs	r6, r7
 8000cfc:	46a1      	mov	r9, r4
 8000cfe:	468a      	mov	sl, r1
 8000d00:	e7d2      	b.n	8000ca8 <__aeabi_fmul+0xbc>
 8000d02:	2c00      	cmp	r4, #0
 8000d04:	d141      	bne.n	8000d8a <__aeabi_fmul+0x19e>
 8000d06:	2301      	movs	r3, #1
 8000d08:	4642      	mov	r2, r8
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	4690      	mov	r8, r2
 8000d0e:	002b      	movs	r3, r5
 8000d10:	4642      	mov	r2, r8
 8000d12:	2101      	movs	r1, #1
 8000d14:	1c5d      	adds	r5, r3, #1
 8000d16:	2a0a      	cmp	r2, #10
 8000d18:	dd97      	ble.n	8000c4a <__aeabi_fmul+0x5e>
 8000d1a:	e7c5      	b.n	8000ca8 <__aeabi_fmul+0xbc>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d126      	bne.n	8000d6e <__aeabi_fmul+0x182>
 8000d20:	2304      	movs	r3, #4
 8000d22:	4698      	mov	r8, r3
 8000d24:	3b03      	subs	r3, #3
 8000d26:	2500      	movs	r5, #0
 8000d28:	469a      	mov	sl, r3
 8000d2a:	e77a      	b.n	8000c22 <__aeabi_fmul+0x36>
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d118      	bne.n	8000d62 <__aeabi_fmul+0x176>
 8000d30:	2308      	movs	r3, #8
 8000d32:	4698      	mov	r8, r3
 8000d34:	3b06      	subs	r3, #6
 8000d36:	25ff      	movs	r5, #255	@ 0xff
 8000d38:	469a      	mov	sl, r3
 8000d3a:	e772      	b.n	8000c22 <__aeabi_fmul+0x36>
 8000d3c:	20ff      	movs	r0, #255	@ 0xff
 8000d3e:	2200      	movs	r2, #0
 8000d40:	e791      	b.n	8000c66 <__aeabi_fmul+0x7a>
 8000d42:	2280      	movs	r2, #128	@ 0x80
 8000d44:	2600      	movs	r6, #0
 8000d46:	20ff      	movs	r0, #255	@ 0xff
 8000d48:	03d2      	lsls	r2, r2, #15
 8000d4a:	e78c      	b.n	8000c66 <__aeabi_fmul+0x7a>
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	2202      	movs	r2, #2
 8000d50:	3501      	adds	r5, #1
 8000d52:	4311      	orrs	r1, r2
 8000d54:	4688      	mov	r8, r1
 8000d56:	35ff      	adds	r5, #255	@ 0xff
 8000d58:	290a      	cmp	r1, #10
 8000d5a:	dca5      	bgt.n	8000ca8 <__aeabi_fmul+0xbc>
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	407e      	eors	r6, r7
 8000d60:	e774      	b.n	8000c4c <__aeabi_fmul+0x60>
 8000d62:	230c      	movs	r3, #12
 8000d64:	4698      	mov	r8, r3
 8000d66:	3b09      	subs	r3, #9
 8000d68:	25ff      	movs	r5, #255	@ 0xff
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	e759      	b.n	8000c22 <__aeabi_fmul+0x36>
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f002 f8a8 	bl	8002ec4 <__clzsi2>
 8000d74:	464a      	mov	r2, r9
 8000d76:	1f43      	subs	r3, r0, #5
 8000d78:	2576      	movs	r5, #118	@ 0x76
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	426d      	negs	r5, r5
 8000d80:	4691      	mov	r9, r2
 8000d82:	4698      	mov	r8, r3
 8000d84:	469a      	mov	sl, r3
 8000d86:	1a2d      	subs	r5, r5, r0
 8000d88:	e74b      	b.n	8000c22 <__aeabi_fmul+0x36>
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	f002 f89a 	bl	8002ec4 <__clzsi2>
 8000d90:	4642      	mov	r2, r8
 8000d92:	1f43      	subs	r3, r0, #5
 8000d94:	409c      	lsls	r4, r3
 8000d96:	1a2b      	subs	r3, r5, r0
 8000d98:	3b76      	subs	r3, #118	@ 0x76
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	1c5d      	adds	r5, r3, #1
 8000d9e:	2a0a      	cmp	r2, #10
 8000da0:	dc00      	bgt.n	8000da4 <__aeabi_fmul+0x1b8>
 8000da2:	e752      	b.n	8000c4a <__aeabi_fmul+0x5e>
 8000da4:	e780      	b.n	8000ca8 <__aeabi_fmul+0xbc>
 8000da6:	2201      	movs	r2, #1
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b1b      	cmp	r3, #27
 8000dac:	dd00      	ble.n	8000db0 <__aeabi_fmul+0x1c4>
 8000dae:	e758      	b.n	8000c62 <__aeabi_fmul+0x76>
 8000db0:	359e      	adds	r5, #158	@ 0x9e
 8000db2:	0022      	movs	r2, r4
 8000db4:	40ac      	lsls	r4, r5
 8000db6:	40da      	lsrs	r2, r3
 8000db8:	1e63      	subs	r3, r4, #1
 8000dba:	419c      	sbcs	r4, r3
 8000dbc:	4322      	orrs	r2, r4
 8000dbe:	0753      	lsls	r3, r2, #29
 8000dc0:	d004      	beq.n	8000dcc <__aeabi_fmul+0x1e0>
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_fmul+0x1e0>
 8000dca:	3204      	adds	r2, #4
 8000dcc:	0153      	lsls	r3, r2, #5
 8000dce:	d537      	bpl.n	8000e40 <__aeabi_fmul+0x254>
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	e747      	b.n	8000c66 <__aeabi_fmul+0x7a>
 8000dd6:	0c21      	lsrs	r1, r4, #16
 8000dd8:	464a      	mov	r2, r9
 8000dda:	0424      	lsls	r4, r4, #16
 8000ddc:	0c24      	lsrs	r4, r4, #16
 8000dde:	0027      	movs	r7, r4
 8000de0:	0c10      	lsrs	r0, r2, #16
 8000de2:	0412      	lsls	r2, r2, #16
 8000de4:	0c12      	lsrs	r2, r2, #16
 8000de6:	4344      	muls	r4, r0
 8000de8:	4357      	muls	r7, r2
 8000dea:	4348      	muls	r0, r1
 8000dec:	4351      	muls	r1, r2
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	1909      	adds	r1, r1, r4
 8000df2:	1852      	adds	r2, r2, r1
 8000df4:	4294      	cmp	r4, r2
 8000df6:	d903      	bls.n	8000e00 <__aeabi_fmul+0x214>
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	0249      	lsls	r1, r1, #9
 8000dfc:	468c      	mov	ip, r1
 8000dfe:	4460      	add	r0, ip
 8000e00:	043f      	lsls	r7, r7, #16
 8000e02:	0411      	lsls	r1, r2, #16
 8000e04:	0c3f      	lsrs	r7, r7, #16
 8000e06:	19c9      	adds	r1, r1, r7
 8000e08:	018c      	lsls	r4, r1, #6
 8000e0a:	1e67      	subs	r7, r4, #1
 8000e0c:	41bc      	sbcs	r4, r7
 8000e0e:	0c12      	lsrs	r2, r2, #16
 8000e10:	0e89      	lsrs	r1, r1, #26
 8000e12:	1812      	adds	r2, r2, r0
 8000e14:	430c      	orrs	r4, r1
 8000e16:	0192      	lsls	r2, r2, #6
 8000e18:	4314      	orrs	r4, r2
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	d50e      	bpl.n	8000e3c <__aeabi_fmul+0x250>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	0862      	lsrs	r2, r4, #1
 8000e22:	401c      	ands	r4, r3
 8000e24:	4314      	orrs	r4, r2
 8000e26:	e749      	b.n	8000cbc <__aeabi_fmul+0xd0>
 8000e28:	003e      	movs	r6, r7
 8000e2a:	46a1      	mov	r9, r4
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	464b      	mov	r3, r9
 8000e30:	03d2      	lsls	r2, r2, #15
 8000e32:	431a      	orrs	r2, r3
 8000e34:	0252      	lsls	r2, r2, #9
 8000e36:	20ff      	movs	r0, #255	@ 0xff
 8000e38:	0a52      	lsrs	r2, r2, #9
 8000e3a:	e714      	b.n	8000c66 <__aeabi_fmul+0x7a>
 8000e3c:	001d      	movs	r5, r3
 8000e3e:	e73d      	b.n	8000cbc <__aeabi_fmul+0xd0>
 8000e40:	0192      	lsls	r2, r2, #6
 8000e42:	2000      	movs	r0, #0
 8000e44:	0a52      	lsrs	r2, r2, #9
 8000e46:	e70e      	b.n	8000c66 <__aeabi_fmul+0x7a>
 8000e48:	290f      	cmp	r1, #15
 8000e4a:	d1ed      	bne.n	8000e28 <__aeabi_fmul+0x23c>
 8000e4c:	2280      	movs	r2, #128	@ 0x80
 8000e4e:	464b      	mov	r3, r9
 8000e50:	03d2      	lsls	r2, r2, #15
 8000e52:	4213      	tst	r3, r2
 8000e54:	d0ea      	beq.n	8000e2c <__aeabi_fmul+0x240>
 8000e56:	4214      	tst	r4, r2
 8000e58:	d1e8      	bne.n	8000e2c <__aeabi_fmul+0x240>
 8000e5a:	003e      	movs	r6, r7
 8000e5c:	20ff      	movs	r0, #255	@ 0xff
 8000e5e:	4322      	orrs	r2, r4
 8000e60:	e701      	b.n	8000c66 <__aeabi_fmul+0x7a>
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	f7ffffff 	.word	0xf7ffffff

08000e68 <__aeabi_fsub>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	4647      	mov	r7, r8
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	024e      	lsls	r6, r1, #9
 8000e70:	0243      	lsls	r3, r0, #9
 8000e72:	0045      	lsls	r5, r0, #1
 8000e74:	0a72      	lsrs	r2, r6, #9
 8000e76:	0fc4      	lsrs	r4, r0, #31
 8000e78:	0048      	lsls	r0, r1, #1
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	4694      	mov	ip, r2
 8000e7e:	0a5f      	lsrs	r7, r3, #9
 8000e80:	0e2d      	lsrs	r5, r5, #24
 8000e82:	099b      	lsrs	r3, r3, #6
 8000e84:	0e00      	lsrs	r0, r0, #24
 8000e86:	0fc9      	lsrs	r1, r1, #31
 8000e88:	09b6      	lsrs	r6, r6, #6
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d024      	beq.n	8000ed8 <__aeabi_fsub+0x70>
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4051      	eors	r1, r2
 8000e92:	1a2a      	subs	r2, r5, r0
 8000e94:	428c      	cmp	r4, r1
 8000e96:	d00f      	beq.n	8000eb8 <__aeabi_fsub+0x50>
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	dc00      	bgt.n	8000e9e <__aeabi_fsub+0x36>
 8000e9c:	e16a      	b.n	8001174 <__aeabi_fsub+0x30c>
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	d135      	bne.n	8000f0e <__aeabi_fsub+0xa6>
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_fsub+0x40>
 8000ea6:	e0a2      	b.n	8000fee <__aeabi_fsub+0x186>
 8000ea8:	1e51      	subs	r1, r2, #1
 8000eaa:	2a01      	cmp	r2, #1
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_fsub+0x48>
 8000eae:	e124      	b.n	80010fa <__aeabi_fsub+0x292>
 8000eb0:	2aff      	cmp	r2, #255	@ 0xff
 8000eb2:	d021      	beq.n	8000ef8 <__aeabi_fsub+0x90>
 8000eb4:	000a      	movs	r2, r1
 8000eb6:	e02f      	b.n	8000f18 <__aeabi_fsub+0xb0>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	dc00      	bgt.n	8000ebe <__aeabi_fsub+0x56>
 8000ebc:	e167      	b.n	800118e <__aeabi_fsub+0x326>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d05e      	beq.n	8000f80 <__aeabi_fsub+0x118>
 8000ec2:	2dff      	cmp	r5, #255	@ 0xff
 8000ec4:	d018      	beq.n	8000ef8 <__aeabi_fsub+0x90>
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	04c9      	lsls	r1, r1, #19
 8000eca:	430e      	orrs	r6, r1
 8000ecc:	2a1b      	cmp	r2, #27
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_fsub+0x6a>
 8000ed0:	e076      	b.n	8000fc0 <__aeabi_fsub+0x158>
 8000ed2:	002a      	movs	r2, r5
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	e032      	b.n	8000f3e <__aeabi_fsub+0xd6>
 8000ed8:	002a      	movs	r2, r5
 8000eda:	3aff      	subs	r2, #255	@ 0xff
 8000edc:	4691      	mov	r9, r2
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d042      	beq.n	8000f68 <__aeabi_fsub+0x100>
 8000ee2:	428c      	cmp	r4, r1
 8000ee4:	d055      	beq.n	8000f92 <__aeabi_fsub+0x12a>
 8000ee6:	464a      	mov	r2, r9
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x86>
 8000eec:	e09c      	b.n	8001028 <__aeabi_fsub+0x1c0>
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fsub+0x8c>
 8000ef2:	e077      	b.n	8000fe4 <__aeabi_fsub+0x17c>
 8000ef4:	000c      	movs	r4, r1
 8000ef6:	0033      	movs	r3, r6
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x98>
 8000efe:	e06e      	b.n	8000fde <__aeabi_fsub+0x176>
 8000f00:	2280      	movs	r2, #128	@ 0x80
 8000f02:	03d2      	lsls	r2, r2, #15
 8000f04:	4313      	orrs	r3, r2
 8000f06:	025b      	lsls	r3, r3, #9
 8000f08:	20ff      	movs	r0, #255	@ 0xff
 8000f0a:	0a5b      	lsrs	r3, r3, #9
 8000f0c:	e024      	b.n	8000f58 <__aeabi_fsub+0xf0>
 8000f0e:	2dff      	cmp	r5, #255	@ 0xff
 8000f10:	d0f2      	beq.n	8000ef8 <__aeabi_fsub+0x90>
 8000f12:	2180      	movs	r1, #128	@ 0x80
 8000f14:	04c9      	lsls	r1, r1, #19
 8000f16:	430e      	orrs	r6, r1
 8000f18:	2101      	movs	r1, #1
 8000f1a:	2a1b      	cmp	r2, #27
 8000f1c:	dc08      	bgt.n	8000f30 <__aeabi_fsub+0xc8>
 8000f1e:	0031      	movs	r1, r6
 8000f20:	2020      	movs	r0, #32
 8000f22:	40d1      	lsrs	r1, r2
 8000f24:	1a82      	subs	r2, r0, r2
 8000f26:	4096      	lsls	r6, r2
 8000f28:	0032      	movs	r2, r6
 8000f2a:	1e50      	subs	r0, r2, #1
 8000f2c:	4182      	sbcs	r2, r0
 8000f2e:	4311      	orrs	r1, r2
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	015a      	lsls	r2, r3, #5
 8000f34:	d460      	bmi.n	8000ff8 <__aeabi_fsub+0x190>
 8000f36:	2107      	movs	r1, #7
 8000f38:	002a      	movs	r2, r5
 8000f3a:	4019      	ands	r1, r3
 8000f3c:	d057      	beq.n	8000fee <__aeabi_fsub+0x186>
 8000f3e:	210f      	movs	r1, #15
 8000f40:	4019      	ands	r1, r3
 8000f42:	2904      	cmp	r1, #4
 8000f44:	d000      	beq.n	8000f48 <__aeabi_fsub+0xe0>
 8000f46:	3304      	adds	r3, #4
 8000f48:	0159      	lsls	r1, r3, #5
 8000f4a:	d550      	bpl.n	8000fee <__aeabi_fsub+0x186>
 8000f4c:	1c50      	adds	r0, r2, #1
 8000f4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000f50:	d045      	beq.n	8000fde <__aeabi_fsub+0x176>
 8000f52:	019b      	lsls	r3, r3, #6
 8000f54:	b2c0      	uxtb	r0, r0
 8000f56:	0a5b      	lsrs	r3, r3, #9
 8000f58:	05c0      	lsls	r0, r0, #23
 8000f5a:	4318      	orrs	r0, r3
 8000f5c:	07e4      	lsls	r4, r4, #31
 8000f5e:	4320      	orrs	r0, r4
 8000f60:	bcc0      	pop	{r6, r7}
 8000f62:	46b9      	mov	r9, r7
 8000f64:	46b0      	mov	r8, r6
 8000f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4051      	eors	r1, r2
 8000f6c:	428c      	cmp	r4, r1
 8000f6e:	d1ba      	bne.n	8000ee6 <__aeabi_fsub+0x7e>
 8000f70:	464a      	mov	r2, r9
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d010      	beq.n	8000f98 <__aeabi_fsub+0x130>
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x114>
 8000f7a:	e098      	b.n	80010ae <__aeabi_fsub+0x246>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e7bb      	b.n	8000ef8 <__aeabi_fsub+0x90>
 8000f80:	2e00      	cmp	r6, #0
 8000f82:	d034      	beq.n	8000fee <__aeabi_fsub+0x186>
 8000f84:	1e51      	subs	r1, r2, #1
 8000f86:	2a01      	cmp	r2, #1
 8000f88:	d06e      	beq.n	8001068 <__aeabi_fsub+0x200>
 8000f8a:	2aff      	cmp	r2, #255	@ 0xff
 8000f8c:	d0b4      	beq.n	8000ef8 <__aeabi_fsub+0x90>
 8000f8e:	000a      	movs	r2, r1
 8000f90:	e79c      	b.n	8000ecc <__aeabi_fsub+0x64>
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d000      	beq.n	8000f98 <__aeabi_fsub+0x130>
 8000f96:	e088      	b.n	80010aa <__aeabi_fsub+0x242>
 8000f98:	20fe      	movs	r0, #254	@ 0xfe
 8000f9a:	1c6a      	adds	r2, r5, #1
 8000f9c:	4210      	tst	r0, r2
 8000f9e:	d000      	beq.n	8000fa2 <__aeabi_fsub+0x13a>
 8000fa0:	e092      	b.n	80010c8 <__aeabi_fsub+0x260>
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0x140>
 8000fa6:	e0a4      	b.n	80010f2 <__aeabi_fsub+0x28a>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x146>
 8000fac:	e0cb      	b.n	8001146 <__aeabi_fsub+0x2de>
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_fsub+0x14c>
 8000fb2:	e0ca      	b.n	800114a <__aeabi_fsub+0x2e2>
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	08db      	lsrs	r3, r3, #3
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	b2d0      	uxtb	r0, r2
 8000fbe:	e7cb      	b.n	8000f58 <__aeabi_fsub+0xf0>
 8000fc0:	0031      	movs	r1, r6
 8000fc2:	2020      	movs	r0, #32
 8000fc4:	40d1      	lsrs	r1, r2
 8000fc6:	1a82      	subs	r2, r0, r2
 8000fc8:	4096      	lsls	r6, r2
 8000fca:	0032      	movs	r2, r6
 8000fcc:	1e50      	subs	r0, r2, #1
 8000fce:	4182      	sbcs	r2, r0
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	189b      	adds	r3, r3, r2
 8000fd4:	015a      	lsls	r2, r3, #5
 8000fd6:	d5ae      	bpl.n	8000f36 <__aeabi_fsub+0xce>
 8000fd8:	1c6a      	adds	r2, r5, #1
 8000fda:	2dfe      	cmp	r5, #254	@ 0xfe
 8000fdc:	d14a      	bne.n	8001074 <__aeabi_fsub+0x20c>
 8000fde:	20ff      	movs	r0, #255	@ 0xff
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e7b9      	b.n	8000f58 <__aeabi_fsub+0xf0>
 8000fe4:	22ff      	movs	r2, #255	@ 0xff
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d14b      	bne.n	8001082 <__aeabi_fsub+0x21a>
 8000fea:	000c      	movs	r4, r1
 8000fec:	0033      	movs	r3, r6
 8000fee:	08db      	lsrs	r3, r3, #3
 8000ff0:	2aff      	cmp	r2, #255	@ 0xff
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fsub+0x18e>
 8000ff4:	e781      	b.n	8000efa <__aeabi_fsub+0x92>
 8000ff6:	e7df      	b.n	8000fb8 <__aeabi_fsub+0x150>
 8000ff8:	019f      	lsls	r7, r3, #6
 8000ffa:	09bf      	lsrs	r7, r7, #6
 8000ffc:	0038      	movs	r0, r7
 8000ffe:	f001 ff61 	bl	8002ec4 <__clzsi2>
 8001002:	3805      	subs	r0, #5
 8001004:	4087      	lsls	r7, r0
 8001006:	4285      	cmp	r5, r0
 8001008:	dc21      	bgt.n	800104e <__aeabi_fsub+0x1e6>
 800100a:	003b      	movs	r3, r7
 800100c:	2120      	movs	r1, #32
 800100e:	1b42      	subs	r2, r0, r5
 8001010:	3201      	adds	r2, #1
 8001012:	40d3      	lsrs	r3, r2
 8001014:	1a8a      	subs	r2, r1, r2
 8001016:	4097      	lsls	r7, r2
 8001018:	1e7a      	subs	r2, r7, #1
 800101a:	4197      	sbcs	r7, r2
 800101c:	2200      	movs	r2, #0
 800101e:	433b      	orrs	r3, r7
 8001020:	0759      	lsls	r1, r3, #29
 8001022:	d000      	beq.n	8001026 <__aeabi_fsub+0x1be>
 8001024:	e78b      	b.n	8000f3e <__aeabi_fsub+0xd6>
 8001026:	e78f      	b.n	8000f48 <__aeabi_fsub+0xe0>
 8001028:	20fe      	movs	r0, #254	@ 0xfe
 800102a:	1c6a      	adds	r2, r5, #1
 800102c:	4210      	tst	r0, r2
 800102e:	d112      	bne.n	8001056 <__aeabi_fsub+0x1ee>
 8001030:	2d00      	cmp	r5, #0
 8001032:	d152      	bne.n	80010da <__aeabi_fsub+0x272>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d07c      	beq.n	8001132 <__aeabi_fsub+0x2ca>
 8001038:	2e00      	cmp	r6, #0
 800103a:	d0bb      	beq.n	8000fb4 <__aeabi_fsub+0x14c>
 800103c:	1b9a      	subs	r2, r3, r6
 800103e:	0150      	lsls	r0, r2, #5
 8001040:	d400      	bmi.n	8001044 <__aeabi_fsub+0x1dc>
 8001042:	e08b      	b.n	800115c <__aeabi_fsub+0x2f4>
 8001044:	2401      	movs	r4, #1
 8001046:	2200      	movs	r2, #0
 8001048:	1af3      	subs	r3, r6, r3
 800104a:	400c      	ands	r4, r1
 800104c:	e7e8      	b.n	8001020 <__aeabi_fsub+0x1b8>
 800104e:	4b56      	ldr	r3, [pc, #344]	@ (80011a8 <__aeabi_fsub+0x340>)
 8001050:	1a2a      	subs	r2, r5, r0
 8001052:	403b      	ands	r3, r7
 8001054:	e7e4      	b.n	8001020 <__aeabi_fsub+0x1b8>
 8001056:	1b9f      	subs	r7, r3, r6
 8001058:	017a      	lsls	r2, r7, #5
 800105a:	d446      	bmi.n	80010ea <__aeabi_fsub+0x282>
 800105c:	2f00      	cmp	r7, #0
 800105e:	d1cd      	bne.n	8000ffc <__aeabi_fsub+0x194>
 8001060:	2400      	movs	r4, #0
 8001062:	2000      	movs	r0, #0
 8001064:	2300      	movs	r3, #0
 8001066:	e777      	b.n	8000f58 <__aeabi_fsub+0xf0>
 8001068:	199b      	adds	r3, r3, r6
 800106a:	2501      	movs	r5, #1
 800106c:	3201      	adds	r2, #1
 800106e:	0159      	lsls	r1, r3, #5
 8001070:	d400      	bmi.n	8001074 <__aeabi_fsub+0x20c>
 8001072:	e760      	b.n	8000f36 <__aeabi_fsub+0xce>
 8001074:	2101      	movs	r1, #1
 8001076:	484d      	ldr	r0, [pc, #308]	@ (80011ac <__aeabi_fsub+0x344>)
 8001078:	4019      	ands	r1, r3
 800107a:	085b      	lsrs	r3, r3, #1
 800107c:	4003      	ands	r3, r0
 800107e:	430b      	orrs	r3, r1
 8001080:	e7ce      	b.n	8001020 <__aeabi_fsub+0x1b8>
 8001082:	1e57      	subs	r7, r2, #1
 8001084:	2a01      	cmp	r2, #1
 8001086:	d05a      	beq.n	800113e <__aeabi_fsub+0x2d6>
 8001088:	000c      	movs	r4, r1
 800108a:	2aff      	cmp	r2, #255	@ 0xff
 800108c:	d033      	beq.n	80010f6 <__aeabi_fsub+0x28e>
 800108e:	2201      	movs	r2, #1
 8001090:	2f1b      	cmp	r7, #27
 8001092:	dc07      	bgt.n	80010a4 <__aeabi_fsub+0x23c>
 8001094:	2120      	movs	r1, #32
 8001096:	1bc9      	subs	r1, r1, r7
 8001098:	001a      	movs	r2, r3
 800109a:	408b      	lsls	r3, r1
 800109c:	40fa      	lsrs	r2, r7
 800109e:	1e59      	subs	r1, r3, #1
 80010a0:	418b      	sbcs	r3, r1
 80010a2:	431a      	orrs	r2, r3
 80010a4:	0005      	movs	r5, r0
 80010a6:	1ab3      	subs	r3, r6, r2
 80010a8:	e743      	b.n	8000f32 <__aeabi_fsub+0xca>
 80010aa:	2d00      	cmp	r5, #0
 80010ac:	d123      	bne.n	80010f6 <__aeabi_fsub+0x28e>
 80010ae:	22ff      	movs	r2, #255	@ 0xff
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d09b      	beq.n	8000fec <__aeabi_fsub+0x184>
 80010b4:	1e51      	subs	r1, r2, #1
 80010b6:	2a01      	cmp	r2, #1
 80010b8:	d0d6      	beq.n	8001068 <__aeabi_fsub+0x200>
 80010ba:	2aff      	cmp	r2, #255	@ 0xff
 80010bc:	d01b      	beq.n	80010f6 <__aeabi_fsub+0x28e>
 80010be:	291b      	cmp	r1, #27
 80010c0:	dd2c      	ble.n	800111c <__aeabi_fsub+0x2b4>
 80010c2:	0002      	movs	r2, r0
 80010c4:	1c73      	adds	r3, r6, #1
 80010c6:	e73a      	b.n	8000f3e <__aeabi_fsub+0xd6>
 80010c8:	2aff      	cmp	r2, #255	@ 0xff
 80010ca:	d088      	beq.n	8000fde <__aeabi_fsub+0x176>
 80010cc:	199b      	adds	r3, r3, r6
 80010ce:	085b      	lsrs	r3, r3, #1
 80010d0:	0759      	lsls	r1, r3, #29
 80010d2:	d000      	beq.n	80010d6 <__aeabi_fsub+0x26e>
 80010d4:	e733      	b.n	8000f3e <__aeabi_fsub+0xd6>
 80010d6:	08db      	lsrs	r3, r3, #3
 80010d8:	e76e      	b.n	8000fb8 <__aeabi_fsub+0x150>
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d110      	bne.n	8001100 <__aeabi_fsub+0x298>
 80010de:	2e00      	cmp	r6, #0
 80010e0:	d043      	beq.n	800116a <__aeabi_fsub+0x302>
 80010e2:	2401      	movs	r4, #1
 80010e4:	0033      	movs	r3, r6
 80010e6:	400c      	ands	r4, r1
 80010e8:	e706      	b.n	8000ef8 <__aeabi_fsub+0x90>
 80010ea:	2401      	movs	r4, #1
 80010ec:	1af7      	subs	r7, r6, r3
 80010ee:	400c      	ands	r4, r1
 80010f0:	e784      	b.n	8000ffc <__aeabi_fsub+0x194>
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d104      	bne.n	8001100 <__aeabi_fsub+0x298>
 80010f6:	0033      	movs	r3, r6
 80010f8:	e6fe      	b.n	8000ef8 <__aeabi_fsub+0x90>
 80010fa:	2501      	movs	r5, #1
 80010fc:	1b9b      	subs	r3, r3, r6
 80010fe:	e718      	b.n	8000f32 <__aeabi_fsub+0xca>
 8001100:	2e00      	cmp	r6, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_fsub+0x29e>
 8001104:	e6f8      	b.n	8000ef8 <__aeabi_fsub+0x90>
 8001106:	2280      	movs	r2, #128	@ 0x80
 8001108:	03d2      	lsls	r2, r2, #15
 800110a:	4297      	cmp	r7, r2
 800110c:	d304      	bcc.n	8001118 <__aeabi_fsub+0x2b0>
 800110e:	4594      	cmp	ip, r2
 8001110:	d202      	bcs.n	8001118 <__aeabi_fsub+0x2b0>
 8001112:	2401      	movs	r4, #1
 8001114:	0033      	movs	r3, r6
 8001116:	400c      	ands	r4, r1
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	e6f1      	b.n	8000f00 <__aeabi_fsub+0x98>
 800111c:	001a      	movs	r2, r3
 800111e:	2520      	movs	r5, #32
 8001120:	40ca      	lsrs	r2, r1
 8001122:	1a69      	subs	r1, r5, r1
 8001124:	408b      	lsls	r3, r1
 8001126:	1e59      	subs	r1, r3, #1
 8001128:	418b      	sbcs	r3, r1
 800112a:	4313      	orrs	r3, r2
 800112c:	0005      	movs	r5, r0
 800112e:	199b      	adds	r3, r3, r6
 8001130:	e750      	b.n	8000fd4 <__aeabi_fsub+0x16c>
 8001132:	2e00      	cmp	r6, #0
 8001134:	d094      	beq.n	8001060 <__aeabi_fsub+0x1f8>
 8001136:	2401      	movs	r4, #1
 8001138:	0033      	movs	r3, r6
 800113a:	400c      	ands	r4, r1
 800113c:	e73a      	b.n	8000fb4 <__aeabi_fsub+0x14c>
 800113e:	000c      	movs	r4, r1
 8001140:	2501      	movs	r5, #1
 8001142:	1af3      	subs	r3, r6, r3
 8001144:	e6f5      	b.n	8000f32 <__aeabi_fsub+0xca>
 8001146:	0033      	movs	r3, r6
 8001148:	e734      	b.n	8000fb4 <__aeabi_fsub+0x14c>
 800114a:	199b      	adds	r3, r3, r6
 800114c:	2200      	movs	r2, #0
 800114e:	0159      	lsls	r1, r3, #5
 8001150:	d5c1      	bpl.n	80010d6 <__aeabi_fsub+0x26e>
 8001152:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <__aeabi_fsub+0x340>)
 8001154:	4013      	ands	r3, r2
 8001156:	08db      	lsrs	r3, r3, #3
 8001158:	2201      	movs	r2, #1
 800115a:	e72d      	b.n	8000fb8 <__aeabi_fsub+0x150>
 800115c:	2a00      	cmp	r2, #0
 800115e:	d100      	bne.n	8001162 <__aeabi_fsub+0x2fa>
 8001160:	e77e      	b.n	8001060 <__aeabi_fsub+0x1f8>
 8001162:	0013      	movs	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	08db      	lsrs	r3, r3, #3
 8001168:	e726      	b.n	8000fb8 <__aeabi_fsub+0x150>
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	2400      	movs	r4, #0
 800116e:	20ff      	movs	r0, #255	@ 0xff
 8001170:	03db      	lsls	r3, r3, #15
 8001172:	e6f1      	b.n	8000f58 <__aeabi_fsub+0xf0>
 8001174:	2a00      	cmp	r2, #0
 8001176:	d100      	bne.n	800117a <__aeabi_fsub+0x312>
 8001178:	e756      	b.n	8001028 <__aeabi_fsub+0x1c0>
 800117a:	1b47      	subs	r7, r0, r5
 800117c:	003a      	movs	r2, r7
 800117e:	2d00      	cmp	r5, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_fsub+0x31c>
 8001182:	e730      	b.n	8000fe6 <__aeabi_fsub+0x17e>
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	04d2      	lsls	r2, r2, #19
 8001188:	000c      	movs	r4, r1
 800118a:	4313      	orrs	r3, r2
 800118c:	e77f      	b.n	800108e <__aeabi_fsub+0x226>
 800118e:	2a00      	cmp	r2, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_fsub+0x32c>
 8001192:	e701      	b.n	8000f98 <__aeabi_fsub+0x130>
 8001194:	1b41      	subs	r1, r0, r5
 8001196:	2d00      	cmp	r5, #0
 8001198:	d101      	bne.n	800119e <__aeabi_fsub+0x336>
 800119a:	000a      	movs	r2, r1
 800119c:	e788      	b.n	80010b0 <__aeabi_fsub+0x248>
 800119e:	2280      	movs	r2, #128	@ 0x80
 80011a0:	04d2      	lsls	r2, r2, #19
 80011a2:	4313      	orrs	r3, r2
 80011a4:	e78b      	b.n	80010be <__aeabi_fsub+0x256>
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	fbffffff 	.word	0xfbffffff
 80011ac:	7dffffff 	.word	0x7dffffff

080011b0 <__aeabi_f2iz>:
 80011b0:	0241      	lsls	r1, r0, #9
 80011b2:	0042      	lsls	r2, r0, #1
 80011b4:	0fc3      	lsrs	r3, r0, #31
 80011b6:	0a49      	lsrs	r1, r1, #9
 80011b8:	2000      	movs	r0, #0
 80011ba:	0e12      	lsrs	r2, r2, #24
 80011bc:	2a7e      	cmp	r2, #126	@ 0x7e
 80011be:	dd03      	ble.n	80011c8 <__aeabi_f2iz+0x18>
 80011c0:	2a9d      	cmp	r2, #157	@ 0x9d
 80011c2:	dd02      	ble.n	80011ca <__aeabi_f2iz+0x1a>
 80011c4:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <__aeabi_f2iz+0x3c>)
 80011c6:	1898      	adds	r0, r3, r2
 80011c8:	4770      	bx	lr
 80011ca:	2080      	movs	r0, #128	@ 0x80
 80011cc:	0400      	lsls	r0, r0, #16
 80011ce:	4301      	orrs	r1, r0
 80011d0:	2a95      	cmp	r2, #149	@ 0x95
 80011d2:	dc07      	bgt.n	80011e4 <__aeabi_f2iz+0x34>
 80011d4:	2096      	movs	r0, #150	@ 0x96
 80011d6:	1a82      	subs	r2, r0, r2
 80011d8:	40d1      	lsrs	r1, r2
 80011da:	4248      	negs	r0, r1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f3      	bne.n	80011c8 <__aeabi_f2iz+0x18>
 80011e0:	0008      	movs	r0, r1
 80011e2:	e7f1      	b.n	80011c8 <__aeabi_f2iz+0x18>
 80011e4:	3a96      	subs	r2, #150	@ 0x96
 80011e6:	4091      	lsls	r1, r2
 80011e8:	e7f7      	b.n	80011da <__aeabi_f2iz+0x2a>
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	7fffffff 	.word	0x7fffffff

080011f0 <__aeabi_i2f>:
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d013      	beq.n	800121e <__aeabi_i2f+0x2e>
 80011f6:	17c3      	asrs	r3, r0, #31
 80011f8:	18c5      	adds	r5, r0, r3
 80011fa:	405d      	eors	r5, r3
 80011fc:	0fc4      	lsrs	r4, r0, #31
 80011fe:	0028      	movs	r0, r5
 8001200:	f001 fe60 	bl	8002ec4 <__clzsi2>
 8001204:	239e      	movs	r3, #158	@ 0x9e
 8001206:	0001      	movs	r1, r0
 8001208:	1a1b      	subs	r3, r3, r0
 800120a:	2b96      	cmp	r3, #150	@ 0x96
 800120c:	dc0f      	bgt.n	800122e <__aeabi_i2f+0x3e>
 800120e:	2808      	cmp	r0, #8
 8001210:	d034      	beq.n	800127c <__aeabi_i2f+0x8c>
 8001212:	3908      	subs	r1, #8
 8001214:	408d      	lsls	r5, r1
 8001216:	026d      	lsls	r5, r5, #9
 8001218:	0a6d      	lsrs	r5, r5, #9
 800121a:	b2d8      	uxtb	r0, r3
 800121c:	e002      	b.n	8001224 <__aeabi_i2f+0x34>
 800121e:	2400      	movs	r4, #0
 8001220:	2000      	movs	r0, #0
 8001222:	2500      	movs	r5, #0
 8001224:	05c0      	lsls	r0, r0, #23
 8001226:	4328      	orrs	r0, r5
 8001228:	07e4      	lsls	r4, r4, #31
 800122a:	4320      	orrs	r0, r4
 800122c:	bd70      	pop	{r4, r5, r6, pc}
 800122e:	2b99      	cmp	r3, #153	@ 0x99
 8001230:	dc16      	bgt.n	8001260 <__aeabi_i2f+0x70>
 8001232:	1f42      	subs	r2, r0, #5
 8001234:	2805      	cmp	r0, #5
 8001236:	d000      	beq.n	800123a <__aeabi_i2f+0x4a>
 8001238:	4095      	lsls	r5, r2
 800123a:	002a      	movs	r2, r5
 800123c:	4811      	ldr	r0, [pc, #68]	@ (8001284 <__aeabi_i2f+0x94>)
 800123e:	4002      	ands	r2, r0
 8001240:	076e      	lsls	r6, r5, #29
 8001242:	d009      	beq.n	8001258 <__aeabi_i2f+0x68>
 8001244:	260f      	movs	r6, #15
 8001246:	4035      	ands	r5, r6
 8001248:	2d04      	cmp	r5, #4
 800124a:	d005      	beq.n	8001258 <__aeabi_i2f+0x68>
 800124c:	3204      	adds	r2, #4
 800124e:	0155      	lsls	r5, r2, #5
 8001250:	d502      	bpl.n	8001258 <__aeabi_i2f+0x68>
 8001252:	239f      	movs	r3, #159	@ 0x9f
 8001254:	4002      	ands	r2, r0
 8001256:	1a5b      	subs	r3, r3, r1
 8001258:	0192      	lsls	r2, r2, #6
 800125a:	0a55      	lsrs	r5, r2, #9
 800125c:	b2d8      	uxtb	r0, r3
 800125e:	e7e1      	b.n	8001224 <__aeabi_i2f+0x34>
 8001260:	2205      	movs	r2, #5
 8001262:	1a12      	subs	r2, r2, r0
 8001264:	0028      	movs	r0, r5
 8001266:	40d0      	lsrs	r0, r2
 8001268:	0002      	movs	r2, r0
 800126a:	0008      	movs	r0, r1
 800126c:	301b      	adds	r0, #27
 800126e:	4085      	lsls	r5, r0
 8001270:	0028      	movs	r0, r5
 8001272:	1e45      	subs	r5, r0, #1
 8001274:	41a8      	sbcs	r0, r5
 8001276:	4302      	orrs	r2, r0
 8001278:	0015      	movs	r5, r2
 800127a:	e7de      	b.n	800123a <__aeabi_i2f+0x4a>
 800127c:	026d      	lsls	r5, r5, #9
 800127e:	2096      	movs	r0, #150	@ 0x96
 8001280:	0a6d      	lsrs	r5, r5, #9
 8001282:	e7cf      	b.n	8001224 <__aeabi_i2f+0x34>
 8001284:	fbffffff 	.word	0xfbffffff

08001288 <__aeabi_ui2f>:
 8001288:	b570      	push	{r4, r5, r6, lr}
 800128a:	1e04      	subs	r4, r0, #0
 800128c:	d00e      	beq.n	80012ac <__aeabi_ui2f+0x24>
 800128e:	f001 fe19 	bl	8002ec4 <__clzsi2>
 8001292:	239e      	movs	r3, #158	@ 0x9e
 8001294:	0001      	movs	r1, r0
 8001296:	1a1b      	subs	r3, r3, r0
 8001298:	2b96      	cmp	r3, #150	@ 0x96
 800129a:	dc0c      	bgt.n	80012b6 <__aeabi_ui2f+0x2e>
 800129c:	2808      	cmp	r0, #8
 800129e:	d02f      	beq.n	8001300 <__aeabi_ui2f+0x78>
 80012a0:	3908      	subs	r1, #8
 80012a2:	408c      	lsls	r4, r1
 80012a4:	0264      	lsls	r4, r4, #9
 80012a6:	0a64      	lsrs	r4, r4, #9
 80012a8:	b2d8      	uxtb	r0, r3
 80012aa:	e001      	b.n	80012b0 <__aeabi_ui2f+0x28>
 80012ac:	2000      	movs	r0, #0
 80012ae:	2400      	movs	r4, #0
 80012b0:	05c0      	lsls	r0, r0, #23
 80012b2:	4320      	orrs	r0, r4
 80012b4:	bd70      	pop	{r4, r5, r6, pc}
 80012b6:	2b99      	cmp	r3, #153	@ 0x99
 80012b8:	dc16      	bgt.n	80012e8 <__aeabi_ui2f+0x60>
 80012ba:	1f42      	subs	r2, r0, #5
 80012bc:	2805      	cmp	r0, #5
 80012be:	d000      	beq.n	80012c2 <__aeabi_ui2f+0x3a>
 80012c0:	4094      	lsls	r4, r2
 80012c2:	0022      	movs	r2, r4
 80012c4:	4810      	ldr	r0, [pc, #64]	@ (8001308 <__aeabi_ui2f+0x80>)
 80012c6:	4002      	ands	r2, r0
 80012c8:	0765      	lsls	r5, r4, #29
 80012ca:	d009      	beq.n	80012e0 <__aeabi_ui2f+0x58>
 80012cc:	250f      	movs	r5, #15
 80012ce:	402c      	ands	r4, r5
 80012d0:	2c04      	cmp	r4, #4
 80012d2:	d005      	beq.n	80012e0 <__aeabi_ui2f+0x58>
 80012d4:	3204      	adds	r2, #4
 80012d6:	0154      	lsls	r4, r2, #5
 80012d8:	d502      	bpl.n	80012e0 <__aeabi_ui2f+0x58>
 80012da:	239f      	movs	r3, #159	@ 0x9f
 80012dc:	4002      	ands	r2, r0
 80012de:	1a5b      	subs	r3, r3, r1
 80012e0:	0192      	lsls	r2, r2, #6
 80012e2:	0a54      	lsrs	r4, r2, #9
 80012e4:	b2d8      	uxtb	r0, r3
 80012e6:	e7e3      	b.n	80012b0 <__aeabi_ui2f+0x28>
 80012e8:	0002      	movs	r2, r0
 80012ea:	0020      	movs	r0, r4
 80012ec:	321b      	adds	r2, #27
 80012ee:	4090      	lsls	r0, r2
 80012f0:	0002      	movs	r2, r0
 80012f2:	1e50      	subs	r0, r2, #1
 80012f4:	4182      	sbcs	r2, r0
 80012f6:	2005      	movs	r0, #5
 80012f8:	1a40      	subs	r0, r0, r1
 80012fa:	40c4      	lsrs	r4, r0
 80012fc:	4314      	orrs	r4, r2
 80012fe:	e7e0      	b.n	80012c2 <__aeabi_ui2f+0x3a>
 8001300:	0264      	lsls	r4, r4, #9
 8001302:	2096      	movs	r0, #150	@ 0x96
 8001304:	0a64      	lsrs	r4, r4, #9
 8001306:	e7d3      	b.n	80012b0 <__aeabi_ui2f+0x28>
 8001308:	fbffffff 	.word	0xfbffffff

0800130c <__aeabi_dadd>:
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	4657      	mov	r7, sl
 8001310:	464e      	mov	r6, r9
 8001312:	4645      	mov	r5, r8
 8001314:	46de      	mov	lr, fp
 8001316:	b5e0      	push	{r5, r6, r7, lr}
 8001318:	b083      	sub	sp, #12
 800131a:	9000      	str	r0, [sp, #0]
 800131c:	9101      	str	r1, [sp, #4]
 800131e:	030c      	lsls	r4, r1, #12
 8001320:	004f      	lsls	r7, r1, #1
 8001322:	0fce      	lsrs	r6, r1, #31
 8001324:	0a61      	lsrs	r1, r4, #9
 8001326:	9c00      	ldr	r4, [sp, #0]
 8001328:	031d      	lsls	r5, r3, #12
 800132a:	0f64      	lsrs	r4, r4, #29
 800132c:	430c      	orrs	r4, r1
 800132e:	9900      	ldr	r1, [sp, #0]
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	00c8      	lsls	r0, r1, #3
 8001336:	0059      	lsls	r1, r3, #1
 8001338:	0d4b      	lsrs	r3, r1, #21
 800133a:	4699      	mov	r9, r3
 800133c:	9a00      	ldr	r2, [sp, #0]
 800133e:	9b01      	ldr	r3, [sp, #4]
 8001340:	0a6d      	lsrs	r5, r5, #9
 8001342:	0fd9      	lsrs	r1, r3, #31
 8001344:	0f53      	lsrs	r3, r2, #29
 8001346:	432b      	orrs	r3, r5
 8001348:	469a      	mov	sl, r3
 800134a:	9b00      	ldr	r3, [sp, #0]
 800134c:	0d7f      	lsrs	r7, r7, #21
 800134e:	00da      	lsls	r2, r3, #3
 8001350:	4694      	mov	ip, r2
 8001352:	464a      	mov	r2, r9
 8001354:	46b0      	mov	r8, r6
 8001356:	1aba      	subs	r2, r7, r2
 8001358:	428e      	cmp	r6, r1
 800135a:	d100      	bne.n	800135e <__aeabi_dadd+0x52>
 800135c:	e0b0      	b.n	80014c0 <__aeabi_dadd+0x1b4>
 800135e:	2a00      	cmp	r2, #0
 8001360:	dc00      	bgt.n	8001364 <__aeabi_dadd+0x58>
 8001362:	e078      	b.n	8001456 <__aeabi_dadd+0x14a>
 8001364:	4649      	mov	r1, r9
 8001366:	2900      	cmp	r1, #0
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x60>
 800136a:	e0e9      	b.n	8001540 <__aeabi_dadd+0x234>
 800136c:	49c9      	ldr	r1, [pc, #804]	@ (8001694 <__aeabi_dadd+0x388>)
 800136e:	428f      	cmp	r7, r1
 8001370:	d100      	bne.n	8001374 <__aeabi_dadd+0x68>
 8001372:	e195      	b.n	80016a0 <__aeabi_dadd+0x394>
 8001374:	2501      	movs	r5, #1
 8001376:	2a38      	cmp	r2, #56	@ 0x38
 8001378:	dc16      	bgt.n	80013a8 <__aeabi_dadd+0x9c>
 800137a:	2180      	movs	r1, #128	@ 0x80
 800137c:	4653      	mov	r3, sl
 800137e:	0409      	lsls	r1, r1, #16
 8001380:	430b      	orrs	r3, r1
 8001382:	469a      	mov	sl, r3
 8001384:	2a1f      	cmp	r2, #31
 8001386:	dd00      	ble.n	800138a <__aeabi_dadd+0x7e>
 8001388:	e1e7      	b.n	800175a <__aeabi_dadd+0x44e>
 800138a:	2120      	movs	r1, #32
 800138c:	4655      	mov	r5, sl
 800138e:	1a8b      	subs	r3, r1, r2
 8001390:	4661      	mov	r1, ip
 8001392:	409d      	lsls	r5, r3
 8001394:	40d1      	lsrs	r1, r2
 8001396:	430d      	orrs	r5, r1
 8001398:	4661      	mov	r1, ip
 800139a:	4099      	lsls	r1, r3
 800139c:	1e4b      	subs	r3, r1, #1
 800139e:	4199      	sbcs	r1, r3
 80013a0:	4653      	mov	r3, sl
 80013a2:	40d3      	lsrs	r3, r2
 80013a4:	430d      	orrs	r5, r1
 80013a6:	1ae4      	subs	r4, r4, r3
 80013a8:	1b45      	subs	r5, r0, r5
 80013aa:	42a8      	cmp	r0, r5
 80013ac:	4180      	sbcs	r0, r0
 80013ae:	4240      	negs	r0, r0
 80013b0:	1a24      	subs	r4, r4, r0
 80013b2:	0223      	lsls	r3, r4, #8
 80013b4:	d400      	bmi.n	80013b8 <__aeabi_dadd+0xac>
 80013b6:	e10f      	b.n	80015d8 <__aeabi_dadd+0x2cc>
 80013b8:	0264      	lsls	r4, r4, #9
 80013ba:	0a64      	lsrs	r4, r4, #9
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0xb6>
 80013c0:	e139      	b.n	8001636 <__aeabi_dadd+0x32a>
 80013c2:	0020      	movs	r0, r4
 80013c4:	f001 fd7e 	bl	8002ec4 <__clzsi2>
 80013c8:	0003      	movs	r3, r0
 80013ca:	3b08      	subs	r3, #8
 80013cc:	2120      	movs	r1, #32
 80013ce:	0028      	movs	r0, r5
 80013d0:	1aca      	subs	r2, r1, r3
 80013d2:	40d0      	lsrs	r0, r2
 80013d4:	409c      	lsls	r4, r3
 80013d6:	0002      	movs	r2, r0
 80013d8:	409d      	lsls	r5, r3
 80013da:	4322      	orrs	r2, r4
 80013dc:	429f      	cmp	r7, r3
 80013de:	dd00      	ble.n	80013e2 <__aeabi_dadd+0xd6>
 80013e0:	e173      	b.n	80016ca <__aeabi_dadd+0x3be>
 80013e2:	1bd8      	subs	r0, r3, r7
 80013e4:	3001      	adds	r0, #1
 80013e6:	1a09      	subs	r1, r1, r0
 80013e8:	002c      	movs	r4, r5
 80013ea:	408d      	lsls	r5, r1
 80013ec:	40c4      	lsrs	r4, r0
 80013ee:	1e6b      	subs	r3, r5, #1
 80013f0:	419d      	sbcs	r5, r3
 80013f2:	0013      	movs	r3, r2
 80013f4:	40c2      	lsrs	r2, r0
 80013f6:	408b      	lsls	r3, r1
 80013f8:	4325      	orrs	r5, r4
 80013fa:	2700      	movs	r7, #0
 80013fc:	0014      	movs	r4, r2
 80013fe:	431d      	orrs	r5, r3
 8001400:	076b      	lsls	r3, r5, #29
 8001402:	d009      	beq.n	8001418 <__aeabi_dadd+0x10c>
 8001404:	230f      	movs	r3, #15
 8001406:	402b      	ands	r3, r5
 8001408:	2b04      	cmp	r3, #4
 800140a:	d005      	beq.n	8001418 <__aeabi_dadd+0x10c>
 800140c:	1d2b      	adds	r3, r5, #4
 800140e:	42ab      	cmp	r3, r5
 8001410:	41ad      	sbcs	r5, r5
 8001412:	426d      	negs	r5, r5
 8001414:	1964      	adds	r4, r4, r5
 8001416:	001d      	movs	r5, r3
 8001418:	0223      	lsls	r3, r4, #8
 800141a:	d400      	bmi.n	800141e <__aeabi_dadd+0x112>
 800141c:	e12d      	b.n	800167a <__aeabi_dadd+0x36e>
 800141e:	4a9d      	ldr	r2, [pc, #628]	@ (8001694 <__aeabi_dadd+0x388>)
 8001420:	3701      	adds	r7, #1
 8001422:	4297      	cmp	r7, r2
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x11c>
 8001426:	e0d3      	b.n	80015d0 <__aeabi_dadd+0x2c4>
 8001428:	4646      	mov	r6, r8
 800142a:	499b      	ldr	r1, [pc, #620]	@ (8001698 <__aeabi_dadd+0x38c>)
 800142c:	08ed      	lsrs	r5, r5, #3
 800142e:	4021      	ands	r1, r4
 8001430:	074a      	lsls	r2, r1, #29
 8001432:	432a      	orrs	r2, r5
 8001434:	057c      	lsls	r4, r7, #21
 8001436:	024d      	lsls	r5, r1, #9
 8001438:	0b2d      	lsrs	r5, r5, #12
 800143a:	0d64      	lsrs	r4, r4, #21
 800143c:	0524      	lsls	r4, r4, #20
 800143e:	432c      	orrs	r4, r5
 8001440:	07f6      	lsls	r6, r6, #31
 8001442:	4334      	orrs	r4, r6
 8001444:	0010      	movs	r0, r2
 8001446:	0021      	movs	r1, r4
 8001448:	b003      	add	sp, #12
 800144a:	bcf0      	pop	{r4, r5, r6, r7}
 800144c:	46bb      	mov	fp, r7
 800144e:	46b2      	mov	sl, r6
 8001450:	46a9      	mov	r9, r5
 8001452:	46a0      	mov	r8, r4
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	2a00      	cmp	r2, #0
 8001458:	d100      	bne.n	800145c <__aeabi_dadd+0x150>
 800145a:	e084      	b.n	8001566 <__aeabi_dadd+0x25a>
 800145c:	464a      	mov	r2, r9
 800145e:	1bd2      	subs	r2, r2, r7
 8001460:	2f00      	cmp	r7, #0
 8001462:	d000      	beq.n	8001466 <__aeabi_dadd+0x15a>
 8001464:	e16d      	b.n	8001742 <__aeabi_dadd+0x436>
 8001466:	0025      	movs	r5, r4
 8001468:	4305      	orrs	r5, r0
 800146a:	d100      	bne.n	800146e <__aeabi_dadd+0x162>
 800146c:	e127      	b.n	80016be <__aeabi_dadd+0x3b2>
 800146e:	1e56      	subs	r6, r2, #1
 8001470:	2a01      	cmp	r2, #1
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x16a>
 8001474:	e23b      	b.n	80018ee <__aeabi_dadd+0x5e2>
 8001476:	4d87      	ldr	r5, [pc, #540]	@ (8001694 <__aeabi_dadd+0x388>)
 8001478:	42aa      	cmp	r2, r5
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x172>
 800147c:	e26a      	b.n	8001954 <__aeabi_dadd+0x648>
 800147e:	2501      	movs	r5, #1
 8001480:	2e38      	cmp	r6, #56	@ 0x38
 8001482:	dc12      	bgt.n	80014aa <__aeabi_dadd+0x19e>
 8001484:	0032      	movs	r2, r6
 8001486:	2a1f      	cmp	r2, #31
 8001488:	dd00      	ble.n	800148c <__aeabi_dadd+0x180>
 800148a:	e1f8      	b.n	800187e <__aeabi_dadd+0x572>
 800148c:	2620      	movs	r6, #32
 800148e:	0025      	movs	r5, r4
 8001490:	1ab6      	subs	r6, r6, r2
 8001492:	0007      	movs	r7, r0
 8001494:	4653      	mov	r3, sl
 8001496:	40b0      	lsls	r0, r6
 8001498:	40d4      	lsrs	r4, r2
 800149a:	40b5      	lsls	r5, r6
 800149c:	40d7      	lsrs	r7, r2
 800149e:	1e46      	subs	r6, r0, #1
 80014a0:	41b0      	sbcs	r0, r6
 80014a2:	1b1b      	subs	r3, r3, r4
 80014a4:	469a      	mov	sl, r3
 80014a6:	433d      	orrs	r5, r7
 80014a8:	4305      	orrs	r5, r0
 80014aa:	4662      	mov	r2, ip
 80014ac:	1b55      	subs	r5, r2, r5
 80014ae:	45ac      	cmp	ip, r5
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4653      	mov	r3, sl
 80014b4:	4252      	negs	r2, r2
 80014b6:	000e      	movs	r6, r1
 80014b8:	464f      	mov	r7, r9
 80014ba:	4688      	mov	r8, r1
 80014bc:	1a9c      	subs	r4, r3, r2
 80014be:	e778      	b.n	80013b2 <__aeabi_dadd+0xa6>
 80014c0:	2a00      	cmp	r2, #0
 80014c2:	dc00      	bgt.n	80014c6 <__aeabi_dadd+0x1ba>
 80014c4:	e08e      	b.n	80015e4 <__aeabi_dadd+0x2d8>
 80014c6:	4649      	mov	r1, r9
 80014c8:	2900      	cmp	r1, #0
 80014ca:	d175      	bne.n	80015b8 <__aeabi_dadd+0x2ac>
 80014cc:	4661      	mov	r1, ip
 80014ce:	4653      	mov	r3, sl
 80014d0:	4319      	orrs	r1, r3
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x1ca>
 80014d4:	e0f6      	b.n	80016c4 <__aeabi_dadd+0x3b8>
 80014d6:	1e51      	subs	r1, r2, #1
 80014d8:	2a01      	cmp	r2, #1
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x1d2>
 80014dc:	e191      	b.n	8001802 <__aeabi_dadd+0x4f6>
 80014de:	4d6d      	ldr	r5, [pc, #436]	@ (8001694 <__aeabi_dadd+0x388>)
 80014e0:	42aa      	cmp	r2, r5
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dadd+0x1da>
 80014e4:	e0dc      	b.n	80016a0 <__aeabi_dadd+0x394>
 80014e6:	2501      	movs	r5, #1
 80014e8:	2938      	cmp	r1, #56	@ 0x38
 80014ea:	dc14      	bgt.n	8001516 <__aeabi_dadd+0x20a>
 80014ec:	000a      	movs	r2, r1
 80014ee:	2a1f      	cmp	r2, #31
 80014f0:	dd00      	ble.n	80014f4 <__aeabi_dadd+0x1e8>
 80014f2:	e1a2      	b.n	800183a <__aeabi_dadd+0x52e>
 80014f4:	2120      	movs	r1, #32
 80014f6:	4653      	mov	r3, sl
 80014f8:	1a89      	subs	r1, r1, r2
 80014fa:	408b      	lsls	r3, r1
 80014fc:	001d      	movs	r5, r3
 80014fe:	4663      	mov	r3, ip
 8001500:	40d3      	lsrs	r3, r2
 8001502:	431d      	orrs	r5, r3
 8001504:	4663      	mov	r3, ip
 8001506:	408b      	lsls	r3, r1
 8001508:	0019      	movs	r1, r3
 800150a:	1e4b      	subs	r3, r1, #1
 800150c:	4199      	sbcs	r1, r3
 800150e:	4653      	mov	r3, sl
 8001510:	40d3      	lsrs	r3, r2
 8001512:	430d      	orrs	r5, r1
 8001514:	18e4      	adds	r4, r4, r3
 8001516:	182d      	adds	r5, r5, r0
 8001518:	4285      	cmp	r5, r0
 800151a:	4180      	sbcs	r0, r0
 800151c:	4240      	negs	r0, r0
 800151e:	1824      	adds	r4, r4, r0
 8001520:	0223      	lsls	r3, r4, #8
 8001522:	d559      	bpl.n	80015d8 <__aeabi_dadd+0x2cc>
 8001524:	4b5b      	ldr	r3, [pc, #364]	@ (8001694 <__aeabi_dadd+0x388>)
 8001526:	3701      	adds	r7, #1
 8001528:	429f      	cmp	r7, r3
 800152a:	d051      	beq.n	80015d0 <__aeabi_dadd+0x2c4>
 800152c:	2101      	movs	r1, #1
 800152e:	4b5a      	ldr	r3, [pc, #360]	@ (8001698 <__aeabi_dadd+0x38c>)
 8001530:	086a      	lsrs	r2, r5, #1
 8001532:	401c      	ands	r4, r3
 8001534:	4029      	ands	r1, r5
 8001536:	430a      	orrs	r2, r1
 8001538:	07e5      	lsls	r5, r4, #31
 800153a:	4315      	orrs	r5, r2
 800153c:	0864      	lsrs	r4, r4, #1
 800153e:	e75f      	b.n	8001400 <__aeabi_dadd+0xf4>
 8001540:	4661      	mov	r1, ip
 8001542:	4653      	mov	r3, sl
 8001544:	4319      	orrs	r1, r3
 8001546:	d100      	bne.n	800154a <__aeabi_dadd+0x23e>
 8001548:	e0bc      	b.n	80016c4 <__aeabi_dadd+0x3b8>
 800154a:	1e51      	subs	r1, r2, #1
 800154c:	2a01      	cmp	r2, #1
 800154e:	d100      	bne.n	8001552 <__aeabi_dadd+0x246>
 8001550:	e164      	b.n	800181c <__aeabi_dadd+0x510>
 8001552:	4d50      	ldr	r5, [pc, #320]	@ (8001694 <__aeabi_dadd+0x388>)
 8001554:	42aa      	cmp	r2, r5
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x24e>
 8001558:	e16a      	b.n	8001830 <__aeabi_dadd+0x524>
 800155a:	2501      	movs	r5, #1
 800155c:	2938      	cmp	r1, #56	@ 0x38
 800155e:	dd00      	ble.n	8001562 <__aeabi_dadd+0x256>
 8001560:	e722      	b.n	80013a8 <__aeabi_dadd+0x9c>
 8001562:	000a      	movs	r2, r1
 8001564:	e70e      	b.n	8001384 <__aeabi_dadd+0x78>
 8001566:	4a4d      	ldr	r2, [pc, #308]	@ (800169c <__aeabi_dadd+0x390>)
 8001568:	1c7d      	adds	r5, r7, #1
 800156a:	4215      	tst	r5, r2
 800156c:	d000      	beq.n	8001570 <__aeabi_dadd+0x264>
 800156e:	e0d0      	b.n	8001712 <__aeabi_dadd+0x406>
 8001570:	0025      	movs	r5, r4
 8001572:	4662      	mov	r2, ip
 8001574:	4653      	mov	r3, sl
 8001576:	4305      	orrs	r5, r0
 8001578:	431a      	orrs	r2, r3
 800157a:	2f00      	cmp	r7, #0
 800157c:	d000      	beq.n	8001580 <__aeabi_dadd+0x274>
 800157e:	e137      	b.n	80017f0 <__aeabi_dadd+0x4e4>
 8001580:	2d00      	cmp	r5, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x27a>
 8001584:	e1a8      	b.n	80018d8 <__aeabi_dadd+0x5cc>
 8001586:	2a00      	cmp	r2, #0
 8001588:	d100      	bne.n	800158c <__aeabi_dadd+0x280>
 800158a:	e16a      	b.n	8001862 <__aeabi_dadd+0x556>
 800158c:	4663      	mov	r3, ip
 800158e:	1ac5      	subs	r5, r0, r3
 8001590:	4653      	mov	r3, sl
 8001592:	1ae2      	subs	r2, r4, r3
 8001594:	42a8      	cmp	r0, r5
 8001596:	419b      	sbcs	r3, r3
 8001598:	425b      	negs	r3, r3
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	021a      	lsls	r2, r3, #8
 800159e:	d400      	bmi.n	80015a2 <__aeabi_dadd+0x296>
 80015a0:	e203      	b.n	80019aa <__aeabi_dadd+0x69e>
 80015a2:	4663      	mov	r3, ip
 80015a4:	1a1d      	subs	r5, r3, r0
 80015a6:	45ac      	cmp	ip, r5
 80015a8:	4192      	sbcs	r2, r2
 80015aa:	4653      	mov	r3, sl
 80015ac:	4252      	negs	r2, r2
 80015ae:	1b1c      	subs	r4, r3, r4
 80015b0:	000e      	movs	r6, r1
 80015b2:	4688      	mov	r8, r1
 80015b4:	1aa4      	subs	r4, r4, r2
 80015b6:	e723      	b.n	8001400 <__aeabi_dadd+0xf4>
 80015b8:	4936      	ldr	r1, [pc, #216]	@ (8001694 <__aeabi_dadd+0x388>)
 80015ba:	428f      	cmp	r7, r1
 80015bc:	d070      	beq.n	80016a0 <__aeabi_dadd+0x394>
 80015be:	2501      	movs	r5, #1
 80015c0:	2a38      	cmp	r2, #56	@ 0x38
 80015c2:	dca8      	bgt.n	8001516 <__aeabi_dadd+0x20a>
 80015c4:	2180      	movs	r1, #128	@ 0x80
 80015c6:	4653      	mov	r3, sl
 80015c8:	0409      	lsls	r1, r1, #16
 80015ca:	430b      	orrs	r3, r1
 80015cc:	469a      	mov	sl, r3
 80015ce:	e78e      	b.n	80014ee <__aeabi_dadd+0x1e2>
 80015d0:	003c      	movs	r4, r7
 80015d2:	2500      	movs	r5, #0
 80015d4:	2200      	movs	r2, #0
 80015d6:	e731      	b.n	800143c <__aeabi_dadd+0x130>
 80015d8:	2307      	movs	r3, #7
 80015da:	402b      	ands	r3, r5
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d000      	beq.n	80015e2 <__aeabi_dadd+0x2d6>
 80015e0:	e710      	b.n	8001404 <__aeabi_dadd+0xf8>
 80015e2:	e093      	b.n	800170c <__aeabi_dadd+0x400>
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d074      	beq.n	80016d2 <__aeabi_dadd+0x3c6>
 80015e8:	464a      	mov	r2, r9
 80015ea:	1bd2      	subs	r2, r2, r7
 80015ec:	2f00      	cmp	r7, #0
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x2e6>
 80015f0:	e0c7      	b.n	8001782 <__aeabi_dadd+0x476>
 80015f2:	4928      	ldr	r1, [pc, #160]	@ (8001694 <__aeabi_dadd+0x388>)
 80015f4:	4589      	cmp	r9, r1
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x2ee>
 80015f8:	e185      	b.n	8001906 <__aeabi_dadd+0x5fa>
 80015fa:	2501      	movs	r5, #1
 80015fc:	2a38      	cmp	r2, #56	@ 0x38
 80015fe:	dc12      	bgt.n	8001626 <__aeabi_dadd+0x31a>
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	0409      	lsls	r1, r1, #16
 8001604:	430c      	orrs	r4, r1
 8001606:	2a1f      	cmp	r2, #31
 8001608:	dd00      	ble.n	800160c <__aeabi_dadd+0x300>
 800160a:	e1ab      	b.n	8001964 <__aeabi_dadd+0x658>
 800160c:	2120      	movs	r1, #32
 800160e:	0025      	movs	r5, r4
 8001610:	1a89      	subs	r1, r1, r2
 8001612:	0007      	movs	r7, r0
 8001614:	4088      	lsls	r0, r1
 8001616:	408d      	lsls	r5, r1
 8001618:	40d7      	lsrs	r7, r2
 800161a:	1e41      	subs	r1, r0, #1
 800161c:	4188      	sbcs	r0, r1
 800161e:	40d4      	lsrs	r4, r2
 8001620:	433d      	orrs	r5, r7
 8001622:	4305      	orrs	r5, r0
 8001624:	44a2      	add	sl, r4
 8001626:	4465      	add	r5, ip
 8001628:	4565      	cmp	r5, ip
 800162a:	4192      	sbcs	r2, r2
 800162c:	4252      	negs	r2, r2
 800162e:	4452      	add	r2, sl
 8001630:	0014      	movs	r4, r2
 8001632:	464f      	mov	r7, r9
 8001634:	e774      	b.n	8001520 <__aeabi_dadd+0x214>
 8001636:	0028      	movs	r0, r5
 8001638:	f001 fc44 	bl	8002ec4 <__clzsi2>
 800163c:	0003      	movs	r3, r0
 800163e:	3318      	adds	r3, #24
 8001640:	2b1f      	cmp	r3, #31
 8001642:	dc00      	bgt.n	8001646 <__aeabi_dadd+0x33a>
 8001644:	e6c2      	b.n	80013cc <__aeabi_dadd+0xc0>
 8001646:	002a      	movs	r2, r5
 8001648:	3808      	subs	r0, #8
 800164a:	4082      	lsls	r2, r0
 800164c:	429f      	cmp	r7, r3
 800164e:	dd00      	ble.n	8001652 <__aeabi_dadd+0x346>
 8001650:	e0a9      	b.n	80017a6 <__aeabi_dadd+0x49a>
 8001652:	1bdb      	subs	r3, r3, r7
 8001654:	1c58      	adds	r0, r3, #1
 8001656:	281f      	cmp	r0, #31
 8001658:	dc00      	bgt.n	800165c <__aeabi_dadd+0x350>
 800165a:	e1ac      	b.n	80019b6 <__aeabi_dadd+0x6aa>
 800165c:	0015      	movs	r5, r2
 800165e:	3b1f      	subs	r3, #31
 8001660:	40dd      	lsrs	r5, r3
 8001662:	2820      	cmp	r0, #32
 8001664:	d005      	beq.n	8001672 <__aeabi_dadd+0x366>
 8001666:	2340      	movs	r3, #64	@ 0x40
 8001668:	1a1b      	subs	r3, r3, r0
 800166a:	409a      	lsls	r2, r3
 800166c:	1e53      	subs	r3, r2, #1
 800166e:	419a      	sbcs	r2, r3
 8001670:	4315      	orrs	r5, r2
 8001672:	2307      	movs	r3, #7
 8001674:	2700      	movs	r7, #0
 8001676:	402b      	ands	r3, r5
 8001678:	e7b0      	b.n	80015dc <__aeabi_dadd+0x2d0>
 800167a:	08ed      	lsrs	r5, r5, #3
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <__aeabi_dadd+0x388>)
 800167e:	0762      	lsls	r2, r4, #29
 8001680:	432a      	orrs	r2, r5
 8001682:	08e4      	lsrs	r4, r4, #3
 8001684:	429f      	cmp	r7, r3
 8001686:	d00f      	beq.n	80016a8 <__aeabi_dadd+0x39c>
 8001688:	0324      	lsls	r4, r4, #12
 800168a:	0b25      	lsrs	r5, r4, #12
 800168c:	057c      	lsls	r4, r7, #21
 800168e:	0d64      	lsrs	r4, r4, #21
 8001690:	e6d4      	b.n	800143c <__aeabi_dadd+0x130>
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	000007ff 	.word	0x000007ff
 8001698:	ff7fffff 	.word	0xff7fffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	08c0      	lsrs	r0, r0, #3
 80016a2:	0762      	lsls	r2, r4, #29
 80016a4:	4302      	orrs	r2, r0
 80016a6:	08e4      	lsrs	r4, r4, #3
 80016a8:	0013      	movs	r3, r2
 80016aa:	4323      	orrs	r3, r4
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dadd+0x3a4>
 80016ae:	e186      	b.n	80019be <__aeabi_dadd+0x6b2>
 80016b0:	2580      	movs	r5, #128	@ 0x80
 80016b2:	032d      	lsls	r5, r5, #12
 80016b4:	4325      	orrs	r5, r4
 80016b6:	032d      	lsls	r5, r5, #12
 80016b8:	4cc3      	ldr	r4, [pc, #780]	@ (80019c8 <__aeabi_dadd+0x6bc>)
 80016ba:	0b2d      	lsrs	r5, r5, #12
 80016bc:	e6be      	b.n	800143c <__aeabi_dadd+0x130>
 80016be:	4660      	mov	r0, ip
 80016c0:	4654      	mov	r4, sl
 80016c2:	000e      	movs	r6, r1
 80016c4:	0017      	movs	r7, r2
 80016c6:	08c5      	lsrs	r5, r0, #3
 80016c8:	e7d8      	b.n	800167c <__aeabi_dadd+0x370>
 80016ca:	4cc0      	ldr	r4, [pc, #768]	@ (80019cc <__aeabi_dadd+0x6c0>)
 80016cc:	1aff      	subs	r7, r7, r3
 80016ce:	4014      	ands	r4, r2
 80016d0:	e696      	b.n	8001400 <__aeabi_dadd+0xf4>
 80016d2:	4abf      	ldr	r2, [pc, #764]	@ (80019d0 <__aeabi_dadd+0x6c4>)
 80016d4:	1c79      	adds	r1, r7, #1
 80016d6:	4211      	tst	r1, r2
 80016d8:	d16b      	bne.n	80017b2 <__aeabi_dadd+0x4a6>
 80016da:	0022      	movs	r2, r4
 80016dc:	4302      	orrs	r2, r0
 80016de:	2f00      	cmp	r7, #0
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dadd+0x3d8>
 80016e2:	e0db      	b.n	800189c <__aeabi_dadd+0x590>
 80016e4:	2a00      	cmp	r2, #0
 80016e6:	d100      	bne.n	80016ea <__aeabi_dadd+0x3de>
 80016e8:	e12d      	b.n	8001946 <__aeabi_dadd+0x63a>
 80016ea:	4662      	mov	r2, ip
 80016ec:	4653      	mov	r3, sl
 80016ee:	431a      	orrs	r2, r3
 80016f0:	d100      	bne.n	80016f4 <__aeabi_dadd+0x3e8>
 80016f2:	e0b6      	b.n	8001862 <__aeabi_dadd+0x556>
 80016f4:	4663      	mov	r3, ip
 80016f6:	18c5      	adds	r5, r0, r3
 80016f8:	4285      	cmp	r5, r0
 80016fa:	4180      	sbcs	r0, r0
 80016fc:	4454      	add	r4, sl
 80016fe:	4240      	negs	r0, r0
 8001700:	1824      	adds	r4, r4, r0
 8001702:	0223      	lsls	r3, r4, #8
 8001704:	d502      	bpl.n	800170c <__aeabi_dadd+0x400>
 8001706:	000f      	movs	r7, r1
 8001708:	4bb0      	ldr	r3, [pc, #704]	@ (80019cc <__aeabi_dadd+0x6c0>)
 800170a:	401c      	ands	r4, r3
 800170c:	003a      	movs	r2, r7
 800170e:	0028      	movs	r0, r5
 8001710:	e7d8      	b.n	80016c4 <__aeabi_dadd+0x3b8>
 8001712:	4662      	mov	r2, ip
 8001714:	1a85      	subs	r5, r0, r2
 8001716:	42a8      	cmp	r0, r5
 8001718:	4192      	sbcs	r2, r2
 800171a:	4653      	mov	r3, sl
 800171c:	4252      	negs	r2, r2
 800171e:	4691      	mov	r9, r2
 8001720:	1ae3      	subs	r3, r4, r3
 8001722:	001a      	movs	r2, r3
 8001724:	464b      	mov	r3, r9
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	4691      	mov	r9, r2
 800172c:	021a      	lsls	r2, r3, #8
 800172e:	d454      	bmi.n	80017da <__aeabi_dadd+0x4ce>
 8001730:	464a      	mov	r2, r9
 8001732:	464c      	mov	r4, r9
 8001734:	432a      	orrs	r2, r5
 8001736:	d000      	beq.n	800173a <__aeabi_dadd+0x42e>
 8001738:	e640      	b.n	80013bc <__aeabi_dadd+0xb0>
 800173a:	2600      	movs	r6, #0
 800173c:	2400      	movs	r4, #0
 800173e:	2500      	movs	r5, #0
 8001740:	e67c      	b.n	800143c <__aeabi_dadd+0x130>
 8001742:	4da1      	ldr	r5, [pc, #644]	@ (80019c8 <__aeabi_dadd+0x6bc>)
 8001744:	45a9      	cmp	r9, r5
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x43e>
 8001748:	e090      	b.n	800186c <__aeabi_dadd+0x560>
 800174a:	2501      	movs	r5, #1
 800174c:	2a38      	cmp	r2, #56	@ 0x38
 800174e:	dd00      	ble.n	8001752 <__aeabi_dadd+0x446>
 8001750:	e6ab      	b.n	80014aa <__aeabi_dadd+0x19e>
 8001752:	2580      	movs	r5, #128	@ 0x80
 8001754:	042d      	lsls	r5, r5, #16
 8001756:	432c      	orrs	r4, r5
 8001758:	e695      	b.n	8001486 <__aeabi_dadd+0x17a>
 800175a:	0011      	movs	r1, r2
 800175c:	4655      	mov	r5, sl
 800175e:	3920      	subs	r1, #32
 8001760:	40cd      	lsrs	r5, r1
 8001762:	46a9      	mov	r9, r5
 8001764:	2a20      	cmp	r2, #32
 8001766:	d006      	beq.n	8001776 <__aeabi_dadd+0x46a>
 8001768:	2140      	movs	r1, #64	@ 0x40
 800176a:	4653      	mov	r3, sl
 800176c:	1a8a      	subs	r2, r1, r2
 800176e:	4093      	lsls	r3, r2
 8001770:	4662      	mov	r2, ip
 8001772:	431a      	orrs	r2, r3
 8001774:	4694      	mov	ip, r2
 8001776:	4665      	mov	r5, ip
 8001778:	1e6b      	subs	r3, r5, #1
 800177a:	419d      	sbcs	r5, r3
 800177c:	464b      	mov	r3, r9
 800177e:	431d      	orrs	r5, r3
 8001780:	e612      	b.n	80013a8 <__aeabi_dadd+0x9c>
 8001782:	0021      	movs	r1, r4
 8001784:	4301      	orrs	r1, r0
 8001786:	d100      	bne.n	800178a <__aeabi_dadd+0x47e>
 8001788:	e0c4      	b.n	8001914 <__aeabi_dadd+0x608>
 800178a:	1e51      	subs	r1, r2, #1
 800178c:	2a01      	cmp	r2, #1
 800178e:	d100      	bne.n	8001792 <__aeabi_dadd+0x486>
 8001790:	e0fb      	b.n	800198a <__aeabi_dadd+0x67e>
 8001792:	4d8d      	ldr	r5, [pc, #564]	@ (80019c8 <__aeabi_dadd+0x6bc>)
 8001794:	42aa      	cmp	r2, r5
 8001796:	d100      	bne.n	800179a <__aeabi_dadd+0x48e>
 8001798:	e0b5      	b.n	8001906 <__aeabi_dadd+0x5fa>
 800179a:	2501      	movs	r5, #1
 800179c:	2938      	cmp	r1, #56	@ 0x38
 800179e:	dd00      	ble.n	80017a2 <__aeabi_dadd+0x496>
 80017a0:	e741      	b.n	8001626 <__aeabi_dadd+0x31a>
 80017a2:	000a      	movs	r2, r1
 80017a4:	e72f      	b.n	8001606 <__aeabi_dadd+0x2fa>
 80017a6:	4c89      	ldr	r4, [pc, #548]	@ (80019cc <__aeabi_dadd+0x6c0>)
 80017a8:	1aff      	subs	r7, r7, r3
 80017aa:	4014      	ands	r4, r2
 80017ac:	0762      	lsls	r2, r4, #29
 80017ae:	08e4      	lsrs	r4, r4, #3
 80017b0:	e76a      	b.n	8001688 <__aeabi_dadd+0x37c>
 80017b2:	4a85      	ldr	r2, [pc, #532]	@ (80019c8 <__aeabi_dadd+0x6bc>)
 80017b4:	4291      	cmp	r1, r2
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x4ae>
 80017b8:	e0e3      	b.n	8001982 <__aeabi_dadd+0x676>
 80017ba:	4663      	mov	r3, ip
 80017bc:	18c2      	adds	r2, r0, r3
 80017be:	4282      	cmp	r2, r0
 80017c0:	4180      	sbcs	r0, r0
 80017c2:	0023      	movs	r3, r4
 80017c4:	4240      	negs	r0, r0
 80017c6:	4453      	add	r3, sl
 80017c8:	181b      	adds	r3, r3, r0
 80017ca:	07dd      	lsls	r5, r3, #31
 80017cc:	085c      	lsrs	r4, r3, #1
 80017ce:	2307      	movs	r3, #7
 80017d0:	0852      	lsrs	r2, r2, #1
 80017d2:	4315      	orrs	r5, r2
 80017d4:	000f      	movs	r7, r1
 80017d6:	402b      	ands	r3, r5
 80017d8:	e700      	b.n	80015dc <__aeabi_dadd+0x2d0>
 80017da:	4663      	mov	r3, ip
 80017dc:	1a1d      	subs	r5, r3, r0
 80017de:	45ac      	cmp	ip, r5
 80017e0:	4192      	sbcs	r2, r2
 80017e2:	4653      	mov	r3, sl
 80017e4:	4252      	negs	r2, r2
 80017e6:	1b1c      	subs	r4, r3, r4
 80017e8:	000e      	movs	r6, r1
 80017ea:	4688      	mov	r8, r1
 80017ec:	1aa4      	subs	r4, r4, r2
 80017ee:	e5e5      	b.n	80013bc <__aeabi_dadd+0xb0>
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	d000      	beq.n	80017f6 <__aeabi_dadd+0x4ea>
 80017f4:	e091      	b.n	800191a <__aeabi_dadd+0x60e>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d138      	bne.n	800186c <__aeabi_dadd+0x560>
 80017fa:	2480      	movs	r4, #128	@ 0x80
 80017fc:	2600      	movs	r6, #0
 80017fe:	0324      	lsls	r4, r4, #12
 8001800:	e756      	b.n	80016b0 <__aeabi_dadd+0x3a4>
 8001802:	4663      	mov	r3, ip
 8001804:	18c5      	adds	r5, r0, r3
 8001806:	4285      	cmp	r5, r0
 8001808:	4180      	sbcs	r0, r0
 800180a:	4454      	add	r4, sl
 800180c:	4240      	negs	r0, r0
 800180e:	1824      	adds	r4, r4, r0
 8001810:	2701      	movs	r7, #1
 8001812:	0223      	lsls	r3, r4, #8
 8001814:	d400      	bmi.n	8001818 <__aeabi_dadd+0x50c>
 8001816:	e6df      	b.n	80015d8 <__aeabi_dadd+0x2cc>
 8001818:	2702      	movs	r7, #2
 800181a:	e687      	b.n	800152c <__aeabi_dadd+0x220>
 800181c:	4663      	mov	r3, ip
 800181e:	1ac5      	subs	r5, r0, r3
 8001820:	42a8      	cmp	r0, r5
 8001822:	4180      	sbcs	r0, r0
 8001824:	4653      	mov	r3, sl
 8001826:	4240      	negs	r0, r0
 8001828:	1ae4      	subs	r4, r4, r3
 800182a:	2701      	movs	r7, #1
 800182c:	1a24      	subs	r4, r4, r0
 800182e:	e5c0      	b.n	80013b2 <__aeabi_dadd+0xa6>
 8001830:	0762      	lsls	r2, r4, #29
 8001832:	08c0      	lsrs	r0, r0, #3
 8001834:	4302      	orrs	r2, r0
 8001836:	08e4      	lsrs	r4, r4, #3
 8001838:	e736      	b.n	80016a8 <__aeabi_dadd+0x39c>
 800183a:	0011      	movs	r1, r2
 800183c:	4653      	mov	r3, sl
 800183e:	3920      	subs	r1, #32
 8001840:	40cb      	lsrs	r3, r1
 8001842:	4699      	mov	r9, r3
 8001844:	2a20      	cmp	r2, #32
 8001846:	d006      	beq.n	8001856 <__aeabi_dadd+0x54a>
 8001848:	2140      	movs	r1, #64	@ 0x40
 800184a:	4653      	mov	r3, sl
 800184c:	1a8a      	subs	r2, r1, r2
 800184e:	4093      	lsls	r3, r2
 8001850:	4662      	mov	r2, ip
 8001852:	431a      	orrs	r2, r3
 8001854:	4694      	mov	ip, r2
 8001856:	4665      	mov	r5, ip
 8001858:	1e6b      	subs	r3, r5, #1
 800185a:	419d      	sbcs	r5, r3
 800185c:	464b      	mov	r3, r9
 800185e:	431d      	orrs	r5, r3
 8001860:	e659      	b.n	8001516 <__aeabi_dadd+0x20a>
 8001862:	0762      	lsls	r2, r4, #29
 8001864:	08c0      	lsrs	r0, r0, #3
 8001866:	4302      	orrs	r2, r0
 8001868:	08e4      	lsrs	r4, r4, #3
 800186a:	e70d      	b.n	8001688 <__aeabi_dadd+0x37c>
 800186c:	4653      	mov	r3, sl
 800186e:	075a      	lsls	r2, r3, #29
 8001870:	4663      	mov	r3, ip
 8001872:	08d8      	lsrs	r0, r3, #3
 8001874:	4653      	mov	r3, sl
 8001876:	000e      	movs	r6, r1
 8001878:	4302      	orrs	r2, r0
 800187a:	08dc      	lsrs	r4, r3, #3
 800187c:	e714      	b.n	80016a8 <__aeabi_dadd+0x39c>
 800187e:	0015      	movs	r5, r2
 8001880:	0026      	movs	r6, r4
 8001882:	3d20      	subs	r5, #32
 8001884:	40ee      	lsrs	r6, r5
 8001886:	2a20      	cmp	r2, #32
 8001888:	d003      	beq.n	8001892 <__aeabi_dadd+0x586>
 800188a:	2540      	movs	r5, #64	@ 0x40
 800188c:	1aaa      	subs	r2, r5, r2
 800188e:	4094      	lsls	r4, r2
 8001890:	4320      	orrs	r0, r4
 8001892:	1e42      	subs	r2, r0, #1
 8001894:	4190      	sbcs	r0, r2
 8001896:	0005      	movs	r5, r0
 8001898:	4335      	orrs	r5, r6
 800189a:	e606      	b.n	80014aa <__aeabi_dadd+0x19e>
 800189c:	2a00      	cmp	r2, #0
 800189e:	d07c      	beq.n	800199a <__aeabi_dadd+0x68e>
 80018a0:	4662      	mov	r2, ip
 80018a2:	4653      	mov	r3, sl
 80018a4:	08c0      	lsrs	r0, r0, #3
 80018a6:	431a      	orrs	r2, r3
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x5a0>
 80018aa:	e6fa      	b.n	80016a2 <__aeabi_dadd+0x396>
 80018ac:	0762      	lsls	r2, r4, #29
 80018ae:	4310      	orrs	r0, r2
 80018b0:	2280      	movs	r2, #128	@ 0x80
 80018b2:	08e4      	lsrs	r4, r4, #3
 80018b4:	0312      	lsls	r2, r2, #12
 80018b6:	4214      	tst	r4, r2
 80018b8:	d008      	beq.n	80018cc <__aeabi_dadd+0x5c0>
 80018ba:	08d9      	lsrs	r1, r3, #3
 80018bc:	4211      	tst	r1, r2
 80018be:	d105      	bne.n	80018cc <__aeabi_dadd+0x5c0>
 80018c0:	4663      	mov	r3, ip
 80018c2:	08d8      	lsrs	r0, r3, #3
 80018c4:	4653      	mov	r3, sl
 80018c6:	000c      	movs	r4, r1
 80018c8:	075b      	lsls	r3, r3, #29
 80018ca:	4318      	orrs	r0, r3
 80018cc:	0f42      	lsrs	r2, r0, #29
 80018ce:	00c0      	lsls	r0, r0, #3
 80018d0:	08c0      	lsrs	r0, r0, #3
 80018d2:	0752      	lsls	r2, r2, #29
 80018d4:	4302      	orrs	r2, r0
 80018d6:	e6e7      	b.n	80016a8 <__aeabi_dadd+0x39c>
 80018d8:	2a00      	cmp	r2, #0
 80018da:	d100      	bne.n	80018de <__aeabi_dadd+0x5d2>
 80018dc:	e72d      	b.n	800173a <__aeabi_dadd+0x42e>
 80018de:	4663      	mov	r3, ip
 80018e0:	08d8      	lsrs	r0, r3, #3
 80018e2:	4653      	mov	r3, sl
 80018e4:	075a      	lsls	r2, r3, #29
 80018e6:	000e      	movs	r6, r1
 80018e8:	4302      	orrs	r2, r0
 80018ea:	08dc      	lsrs	r4, r3, #3
 80018ec:	e6cc      	b.n	8001688 <__aeabi_dadd+0x37c>
 80018ee:	4663      	mov	r3, ip
 80018f0:	1a1d      	subs	r5, r3, r0
 80018f2:	45ac      	cmp	ip, r5
 80018f4:	4192      	sbcs	r2, r2
 80018f6:	4653      	mov	r3, sl
 80018f8:	4252      	negs	r2, r2
 80018fa:	1b1c      	subs	r4, r3, r4
 80018fc:	000e      	movs	r6, r1
 80018fe:	4688      	mov	r8, r1
 8001900:	1aa4      	subs	r4, r4, r2
 8001902:	3701      	adds	r7, #1
 8001904:	e555      	b.n	80013b2 <__aeabi_dadd+0xa6>
 8001906:	4663      	mov	r3, ip
 8001908:	08d9      	lsrs	r1, r3, #3
 800190a:	4653      	mov	r3, sl
 800190c:	075a      	lsls	r2, r3, #29
 800190e:	430a      	orrs	r2, r1
 8001910:	08dc      	lsrs	r4, r3, #3
 8001912:	e6c9      	b.n	80016a8 <__aeabi_dadd+0x39c>
 8001914:	4660      	mov	r0, ip
 8001916:	4654      	mov	r4, sl
 8001918:	e6d4      	b.n	80016c4 <__aeabi_dadd+0x3b8>
 800191a:	08c0      	lsrs	r0, r0, #3
 800191c:	2a00      	cmp	r2, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dadd+0x616>
 8001920:	e6bf      	b.n	80016a2 <__aeabi_dadd+0x396>
 8001922:	0762      	lsls	r2, r4, #29
 8001924:	4310      	orrs	r0, r2
 8001926:	2280      	movs	r2, #128	@ 0x80
 8001928:	08e4      	lsrs	r4, r4, #3
 800192a:	0312      	lsls	r2, r2, #12
 800192c:	4214      	tst	r4, r2
 800192e:	d0cd      	beq.n	80018cc <__aeabi_dadd+0x5c0>
 8001930:	08dd      	lsrs	r5, r3, #3
 8001932:	4215      	tst	r5, r2
 8001934:	d1ca      	bne.n	80018cc <__aeabi_dadd+0x5c0>
 8001936:	4663      	mov	r3, ip
 8001938:	08d8      	lsrs	r0, r3, #3
 800193a:	4653      	mov	r3, sl
 800193c:	075b      	lsls	r3, r3, #29
 800193e:	000e      	movs	r6, r1
 8001940:	002c      	movs	r4, r5
 8001942:	4318      	orrs	r0, r3
 8001944:	e7c2      	b.n	80018cc <__aeabi_dadd+0x5c0>
 8001946:	4663      	mov	r3, ip
 8001948:	08d9      	lsrs	r1, r3, #3
 800194a:	4653      	mov	r3, sl
 800194c:	075a      	lsls	r2, r3, #29
 800194e:	430a      	orrs	r2, r1
 8001950:	08dc      	lsrs	r4, r3, #3
 8001952:	e699      	b.n	8001688 <__aeabi_dadd+0x37c>
 8001954:	4663      	mov	r3, ip
 8001956:	08d8      	lsrs	r0, r3, #3
 8001958:	4653      	mov	r3, sl
 800195a:	075a      	lsls	r2, r3, #29
 800195c:	000e      	movs	r6, r1
 800195e:	4302      	orrs	r2, r0
 8001960:	08dc      	lsrs	r4, r3, #3
 8001962:	e6a1      	b.n	80016a8 <__aeabi_dadd+0x39c>
 8001964:	0011      	movs	r1, r2
 8001966:	0027      	movs	r7, r4
 8001968:	3920      	subs	r1, #32
 800196a:	40cf      	lsrs	r7, r1
 800196c:	2a20      	cmp	r2, #32
 800196e:	d003      	beq.n	8001978 <__aeabi_dadd+0x66c>
 8001970:	2140      	movs	r1, #64	@ 0x40
 8001972:	1a8a      	subs	r2, r1, r2
 8001974:	4094      	lsls	r4, r2
 8001976:	4320      	orrs	r0, r4
 8001978:	1e42      	subs	r2, r0, #1
 800197a:	4190      	sbcs	r0, r2
 800197c:	0005      	movs	r5, r0
 800197e:	433d      	orrs	r5, r7
 8001980:	e651      	b.n	8001626 <__aeabi_dadd+0x31a>
 8001982:	000c      	movs	r4, r1
 8001984:	2500      	movs	r5, #0
 8001986:	2200      	movs	r2, #0
 8001988:	e558      	b.n	800143c <__aeabi_dadd+0x130>
 800198a:	4460      	add	r0, ip
 800198c:	4560      	cmp	r0, ip
 800198e:	4192      	sbcs	r2, r2
 8001990:	4454      	add	r4, sl
 8001992:	4252      	negs	r2, r2
 8001994:	0005      	movs	r5, r0
 8001996:	18a4      	adds	r4, r4, r2
 8001998:	e73a      	b.n	8001810 <__aeabi_dadd+0x504>
 800199a:	4653      	mov	r3, sl
 800199c:	075a      	lsls	r2, r3, #29
 800199e:	4663      	mov	r3, ip
 80019a0:	08d9      	lsrs	r1, r3, #3
 80019a2:	4653      	mov	r3, sl
 80019a4:	430a      	orrs	r2, r1
 80019a6:	08dc      	lsrs	r4, r3, #3
 80019a8:	e67e      	b.n	80016a8 <__aeabi_dadd+0x39c>
 80019aa:	001a      	movs	r2, r3
 80019ac:	001c      	movs	r4, r3
 80019ae:	432a      	orrs	r2, r5
 80019b0:	d000      	beq.n	80019b4 <__aeabi_dadd+0x6a8>
 80019b2:	e6ab      	b.n	800170c <__aeabi_dadd+0x400>
 80019b4:	e6c1      	b.n	800173a <__aeabi_dadd+0x42e>
 80019b6:	2120      	movs	r1, #32
 80019b8:	2500      	movs	r5, #0
 80019ba:	1a09      	subs	r1, r1, r0
 80019bc:	e519      	b.n	80013f2 <__aeabi_dadd+0xe6>
 80019be:	2200      	movs	r2, #0
 80019c0:	2500      	movs	r5, #0
 80019c2:	4c01      	ldr	r4, [pc, #4]	@ (80019c8 <__aeabi_dadd+0x6bc>)
 80019c4:	e53a      	b.n	800143c <__aeabi_dadd+0x130>
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	000007ff 	.word	0x000007ff
 80019cc:	ff7fffff 	.word	0xff7fffff
 80019d0:	000007fe 	.word	0x000007fe

080019d4 <__aeabi_ddiv>:
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	46de      	mov	lr, fp
 80019d8:	4645      	mov	r5, r8
 80019da:	4657      	mov	r7, sl
 80019dc:	464e      	mov	r6, r9
 80019de:	b5e0      	push	{r5, r6, r7, lr}
 80019e0:	b087      	sub	sp, #28
 80019e2:	9200      	str	r2, [sp, #0]
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	030b      	lsls	r3, r1, #12
 80019e8:	0b1b      	lsrs	r3, r3, #12
 80019ea:	469b      	mov	fp, r3
 80019ec:	0fca      	lsrs	r2, r1, #31
 80019ee:	004b      	lsls	r3, r1, #1
 80019f0:	0004      	movs	r4, r0
 80019f2:	4680      	mov	r8, r0
 80019f4:	0d5b      	lsrs	r3, r3, #21
 80019f6:	9202      	str	r2, [sp, #8]
 80019f8:	d100      	bne.n	80019fc <__aeabi_ddiv+0x28>
 80019fa:	e16a      	b.n	8001cd2 <__aeabi_ddiv+0x2fe>
 80019fc:	4ad4      	ldr	r2, [pc, #848]	@ (8001d50 <__aeabi_ddiv+0x37c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d100      	bne.n	8001a04 <__aeabi_ddiv+0x30>
 8001a02:	e18c      	b.n	8001d1e <__aeabi_ddiv+0x34a>
 8001a04:	4659      	mov	r1, fp
 8001a06:	0f42      	lsrs	r2, r0, #29
 8001a08:	00c9      	lsls	r1, r1, #3
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	2180      	movs	r1, #128	@ 0x80
 8001a0e:	0409      	lsls	r1, r1, #16
 8001a10:	4311      	orrs	r1, r2
 8001a12:	00c2      	lsls	r2, r0, #3
 8001a14:	4690      	mov	r8, r2
 8001a16:	4acf      	ldr	r2, [pc, #828]	@ (8001d54 <__aeabi_ddiv+0x380>)
 8001a18:	4689      	mov	r9, r1
 8001a1a:	4692      	mov	sl, r2
 8001a1c:	449a      	add	sl, r3
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2400      	movs	r4, #0
 8001a22:	9303      	str	r3, [sp, #12]
 8001a24:	9e00      	ldr	r6, [sp, #0]
 8001a26:	9f01      	ldr	r7, [sp, #4]
 8001a28:	033b      	lsls	r3, r7, #12
 8001a2a:	0b1b      	lsrs	r3, r3, #12
 8001a2c:	469b      	mov	fp, r3
 8001a2e:	007b      	lsls	r3, r7, #1
 8001a30:	0030      	movs	r0, r6
 8001a32:	0d5b      	lsrs	r3, r3, #21
 8001a34:	0ffd      	lsrs	r5, r7, #31
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x68>
 8001a3a:	e128      	b.n	8001c8e <__aeabi_ddiv+0x2ba>
 8001a3c:	4ac4      	ldr	r2, [pc, #784]	@ (8001d50 <__aeabi_ddiv+0x37c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x70>
 8001a42:	e177      	b.n	8001d34 <__aeabi_ddiv+0x360>
 8001a44:	4659      	mov	r1, fp
 8001a46:	0f72      	lsrs	r2, r6, #29
 8001a48:	00c9      	lsls	r1, r1, #3
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	0409      	lsls	r1, r1, #16
 8001a50:	4311      	orrs	r1, r2
 8001a52:	468b      	mov	fp, r1
 8001a54:	49bf      	ldr	r1, [pc, #764]	@ (8001d54 <__aeabi_ddiv+0x380>)
 8001a56:	00f2      	lsls	r2, r6, #3
 8001a58:	468c      	mov	ip, r1
 8001a5a:	4651      	mov	r1, sl
 8001a5c:	4463      	add	r3, ip
 8001a5e:	1acb      	subs	r3, r1, r3
 8001a60:	469a      	mov	sl, r3
 8001a62:	2300      	movs	r3, #0
 8001a64:	9e02      	ldr	r6, [sp, #8]
 8001a66:	406e      	eors	r6, r5
 8001a68:	2c0f      	cmp	r4, #15
 8001a6a:	d827      	bhi.n	8001abc <__aeabi_ddiv+0xe8>
 8001a6c:	49ba      	ldr	r1, [pc, #744]	@ (8001d58 <__aeabi_ddiv+0x384>)
 8001a6e:	00a4      	lsls	r4, r4, #2
 8001a70:	5909      	ldr	r1, [r1, r4]
 8001a72:	468f      	mov	pc, r1
 8001a74:	46cb      	mov	fp, r9
 8001a76:	4642      	mov	r2, r8
 8001a78:	9e02      	ldr	r6, [sp, #8]
 8001a7a:	9b03      	ldr	r3, [sp, #12]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d016      	beq.n	8001aae <__aeabi_ddiv+0xda>
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_ddiv+0xb2>
 8001a84:	e2a6      	b.n	8001fd4 <__aeabi_ddiv+0x600>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d000      	beq.n	8001a8c <__aeabi_ddiv+0xb8>
 8001a8a:	e0df      	b.n	8001c4c <__aeabi_ddiv+0x278>
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2400      	movs	r4, #0
 8001a92:	4690      	mov	r8, r2
 8001a94:	051b      	lsls	r3, r3, #20
 8001a96:	4323      	orrs	r3, r4
 8001a98:	07f6      	lsls	r6, r6, #31
 8001a9a:	4333      	orrs	r3, r6
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa4:	46bb      	mov	fp, r7
 8001aa6:	46b2      	mov	sl, r6
 8001aa8:	46a9      	mov	r9, r5
 8001aaa:	46a0      	mov	r8, r4
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2400      	movs	r4, #0
 8001ab2:	4690      	mov	r8, r2
 8001ab4:	4ba6      	ldr	r3, [pc, #664]	@ (8001d50 <__aeabi_ddiv+0x37c>)
 8001ab6:	e7ed      	b.n	8001a94 <__aeabi_ddiv+0xc0>
 8001ab8:	002e      	movs	r6, r5
 8001aba:	e7df      	b.n	8001a7c <__aeabi_ddiv+0xa8>
 8001abc:	45cb      	cmp	fp, r9
 8001abe:	d200      	bcs.n	8001ac2 <__aeabi_ddiv+0xee>
 8001ac0:	e1d4      	b.n	8001e6c <__aeabi_ddiv+0x498>
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_ddiv+0xf2>
 8001ac4:	e1cf      	b.n	8001e66 <__aeabi_ddiv+0x492>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	425b      	negs	r3, r3
 8001aca:	469c      	mov	ip, r3
 8001acc:	4644      	mov	r4, r8
 8001ace:	4648      	mov	r0, r9
 8001ad0:	2700      	movs	r7, #0
 8001ad2:	44e2      	add	sl, ip
 8001ad4:	465b      	mov	r3, fp
 8001ad6:	0e15      	lsrs	r5, r2, #24
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	431d      	orrs	r5, r3
 8001adc:	0c19      	lsrs	r1, r3, #16
 8001ade:	042b      	lsls	r3, r5, #16
 8001ae0:	0212      	lsls	r2, r2, #8
 8001ae2:	9500      	str	r5, [sp, #0]
 8001ae4:	0c1d      	lsrs	r5, r3, #16
 8001ae6:	4691      	mov	r9, r2
 8001ae8:	9102      	str	r1, [sp, #8]
 8001aea:	9503      	str	r5, [sp, #12]
 8001aec:	f7fe fb9c 	bl	8000228 <__aeabi_uidivmod>
 8001af0:	0002      	movs	r2, r0
 8001af2:	436a      	muls	r2, r5
 8001af4:	040b      	lsls	r3, r1, #16
 8001af6:	0c21      	lsrs	r1, r4, #16
 8001af8:	4680      	mov	r8, r0
 8001afa:	4319      	orrs	r1, r3
 8001afc:	428a      	cmp	r2, r1
 8001afe:	d909      	bls.n	8001b14 <__aeabi_ddiv+0x140>
 8001b00:	9d00      	ldr	r5, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	46ac      	mov	ip, r5
 8001b06:	425b      	negs	r3, r3
 8001b08:	4461      	add	r1, ip
 8001b0a:	469c      	mov	ip, r3
 8001b0c:	44e0      	add	r8, ip
 8001b0e:	428d      	cmp	r5, r1
 8001b10:	d800      	bhi.n	8001b14 <__aeabi_ddiv+0x140>
 8001b12:	e1fb      	b.n	8001f0c <__aeabi_ddiv+0x538>
 8001b14:	1a88      	subs	r0, r1, r2
 8001b16:	9902      	ldr	r1, [sp, #8]
 8001b18:	f7fe fb86 	bl	8000228 <__aeabi_uidivmod>
 8001b1c:	9a03      	ldr	r2, [sp, #12]
 8001b1e:	0424      	lsls	r4, r4, #16
 8001b20:	4342      	muls	r2, r0
 8001b22:	0409      	lsls	r1, r1, #16
 8001b24:	0c24      	lsrs	r4, r4, #16
 8001b26:	0003      	movs	r3, r0
 8001b28:	430c      	orrs	r4, r1
 8001b2a:	42a2      	cmp	r2, r4
 8001b2c:	d906      	bls.n	8001b3c <__aeabi_ddiv+0x168>
 8001b2e:	9900      	ldr	r1, [sp, #0]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	468c      	mov	ip, r1
 8001b34:	4464      	add	r4, ip
 8001b36:	42a1      	cmp	r1, r4
 8001b38:	d800      	bhi.n	8001b3c <__aeabi_ddiv+0x168>
 8001b3a:	e1e1      	b.n	8001f00 <__aeabi_ddiv+0x52c>
 8001b3c:	1aa0      	subs	r0, r4, r2
 8001b3e:	4642      	mov	r2, r8
 8001b40:	0412      	lsls	r2, r2, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	4693      	mov	fp, r2
 8001b46:	464b      	mov	r3, r9
 8001b48:	4659      	mov	r1, fp
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	9304      	str	r3, [sp, #16]
 8001b50:	040b      	lsls	r3, r1, #16
 8001b52:	4649      	mov	r1, r9
 8001b54:	0409      	lsls	r1, r1, #16
 8001b56:	0c09      	lsrs	r1, r1, #16
 8001b58:	000c      	movs	r4, r1
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	435c      	muls	r4, r3
 8001b5e:	0c12      	lsrs	r2, r2, #16
 8001b60:	436b      	muls	r3, r5
 8001b62:	4688      	mov	r8, r1
 8001b64:	4351      	muls	r1, r2
 8001b66:	436a      	muls	r2, r5
 8001b68:	0c25      	lsrs	r5, r4, #16
 8001b6a:	46ac      	mov	ip, r5
 8001b6c:	185b      	adds	r3, r3, r1
 8001b6e:	4463      	add	r3, ip
 8001b70:	4299      	cmp	r1, r3
 8001b72:	d903      	bls.n	8001b7c <__aeabi_ddiv+0x1a8>
 8001b74:	2180      	movs	r1, #128	@ 0x80
 8001b76:	0249      	lsls	r1, r1, #9
 8001b78:	468c      	mov	ip, r1
 8001b7a:	4462      	add	r2, ip
 8001b7c:	0c19      	lsrs	r1, r3, #16
 8001b7e:	0424      	lsls	r4, r4, #16
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	0c24      	lsrs	r4, r4, #16
 8001b84:	188a      	adds	r2, r1, r2
 8001b86:	191c      	adds	r4, r3, r4
 8001b88:	4290      	cmp	r0, r2
 8001b8a:	d302      	bcc.n	8001b92 <__aeabi_ddiv+0x1be>
 8001b8c:	d116      	bne.n	8001bbc <__aeabi_ddiv+0x1e8>
 8001b8e:	42a7      	cmp	r7, r4
 8001b90:	d214      	bcs.n	8001bbc <__aeabi_ddiv+0x1e8>
 8001b92:	465b      	mov	r3, fp
 8001b94:	9d00      	ldr	r5, [sp, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	444f      	add	r7, r9
 8001b9a:	9305      	str	r3, [sp, #20]
 8001b9c:	454f      	cmp	r7, r9
 8001b9e:	419b      	sbcs	r3, r3
 8001ba0:	46ac      	mov	ip, r5
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	4463      	add	r3, ip
 8001ba6:	18c0      	adds	r0, r0, r3
 8001ba8:	4285      	cmp	r5, r0
 8001baa:	d300      	bcc.n	8001bae <__aeabi_ddiv+0x1da>
 8001bac:	e1a1      	b.n	8001ef2 <__aeabi_ddiv+0x51e>
 8001bae:	4282      	cmp	r2, r0
 8001bb0:	d900      	bls.n	8001bb4 <__aeabi_ddiv+0x1e0>
 8001bb2:	e1f6      	b.n	8001fa2 <__aeabi_ddiv+0x5ce>
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_ddiv+0x1e4>
 8001bb6:	e1f1      	b.n	8001f9c <__aeabi_ddiv+0x5c8>
 8001bb8:	9b05      	ldr	r3, [sp, #20]
 8001bba:	469b      	mov	fp, r3
 8001bbc:	1b3c      	subs	r4, r7, r4
 8001bbe:	42a7      	cmp	r7, r4
 8001bc0:	41bf      	sbcs	r7, r7
 8001bc2:	9d00      	ldr	r5, [sp, #0]
 8001bc4:	1a80      	subs	r0, r0, r2
 8001bc6:	427f      	negs	r7, r7
 8001bc8:	1bc0      	subs	r0, r0, r7
 8001bca:	4285      	cmp	r5, r0
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_ddiv+0x1fc>
 8001bce:	e1d0      	b.n	8001f72 <__aeabi_ddiv+0x59e>
 8001bd0:	9902      	ldr	r1, [sp, #8]
 8001bd2:	f7fe fb29 	bl	8000228 <__aeabi_uidivmod>
 8001bd6:	9a03      	ldr	r2, [sp, #12]
 8001bd8:	040b      	lsls	r3, r1, #16
 8001bda:	4342      	muls	r2, r0
 8001bdc:	0c21      	lsrs	r1, r4, #16
 8001bde:	0007      	movs	r7, r0
 8001be0:	4319      	orrs	r1, r3
 8001be2:	428a      	cmp	r2, r1
 8001be4:	d900      	bls.n	8001be8 <__aeabi_ddiv+0x214>
 8001be6:	e178      	b.n	8001eda <__aeabi_ddiv+0x506>
 8001be8:	1a88      	subs	r0, r1, r2
 8001bea:	9902      	ldr	r1, [sp, #8]
 8001bec:	f7fe fb1c 	bl	8000228 <__aeabi_uidivmod>
 8001bf0:	9a03      	ldr	r2, [sp, #12]
 8001bf2:	0424      	lsls	r4, r4, #16
 8001bf4:	4342      	muls	r2, r0
 8001bf6:	0409      	lsls	r1, r1, #16
 8001bf8:	0c24      	lsrs	r4, r4, #16
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	430c      	orrs	r4, r1
 8001bfe:	42a2      	cmp	r2, r4
 8001c00:	d900      	bls.n	8001c04 <__aeabi_ddiv+0x230>
 8001c02:	e15d      	b.n	8001ec0 <__aeabi_ddiv+0x4ec>
 8001c04:	4641      	mov	r1, r8
 8001c06:	1aa4      	subs	r4, r4, r2
 8001c08:	043a      	lsls	r2, r7, #16
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	9d04      	ldr	r5, [sp, #16]
 8001c0e:	0413      	lsls	r3, r2, #16
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	4359      	muls	r1, r3
 8001c14:	4647      	mov	r7, r8
 8001c16:	436b      	muls	r3, r5
 8001c18:	469c      	mov	ip, r3
 8001c1a:	0c10      	lsrs	r0, r2, #16
 8001c1c:	4347      	muls	r7, r0
 8001c1e:	0c0b      	lsrs	r3, r1, #16
 8001c20:	44bc      	add	ip, r7
 8001c22:	4463      	add	r3, ip
 8001c24:	4368      	muls	r0, r5
 8001c26:	429f      	cmp	r7, r3
 8001c28:	d903      	bls.n	8001c32 <__aeabi_ddiv+0x25e>
 8001c2a:	2580      	movs	r5, #128	@ 0x80
 8001c2c:	026d      	lsls	r5, r5, #9
 8001c2e:	46ac      	mov	ip, r5
 8001c30:	4460      	add	r0, ip
 8001c32:	0c1f      	lsrs	r7, r3, #16
 8001c34:	0409      	lsls	r1, r1, #16
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	0c09      	lsrs	r1, r1, #16
 8001c3a:	183f      	adds	r7, r7, r0
 8001c3c:	185b      	adds	r3, r3, r1
 8001c3e:	42bc      	cmp	r4, r7
 8001c40:	d200      	bcs.n	8001c44 <__aeabi_ddiv+0x270>
 8001c42:	e102      	b.n	8001e4a <__aeabi_ddiv+0x476>
 8001c44:	d100      	bne.n	8001c48 <__aeabi_ddiv+0x274>
 8001c46:	e0fd      	b.n	8001e44 <__aeabi_ddiv+0x470>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <__aeabi_ddiv+0x388>)
 8001c4e:	4453      	add	r3, sl
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dc00      	bgt.n	8001c56 <__aeabi_ddiv+0x282>
 8001c54:	e0ae      	b.n	8001db4 <__aeabi_ddiv+0x3e0>
 8001c56:	0751      	lsls	r1, r2, #29
 8001c58:	d000      	beq.n	8001c5c <__aeabi_ddiv+0x288>
 8001c5a:	e198      	b.n	8001f8e <__aeabi_ddiv+0x5ba>
 8001c5c:	4659      	mov	r1, fp
 8001c5e:	01c9      	lsls	r1, r1, #7
 8001c60:	d506      	bpl.n	8001c70 <__aeabi_ddiv+0x29c>
 8001c62:	4659      	mov	r1, fp
 8001c64:	4b3e      	ldr	r3, [pc, #248]	@ (8001d60 <__aeabi_ddiv+0x38c>)
 8001c66:	4019      	ands	r1, r3
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	468b      	mov	fp, r1
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4453      	add	r3, sl
 8001c70:	493c      	ldr	r1, [pc, #240]	@ (8001d64 <__aeabi_ddiv+0x390>)
 8001c72:	428b      	cmp	r3, r1
 8001c74:	dd00      	ble.n	8001c78 <__aeabi_ddiv+0x2a4>
 8001c76:	e71a      	b.n	8001aae <__aeabi_ddiv+0xda>
 8001c78:	4659      	mov	r1, fp
 8001c7a:	08d2      	lsrs	r2, r2, #3
 8001c7c:	0749      	lsls	r1, r1, #29
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	465a      	mov	r2, fp
 8001c82:	055b      	lsls	r3, r3, #21
 8001c84:	0254      	lsls	r4, r2, #9
 8001c86:	4688      	mov	r8, r1
 8001c88:	0b24      	lsrs	r4, r4, #12
 8001c8a:	0d5b      	lsrs	r3, r3, #21
 8001c8c:	e702      	b.n	8001a94 <__aeabi_ddiv+0xc0>
 8001c8e:	465a      	mov	r2, fp
 8001c90:	9b00      	ldr	r3, [sp, #0]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_ddiv+0x2c4>
 8001c96:	e07e      	b.n	8001d96 <__aeabi_ddiv+0x3c2>
 8001c98:	465b      	mov	r3, fp
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_ddiv+0x2cc>
 8001c9e:	e100      	b.n	8001ea2 <__aeabi_ddiv+0x4ce>
 8001ca0:	4658      	mov	r0, fp
 8001ca2:	f001 f90f 	bl	8002ec4 <__clzsi2>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	0003      	movs	r3, r0
 8001caa:	3a0b      	subs	r2, #11
 8001cac:	271d      	movs	r7, #29
 8001cae:	9e00      	ldr	r6, [sp, #0]
 8001cb0:	1aba      	subs	r2, r7, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4658      	mov	r0, fp
 8001cb6:	40d6      	lsrs	r6, r2
 8001cb8:	3908      	subs	r1, #8
 8001cba:	4088      	lsls	r0, r1
 8001cbc:	0032      	movs	r2, r6
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	4693      	mov	fp, r2
 8001cc2:	9a00      	ldr	r2, [sp, #0]
 8001cc4:	408a      	lsls	r2, r1
 8001cc6:	4928      	ldr	r1, [pc, #160]	@ (8001d68 <__aeabi_ddiv+0x394>)
 8001cc8:	4453      	add	r3, sl
 8001cca:	468a      	mov	sl, r1
 8001ccc:	449a      	add	sl, r3
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e6c8      	b.n	8001a64 <__aeabi_ddiv+0x90>
 8001cd2:	465b      	mov	r3, fp
 8001cd4:	4303      	orrs	r3, r0
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	d056      	beq.n	8001d88 <__aeabi_ddiv+0x3b4>
 8001cda:	465b      	mov	r3, fp
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_ddiv+0x30e>
 8001ce0:	e0cd      	b.n	8001e7e <__aeabi_ddiv+0x4aa>
 8001ce2:	4658      	mov	r0, fp
 8001ce4:	f001 f8ee 	bl	8002ec4 <__clzsi2>
 8001ce8:	230b      	movs	r3, #11
 8001cea:	425b      	negs	r3, r3
 8001cec:	469c      	mov	ip, r3
 8001cee:	0002      	movs	r2, r0
 8001cf0:	4484      	add	ip, r0
 8001cf2:	4666      	mov	r6, ip
 8001cf4:	231d      	movs	r3, #29
 8001cf6:	1b9b      	subs	r3, r3, r6
 8001cf8:	0026      	movs	r6, r4
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	4658      	mov	r0, fp
 8001cfe:	40de      	lsrs	r6, r3
 8001d00:	3908      	subs	r1, #8
 8001d02:	4088      	lsls	r0, r1
 8001d04:	0033      	movs	r3, r6
 8001d06:	4303      	orrs	r3, r0
 8001d08:	4699      	mov	r9, r3
 8001d0a:	0023      	movs	r3, r4
 8001d0c:	408b      	lsls	r3, r1
 8001d0e:	4698      	mov	r8, r3
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <__aeabi_ddiv+0x398>)
 8001d12:	2400      	movs	r4, #0
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	469a      	mov	sl, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9303      	str	r3, [sp, #12]
 8001d1c:	e682      	b.n	8001a24 <__aeabi_ddiv+0x50>
 8001d1e:	465a      	mov	r2, fp
 8001d20:	4302      	orrs	r2, r0
 8001d22:	4691      	mov	r9, r2
 8001d24:	d12a      	bne.n	8001d7c <__aeabi_ddiv+0x3a8>
 8001d26:	2200      	movs	r2, #0
 8001d28:	469a      	mov	sl, r3
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	4690      	mov	r8, r2
 8001d2e:	2408      	movs	r4, #8
 8001d30:	9303      	str	r3, [sp, #12]
 8001d32:	e677      	b.n	8001a24 <__aeabi_ddiv+0x50>
 8001d34:	465a      	mov	r2, fp
 8001d36:	9b00      	ldr	r3, [sp, #0]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <__aeabi_ddiv+0x39c>)
 8001d3c:	469c      	mov	ip, r3
 8001d3e:	44e2      	add	sl, ip
 8001d40:	2a00      	cmp	r2, #0
 8001d42:	d117      	bne.n	8001d74 <__aeabi_ddiv+0x3a0>
 8001d44:	2302      	movs	r3, #2
 8001d46:	431c      	orrs	r4, r3
 8001d48:	2300      	movs	r3, #0
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	e689      	b.n	8001a64 <__aeabi_ddiv+0x90>
 8001d50:	000007ff 	.word	0x000007ff
 8001d54:	fffffc01 	.word	0xfffffc01
 8001d58:	0800a19c 	.word	0x0800a19c
 8001d5c:	000003ff 	.word	0x000003ff
 8001d60:	feffffff 	.word	0xfeffffff
 8001d64:	000007fe 	.word	0x000007fe
 8001d68:	000003f3 	.word	0x000003f3
 8001d6c:	fffffc0d 	.word	0xfffffc0d
 8001d70:	fffff801 	.word	0xfffff801
 8001d74:	2303      	movs	r3, #3
 8001d76:	0032      	movs	r2, r6
 8001d78:	431c      	orrs	r4, r3
 8001d7a:	e673      	b.n	8001a64 <__aeabi_ddiv+0x90>
 8001d7c:	469a      	mov	sl, r3
 8001d7e:	2303      	movs	r3, #3
 8001d80:	46d9      	mov	r9, fp
 8001d82:	240c      	movs	r4, #12
 8001d84:	9303      	str	r3, [sp, #12]
 8001d86:	e64d      	b.n	8001a24 <__aeabi_ddiv+0x50>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	4698      	mov	r8, r3
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	2404      	movs	r4, #4
 8001d92:	9303      	str	r3, [sp, #12]
 8001d94:	e646      	b.n	8001a24 <__aeabi_ddiv+0x50>
 8001d96:	2301      	movs	r3, #1
 8001d98:	431c      	orrs	r4, r3
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	469b      	mov	fp, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	e660      	b.n	8001a64 <__aeabi_ddiv+0x90>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2480      	movs	r4, #128	@ 0x80
 8001da6:	4698      	mov	r8, r3
 8001da8:	2600      	movs	r6, #0
 8001daa:	4b92      	ldr	r3, [pc, #584]	@ (8001ff4 <__aeabi_ddiv+0x620>)
 8001dac:	0324      	lsls	r4, r4, #12
 8001dae:	e671      	b.n	8001a94 <__aeabi_ddiv+0xc0>
 8001db0:	2201      	movs	r2, #1
 8001db2:	4252      	negs	r2, r2
 8001db4:	2101      	movs	r1, #1
 8001db6:	1ac9      	subs	r1, r1, r3
 8001db8:	2938      	cmp	r1, #56	@ 0x38
 8001dba:	dd00      	ble.n	8001dbe <__aeabi_ddiv+0x3ea>
 8001dbc:	e666      	b.n	8001a8c <__aeabi_ddiv+0xb8>
 8001dbe:	291f      	cmp	r1, #31
 8001dc0:	dc00      	bgt.n	8001dc4 <__aeabi_ddiv+0x3f0>
 8001dc2:	e0ab      	b.n	8001f1c <__aeabi_ddiv+0x548>
 8001dc4:	201f      	movs	r0, #31
 8001dc6:	4240      	negs	r0, r0
 8001dc8:	1ac3      	subs	r3, r0, r3
 8001dca:	4658      	mov	r0, fp
 8001dcc:	40d8      	lsrs	r0, r3
 8001dce:	0003      	movs	r3, r0
 8001dd0:	2920      	cmp	r1, #32
 8001dd2:	d004      	beq.n	8001dde <__aeabi_ddiv+0x40a>
 8001dd4:	4658      	mov	r0, fp
 8001dd6:	4988      	ldr	r1, [pc, #544]	@ (8001ff8 <__aeabi_ddiv+0x624>)
 8001dd8:	4451      	add	r1, sl
 8001dda:	4088      	lsls	r0, r1
 8001ddc:	4302      	orrs	r2, r0
 8001dde:	1e51      	subs	r1, r2, #1
 8001de0:	418a      	sbcs	r2, r1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	2307      	movs	r3, #7
 8001de6:	0019      	movs	r1, r3
 8001de8:	2400      	movs	r4, #0
 8001dea:	4011      	ands	r1, r2
 8001dec:	4213      	tst	r3, r2
 8001dee:	d00c      	beq.n	8001e0a <__aeabi_ddiv+0x436>
 8001df0:	230f      	movs	r3, #15
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0x426>
 8001df8:	e0f9      	b.n	8001fee <__aeabi_ddiv+0x61a>
 8001dfa:	1d11      	adds	r1, r2, #4
 8001dfc:	4291      	cmp	r1, r2
 8001dfe:	419b      	sbcs	r3, r3
 8001e00:	000a      	movs	r2, r1
 8001e02:	425b      	negs	r3, r3
 8001e04:	0759      	lsls	r1, r3, #29
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	0b1c      	lsrs	r4, r3, #12
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	4690      	mov	r8, r2
 8001e10:	2300      	movs	r3, #0
 8001e12:	e63f      	b.n	8001a94 <__aeabi_ddiv+0xc0>
 8001e14:	2480      	movs	r4, #128	@ 0x80
 8001e16:	464b      	mov	r3, r9
 8001e18:	0324      	lsls	r4, r4, #12
 8001e1a:	4223      	tst	r3, r4
 8001e1c:	d009      	beq.n	8001e32 <__aeabi_ddiv+0x45e>
 8001e1e:	465b      	mov	r3, fp
 8001e20:	4223      	tst	r3, r4
 8001e22:	d106      	bne.n	8001e32 <__aeabi_ddiv+0x45e>
 8001e24:	431c      	orrs	r4, r3
 8001e26:	0324      	lsls	r4, r4, #12
 8001e28:	002e      	movs	r6, r5
 8001e2a:	4690      	mov	r8, r2
 8001e2c:	4b71      	ldr	r3, [pc, #452]	@ (8001ff4 <__aeabi_ddiv+0x620>)
 8001e2e:	0b24      	lsrs	r4, r4, #12
 8001e30:	e630      	b.n	8001a94 <__aeabi_ddiv+0xc0>
 8001e32:	2480      	movs	r4, #128	@ 0x80
 8001e34:	464b      	mov	r3, r9
 8001e36:	0324      	lsls	r4, r4, #12
 8001e38:	431c      	orrs	r4, r3
 8001e3a:	0324      	lsls	r4, r4, #12
 8001e3c:	9e02      	ldr	r6, [sp, #8]
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff4 <__aeabi_ddiv+0x620>)
 8001e40:	0b24      	lsrs	r4, r4, #12
 8001e42:	e627      	b.n	8001a94 <__aeabi_ddiv+0xc0>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_ddiv+0x476>
 8001e48:	e700      	b.n	8001c4c <__aeabi_ddiv+0x278>
 8001e4a:	9800      	ldr	r0, [sp, #0]
 8001e4c:	1e51      	subs	r1, r2, #1
 8001e4e:	4684      	mov	ip, r0
 8001e50:	4464      	add	r4, ip
 8001e52:	4284      	cmp	r4, r0
 8001e54:	d200      	bcs.n	8001e58 <__aeabi_ddiv+0x484>
 8001e56:	e084      	b.n	8001f62 <__aeabi_ddiv+0x58e>
 8001e58:	42bc      	cmp	r4, r7
 8001e5a:	d200      	bcs.n	8001e5e <__aeabi_ddiv+0x48a>
 8001e5c:	e0ae      	b.n	8001fbc <__aeabi_ddiv+0x5e8>
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_ddiv+0x48e>
 8001e60:	e0c1      	b.n	8001fe6 <__aeabi_ddiv+0x612>
 8001e62:	000a      	movs	r2, r1
 8001e64:	e6f0      	b.n	8001c48 <__aeabi_ddiv+0x274>
 8001e66:	4542      	cmp	r2, r8
 8001e68:	d900      	bls.n	8001e6c <__aeabi_ddiv+0x498>
 8001e6a:	e62c      	b.n	8001ac6 <__aeabi_ddiv+0xf2>
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	07dc      	lsls	r4, r3, #31
 8001e70:	0858      	lsrs	r0, r3, #1
 8001e72:	4643      	mov	r3, r8
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	431c      	orrs	r4, r3
 8001e78:	4643      	mov	r3, r8
 8001e7a:	07df      	lsls	r7, r3, #31
 8001e7c:	e62a      	b.n	8001ad4 <__aeabi_ddiv+0x100>
 8001e7e:	f001 f821 	bl	8002ec4 <__clzsi2>
 8001e82:	2315      	movs	r3, #21
 8001e84:	469c      	mov	ip, r3
 8001e86:	4484      	add	ip, r0
 8001e88:	0002      	movs	r2, r0
 8001e8a:	4663      	mov	r3, ip
 8001e8c:	3220      	adds	r2, #32
 8001e8e:	2b1c      	cmp	r3, #28
 8001e90:	dc00      	bgt.n	8001e94 <__aeabi_ddiv+0x4c0>
 8001e92:	e72e      	b.n	8001cf2 <__aeabi_ddiv+0x31e>
 8001e94:	0023      	movs	r3, r4
 8001e96:	3808      	subs	r0, #8
 8001e98:	4083      	lsls	r3, r0
 8001e9a:	4699      	mov	r9, r3
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	4698      	mov	r8, r3
 8001ea0:	e736      	b.n	8001d10 <__aeabi_ddiv+0x33c>
 8001ea2:	f001 f80f 	bl	8002ec4 <__clzsi2>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	3215      	adds	r2, #21
 8001eac:	3320      	adds	r3, #32
 8001eae:	2a1c      	cmp	r2, #28
 8001eb0:	dc00      	bgt.n	8001eb4 <__aeabi_ddiv+0x4e0>
 8001eb2:	e6fb      	b.n	8001cac <__aeabi_ddiv+0x2d8>
 8001eb4:	9900      	ldr	r1, [sp, #0]
 8001eb6:	3808      	subs	r0, #8
 8001eb8:	4081      	lsls	r1, r0
 8001eba:	2200      	movs	r2, #0
 8001ebc:	468b      	mov	fp, r1
 8001ebe:	e702      	b.n	8001cc6 <__aeabi_ddiv+0x2f2>
 8001ec0:	9900      	ldr	r1, [sp, #0]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	468c      	mov	ip, r1
 8001ec6:	4464      	add	r4, ip
 8001ec8:	42a1      	cmp	r1, r4
 8001eca:	d900      	bls.n	8001ece <__aeabi_ddiv+0x4fa>
 8001ecc:	e69a      	b.n	8001c04 <__aeabi_ddiv+0x230>
 8001ece:	42a2      	cmp	r2, r4
 8001ed0:	d800      	bhi.n	8001ed4 <__aeabi_ddiv+0x500>
 8001ed2:	e697      	b.n	8001c04 <__aeabi_ddiv+0x230>
 8001ed4:	1e83      	subs	r3, r0, #2
 8001ed6:	4464      	add	r4, ip
 8001ed8:	e694      	b.n	8001c04 <__aeabi_ddiv+0x230>
 8001eda:	46ac      	mov	ip, r5
 8001edc:	4461      	add	r1, ip
 8001ede:	3f01      	subs	r7, #1
 8001ee0:	428d      	cmp	r5, r1
 8001ee2:	d900      	bls.n	8001ee6 <__aeabi_ddiv+0x512>
 8001ee4:	e680      	b.n	8001be8 <__aeabi_ddiv+0x214>
 8001ee6:	428a      	cmp	r2, r1
 8001ee8:	d800      	bhi.n	8001eec <__aeabi_ddiv+0x518>
 8001eea:	e67d      	b.n	8001be8 <__aeabi_ddiv+0x214>
 8001eec:	1e87      	subs	r7, r0, #2
 8001eee:	4461      	add	r1, ip
 8001ef0:	e67a      	b.n	8001be8 <__aeabi_ddiv+0x214>
 8001ef2:	4285      	cmp	r5, r0
 8001ef4:	d000      	beq.n	8001ef8 <__aeabi_ddiv+0x524>
 8001ef6:	e65f      	b.n	8001bb8 <__aeabi_ddiv+0x1e4>
 8001ef8:	45b9      	cmp	r9, r7
 8001efa:	d900      	bls.n	8001efe <__aeabi_ddiv+0x52a>
 8001efc:	e65c      	b.n	8001bb8 <__aeabi_ddiv+0x1e4>
 8001efe:	e656      	b.n	8001bae <__aeabi_ddiv+0x1da>
 8001f00:	42a2      	cmp	r2, r4
 8001f02:	d800      	bhi.n	8001f06 <__aeabi_ddiv+0x532>
 8001f04:	e61a      	b.n	8001b3c <__aeabi_ddiv+0x168>
 8001f06:	1e83      	subs	r3, r0, #2
 8001f08:	4464      	add	r4, ip
 8001f0a:	e617      	b.n	8001b3c <__aeabi_ddiv+0x168>
 8001f0c:	428a      	cmp	r2, r1
 8001f0e:	d800      	bhi.n	8001f12 <__aeabi_ddiv+0x53e>
 8001f10:	e600      	b.n	8001b14 <__aeabi_ddiv+0x140>
 8001f12:	46ac      	mov	ip, r5
 8001f14:	1e83      	subs	r3, r0, #2
 8001f16:	4698      	mov	r8, r3
 8001f18:	4461      	add	r1, ip
 8001f1a:	e5fb      	b.n	8001b14 <__aeabi_ddiv+0x140>
 8001f1c:	4837      	ldr	r0, [pc, #220]	@ (8001ffc <__aeabi_ddiv+0x628>)
 8001f1e:	0014      	movs	r4, r2
 8001f20:	4450      	add	r0, sl
 8001f22:	4082      	lsls	r2, r0
 8001f24:	465b      	mov	r3, fp
 8001f26:	0017      	movs	r7, r2
 8001f28:	4083      	lsls	r3, r0
 8001f2a:	40cc      	lsrs	r4, r1
 8001f2c:	1e7a      	subs	r2, r7, #1
 8001f2e:	4197      	sbcs	r7, r2
 8001f30:	4323      	orrs	r3, r4
 8001f32:	433b      	orrs	r3, r7
 8001f34:	001a      	movs	r2, r3
 8001f36:	465b      	mov	r3, fp
 8001f38:	40cb      	lsrs	r3, r1
 8001f3a:	0751      	lsls	r1, r2, #29
 8001f3c:	d009      	beq.n	8001f52 <__aeabi_ddiv+0x57e>
 8001f3e:	210f      	movs	r1, #15
 8001f40:	4011      	ands	r1, r2
 8001f42:	2904      	cmp	r1, #4
 8001f44:	d005      	beq.n	8001f52 <__aeabi_ddiv+0x57e>
 8001f46:	1d11      	adds	r1, r2, #4
 8001f48:	4291      	cmp	r1, r2
 8001f4a:	4192      	sbcs	r2, r2
 8001f4c:	4252      	negs	r2, r2
 8001f4e:	189b      	adds	r3, r3, r2
 8001f50:	000a      	movs	r2, r1
 8001f52:	0219      	lsls	r1, r3, #8
 8001f54:	d400      	bmi.n	8001f58 <__aeabi_ddiv+0x584>
 8001f56:	e755      	b.n	8001e04 <__aeabi_ddiv+0x430>
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2400      	movs	r4, #0
 8001f5e:	4690      	mov	r8, r2
 8001f60:	e598      	b.n	8001a94 <__aeabi_ddiv+0xc0>
 8001f62:	000a      	movs	r2, r1
 8001f64:	42bc      	cmp	r4, r7
 8001f66:	d000      	beq.n	8001f6a <__aeabi_ddiv+0x596>
 8001f68:	e66e      	b.n	8001c48 <__aeabi_ddiv+0x274>
 8001f6a:	454b      	cmp	r3, r9
 8001f6c:	d000      	beq.n	8001f70 <__aeabi_ddiv+0x59c>
 8001f6e:	e66b      	b.n	8001c48 <__aeabi_ddiv+0x274>
 8001f70:	e66c      	b.n	8001c4c <__aeabi_ddiv+0x278>
 8001f72:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <__aeabi_ddiv+0x62c>)
 8001f74:	4a23      	ldr	r2, [pc, #140]	@ (8002004 <__aeabi_ddiv+0x630>)
 8001f76:	4453      	add	r3, sl
 8001f78:	4592      	cmp	sl, r2
 8001f7a:	da00      	bge.n	8001f7e <__aeabi_ddiv+0x5aa>
 8001f7c:	e718      	b.n	8001db0 <__aeabi_ddiv+0x3dc>
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4249      	negs	r1, r1
 8001f82:	1d0a      	adds	r2, r1, #4
 8001f84:	428a      	cmp	r2, r1
 8001f86:	4189      	sbcs	r1, r1
 8001f88:	4249      	negs	r1, r1
 8001f8a:	448b      	add	fp, r1
 8001f8c:	e666      	b.n	8001c5c <__aeabi_ddiv+0x288>
 8001f8e:	210f      	movs	r1, #15
 8001f90:	4011      	ands	r1, r2
 8001f92:	2904      	cmp	r1, #4
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x5c4>
 8001f96:	e661      	b.n	8001c5c <__aeabi_ddiv+0x288>
 8001f98:	0011      	movs	r1, r2
 8001f9a:	e7f2      	b.n	8001f82 <__aeabi_ddiv+0x5ae>
 8001f9c:	42bc      	cmp	r4, r7
 8001f9e:	d800      	bhi.n	8001fa2 <__aeabi_ddiv+0x5ce>
 8001fa0:	e60a      	b.n	8001bb8 <__aeabi_ddiv+0x1e4>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	469c      	mov	ip, r3
 8001fa8:	9900      	ldr	r1, [sp, #0]
 8001faa:	444f      	add	r7, r9
 8001fac:	454f      	cmp	r7, r9
 8001fae:	419b      	sbcs	r3, r3
 8001fb0:	44e3      	add	fp, ip
 8001fb2:	468c      	mov	ip, r1
 8001fb4:	425b      	negs	r3, r3
 8001fb6:	4463      	add	r3, ip
 8001fb8:	18c0      	adds	r0, r0, r3
 8001fba:	e5ff      	b.n	8001bbc <__aeabi_ddiv+0x1e8>
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	9d00      	ldr	r5, [sp, #0]
 8001fc0:	0048      	lsls	r0, r1, #1
 8001fc2:	4548      	cmp	r0, r9
 8001fc4:	4189      	sbcs	r1, r1
 8001fc6:	46ac      	mov	ip, r5
 8001fc8:	4249      	negs	r1, r1
 8001fca:	4461      	add	r1, ip
 8001fcc:	4681      	mov	r9, r0
 8001fce:	3a02      	subs	r2, #2
 8001fd0:	1864      	adds	r4, r4, r1
 8001fd2:	e7c7      	b.n	8001f64 <__aeabi_ddiv+0x590>
 8001fd4:	2480      	movs	r4, #128	@ 0x80
 8001fd6:	465b      	mov	r3, fp
 8001fd8:	0324      	lsls	r4, r4, #12
 8001fda:	431c      	orrs	r4, r3
 8001fdc:	0324      	lsls	r4, r4, #12
 8001fde:	4690      	mov	r8, r2
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <__aeabi_ddiv+0x620>)
 8001fe2:	0b24      	lsrs	r4, r4, #12
 8001fe4:	e556      	b.n	8001a94 <__aeabi_ddiv+0xc0>
 8001fe6:	4599      	cmp	r9, r3
 8001fe8:	d3e8      	bcc.n	8001fbc <__aeabi_ddiv+0x5e8>
 8001fea:	000a      	movs	r2, r1
 8001fec:	e7bd      	b.n	8001f6a <__aeabi_ddiv+0x596>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e708      	b.n	8001e04 <__aeabi_ddiv+0x430>
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	000007ff 	.word	0x000007ff
 8001ff8:	0000043e 	.word	0x0000043e
 8001ffc:	0000041e 	.word	0x0000041e
 8002000:	000003ff 	.word	0x000003ff
 8002004:	fffffc02 	.word	0xfffffc02

08002008 <__aeabi_dmul>:
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	4657      	mov	r7, sl
 800200c:	46de      	mov	lr, fp
 800200e:	464e      	mov	r6, r9
 8002010:	4645      	mov	r5, r8
 8002012:	b5e0      	push	{r5, r6, r7, lr}
 8002014:	001f      	movs	r7, r3
 8002016:	030b      	lsls	r3, r1, #12
 8002018:	0b1b      	lsrs	r3, r3, #12
 800201a:	0016      	movs	r6, r2
 800201c:	469a      	mov	sl, r3
 800201e:	0fca      	lsrs	r2, r1, #31
 8002020:	004b      	lsls	r3, r1, #1
 8002022:	0004      	movs	r4, r0
 8002024:	4693      	mov	fp, r2
 8002026:	b087      	sub	sp, #28
 8002028:	0d5b      	lsrs	r3, r3, #21
 800202a:	d100      	bne.n	800202e <__aeabi_dmul+0x26>
 800202c:	e0d5      	b.n	80021da <__aeabi_dmul+0x1d2>
 800202e:	4abb      	ldr	r2, [pc, #748]	@ (800231c <__aeabi_dmul+0x314>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d100      	bne.n	8002036 <__aeabi_dmul+0x2e>
 8002034:	e0f8      	b.n	8002228 <__aeabi_dmul+0x220>
 8002036:	4651      	mov	r1, sl
 8002038:	0f42      	lsrs	r2, r0, #29
 800203a:	00c9      	lsls	r1, r1, #3
 800203c:	430a      	orrs	r2, r1
 800203e:	2180      	movs	r1, #128	@ 0x80
 8002040:	0409      	lsls	r1, r1, #16
 8002042:	4311      	orrs	r1, r2
 8002044:	00c2      	lsls	r2, r0, #3
 8002046:	4691      	mov	r9, r2
 8002048:	4ab5      	ldr	r2, [pc, #724]	@ (8002320 <__aeabi_dmul+0x318>)
 800204a:	468a      	mov	sl, r1
 800204c:	189d      	adds	r5, r3, r2
 800204e:	2300      	movs	r3, #0
 8002050:	4698      	mov	r8, r3
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	033c      	lsls	r4, r7, #12
 8002056:	007b      	lsls	r3, r7, #1
 8002058:	0ffa      	lsrs	r2, r7, #31
 800205a:	0030      	movs	r0, r6
 800205c:	0b24      	lsrs	r4, r4, #12
 800205e:	0d5b      	lsrs	r3, r3, #21
 8002060:	9200      	str	r2, [sp, #0]
 8002062:	d100      	bne.n	8002066 <__aeabi_dmul+0x5e>
 8002064:	e096      	b.n	8002194 <__aeabi_dmul+0x18c>
 8002066:	4aad      	ldr	r2, [pc, #692]	@ (800231c <__aeabi_dmul+0x314>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d031      	beq.n	80020d0 <__aeabi_dmul+0xc8>
 800206c:	0f72      	lsrs	r2, r6, #29
 800206e:	00e4      	lsls	r4, r4, #3
 8002070:	4322      	orrs	r2, r4
 8002072:	2480      	movs	r4, #128	@ 0x80
 8002074:	0424      	lsls	r4, r4, #16
 8002076:	4314      	orrs	r4, r2
 8002078:	4aa9      	ldr	r2, [pc, #676]	@ (8002320 <__aeabi_dmul+0x318>)
 800207a:	00f0      	lsls	r0, r6, #3
 800207c:	4694      	mov	ip, r2
 800207e:	4463      	add	r3, ip
 8002080:	195b      	adds	r3, r3, r5
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	9201      	str	r2, [sp, #4]
 8002086:	4642      	mov	r2, r8
 8002088:	2600      	movs	r6, #0
 800208a:	2a0a      	cmp	r2, #10
 800208c:	dc42      	bgt.n	8002114 <__aeabi_dmul+0x10c>
 800208e:	465a      	mov	r2, fp
 8002090:	9900      	ldr	r1, [sp, #0]
 8002092:	404a      	eors	r2, r1
 8002094:	4693      	mov	fp, r2
 8002096:	4642      	mov	r2, r8
 8002098:	2a02      	cmp	r2, #2
 800209a:	dc32      	bgt.n	8002102 <__aeabi_dmul+0xfa>
 800209c:	3a01      	subs	r2, #1
 800209e:	2a01      	cmp	r2, #1
 80020a0:	d900      	bls.n	80020a4 <__aeabi_dmul+0x9c>
 80020a2:	e149      	b.n	8002338 <__aeabi_dmul+0x330>
 80020a4:	2e02      	cmp	r6, #2
 80020a6:	d100      	bne.n	80020aa <__aeabi_dmul+0xa2>
 80020a8:	e0ca      	b.n	8002240 <__aeabi_dmul+0x238>
 80020aa:	2e01      	cmp	r6, #1
 80020ac:	d13d      	bne.n	800212a <__aeabi_dmul+0x122>
 80020ae:	2300      	movs	r3, #0
 80020b0:	2400      	movs	r4, #0
 80020b2:	2200      	movs	r2, #0
 80020b4:	0010      	movs	r0, r2
 80020b6:	465a      	mov	r2, fp
 80020b8:	051b      	lsls	r3, r3, #20
 80020ba:	4323      	orrs	r3, r4
 80020bc:	07d2      	lsls	r2, r2, #31
 80020be:	4313      	orrs	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	b007      	add	sp, #28
 80020c4:	bcf0      	pop	{r4, r5, r6, r7}
 80020c6:	46bb      	mov	fp, r7
 80020c8:	46b2      	mov	sl, r6
 80020ca:	46a9      	mov	r9, r5
 80020cc:	46a0      	mov	r8, r4
 80020ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d0:	4b92      	ldr	r3, [pc, #584]	@ (800231c <__aeabi_dmul+0x314>)
 80020d2:	4326      	orrs	r6, r4
 80020d4:	18eb      	adds	r3, r5, r3
 80020d6:	2e00      	cmp	r6, #0
 80020d8:	d100      	bne.n	80020dc <__aeabi_dmul+0xd4>
 80020da:	e0bb      	b.n	8002254 <__aeabi_dmul+0x24c>
 80020dc:	2203      	movs	r2, #3
 80020de:	4641      	mov	r1, r8
 80020e0:	4311      	orrs	r1, r2
 80020e2:	465a      	mov	r2, fp
 80020e4:	4688      	mov	r8, r1
 80020e6:	9900      	ldr	r1, [sp, #0]
 80020e8:	404a      	eors	r2, r1
 80020ea:	2180      	movs	r1, #128	@ 0x80
 80020ec:	0109      	lsls	r1, r1, #4
 80020ee:	468c      	mov	ip, r1
 80020f0:	0029      	movs	r1, r5
 80020f2:	4461      	add	r1, ip
 80020f4:	9101      	str	r1, [sp, #4]
 80020f6:	4641      	mov	r1, r8
 80020f8:	290a      	cmp	r1, #10
 80020fa:	dd00      	ble.n	80020fe <__aeabi_dmul+0xf6>
 80020fc:	e233      	b.n	8002566 <__aeabi_dmul+0x55e>
 80020fe:	4693      	mov	fp, r2
 8002100:	2603      	movs	r6, #3
 8002102:	4642      	mov	r2, r8
 8002104:	2701      	movs	r7, #1
 8002106:	4097      	lsls	r7, r2
 8002108:	21a6      	movs	r1, #166	@ 0xa6
 800210a:	003a      	movs	r2, r7
 800210c:	00c9      	lsls	r1, r1, #3
 800210e:	400a      	ands	r2, r1
 8002110:	420f      	tst	r7, r1
 8002112:	d031      	beq.n	8002178 <__aeabi_dmul+0x170>
 8002114:	9e02      	ldr	r6, [sp, #8]
 8002116:	2e02      	cmp	r6, #2
 8002118:	d100      	bne.n	800211c <__aeabi_dmul+0x114>
 800211a:	e235      	b.n	8002588 <__aeabi_dmul+0x580>
 800211c:	2e03      	cmp	r6, #3
 800211e:	d100      	bne.n	8002122 <__aeabi_dmul+0x11a>
 8002120:	e1d2      	b.n	80024c8 <__aeabi_dmul+0x4c0>
 8002122:	4654      	mov	r4, sl
 8002124:	4648      	mov	r0, r9
 8002126:	2e01      	cmp	r6, #1
 8002128:	d0c1      	beq.n	80020ae <__aeabi_dmul+0xa6>
 800212a:	9a01      	ldr	r2, [sp, #4]
 800212c:	4b7d      	ldr	r3, [pc, #500]	@ (8002324 <__aeabi_dmul+0x31c>)
 800212e:	4694      	mov	ip, r2
 8002130:	4463      	add	r3, ip
 8002132:	2b00      	cmp	r3, #0
 8002134:	dc00      	bgt.n	8002138 <__aeabi_dmul+0x130>
 8002136:	e0c0      	b.n	80022ba <__aeabi_dmul+0x2b2>
 8002138:	0742      	lsls	r2, r0, #29
 800213a:	d009      	beq.n	8002150 <__aeabi_dmul+0x148>
 800213c:	220f      	movs	r2, #15
 800213e:	4002      	ands	r2, r0
 8002140:	2a04      	cmp	r2, #4
 8002142:	d005      	beq.n	8002150 <__aeabi_dmul+0x148>
 8002144:	1d02      	adds	r2, r0, #4
 8002146:	4282      	cmp	r2, r0
 8002148:	4180      	sbcs	r0, r0
 800214a:	4240      	negs	r0, r0
 800214c:	1824      	adds	r4, r4, r0
 800214e:	0010      	movs	r0, r2
 8002150:	01e2      	lsls	r2, r4, #7
 8002152:	d506      	bpl.n	8002162 <__aeabi_dmul+0x15a>
 8002154:	4b74      	ldr	r3, [pc, #464]	@ (8002328 <__aeabi_dmul+0x320>)
 8002156:	9a01      	ldr	r2, [sp, #4]
 8002158:	401c      	ands	r4, r3
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	4694      	mov	ip, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4463      	add	r3, ip
 8002162:	4a72      	ldr	r2, [pc, #456]	@ (800232c <__aeabi_dmul+0x324>)
 8002164:	4293      	cmp	r3, r2
 8002166:	dc6b      	bgt.n	8002240 <__aeabi_dmul+0x238>
 8002168:	0762      	lsls	r2, r4, #29
 800216a:	08c0      	lsrs	r0, r0, #3
 800216c:	0264      	lsls	r4, r4, #9
 800216e:	055b      	lsls	r3, r3, #21
 8002170:	4302      	orrs	r2, r0
 8002172:	0b24      	lsrs	r4, r4, #12
 8002174:	0d5b      	lsrs	r3, r3, #21
 8002176:	e79d      	b.n	80020b4 <__aeabi_dmul+0xac>
 8002178:	2190      	movs	r1, #144	@ 0x90
 800217a:	0089      	lsls	r1, r1, #2
 800217c:	420f      	tst	r7, r1
 800217e:	d163      	bne.n	8002248 <__aeabi_dmul+0x240>
 8002180:	2288      	movs	r2, #136	@ 0x88
 8002182:	423a      	tst	r2, r7
 8002184:	d100      	bne.n	8002188 <__aeabi_dmul+0x180>
 8002186:	e0d7      	b.n	8002338 <__aeabi_dmul+0x330>
 8002188:	9b00      	ldr	r3, [sp, #0]
 800218a:	46a2      	mov	sl, r4
 800218c:	469b      	mov	fp, r3
 800218e:	4681      	mov	r9, r0
 8002190:	9602      	str	r6, [sp, #8]
 8002192:	e7bf      	b.n	8002114 <__aeabi_dmul+0x10c>
 8002194:	0023      	movs	r3, r4
 8002196:	4333      	orrs	r3, r6
 8002198:	d100      	bne.n	800219c <__aeabi_dmul+0x194>
 800219a:	e07f      	b.n	800229c <__aeabi_dmul+0x294>
 800219c:	2c00      	cmp	r4, #0
 800219e:	d100      	bne.n	80021a2 <__aeabi_dmul+0x19a>
 80021a0:	e1ad      	b.n	80024fe <__aeabi_dmul+0x4f6>
 80021a2:	0020      	movs	r0, r4
 80021a4:	f000 fe8e 	bl	8002ec4 <__clzsi2>
 80021a8:	0002      	movs	r2, r0
 80021aa:	0003      	movs	r3, r0
 80021ac:	3a0b      	subs	r2, #11
 80021ae:	201d      	movs	r0, #29
 80021b0:	0019      	movs	r1, r3
 80021b2:	1a82      	subs	r2, r0, r2
 80021b4:	0030      	movs	r0, r6
 80021b6:	3908      	subs	r1, #8
 80021b8:	40d0      	lsrs	r0, r2
 80021ba:	408c      	lsls	r4, r1
 80021bc:	4304      	orrs	r4, r0
 80021be:	0030      	movs	r0, r6
 80021c0:	4088      	lsls	r0, r1
 80021c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002330 <__aeabi_dmul+0x328>)
 80021c4:	1aeb      	subs	r3, r5, r3
 80021c6:	4694      	mov	ip, r2
 80021c8:	4463      	add	r3, ip
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	9201      	str	r2, [sp, #4]
 80021ce:	4642      	mov	r2, r8
 80021d0:	2600      	movs	r6, #0
 80021d2:	2a0a      	cmp	r2, #10
 80021d4:	dc00      	bgt.n	80021d8 <__aeabi_dmul+0x1d0>
 80021d6:	e75a      	b.n	800208e <__aeabi_dmul+0x86>
 80021d8:	e79c      	b.n	8002114 <__aeabi_dmul+0x10c>
 80021da:	4653      	mov	r3, sl
 80021dc:	4303      	orrs	r3, r0
 80021de:	4699      	mov	r9, r3
 80021e0:	d054      	beq.n	800228c <__aeabi_dmul+0x284>
 80021e2:	4653      	mov	r3, sl
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d100      	bne.n	80021ea <__aeabi_dmul+0x1e2>
 80021e8:	e177      	b.n	80024da <__aeabi_dmul+0x4d2>
 80021ea:	4650      	mov	r0, sl
 80021ec:	f000 fe6a 	bl	8002ec4 <__clzsi2>
 80021f0:	230b      	movs	r3, #11
 80021f2:	425b      	negs	r3, r3
 80021f4:	469c      	mov	ip, r3
 80021f6:	0002      	movs	r2, r0
 80021f8:	4484      	add	ip, r0
 80021fa:	0011      	movs	r1, r2
 80021fc:	4650      	mov	r0, sl
 80021fe:	3908      	subs	r1, #8
 8002200:	4088      	lsls	r0, r1
 8002202:	231d      	movs	r3, #29
 8002204:	4680      	mov	r8, r0
 8002206:	4660      	mov	r0, ip
 8002208:	1a1b      	subs	r3, r3, r0
 800220a:	0020      	movs	r0, r4
 800220c:	40d8      	lsrs	r0, r3
 800220e:	0003      	movs	r3, r0
 8002210:	4640      	mov	r0, r8
 8002212:	4303      	orrs	r3, r0
 8002214:	469a      	mov	sl, r3
 8002216:	0023      	movs	r3, r4
 8002218:	408b      	lsls	r3, r1
 800221a:	4699      	mov	r9, r3
 800221c:	2300      	movs	r3, #0
 800221e:	4d44      	ldr	r5, [pc, #272]	@ (8002330 <__aeabi_dmul+0x328>)
 8002220:	4698      	mov	r8, r3
 8002222:	1aad      	subs	r5, r5, r2
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	e715      	b.n	8002054 <__aeabi_dmul+0x4c>
 8002228:	4652      	mov	r2, sl
 800222a:	4302      	orrs	r2, r0
 800222c:	4691      	mov	r9, r2
 800222e:	d126      	bne.n	800227e <__aeabi_dmul+0x276>
 8002230:	2200      	movs	r2, #0
 8002232:	001d      	movs	r5, r3
 8002234:	2302      	movs	r3, #2
 8002236:	4692      	mov	sl, r2
 8002238:	3208      	adds	r2, #8
 800223a:	4690      	mov	r8, r2
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	e709      	b.n	8002054 <__aeabi_dmul+0x4c>
 8002240:	2400      	movs	r4, #0
 8002242:	2200      	movs	r2, #0
 8002244:	4b35      	ldr	r3, [pc, #212]	@ (800231c <__aeabi_dmul+0x314>)
 8002246:	e735      	b.n	80020b4 <__aeabi_dmul+0xac>
 8002248:	2300      	movs	r3, #0
 800224a:	2480      	movs	r4, #128	@ 0x80
 800224c:	469b      	mov	fp, r3
 800224e:	0324      	lsls	r4, r4, #12
 8002250:	4b32      	ldr	r3, [pc, #200]	@ (800231c <__aeabi_dmul+0x314>)
 8002252:	e72f      	b.n	80020b4 <__aeabi_dmul+0xac>
 8002254:	2202      	movs	r2, #2
 8002256:	4641      	mov	r1, r8
 8002258:	4311      	orrs	r1, r2
 800225a:	2280      	movs	r2, #128	@ 0x80
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	4694      	mov	ip, r2
 8002260:	002a      	movs	r2, r5
 8002262:	4462      	add	r2, ip
 8002264:	4688      	mov	r8, r1
 8002266:	9201      	str	r2, [sp, #4]
 8002268:	290a      	cmp	r1, #10
 800226a:	dd00      	ble.n	800226e <__aeabi_dmul+0x266>
 800226c:	e752      	b.n	8002114 <__aeabi_dmul+0x10c>
 800226e:	465a      	mov	r2, fp
 8002270:	2000      	movs	r0, #0
 8002272:	9900      	ldr	r1, [sp, #0]
 8002274:	0004      	movs	r4, r0
 8002276:	404a      	eors	r2, r1
 8002278:	4693      	mov	fp, r2
 800227a:	2602      	movs	r6, #2
 800227c:	e70b      	b.n	8002096 <__aeabi_dmul+0x8e>
 800227e:	220c      	movs	r2, #12
 8002280:	001d      	movs	r5, r3
 8002282:	2303      	movs	r3, #3
 8002284:	4681      	mov	r9, r0
 8002286:	4690      	mov	r8, r2
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	e6e3      	b.n	8002054 <__aeabi_dmul+0x4c>
 800228c:	2300      	movs	r3, #0
 800228e:	469a      	mov	sl, r3
 8002290:	3304      	adds	r3, #4
 8002292:	4698      	mov	r8, r3
 8002294:	3b03      	subs	r3, #3
 8002296:	2500      	movs	r5, #0
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	e6db      	b.n	8002054 <__aeabi_dmul+0x4c>
 800229c:	4642      	mov	r2, r8
 800229e:	3301      	adds	r3, #1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	002b      	movs	r3, r5
 80022a4:	4690      	mov	r8, r2
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	9201      	str	r2, [sp, #4]
 80022aa:	4642      	mov	r2, r8
 80022ac:	2400      	movs	r4, #0
 80022ae:	2000      	movs	r0, #0
 80022b0:	2601      	movs	r6, #1
 80022b2:	2a0a      	cmp	r2, #10
 80022b4:	dc00      	bgt.n	80022b8 <__aeabi_dmul+0x2b0>
 80022b6:	e6ea      	b.n	800208e <__aeabi_dmul+0x86>
 80022b8:	e72c      	b.n	8002114 <__aeabi_dmul+0x10c>
 80022ba:	2201      	movs	r2, #1
 80022bc:	1ad2      	subs	r2, r2, r3
 80022be:	2a38      	cmp	r2, #56	@ 0x38
 80022c0:	dd00      	ble.n	80022c4 <__aeabi_dmul+0x2bc>
 80022c2:	e6f4      	b.n	80020ae <__aeabi_dmul+0xa6>
 80022c4:	2a1f      	cmp	r2, #31
 80022c6:	dc00      	bgt.n	80022ca <__aeabi_dmul+0x2c2>
 80022c8:	e12a      	b.n	8002520 <__aeabi_dmul+0x518>
 80022ca:	211f      	movs	r1, #31
 80022cc:	4249      	negs	r1, r1
 80022ce:	1acb      	subs	r3, r1, r3
 80022d0:	0021      	movs	r1, r4
 80022d2:	40d9      	lsrs	r1, r3
 80022d4:	000b      	movs	r3, r1
 80022d6:	2a20      	cmp	r2, #32
 80022d8:	d005      	beq.n	80022e6 <__aeabi_dmul+0x2de>
 80022da:	4a16      	ldr	r2, [pc, #88]	@ (8002334 <__aeabi_dmul+0x32c>)
 80022dc:	9d01      	ldr	r5, [sp, #4]
 80022de:	4694      	mov	ip, r2
 80022e0:	4465      	add	r5, ip
 80022e2:	40ac      	lsls	r4, r5
 80022e4:	4320      	orrs	r0, r4
 80022e6:	1e42      	subs	r2, r0, #1
 80022e8:	4190      	sbcs	r0, r2
 80022ea:	4318      	orrs	r0, r3
 80022ec:	2307      	movs	r3, #7
 80022ee:	0019      	movs	r1, r3
 80022f0:	2400      	movs	r4, #0
 80022f2:	4001      	ands	r1, r0
 80022f4:	4203      	tst	r3, r0
 80022f6:	d00c      	beq.n	8002312 <__aeabi_dmul+0x30a>
 80022f8:	230f      	movs	r3, #15
 80022fa:	4003      	ands	r3, r0
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2fa>
 8002300:	e140      	b.n	8002584 <__aeabi_dmul+0x57c>
 8002302:	1d03      	adds	r3, r0, #4
 8002304:	4283      	cmp	r3, r0
 8002306:	41a4      	sbcs	r4, r4
 8002308:	0018      	movs	r0, r3
 800230a:	4264      	negs	r4, r4
 800230c:	0761      	lsls	r1, r4, #29
 800230e:	0264      	lsls	r4, r4, #9
 8002310:	0b24      	lsrs	r4, r4, #12
 8002312:	08c2      	lsrs	r2, r0, #3
 8002314:	2300      	movs	r3, #0
 8002316:	430a      	orrs	r2, r1
 8002318:	e6cc      	b.n	80020b4 <__aeabi_dmul+0xac>
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	000007ff 	.word	0x000007ff
 8002320:	fffffc01 	.word	0xfffffc01
 8002324:	000003ff 	.word	0x000003ff
 8002328:	feffffff 	.word	0xfeffffff
 800232c:	000007fe 	.word	0x000007fe
 8002330:	fffffc0d 	.word	0xfffffc0d
 8002334:	0000043e 	.word	0x0000043e
 8002338:	4649      	mov	r1, r9
 800233a:	464a      	mov	r2, r9
 800233c:	0409      	lsls	r1, r1, #16
 800233e:	0c09      	lsrs	r1, r1, #16
 8002340:	000d      	movs	r5, r1
 8002342:	0c16      	lsrs	r6, r2, #16
 8002344:	0c02      	lsrs	r2, r0, #16
 8002346:	0400      	lsls	r0, r0, #16
 8002348:	0c00      	lsrs	r0, r0, #16
 800234a:	4345      	muls	r5, r0
 800234c:	46ac      	mov	ip, r5
 800234e:	0005      	movs	r5, r0
 8002350:	4375      	muls	r5, r6
 8002352:	46a8      	mov	r8, r5
 8002354:	0015      	movs	r5, r2
 8002356:	000f      	movs	r7, r1
 8002358:	4375      	muls	r5, r6
 800235a:	9200      	str	r2, [sp, #0]
 800235c:	9502      	str	r5, [sp, #8]
 800235e:	002a      	movs	r2, r5
 8002360:	9d00      	ldr	r5, [sp, #0]
 8002362:	436f      	muls	r7, r5
 8002364:	4665      	mov	r5, ip
 8002366:	0c2d      	lsrs	r5, r5, #16
 8002368:	46a9      	mov	r9, r5
 800236a:	4447      	add	r7, r8
 800236c:	444f      	add	r7, r9
 800236e:	45b8      	cmp	r8, r7
 8002370:	d905      	bls.n	800237e <__aeabi_dmul+0x376>
 8002372:	0015      	movs	r5, r2
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	0252      	lsls	r2, r2, #9
 8002378:	4690      	mov	r8, r2
 800237a:	4445      	add	r5, r8
 800237c:	9502      	str	r5, [sp, #8]
 800237e:	0c3d      	lsrs	r5, r7, #16
 8002380:	9503      	str	r5, [sp, #12]
 8002382:	4665      	mov	r5, ip
 8002384:	042d      	lsls	r5, r5, #16
 8002386:	043f      	lsls	r7, r7, #16
 8002388:	0c2d      	lsrs	r5, r5, #16
 800238a:	46ac      	mov	ip, r5
 800238c:	003d      	movs	r5, r7
 800238e:	4465      	add	r5, ip
 8002390:	9504      	str	r5, [sp, #16]
 8002392:	0c25      	lsrs	r5, r4, #16
 8002394:	0424      	lsls	r4, r4, #16
 8002396:	0c24      	lsrs	r4, r4, #16
 8002398:	46ac      	mov	ip, r5
 800239a:	0025      	movs	r5, r4
 800239c:	4375      	muls	r5, r6
 800239e:	46a8      	mov	r8, r5
 80023a0:	4665      	mov	r5, ip
 80023a2:	000f      	movs	r7, r1
 80023a4:	4369      	muls	r1, r5
 80023a6:	4441      	add	r1, r8
 80023a8:	4689      	mov	r9, r1
 80023aa:	4367      	muls	r7, r4
 80023ac:	0c39      	lsrs	r1, r7, #16
 80023ae:	4449      	add	r1, r9
 80023b0:	436e      	muls	r6, r5
 80023b2:	4588      	cmp	r8, r1
 80023b4:	d903      	bls.n	80023be <__aeabi_dmul+0x3b6>
 80023b6:	2280      	movs	r2, #128	@ 0x80
 80023b8:	0252      	lsls	r2, r2, #9
 80023ba:	4690      	mov	r8, r2
 80023bc:	4446      	add	r6, r8
 80023be:	0c0d      	lsrs	r5, r1, #16
 80023c0:	46a8      	mov	r8, r5
 80023c2:	0035      	movs	r5, r6
 80023c4:	4445      	add	r5, r8
 80023c6:	9505      	str	r5, [sp, #20]
 80023c8:	9d03      	ldr	r5, [sp, #12]
 80023ca:	043f      	lsls	r7, r7, #16
 80023cc:	46a8      	mov	r8, r5
 80023ce:	0c3f      	lsrs	r7, r7, #16
 80023d0:	0409      	lsls	r1, r1, #16
 80023d2:	19c9      	adds	r1, r1, r7
 80023d4:	4488      	add	r8, r1
 80023d6:	4645      	mov	r5, r8
 80023d8:	9503      	str	r5, [sp, #12]
 80023da:	4655      	mov	r5, sl
 80023dc:	042e      	lsls	r6, r5, #16
 80023de:	0c36      	lsrs	r6, r6, #16
 80023e0:	0c2f      	lsrs	r7, r5, #16
 80023e2:	0035      	movs	r5, r6
 80023e4:	4345      	muls	r5, r0
 80023e6:	4378      	muls	r0, r7
 80023e8:	4681      	mov	r9, r0
 80023ea:	0038      	movs	r0, r7
 80023ec:	46a8      	mov	r8, r5
 80023ee:	0c2d      	lsrs	r5, r5, #16
 80023f0:	46aa      	mov	sl, r5
 80023f2:	9a00      	ldr	r2, [sp, #0]
 80023f4:	4350      	muls	r0, r2
 80023f6:	4372      	muls	r2, r6
 80023f8:	444a      	add	r2, r9
 80023fa:	4452      	add	r2, sl
 80023fc:	4591      	cmp	r9, r2
 80023fe:	d903      	bls.n	8002408 <__aeabi_dmul+0x400>
 8002400:	2580      	movs	r5, #128	@ 0x80
 8002402:	026d      	lsls	r5, r5, #9
 8002404:	46a9      	mov	r9, r5
 8002406:	4448      	add	r0, r9
 8002408:	0c15      	lsrs	r5, r2, #16
 800240a:	46a9      	mov	r9, r5
 800240c:	4645      	mov	r5, r8
 800240e:	042d      	lsls	r5, r5, #16
 8002410:	0c2d      	lsrs	r5, r5, #16
 8002412:	46a8      	mov	r8, r5
 8002414:	4665      	mov	r5, ip
 8002416:	437d      	muls	r5, r7
 8002418:	0412      	lsls	r2, r2, #16
 800241a:	4448      	add	r0, r9
 800241c:	4490      	add	r8, r2
 800241e:	46a9      	mov	r9, r5
 8002420:	0032      	movs	r2, r6
 8002422:	4665      	mov	r5, ip
 8002424:	4362      	muls	r2, r4
 8002426:	436e      	muls	r6, r5
 8002428:	437c      	muls	r4, r7
 800242a:	0c17      	lsrs	r7, r2, #16
 800242c:	1936      	adds	r6, r6, r4
 800242e:	19bf      	adds	r7, r7, r6
 8002430:	42bc      	cmp	r4, r7
 8002432:	d903      	bls.n	800243c <__aeabi_dmul+0x434>
 8002434:	2480      	movs	r4, #128	@ 0x80
 8002436:	0264      	lsls	r4, r4, #9
 8002438:	46a4      	mov	ip, r4
 800243a:	44e1      	add	r9, ip
 800243c:	9c02      	ldr	r4, [sp, #8]
 800243e:	9e03      	ldr	r6, [sp, #12]
 8002440:	46a4      	mov	ip, r4
 8002442:	9d05      	ldr	r5, [sp, #20]
 8002444:	4466      	add	r6, ip
 8002446:	428e      	cmp	r6, r1
 8002448:	4189      	sbcs	r1, r1
 800244a:	46ac      	mov	ip, r5
 800244c:	0412      	lsls	r2, r2, #16
 800244e:	043c      	lsls	r4, r7, #16
 8002450:	0c12      	lsrs	r2, r2, #16
 8002452:	18a2      	adds	r2, r4, r2
 8002454:	4462      	add	r2, ip
 8002456:	4249      	negs	r1, r1
 8002458:	1854      	adds	r4, r2, r1
 800245a:	4446      	add	r6, r8
 800245c:	46a4      	mov	ip, r4
 800245e:	4546      	cmp	r6, r8
 8002460:	41a4      	sbcs	r4, r4
 8002462:	4682      	mov	sl, r0
 8002464:	4264      	negs	r4, r4
 8002466:	46a0      	mov	r8, r4
 8002468:	42aa      	cmp	r2, r5
 800246a:	4192      	sbcs	r2, r2
 800246c:	458c      	cmp	ip, r1
 800246e:	4189      	sbcs	r1, r1
 8002470:	44e2      	add	sl, ip
 8002472:	44d0      	add	r8, sl
 8002474:	4249      	negs	r1, r1
 8002476:	4252      	negs	r2, r2
 8002478:	430a      	orrs	r2, r1
 800247a:	45a0      	cmp	r8, r4
 800247c:	41a4      	sbcs	r4, r4
 800247e:	4582      	cmp	sl, r0
 8002480:	4189      	sbcs	r1, r1
 8002482:	4264      	negs	r4, r4
 8002484:	4249      	negs	r1, r1
 8002486:	430c      	orrs	r4, r1
 8002488:	4641      	mov	r1, r8
 800248a:	0c3f      	lsrs	r7, r7, #16
 800248c:	19d2      	adds	r2, r2, r7
 800248e:	1912      	adds	r2, r2, r4
 8002490:	0dcc      	lsrs	r4, r1, #23
 8002492:	9904      	ldr	r1, [sp, #16]
 8002494:	0270      	lsls	r0, r6, #9
 8002496:	4308      	orrs	r0, r1
 8002498:	1e41      	subs	r1, r0, #1
 800249a:	4188      	sbcs	r0, r1
 800249c:	4641      	mov	r1, r8
 800249e:	444a      	add	r2, r9
 80024a0:	0df6      	lsrs	r6, r6, #23
 80024a2:	0252      	lsls	r2, r2, #9
 80024a4:	4330      	orrs	r0, r6
 80024a6:	0249      	lsls	r1, r1, #9
 80024a8:	4314      	orrs	r4, r2
 80024aa:	4308      	orrs	r0, r1
 80024ac:	01d2      	lsls	r2, r2, #7
 80024ae:	d535      	bpl.n	800251c <__aeabi_dmul+0x514>
 80024b0:	2201      	movs	r2, #1
 80024b2:	0843      	lsrs	r3, r0, #1
 80024b4:	4002      	ands	r2, r0
 80024b6:	4313      	orrs	r3, r2
 80024b8:	07e0      	lsls	r0, r4, #31
 80024ba:	4318      	orrs	r0, r3
 80024bc:	0864      	lsrs	r4, r4, #1
 80024be:	e634      	b.n	800212a <__aeabi_dmul+0x122>
 80024c0:	9b00      	ldr	r3, [sp, #0]
 80024c2:	46a2      	mov	sl, r4
 80024c4:	469b      	mov	fp, r3
 80024c6:	4681      	mov	r9, r0
 80024c8:	2480      	movs	r4, #128	@ 0x80
 80024ca:	4653      	mov	r3, sl
 80024cc:	0324      	lsls	r4, r4, #12
 80024ce:	431c      	orrs	r4, r3
 80024d0:	0324      	lsls	r4, r4, #12
 80024d2:	464a      	mov	r2, r9
 80024d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002590 <__aeabi_dmul+0x588>)
 80024d6:	0b24      	lsrs	r4, r4, #12
 80024d8:	e5ec      	b.n	80020b4 <__aeabi_dmul+0xac>
 80024da:	f000 fcf3 	bl	8002ec4 <__clzsi2>
 80024de:	2315      	movs	r3, #21
 80024e0:	469c      	mov	ip, r3
 80024e2:	4484      	add	ip, r0
 80024e4:	0002      	movs	r2, r0
 80024e6:	4663      	mov	r3, ip
 80024e8:	3220      	adds	r2, #32
 80024ea:	2b1c      	cmp	r3, #28
 80024ec:	dc00      	bgt.n	80024f0 <__aeabi_dmul+0x4e8>
 80024ee:	e684      	b.n	80021fa <__aeabi_dmul+0x1f2>
 80024f0:	2300      	movs	r3, #0
 80024f2:	4699      	mov	r9, r3
 80024f4:	0023      	movs	r3, r4
 80024f6:	3808      	subs	r0, #8
 80024f8:	4083      	lsls	r3, r0
 80024fa:	469a      	mov	sl, r3
 80024fc:	e68e      	b.n	800221c <__aeabi_dmul+0x214>
 80024fe:	f000 fce1 	bl	8002ec4 <__clzsi2>
 8002502:	0002      	movs	r2, r0
 8002504:	0003      	movs	r3, r0
 8002506:	3215      	adds	r2, #21
 8002508:	3320      	adds	r3, #32
 800250a:	2a1c      	cmp	r2, #28
 800250c:	dc00      	bgt.n	8002510 <__aeabi_dmul+0x508>
 800250e:	e64e      	b.n	80021ae <__aeabi_dmul+0x1a6>
 8002510:	0002      	movs	r2, r0
 8002512:	0034      	movs	r4, r6
 8002514:	3a08      	subs	r2, #8
 8002516:	2000      	movs	r0, #0
 8002518:	4094      	lsls	r4, r2
 800251a:	e652      	b.n	80021c2 <__aeabi_dmul+0x1ba>
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	e604      	b.n	800212a <__aeabi_dmul+0x122>
 8002520:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <__aeabi_dmul+0x58c>)
 8002522:	0021      	movs	r1, r4
 8002524:	469c      	mov	ip, r3
 8002526:	0003      	movs	r3, r0
 8002528:	9d01      	ldr	r5, [sp, #4]
 800252a:	40d3      	lsrs	r3, r2
 800252c:	4465      	add	r5, ip
 800252e:	40a9      	lsls	r1, r5
 8002530:	4319      	orrs	r1, r3
 8002532:	0003      	movs	r3, r0
 8002534:	40ab      	lsls	r3, r5
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	4183      	sbcs	r3, r0
 800253a:	4319      	orrs	r1, r3
 800253c:	0008      	movs	r0, r1
 800253e:	40d4      	lsrs	r4, r2
 8002540:	074b      	lsls	r3, r1, #29
 8002542:	d009      	beq.n	8002558 <__aeabi_dmul+0x550>
 8002544:	230f      	movs	r3, #15
 8002546:	400b      	ands	r3, r1
 8002548:	2b04      	cmp	r3, #4
 800254a:	d005      	beq.n	8002558 <__aeabi_dmul+0x550>
 800254c:	1d0b      	adds	r3, r1, #4
 800254e:	428b      	cmp	r3, r1
 8002550:	4180      	sbcs	r0, r0
 8002552:	4240      	negs	r0, r0
 8002554:	1824      	adds	r4, r4, r0
 8002556:	0018      	movs	r0, r3
 8002558:	0223      	lsls	r3, r4, #8
 800255a:	d400      	bmi.n	800255e <__aeabi_dmul+0x556>
 800255c:	e6d6      	b.n	800230c <__aeabi_dmul+0x304>
 800255e:	2301      	movs	r3, #1
 8002560:	2400      	movs	r4, #0
 8002562:	2200      	movs	r2, #0
 8002564:	e5a6      	b.n	80020b4 <__aeabi_dmul+0xac>
 8002566:	290f      	cmp	r1, #15
 8002568:	d1aa      	bne.n	80024c0 <__aeabi_dmul+0x4b8>
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	4652      	mov	r2, sl
 800256e:	031b      	lsls	r3, r3, #12
 8002570:	421a      	tst	r2, r3
 8002572:	d0a9      	beq.n	80024c8 <__aeabi_dmul+0x4c0>
 8002574:	421c      	tst	r4, r3
 8002576:	d1a7      	bne.n	80024c8 <__aeabi_dmul+0x4c0>
 8002578:	431c      	orrs	r4, r3
 800257a:	9b00      	ldr	r3, [sp, #0]
 800257c:	0002      	movs	r2, r0
 800257e:	469b      	mov	fp, r3
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <__aeabi_dmul+0x588>)
 8002582:	e597      	b.n	80020b4 <__aeabi_dmul+0xac>
 8002584:	2400      	movs	r4, #0
 8002586:	e6c1      	b.n	800230c <__aeabi_dmul+0x304>
 8002588:	2400      	movs	r4, #0
 800258a:	4b01      	ldr	r3, [pc, #4]	@ (8002590 <__aeabi_dmul+0x588>)
 800258c:	0022      	movs	r2, r4
 800258e:	e591      	b.n	80020b4 <__aeabi_dmul+0xac>
 8002590:	000007ff 	.word	0x000007ff
 8002594:	0000041e 	.word	0x0000041e

08002598 <__aeabi_dsub>:
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	464e      	mov	r6, r9
 800259c:	4645      	mov	r5, r8
 800259e:	46de      	mov	lr, fp
 80025a0:	4657      	mov	r7, sl
 80025a2:	b5e0      	push	{r5, r6, r7, lr}
 80025a4:	b085      	sub	sp, #20
 80025a6:	9000      	str	r0, [sp, #0]
 80025a8:	9101      	str	r1, [sp, #4]
 80025aa:	030c      	lsls	r4, r1, #12
 80025ac:	004f      	lsls	r7, r1, #1
 80025ae:	0fce      	lsrs	r6, r1, #31
 80025b0:	0a61      	lsrs	r1, r4, #9
 80025b2:	9c00      	ldr	r4, [sp, #0]
 80025b4:	46b0      	mov	r8, r6
 80025b6:	0f64      	lsrs	r4, r4, #29
 80025b8:	430c      	orrs	r4, r1
 80025ba:	9900      	ldr	r1, [sp, #0]
 80025bc:	0d7f      	lsrs	r7, r7, #21
 80025be:	00c8      	lsls	r0, r1, #3
 80025c0:	0011      	movs	r1, r2
 80025c2:	001a      	movs	r2, r3
 80025c4:	031b      	lsls	r3, r3, #12
 80025c6:	469c      	mov	ip, r3
 80025c8:	9100      	str	r1, [sp, #0]
 80025ca:	9201      	str	r2, [sp, #4]
 80025cc:	0051      	lsls	r1, r2, #1
 80025ce:	0d4b      	lsrs	r3, r1, #21
 80025d0:	4699      	mov	r9, r3
 80025d2:	9b01      	ldr	r3, [sp, #4]
 80025d4:	9d00      	ldr	r5, [sp, #0]
 80025d6:	0fd9      	lsrs	r1, r3, #31
 80025d8:	4663      	mov	r3, ip
 80025da:	0f6a      	lsrs	r2, r5, #29
 80025dc:	0a5b      	lsrs	r3, r3, #9
 80025de:	4313      	orrs	r3, r2
 80025e0:	00ea      	lsls	r2, r5, #3
 80025e2:	4694      	mov	ip, r2
 80025e4:	4693      	mov	fp, r2
 80025e6:	4ac1      	ldr	r2, [pc, #772]	@ (80028ec <__aeabi_dsub+0x354>)
 80025e8:	9003      	str	r0, [sp, #12]
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	4591      	cmp	r9, r2
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dsub+0x5a>
 80025f0:	e0cd      	b.n	800278e <__aeabi_dsub+0x1f6>
 80025f2:	2501      	movs	r5, #1
 80025f4:	4069      	eors	r1, r5
 80025f6:	464d      	mov	r5, r9
 80025f8:	1b7d      	subs	r5, r7, r5
 80025fa:	46aa      	mov	sl, r5
 80025fc:	428e      	cmp	r6, r1
 80025fe:	d100      	bne.n	8002602 <__aeabi_dsub+0x6a>
 8002600:	e080      	b.n	8002704 <__aeabi_dsub+0x16c>
 8002602:	2d00      	cmp	r5, #0
 8002604:	dc00      	bgt.n	8002608 <__aeabi_dsub+0x70>
 8002606:	e335      	b.n	8002c74 <__aeabi_dsub+0x6dc>
 8002608:	4649      	mov	r1, r9
 800260a:	2900      	cmp	r1, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x78>
 800260e:	e0df      	b.n	80027d0 <__aeabi_dsub+0x238>
 8002610:	4297      	cmp	r7, r2
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x7e>
 8002614:	e194      	b.n	8002940 <__aeabi_dsub+0x3a8>
 8002616:	4652      	mov	r2, sl
 8002618:	2501      	movs	r5, #1
 800261a:	2a38      	cmp	r2, #56	@ 0x38
 800261c:	dc19      	bgt.n	8002652 <__aeabi_dsub+0xba>
 800261e:	2280      	movs	r2, #128	@ 0x80
 8002620:	9b02      	ldr	r3, [sp, #8]
 8002622:	0412      	lsls	r2, r2, #16
 8002624:	4313      	orrs	r3, r2
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	4652      	mov	r2, sl
 800262a:	2a1f      	cmp	r2, #31
 800262c:	dd00      	ble.n	8002630 <__aeabi_dsub+0x98>
 800262e:	e1e3      	b.n	80029f8 <__aeabi_dsub+0x460>
 8002630:	4653      	mov	r3, sl
 8002632:	2220      	movs	r2, #32
 8002634:	4661      	mov	r1, ip
 8002636:	9d02      	ldr	r5, [sp, #8]
 8002638:	1ad2      	subs	r2, r2, r3
 800263a:	4095      	lsls	r5, r2
 800263c:	40d9      	lsrs	r1, r3
 800263e:	430d      	orrs	r5, r1
 8002640:	4661      	mov	r1, ip
 8002642:	4091      	lsls	r1, r2
 8002644:	000a      	movs	r2, r1
 8002646:	1e51      	subs	r1, r2, #1
 8002648:	418a      	sbcs	r2, r1
 800264a:	4315      	orrs	r5, r2
 800264c:	9a02      	ldr	r2, [sp, #8]
 800264e:	40da      	lsrs	r2, r3
 8002650:	1aa4      	subs	r4, r4, r2
 8002652:	1b45      	subs	r5, r0, r5
 8002654:	42a8      	cmp	r0, r5
 8002656:	4180      	sbcs	r0, r0
 8002658:	4240      	negs	r0, r0
 800265a:	1a24      	subs	r4, r4, r0
 800265c:	0223      	lsls	r3, r4, #8
 800265e:	d400      	bmi.n	8002662 <__aeabi_dsub+0xca>
 8002660:	e13d      	b.n	80028de <__aeabi_dsub+0x346>
 8002662:	0264      	lsls	r4, r4, #9
 8002664:	0a64      	lsrs	r4, r4, #9
 8002666:	2c00      	cmp	r4, #0
 8002668:	d100      	bne.n	800266c <__aeabi_dsub+0xd4>
 800266a:	e147      	b.n	80028fc <__aeabi_dsub+0x364>
 800266c:	0020      	movs	r0, r4
 800266e:	f000 fc29 	bl	8002ec4 <__clzsi2>
 8002672:	0003      	movs	r3, r0
 8002674:	3b08      	subs	r3, #8
 8002676:	2120      	movs	r1, #32
 8002678:	0028      	movs	r0, r5
 800267a:	1aca      	subs	r2, r1, r3
 800267c:	40d0      	lsrs	r0, r2
 800267e:	409c      	lsls	r4, r3
 8002680:	0002      	movs	r2, r0
 8002682:	409d      	lsls	r5, r3
 8002684:	4322      	orrs	r2, r4
 8002686:	429f      	cmp	r7, r3
 8002688:	dd00      	ble.n	800268c <__aeabi_dsub+0xf4>
 800268a:	e177      	b.n	800297c <__aeabi_dsub+0x3e4>
 800268c:	1bd8      	subs	r0, r3, r7
 800268e:	3001      	adds	r0, #1
 8002690:	1a09      	subs	r1, r1, r0
 8002692:	002c      	movs	r4, r5
 8002694:	408d      	lsls	r5, r1
 8002696:	40c4      	lsrs	r4, r0
 8002698:	1e6b      	subs	r3, r5, #1
 800269a:	419d      	sbcs	r5, r3
 800269c:	0013      	movs	r3, r2
 800269e:	40c2      	lsrs	r2, r0
 80026a0:	408b      	lsls	r3, r1
 80026a2:	4325      	orrs	r5, r4
 80026a4:	2700      	movs	r7, #0
 80026a6:	0014      	movs	r4, r2
 80026a8:	431d      	orrs	r5, r3
 80026aa:	076b      	lsls	r3, r5, #29
 80026ac:	d009      	beq.n	80026c2 <__aeabi_dsub+0x12a>
 80026ae:	230f      	movs	r3, #15
 80026b0:	402b      	ands	r3, r5
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d005      	beq.n	80026c2 <__aeabi_dsub+0x12a>
 80026b6:	1d2b      	adds	r3, r5, #4
 80026b8:	42ab      	cmp	r3, r5
 80026ba:	41ad      	sbcs	r5, r5
 80026bc:	426d      	negs	r5, r5
 80026be:	1964      	adds	r4, r4, r5
 80026c0:	001d      	movs	r5, r3
 80026c2:	0223      	lsls	r3, r4, #8
 80026c4:	d400      	bmi.n	80026c8 <__aeabi_dsub+0x130>
 80026c6:	e140      	b.n	800294a <__aeabi_dsub+0x3b2>
 80026c8:	4a88      	ldr	r2, [pc, #544]	@ (80028ec <__aeabi_dsub+0x354>)
 80026ca:	3701      	adds	r7, #1
 80026cc:	4297      	cmp	r7, r2
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x13a>
 80026d0:	e101      	b.n	80028d6 <__aeabi_dsub+0x33e>
 80026d2:	2601      	movs	r6, #1
 80026d4:	4643      	mov	r3, r8
 80026d6:	4986      	ldr	r1, [pc, #536]	@ (80028f0 <__aeabi_dsub+0x358>)
 80026d8:	08ed      	lsrs	r5, r5, #3
 80026da:	4021      	ands	r1, r4
 80026dc:	074a      	lsls	r2, r1, #29
 80026de:	432a      	orrs	r2, r5
 80026e0:	057c      	lsls	r4, r7, #21
 80026e2:	024d      	lsls	r5, r1, #9
 80026e4:	0b2d      	lsrs	r5, r5, #12
 80026e6:	0d64      	lsrs	r4, r4, #21
 80026e8:	401e      	ands	r6, r3
 80026ea:	0524      	lsls	r4, r4, #20
 80026ec:	432c      	orrs	r4, r5
 80026ee:	07f6      	lsls	r6, r6, #31
 80026f0:	4334      	orrs	r4, r6
 80026f2:	0010      	movs	r0, r2
 80026f4:	0021      	movs	r1, r4
 80026f6:	b005      	add	sp, #20
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	2d00      	cmp	r5, #0
 8002706:	dc00      	bgt.n	800270a <__aeabi_dsub+0x172>
 8002708:	e2d0      	b.n	8002cac <__aeabi_dsub+0x714>
 800270a:	4649      	mov	r1, r9
 800270c:	2900      	cmp	r1, #0
 800270e:	d000      	beq.n	8002712 <__aeabi_dsub+0x17a>
 8002710:	e0d4      	b.n	80028bc <__aeabi_dsub+0x324>
 8002712:	4661      	mov	r1, ip
 8002714:	9b02      	ldr	r3, [sp, #8]
 8002716:	4319      	orrs	r1, r3
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x184>
 800271a:	e12b      	b.n	8002974 <__aeabi_dsub+0x3dc>
 800271c:	1e69      	subs	r1, r5, #1
 800271e:	2d01      	cmp	r5, #1
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x18c>
 8002722:	e1d9      	b.n	8002ad8 <__aeabi_dsub+0x540>
 8002724:	4295      	cmp	r5, r2
 8002726:	d100      	bne.n	800272a <__aeabi_dsub+0x192>
 8002728:	e10a      	b.n	8002940 <__aeabi_dsub+0x3a8>
 800272a:	2501      	movs	r5, #1
 800272c:	2938      	cmp	r1, #56	@ 0x38
 800272e:	dc17      	bgt.n	8002760 <__aeabi_dsub+0x1c8>
 8002730:	468a      	mov	sl, r1
 8002732:	4653      	mov	r3, sl
 8002734:	2b1f      	cmp	r3, #31
 8002736:	dd00      	ble.n	800273a <__aeabi_dsub+0x1a2>
 8002738:	e1e7      	b.n	8002b0a <__aeabi_dsub+0x572>
 800273a:	2220      	movs	r2, #32
 800273c:	1ad2      	subs	r2, r2, r3
 800273e:	9b02      	ldr	r3, [sp, #8]
 8002740:	4661      	mov	r1, ip
 8002742:	4093      	lsls	r3, r2
 8002744:	001d      	movs	r5, r3
 8002746:	4653      	mov	r3, sl
 8002748:	40d9      	lsrs	r1, r3
 800274a:	4663      	mov	r3, ip
 800274c:	4093      	lsls	r3, r2
 800274e:	001a      	movs	r2, r3
 8002750:	430d      	orrs	r5, r1
 8002752:	1e51      	subs	r1, r2, #1
 8002754:	418a      	sbcs	r2, r1
 8002756:	4653      	mov	r3, sl
 8002758:	4315      	orrs	r5, r2
 800275a:	9a02      	ldr	r2, [sp, #8]
 800275c:	40da      	lsrs	r2, r3
 800275e:	18a4      	adds	r4, r4, r2
 8002760:	182d      	adds	r5, r5, r0
 8002762:	4285      	cmp	r5, r0
 8002764:	4180      	sbcs	r0, r0
 8002766:	4240      	negs	r0, r0
 8002768:	1824      	adds	r4, r4, r0
 800276a:	0223      	lsls	r3, r4, #8
 800276c:	d400      	bmi.n	8002770 <__aeabi_dsub+0x1d8>
 800276e:	e0b6      	b.n	80028de <__aeabi_dsub+0x346>
 8002770:	4b5e      	ldr	r3, [pc, #376]	@ (80028ec <__aeabi_dsub+0x354>)
 8002772:	3701      	adds	r7, #1
 8002774:	429f      	cmp	r7, r3
 8002776:	d100      	bne.n	800277a <__aeabi_dsub+0x1e2>
 8002778:	e0ad      	b.n	80028d6 <__aeabi_dsub+0x33e>
 800277a:	2101      	movs	r1, #1
 800277c:	4b5c      	ldr	r3, [pc, #368]	@ (80028f0 <__aeabi_dsub+0x358>)
 800277e:	086a      	lsrs	r2, r5, #1
 8002780:	401c      	ands	r4, r3
 8002782:	4029      	ands	r1, r5
 8002784:	430a      	orrs	r2, r1
 8002786:	07e5      	lsls	r5, r4, #31
 8002788:	4315      	orrs	r5, r2
 800278a:	0864      	lsrs	r4, r4, #1
 800278c:	e78d      	b.n	80026aa <__aeabi_dsub+0x112>
 800278e:	4a59      	ldr	r2, [pc, #356]	@ (80028f4 <__aeabi_dsub+0x35c>)
 8002790:	9b02      	ldr	r3, [sp, #8]
 8002792:	4692      	mov	sl, r2
 8002794:	4662      	mov	r2, ip
 8002796:	44ba      	add	sl, r7
 8002798:	431a      	orrs	r2, r3
 800279a:	d02c      	beq.n	80027f6 <__aeabi_dsub+0x25e>
 800279c:	428e      	cmp	r6, r1
 800279e:	d02e      	beq.n	80027fe <__aeabi_dsub+0x266>
 80027a0:	4652      	mov	r2, sl
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d060      	beq.n	8002868 <__aeabi_dsub+0x2d0>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x214>
 80027aa:	e0db      	b.n	8002964 <__aeabi_dsub+0x3cc>
 80027ac:	4663      	mov	r3, ip
 80027ae:	000e      	movs	r6, r1
 80027b0:	9c02      	ldr	r4, [sp, #8]
 80027b2:	08d8      	lsrs	r0, r3, #3
 80027b4:	0762      	lsls	r2, r4, #29
 80027b6:	4302      	orrs	r2, r0
 80027b8:	08e4      	lsrs	r4, r4, #3
 80027ba:	0013      	movs	r3, r2
 80027bc:	4323      	orrs	r3, r4
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x22a>
 80027c0:	e254      	b.n	8002c6c <__aeabi_dsub+0x6d4>
 80027c2:	2580      	movs	r5, #128	@ 0x80
 80027c4:	032d      	lsls	r5, r5, #12
 80027c6:	4325      	orrs	r5, r4
 80027c8:	032d      	lsls	r5, r5, #12
 80027ca:	4c48      	ldr	r4, [pc, #288]	@ (80028ec <__aeabi_dsub+0x354>)
 80027cc:	0b2d      	lsrs	r5, r5, #12
 80027ce:	e78c      	b.n	80026ea <__aeabi_dsub+0x152>
 80027d0:	4661      	mov	r1, ip
 80027d2:	9b02      	ldr	r3, [sp, #8]
 80027d4:	4319      	orrs	r1, r3
 80027d6:	d100      	bne.n	80027da <__aeabi_dsub+0x242>
 80027d8:	e0cc      	b.n	8002974 <__aeabi_dsub+0x3dc>
 80027da:	0029      	movs	r1, r5
 80027dc:	3901      	subs	r1, #1
 80027de:	2d01      	cmp	r5, #1
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x24c>
 80027e2:	e188      	b.n	8002af6 <__aeabi_dsub+0x55e>
 80027e4:	4295      	cmp	r5, r2
 80027e6:	d100      	bne.n	80027ea <__aeabi_dsub+0x252>
 80027e8:	e0aa      	b.n	8002940 <__aeabi_dsub+0x3a8>
 80027ea:	2501      	movs	r5, #1
 80027ec:	2938      	cmp	r1, #56	@ 0x38
 80027ee:	dd00      	ble.n	80027f2 <__aeabi_dsub+0x25a>
 80027f0:	e72f      	b.n	8002652 <__aeabi_dsub+0xba>
 80027f2:	468a      	mov	sl, r1
 80027f4:	e718      	b.n	8002628 <__aeabi_dsub+0x90>
 80027f6:	2201      	movs	r2, #1
 80027f8:	4051      	eors	r1, r2
 80027fa:	428e      	cmp	r6, r1
 80027fc:	d1d0      	bne.n	80027a0 <__aeabi_dsub+0x208>
 80027fe:	4653      	mov	r3, sl
 8002800:	2b00      	cmp	r3, #0
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x26e>
 8002804:	e0be      	b.n	8002984 <__aeabi_dsub+0x3ec>
 8002806:	2f00      	cmp	r7, #0
 8002808:	d000      	beq.n	800280c <__aeabi_dsub+0x274>
 800280a:	e138      	b.n	8002a7e <__aeabi_dsub+0x4e6>
 800280c:	46ca      	mov	sl, r9
 800280e:	0022      	movs	r2, r4
 8002810:	4302      	orrs	r2, r0
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x27e>
 8002814:	e1e2      	b.n	8002bdc <__aeabi_dsub+0x644>
 8002816:	4653      	mov	r3, sl
 8002818:	1e59      	subs	r1, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x288>
 800281e:	e20d      	b.n	8002c3c <__aeabi_dsub+0x6a4>
 8002820:	4a32      	ldr	r2, [pc, #200]	@ (80028ec <__aeabi_dsub+0x354>)
 8002822:	4592      	cmp	sl, r2
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x290>
 8002826:	e1d2      	b.n	8002bce <__aeabi_dsub+0x636>
 8002828:	2701      	movs	r7, #1
 800282a:	2938      	cmp	r1, #56	@ 0x38
 800282c:	dc13      	bgt.n	8002856 <__aeabi_dsub+0x2be>
 800282e:	291f      	cmp	r1, #31
 8002830:	dd00      	ble.n	8002834 <__aeabi_dsub+0x29c>
 8002832:	e1ee      	b.n	8002c12 <__aeabi_dsub+0x67a>
 8002834:	2220      	movs	r2, #32
 8002836:	9b02      	ldr	r3, [sp, #8]
 8002838:	1a52      	subs	r2, r2, r1
 800283a:	0025      	movs	r5, r4
 800283c:	0007      	movs	r7, r0
 800283e:	469a      	mov	sl, r3
 8002840:	40cc      	lsrs	r4, r1
 8002842:	4090      	lsls	r0, r2
 8002844:	4095      	lsls	r5, r2
 8002846:	40cf      	lsrs	r7, r1
 8002848:	44a2      	add	sl, r4
 800284a:	1e42      	subs	r2, r0, #1
 800284c:	4190      	sbcs	r0, r2
 800284e:	4653      	mov	r3, sl
 8002850:	432f      	orrs	r7, r5
 8002852:	4307      	orrs	r7, r0
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	003d      	movs	r5, r7
 8002858:	4465      	add	r5, ip
 800285a:	4565      	cmp	r5, ip
 800285c:	4192      	sbcs	r2, r2
 800285e:	9b02      	ldr	r3, [sp, #8]
 8002860:	4252      	negs	r2, r2
 8002862:	464f      	mov	r7, r9
 8002864:	18d4      	adds	r4, r2, r3
 8002866:	e780      	b.n	800276a <__aeabi_dsub+0x1d2>
 8002868:	4a23      	ldr	r2, [pc, #140]	@ (80028f8 <__aeabi_dsub+0x360>)
 800286a:	1c7d      	adds	r5, r7, #1
 800286c:	4215      	tst	r5, r2
 800286e:	d000      	beq.n	8002872 <__aeabi_dsub+0x2da>
 8002870:	e0aa      	b.n	80029c8 <__aeabi_dsub+0x430>
 8002872:	4662      	mov	r2, ip
 8002874:	0025      	movs	r5, r4
 8002876:	9b02      	ldr	r3, [sp, #8]
 8002878:	4305      	orrs	r5, r0
 800287a:	431a      	orrs	r2, r3
 800287c:	2f00      	cmp	r7, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x2ea>
 8002880:	e0f5      	b.n	8002a6e <__aeabi_dsub+0x4d6>
 8002882:	2d00      	cmp	r5, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x2f0>
 8002886:	e16b      	b.n	8002b60 <__aeabi_dsub+0x5c8>
 8002888:	2a00      	cmp	r2, #0
 800288a:	d100      	bne.n	800288e <__aeabi_dsub+0x2f6>
 800288c:	e152      	b.n	8002b34 <__aeabi_dsub+0x59c>
 800288e:	4663      	mov	r3, ip
 8002890:	1ac5      	subs	r5, r0, r3
 8002892:	9b02      	ldr	r3, [sp, #8]
 8002894:	1ae2      	subs	r2, r4, r3
 8002896:	42a8      	cmp	r0, r5
 8002898:	419b      	sbcs	r3, r3
 800289a:	425b      	negs	r3, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	021a      	lsls	r2, r3, #8
 80028a0:	d400      	bmi.n	80028a4 <__aeabi_dsub+0x30c>
 80028a2:	e1d5      	b.n	8002c50 <__aeabi_dsub+0x6b8>
 80028a4:	4663      	mov	r3, ip
 80028a6:	1a1d      	subs	r5, r3, r0
 80028a8:	45ac      	cmp	ip, r5
 80028aa:	4192      	sbcs	r2, r2
 80028ac:	2601      	movs	r6, #1
 80028ae:	9b02      	ldr	r3, [sp, #8]
 80028b0:	4252      	negs	r2, r2
 80028b2:	1b1c      	subs	r4, r3, r4
 80028b4:	4688      	mov	r8, r1
 80028b6:	1aa4      	subs	r4, r4, r2
 80028b8:	400e      	ands	r6, r1
 80028ba:	e6f6      	b.n	80026aa <__aeabi_dsub+0x112>
 80028bc:	4297      	cmp	r7, r2
 80028be:	d03f      	beq.n	8002940 <__aeabi_dsub+0x3a8>
 80028c0:	4652      	mov	r2, sl
 80028c2:	2501      	movs	r5, #1
 80028c4:	2a38      	cmp	r2, #56	@ 0x38
 80028c6:	dd00      	ble.n	80028ca <__aeabi_dsub+0x332>
 80028c8:	e74a      	b.n	8002760 <__aeabi_dsub+0x1c8>
 80028ca:	2280      	movs	r2, #128	@ 0x80
 80028cc:	9b02      	ldr	r3, [sp, #8]
 80028ce:	0412      	lsls	r2, r2, #16
 80028d0:	4313      	orrs	r3, r2
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	e72d      	b.n	8002732 <__aeabi_dsub+0x19a>
 80028d6:	003c      	movs	r4, r7
 80028d8:	2500      	movs	r5, #0
 80028da:	2200      	movs	r2, #0
 80028dc:	e705      	b.n	80026ea <__aeabi_dsub+0x152>
 80028de:	2307      	movs	r3, #7
 80028e0:	402b      	ands	r3, r5
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x350>
 80028e6:	e6e2      	b.n	80026ae <__aeabi_dsub+0x116>
 80028e8:	e06b      	b.n	80029c2 <__aeabi_dsub+0x42a>
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	000007ff 	.word	0x000007ff
 80028f0:	ff7fffff 	.word	0xff7fffff
 80028f4:	fffff801 	.word	0xfffff801
 80028f8:	000007fe 	.word	0x000007fe
 80028fc:	0028      	movs	r0, r5
 80028fe:	f000 fae1 	bl	8002ec4 <__clzsi2>
 8002902:	0003      	movs	r3, r0
 8002904:	3318      	adds	r3, #24
 8002906:	2b1f      	cmp	r3, #31
 8002908:	dc00      	bgt.n	800290c <__aeabi_dsub+0x374>
 800290a:	e6b4      	b.n	8002676 <__aeabi_dsub+0xde>
 800290c:	002a      	movs	r2, r5
 800290e:	3808      	subs	r0, #8
 8002910:	4082      	lsls	r2, r0
 8002912:	429f      	cmp	r7, r3
 8002914:	dd00      	ble.n	8002918 <__aeabi_dsub+0x380>
 8002916:	e0b9      	b.n	8002a8c <__aeabi_dsub+0x4f4>
 8002918:	1bdb      	subs	r3, r3, r7
 800291a:	1c58      	adds	r0, r3, #1
 800291c:	281f      	cmp	r0, #31
 800291e:	dc00      	bgt.n	8002922 <__aeabi_dsub+0x38a>
 8002920:	e1a0      	b.n	8002c64 <__aeabi_dsub+0x6cc>
 8002922:	0015      	movs	r5, r2
 8002924:	3b1f      	subs	r3, #31
 8002926:	40dd      	lsrs	r5, r3
 8002928:	2820      	cmp	r0, #32
 800292a:	d005      	beq.n	8002938 <__aeabi_dsub+0x3a0>
 800292c:	2340      	movs	r3, #64	@ 0x40
 800292e:	1a1b      	subs	r3, r3, r0
 8002930:	409a      	lsls	r2, r3
 8002932:	1e53      	subs	r3, r2, #1
 8002934:	419a      	sbcs	r2, r3
 8002936:	4315      	orrs	r5, r2
 8002938:	2307      	movs	r3, #7
 800293a:	2700      	movs	r7, #0
 800293c:	402b      	ands	r3, r5
 800293e:	e7d0      	b.n	80028e2 <__aeabi_dsub+0x34a>
 8002940:	08c0      	lsrs	r0, r0, #3
 8002942:	0762      	lsls	r2, r4, #29
 8002944:	4302      	orrs	r2, r0
 8002946:	08e4      	lsrs	r4, r4, #3
 8002948:	e737      	b.n	80027ba <__aeabi_dsub+0x222>
 800294a:	08ea      	lsrs	r2, r5, #3
 800294c:	0763      	lsls	r3, r4, #29
 800294e:	431a      	orrs	r2, r3
 8002950:	4bd3      	ldr	r3, [pc, #844]	@ (8002ca0 <__aeabi_dsub+0x708>)
 8002952:	08e4      	lsrs	r4, r4, #3
 8002954:	429f      	cmp	r7, r3
 8002956:	d100      	bne.n	800295a <__aeabi_dsub+0x3c2>
 8002958:	e72f      	b.n	80027ba <__aeabi_dsub+0x222>
 800295a:	0324      	lsls	r4, r4, #12
 800295c:	0b25      	lsrs	r5, r4, #12
 800295e:	057c      	lsls	r4, r7, #21
 8002960:	0d64      	lsrs	r4, r4, #21
 8002962:	e6c2      	b.n	80026ea <__aeabi_dsub+0x152>
 8002964:	46ca      	mov	sl, r9
 8002966:	0022      	movs	r2, r4
 8002968:	4302      	orrs	r2, r0
 800296a:	d158      	bne.n	8002a1e <__aeabi_dsub+0x486>
 800296c:	4663      	mov	r3, ip
 800296e:	000e      	movs	r6, r1
 8002970:	9c02      	ldr	r4, [sp, #8]
 8002972:	9303      	str	r3, [sp, #12]
 8002974:	9b03      	ldr	r3, [sp, #12]
 8002976:	4657      	mov	r7, sl
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	e7e7      	b.n	800294c <__aeabi_dsub+0x3b4>
 800297c:	4cc9      	ldr	r4, [pc, #804]	@ (8002ca4 <__aeabi_dsub+0x70c>)
 800297e:	1aff      	subs	r7, r7, r3
 8002980:	4014      	ands	r4, r2
 8002982:	e692      	b.n	80026aa <__aeabi_dsub+0x112>
 8002984:	4dc8      	ldr	r5, [pc, #800]	@ (8002ca8 <__aeabi_dsub+0x710>)
 8002986:	1c7a      	adds	r2, r7, #1
 8002988:	422a      	tst	r2, r5
 800298a:	d000      	beq.n	800298e <__aeabi_dsub+0x3f6>
 800298c:	e084      	b.n	8002a98 <__aeabi_dsub+0x500>
 800298e:	0022      	movs	r2, r4
 8002990:	4302      	orrs	r2, r0
 8002992:	2f00      	cmp	r7, #0
 8002994:	d000      	beq.n	8002998 <__aeabi_dsub+0x400>
 8002996:	e0ef      	b.n	8002b78 <__aeabi_dsub+0x5e0>
 8002998:	2a00      	cmp	r2, #0
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0x406>
 800299c:	e0e5      	b.n	8002b6a <__aeabi_dsub+0x5d2>
 800299e:	4662      	mov	r2, ip
 80029a0:	9902      	ldr	r1, [sp, #8]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x410>
 80029a6:	e0c5      	b.n	8002b34 <__aeabi_dsub+0x59c>
 80029a8:	4663      	mov	r3, ip
 80029aa:	18c5      	adds	r5, r0, r3
 80029ac:	468c      	mov	ip, r1
 80029ae:	4285      	cmp	r5, r0
 80029b0:	4180      	sbcs	r0, r0
 80029b2:	4464      	add	r4, ip
 80029b4:	4240      	negs	r0, r0
 80029b6:	1824      	adds	r4, r4, r0
 80029b8:	0223      	lsls	r3, r4, #8
 80029ba:	d502      	bpl.n	80029c2 <__aeabi_dsub+0x42a>
 80029bc:	4bb9      	ldr	r3, [pc, #740]	@ (8002ca4 <__aeabi_dsub+0x70c>)
 80029be:	3701      	adds	r7, #1
 80029c0:	401c      	ands	r4, r3
 80029c2:	46ba      	mov	sl, r7
 80029c4:	9503      	str	r5, [sp, #12]
 80029c6:	e7d5      	b.n	8002974 <__aeabi_dsub+0x3dc>
 80029c8:	4662      	mov	r2, ip
 80029ca:	1a85      	subs	r5, r0, r2
 80029cc:	42a8      	cmp	r0, r5
 80029ce:	4192      	sbcs	r2, r2
 80029d0:	4252      	negs	r2, r2
 80029d2:	4691      	mov	r9, r2
 80029d4:	9b02      	ldr	r3, [sp, #8]
 80029d6:	1ae3      	subs	r3, r4, r3
 80029d8:	001a      	movs	r2, r3
 80029da:	464b      	mov	r3, r9
 80029dc:	1ad2      	subs	r2, r2, r3
 80029de:	0013      	movs	r3, r2
 80029e0:	4691      	mov	r9, r2
 80029e2:	021a      	lsls	r2, r3, #8
 80029e4:	d46c      	bmi.n	8002ac0 <__aeabi_dsub+0x528>
 80029e6:	464a      	mov	r2, r9
 80029e8:	464c      	mov	r4, r9
 80029ea:	432a      	orrs	r2, r5
 80029ec:	d000      	beq.n	80029f0 <__aeabi_dsub+0x458>
 80029ee:	e63a      	b.n	8002666 <__aeabi_dsub+0xce>
 80029f0:	2600      	movs	r6, #0
 80029f2:	2400      	movs	r4, #0
 80029f4:	2500      	movs	r5, #0
 80029f6:	e678      	b.n	80026ea <__aeabi_dsub+0x152>
 80029f8:	9902      	ldr	r1, [sp, #8]
 80029fa:	4653      	mov	r3, sl
 80029fc:	000d      	movs	r5, r1
 80029fe:	3a20      	subs	r2, #32
 8002a00:	40d5      	lsrs	r5, r2
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d006      	beq.n	8002a14 <__aeabi_dsub+0x47c>
 8002a06:	2240      	movs	r2, #64	@ 0x40
 8002a08:	1ad2      	subs	r2, r2, r3
 8002a0a:	000b      	movs	r3, r1
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	4662      	mov	r2, ip
 8002a10:	431a      	orrs	r2, r3
 8002a12:	4693      	mov	fp, r2
 8002a14:	465b      	mov	r3, fp
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	4193      	sbcs	r3, r2
 8002a1a:	431d      	orrs	r5, r3
 8002a1c:	e619      	b.n	8002652 <__aeabi_dsub+0xba>
 8002a1e:	4653      	mov	r3, sl
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x490>
 8002a26:	e0c6      	b.n	8002bb6 <__aeabi_dsub+0x61e>
 8002a28:	4e9d      	ldr	r6, [pc, #628]	@ (8002ca0 <__aeabi_dsub+0x708>)
 8002a2a:	45b2      	cmp	sl, r6
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x498>
 8002a2e:	e6bd      	b.n	80027ac <__aeabi_dsub+0x214>
 8002a30:	4688      	mov	r8, r1
 8002a32:	000e      	movs	r6, r1
 8002a34:	2501      	movs	r5, #1
 8002a36:	2a38      	cmp	r2, #56	@ 0x38
 8002a38:	dc10      	bgt.n	8002a5c <__aeabi_dsub+0x4c4>
 8002a3a:	2a1f      	cmp	r2, #31
 8002a3c:	dc7f      	bgt.n	8002b3e <__aeabi_dsub+0x5a6>
 8002a3e:	2120      	movs	r1, #32
 8002a40:	0025      	movs	r5, r4
 8002a42:	1a89      	subs	r1, r1, r2
 8002a44:	0007      	movs	r7, r0
 8002a46:	4088      	lsls	r0, r1
 8002a48:	408d      	lsls	r5, r1
 8002a4a:	40d7      	lsrs	r7, r2
 8002a4c:	40d4      	lsrs	r4, r2
 8002a4e:	1e41      	subs	r1, r0, #1
 8002a50:	4188      	sbcs	r0, r1
 8002a52:	9b02      	ldr	r3, [sp, #8]
 8002a54:	433d      	orrs	r5, r7
 8002a56:	1b1b      	subs	r3, r3, r4
 8002a58:	4305      	orrs	r5, r0
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	4662      	mov	r2, ip
 8002a5e:	1b55      	subs	r5, r2, r5
 8002a60:	45ac      	cmp	ip, r5
 8002a62:	4192      	sbcs	r2, r2
 8002a64:	9b02      	ldr	r3, [sp, #8]
 8002a66:	4252      	negs	r2, r2
 8002a68:	464f      	mov	r7, r9
 8002a6a:	1a9c      	subs	r4, r3, r2
 8002a6c:	e5f6      	b.n	800265c <__aeabi_dsub+0xc4>
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	d000      	beq.n	8002a74 <__aeabi_dsub+0x4dc>
 8002a72:	e0b7      	b.n	8002be4 <__aeabi_dsub+0x64c>
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d100      	bne.n	8002a7a <__aeabi_dsub+0x4e2>
 8002a78:	e0f0      	b.n	8002c5c <__aeabi_dsub+0x6c4>
 8002a7a:	2601      	movs	r6, #1
 8002a7c:	400e      	ands	r6, r1
 8002a7e:	4663      	mov	r3, ip
 8002a80:	9802      	ldr	r0, [sp, #8]
 8002a82:	08d9      	lsrs	r1, r3, #3
 8002a84:	0742      	lsls	r2, r0, #29
 8002a86:	430a      	orrs	r2, r1
 8002a88:	08c4      	lsrs	r4, r0, #3
 8002a8a:	e696      	b.n	80027ba <__aeabi_dsub+0x222>
 8002a8c:	4c85      	ldr	r4, [pc, #532]	@ (8002ca4 <__aeabi_dsub+0x70c>)
 8002a8e:	1aff      	subs	r7, r7, r3
 8002a90:	4014      	ands	r4, r2
 8002a92:	0762      	lsls	r2, r4, #29
 8002a94:	08e4      	lsrs	r4, r4, #3
 8002a96:	e760      	b.n	800295a <__aeabi_dsub+0x3c2>
 8002a98:	4981      	ldr	r1, [pc, #516]	@ (8002ca0 <__aeabi_dsub+0x708>)
 8002a9a:	428a      	cmp	r2, r1
 8002a9c:	d100      	bne.n	8002aa0 <__aeabi_dsub+0x508>
 8002a9e:	e0c9      	b.n	8002c34 <__aeabi_dsub+0x69c>
 8002aa0:	4663      	mov	r3, ip
 8002aa2:	18c1      	adds	r1, r0, r3
 8002aa4:	4281      	cmp	r1, r0
 8002aa6:	4180      	sbcs	r0, r0
 8002aa8:	9b02      	ldr	r3, [sp, #8]
 8002aaa:	4240      	negs	r0, r0
 8002aac:	18e3      	adds	r3, r4, r3
 8002aae:	181b      	adds	r3, r3, r0
 8002ab0:	07dd      	lsls	r5, r3, #31
 8002ab2:	085c      	lsrs	r4, r3, #1
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	0849      	lsrs	r1, r1, #1
 8002ab8:	430d      	orrs	r5, r1
 8002aba:	0017      	movs	r7, r2
 8002abc:	402b      	ands	r3, r5
 8002abe:	e710      	b.n	80028e2 <__aeabi_dsub+0x34a>
 8002ac0:	4663      	mov	r3, ip
 8002ac2:	1a1d      	subs	r5, r3, r0
 8002ac4:	45ac      	cmp	ip, r5
 8002ac6:	4192      	sbcs	r2, r2
 8002ac8:	2601      	movs	r6, #1
 8002aca:	9b02      	ldr	r3, [sp, #8]
 8002acc:	4252      	negs	r2, r2
 8002ace:	1b1c      	subs	r4, r3, r4
 8002ad0:	4688      	mov	r8, r1
 8002ad2:	1aa4      	subs	r4, r4, r2
 8002ad4:	400e      	ands	r6, r1
 8002ad6:	e5c6      	b.n	8002666 <__aeabi_dsub+0xce>
 8002ad8:	4663      	mov	r3, ip
 8002ada:	18c5      	adds	r5, r0, r3
 8002adc:	9b02      	ldr	r3, [sp, #8]
 8002ade:	4285      	cmp	r5, r0
 8002ae0:	4180      	sbcs	r0, r0
 8002ae2:	469c      	mov	ip, r3
 8002ae4:	4240      	negs	r0, r0
 8002ae6:	4464      	add	r4, ip
 8002ae8:	1824      	adds	r4, r4, r0
 8002aea:	2701      	movs	r7, #1
 8002aec:	0223      	lsls	r3, r4, #8
 8002aee:	d400      	bmi.n	8002af2 <__aeabi_dsub+0x55a>
 8002af0:	e6f5      	b.n	80028de <__aeabi_dsub+0x346>
 8002af2:	2702      	movs	r7, #2
 8002af4:	e641      	b.n	800277a <__aeabi_dsub+0x1e2>
 8002af6:	4663      	mov	r3, ip
 8002af8:	1ac5      	subs	r5, r0, r3
 8002afa:	42a8      	cmp	r0, r5
 8002afc:	4180      	sbcs	r0, r0
 8002afe:	9b02      	ldr	r3, [sp, #8]
 8002b00:	4240      	negs	r0, r0
 8002b02:	1ae4      	subs	r4, r4, r3
 8002b04:	2701      	movs	r7, #1
 8002b06:	1a24      	subs	r4, r4, r0
 8002b08:	e5a8      	b.n	800265c <__aeabi_dsub+0xc4>
 8002b0a:	9d02      	ldr	r5, [sp, #8]
 8002b0c:	4652      	mov	r2, sl
 8002b0e:	002b      	movs	r3, r5
 8002b10:	3a20      	subs	r2, #32
 8002b12:	40d3      	lsrs	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	4653      	mov	r3, sl
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d006      	beq.n	8002b2a <__aeabi_dsub+0x592>
 8002b1c:	2240      	movs	r2, #64	@ 0x40
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	002b      	movs	r3, r5
 8002b22:	4093      	lsls	r3, r2
 8002b24:	4662      	mov	r2, ip
 8002b26:	431a      	orrs	r2, r3
 8002b28:	4693      	mov	fp, r2
 8002b2a:	465d      	mov	r5, fp
 8002b2c:	1e6b      	subs	r3, r5, #1
 8002b2e:	419d      	sbcs	r5, r3
 8002b30:	430d      	orrs	r5, r1
 8002b32:	e615      	b.n	8002760 <__aeabi_dsub+0x1c8>
 8002b34:	0762      	lsls	r2, r4, #29
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	08e4      	lsrs	r4, r4, #3
 8002b3c:	e70d      	b.n	800295a <__aeabi_dsub+0x3c2>
 8002b3e:	0011      	movs	r1, r2
 8002b40:	0027      	movs	r7, r4
 8002b42:	3920      	subs	r1, #32
 8002b44:	40cf      	lsrs	r7, r1
 8002b46:	2a20      	cmp	r2, #32
 8002b48:	d005      	beq.n	8002b56 <__aeabi_dsub+0x5be>
 8002b4a:	2140      	movs	r1, #64	@ 0x40
 8002b4c:	1a8a      	subs	r2, r1, r2
 8002b4e:	4094      	lsls	r4, r2
 8002b50:	0025      	movs	r5, r4
 8002b52:	4305      	orrs	r5, r0
 8002b54:	9503      	str	r5, [sp, #12]
 8002b56:	9d03      	ldr	r5, [sp, #12]
 8002b58:	1e6a      	subs	r2, r5, #1
 8002b5a:	4195      	sbcs	r5, r2
 8002b5c:	433d      	orrs	r5, r7
 8002b5e:	e77d      	b.n	8002a5c <__aeabi_dsub+0x4c4>
 8002b60:	2a00      	cmp	r2, #0
 8002b62:	d100      	bne.n	8002b66 <__aeabi_dsub+0x5ce>
 8002b64:	e744      	b.n	80029f0 <__aeabi_dsub+0x458>
 8002b66:	2601      	movs	r6, #1
 8002b68:	400e      	ands	r6, r1
 8002b6a:	4663      	mov	r3, ip
 8002b6c:	08d9      	lsrs	r1, r3, #3
 8002b6e:	9b02      	ldr	r3, [sp, #8]
 8002b70:	075a      	lsls	r2, r3, #29
 8002b72:	430a      	orrs	r2, r1
 8002b74:	08dc      	lsrs	r4, r3, #3
 8002b76:	e6f0      	b.n	800295a <__aeabi_dsub+0x3c2>
 8002b78:	2a00      	cmp	r2, #0
 8002b7a:	d028      	beq.n	8002bce <__aeabi_dsub+0x636>
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	9f02      	ldr	r7, [sp, #8]
 8002b80:	08c0      	lsrs	r0, r0, #3
 8002b82:	433a      	orrs	r2, r7
 8002b84:	d100      	bne.n	8002b88 <__aeabi_dsub+0x5f0>
 8002b86:	e6dc      	b.n	8002942 <__aeabi_dsub+0x3aa>
 8002b88:	0762      	lsls	r2, r4, #29
 8002b8a:	4310      	orrs	r0, r2
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	08e4      	lsrs	r4, r4, #3
 8002b90:	0312      	lsls	r2, r2, #12
 8002b92:	4214      	tst	r4, r2
 8002b94:	d009      	beq.n	8002baa <__aeabi_dsub+0x612>
 8002b96:	08fd      	lsrs	r5, r7, #3
 8002b98:	4215      	tst	r5, r2
 8002b9a:	d106      	bne.n	8002baa <__aeabi_dsub+0x612>
 8002b9c:	4663      	mov	r3, ip
 8002b9e:	2601      	movs	r6, #1
 8002ba0:	002c      	movs	r4, r5
 8002ba2:	08d8      	lsrs	r0, r3, #3
 8002ba4:	077b      	lsls	r3, r7, #29
 8002ba6:	4318      	orrs	r0, r3
 8002ba8:	400e      	ands	r6, r1
 8002baa:	0f42      	lsrs	r2, r0, #29
 8002bac:	00c0      	lsls	r0, r0, #3
 8002bae:	08c0      	lsrs	r0, r0, #3
 8002bb0:	0752      	lsls	r2, r2, #29
 8002bb2:	4302      	orrs	r2, r0
 8002bb4:	e601      	b.n	80027ba <__aeabi_dsub+0x222>
 8002bb6:	4663      	mov	r3, ip
 8002bb8:	1a1d      	subs	r5, r3, r0
 8002bba:	45ac      	cmp	ip, r5
 8002bbc:	4192      	sbcs	r2, r2
 8002bbe:	9b02      	ldr	r3, [sp, #8]
 8002bc0:	4252      	negs	r2, r2
 8002bc2:	1b1c      	subs	r4, r3, r4
 8002bc4:	000e      	movs	r6, r1
 8002bc6:	4688      	mov	r8, r1
 8002bc8:	2701      	movs	r7, #1
 8002bca:	1aa4      	subs	r4, r4, r2
 8002bcc:	e546      	b.n	800265c <__aeabi_dsub+0xc4>
 8002bce:	4663      	mov	r3, ip
 8002bd0:	08d9      	lsrs	r1, r3, #3
 8002bd2:	9b02      	ldr	r3, [sp, #8]
 8002bd4:	075a      	lsls	r2, r3, #29
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	08dc      	lsrs	r4, r3, #3
 8002bda:	e5ee      	b.n	80027ba <__aeabi_dsub+0x222>
 8002bdc:	4663      	mov	r3, ip
 8002bde:	9c02      	ldr	r4, [sp, #8]
 8002be0:	9303      	str	r3, [sp, #12]
 8002be2:	e6c7      	b.n	8002974 <__aeabi_dsub+0x3dc>
 8002be4:	08c0      	lsrs	r0, r0, #3
 8002be6:	2a00      	cmp	r2, #0
 8002be8:	d100      	bne.n	8002bec <__aeabi_dsub+0x654>
 8002bea:	e6aa      	b.n	8002942 <__aeabi_dsub+0x3aa>
 8002bec:	0762      	lsls	r2, r4, #29
 8002bee:	4310      	orrs	r0, r2
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	08e4      	lsrs	r4, r4, #3
 8002bf4:	0312      	lsls	r2, r2, #12
 8002bf6:	4214      	tst	r4, r2
 8002bf8:	d0d7      	beq.n	8002baa <__aeabi_dsub+0x612>
 8002bfa:	9f02      	ldr	r7, [sp, #8]
 8002bfc:	08fd      	lsrs	r5, r7, #3
 8002bfe:	4215      	tst	r5, r2
 8002c00:	d1d3      	bne.n	8002baa <__aeabi_dsub+0x612>
 8002c02:	4663      	mov	r3, ip
 8002c04:	2601      	movs	r6, #1
 8002c06:	08d8      	lsrs	r0, r3, #3
 8002c08:	077b      	lsls	r3, r7, #29
 8002c0a:	002c      	movs	r4, r5
 8002c0c:	4318      	orrs	r0, r3
 8002c0e:	400e      	ands	r6, r1
 8002c10:	e7cb      	b.n	8002baa <__aeabi_dsub+0x612>
 8002c12:	000a      	movs	r2, r1
 8002c14:	0027      	movs	r7, r4
 8002c16:	3a20      	subs	r2, #32
 8002c18:	40d7      	lsrs	r7, r2
 8002c1a:	2920      	cmp	r1, #32
 8002c1c:	d005      	beq.n	8002c2a <__aeabi_dsub+0x692>
 8002c1e:	2240      	movs	r2, #64	@ 0x40
 8002c20:	1a52      	subs	r2, r2, r1
 8002c22:	4094      	lsls	r4, r2
 8002c24:	0025      	movs	r5, r4
 8002c26:	4305      	orrs	r5, r0
 8002c28:	9503      	str	r5, [sp, #12]
 8002c2a:	9d03      	ldr	r5, [sp, #12]
 8002c2c:	1e6a      	subs	r2, r5, #1
 8002c2e:	4195      	sbcs	r5, r2
 8002c30:	432f      	orrs	r7, r5
 8002c32:	e610      	b.n	8002856 <__aeabi_dsub+0x2be>
 8002c34:	0014      	movs	r4, r2
 8002c36:	2500      	movs	r5, #0
 8002c38:	2200      	movs	r2, #0
 8002c3a:	e556      	b.n	80026ea <__aeabi_dsub+0x152>
 8002c3c:	9b02      	ldr	r3, [sp, #8]
 8002c3e:	4460      	add	r0, ip
 8002c40:	4699      	mov	r9, r3
 8002c42:	4560      	cmp	r0, ip
 8002c44:	4192      	sbcs	r2, r2
 8002c46:	444c      	add	r4, r9
 8002c48:	4252      	negs	r2, r2
 8002c4a:	0005      	movs	r5, r0
 8002c4c:	18a4      	adds	r4, r4, r2
 8002c4e:	e74c      	b.n	8002aea <__aeabi_dsub+0x552>
 8002c50:	001a      	movs	r2, r3
 8002c52:	001c      	movs	r4, r3
 8002c54:	432a      	orrs	r2, r5
 8002c56:	d000      	beq.n	8002c5a <__aeabi_dsub+0x6c2>
 8002c58:	e6b3      	b.n	80029c2 <__aeabi_dsub+0x42a>
 8002c5a:	e6c9      	b.n	80029f0 <__aeabi_dsub+0x458>
 8002c5c:	2480      	movs	r4, #128	@ 0x80
 8002c5e:	2600      	movs	r6, #0
 8002c60:	0324      	lsls	r4, r4, #12
 8002c62:	e5ae      	b.n	80027c2 <__aeabi_dsub+0x22a>
 8002c64:	2120      	movs	r1, #32
 8002c66:	2500      	movs	r5, #0
 8002c68:	1a09      	subs	r1, r1, r0
 8002c6a:	e517      	b.n	800269c <__aeabi_dsub+0x104>
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2500      	movs	r5, #0
 8002c70:	4c0b      	ldr	r4, [pc, #44]	@ (8002ca0 <__aeabi_dsub+0x708>)
 8002c72:	e53a      	b.n	80026ea <__aeabi_dsub+0x152>
 8002c74:	2d00      	cmp	r5, #0
 8002c76:	d100      	bne.n	8002c7a <__aeabi_dsub+0x6e2>
 8002c78:	e5f6      	b.n	8002868 <__aeabi_dsub+0x2d0>
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	1bda      	subs	r2, r3, r7
 8002c7e:	4692      	mov	sl, r2
 8002c80:	2f00      	cmp	r7, #0
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x6ee>
 8002c84:	e66f      	b.n	8002966 <__aeabi_dsub+0x3ce>
 8002c86:	2a38      	cmp	r2, #56	@ 0x38
 8002c88:	dc05      	bgt.n	8002c96 <__aeabi_dsub+0x6fe>
 8002c8a:	2680      	movs	r6, #128	@ 0x80
 8002c8c:	0436      	lsls	r6, r6, #16
 8002c8e:	4334      	orrs	r4, r6
 8002c90:	4688      	mov	r8, r1
 8002c92:	000e      	movs	r6, r1
 8002c94:	e6d1      	b.n	8002a3a <__aeabi_dsub+0x4a2>
 8002c96:	4688      	mov	r8, r1
 8002c98:	000e      	movs	r6, r1
 8002c9a:	2501      	movs	r5, #1
 8002c9c:	e6de      	b.n	8002a5c <__aeabi_dsub+0x4c4>
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	000007ff 	.word	0x000007ff
 8002ca4:	ff7fffff 	.word	0xff7fffff
 8002ca8:	000007fe 	.word	0x000007fe
 8002cac:	2d00      	cmp	r5, #0
 8002cae:	d100      	bne.n	8002cb2 <__aeabi_dsub+0x71a>
 8002cb0:	e668      	b.n	8002984 <__aeabi_dsub+0x3ec>
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	1bd9      	subs	r1, r3, r7
 8002cb6:	2f00      	cmp	r7, #0
 8002cb8:	d101      	bne.n	8002cbe <__aeabi_dsub+0x726>
 8002cba:	468a      	mov	sl, r1
 8002cbc:	e5a7      	b.n	800280e <__aeabi_dsub+0x276>
 8002cbe:	2701      	movs	r7, #1
 8002cc0:	2938      	cmp	r1, #56	@ 0x38
 8002cc2:	dd00      	ble.n	8002cc6 <__aeabi_dsub+0x72e>
 8002cc4:	e5c7      	b.n	8002856 <__aeabi_dsub+0x2be>
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	0412      	lsls	r2, r2, #16
 8002cca:	4314      	orrs	r4, r2
 8002ccc:	e5af      	b.n	800282e <__aeabi_dsub+0x296>
 8002cce:	46c0      	nop			@ (mov r8, r8)

08002cd0 <__aeabi_i2d>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d016      	beq.n	8002d04 <__aeabi_i2d+0x34>
 8002cd6:	17c3      	asrs	r3, r0, #31
 8002cd8:	18c5      	adds	r5, r0, r3
 8002cda:	405d      	eors	r5, r3
 8002cdc:	0fc4      	lsrs	r4, r0, #31
 8002cde:	0028      	movs	r0, r5
 8002ce0:	f000 f8f0 	bl	8002ec4 <__clzsi2>
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <__aeabi_i2d+0x58>)
 8002ce6:	1a1b      	subs	r3, r3, r0
 8002ce8:	055b      	lsls	r3, r3, #21
 8002cea:	0d5b      	lsrs	r3, r3, #21
 8002cec:	280a      	cmp	r0, #10
 8002cee:	dc14      	bgt.n	8002d1a <__aeabi_i2d+0x4a>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	002e      	movs	r6, r5
 8002cf4:	3215      	adds	r2, #21
 8002cf6:	4096      	lsls	r6, r2
 8002cf8:	220b      	movs	r2, #11
 8002cfa:	1a12      	subs	r2, r2, r0
 8002cfc:	40d5      	lsrs	r5, r2
 8002cfe:	032d      	lsls	r5, r5, #12
 8002d00:	0b2d      	lsrs	r5, r5, #12
 8002d02:	e003      	b.n	8002d0c <__aeabi_i2d+0x3c>
 8002d04:	2400      	movs	r4, #0
 8002d06:	2300      	movs	r3, #0
 8002d08:	2500      	movs	r5, #0
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	432b      	orrs	r3, r5
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0030      	movs	r0, r6
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	380b      	subs	r0, #11
 8002d1c:	4085      	lsls	r5, r0
 8002d1e:	032d      	lsls	r5, r5, #12
 8002d20:	2600      	movs	r6, #0
 8002d22:	0b2d      	lsrs	r5, r5, #12
 8002d24:	e7f2      	b.n	8002d0c <__aeabi_i2d+0x3c>
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	0000041e 	.word	0x0000041e

08002d2c <__aeabi_f2d>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	0242      	lsls	r2, r0, #9
 8002d30:	0043      	lsls	r3, r0, #1
 8002d32:	0fc4      	lsrs	r4, r0, #31
 8002d34:	20fe      	movs	r0, #254	@ 0xfe
 8002d36:	0e1b      	lsrs	r3, r3, #24
 8002d38:	1c59      	adds	r1, r3, #1
 8002d3a:	0a55      	lsrs	r5, r2, #9
 8002d3c:	4208      	tst	r0, r1
 8002d3e:	d00c      	beq.n	8002d5a <__aeabi_f2d+0x2e>
 8002d40:	21e0      	movs	r1, #224	@ 0xe0
 8002d42:	0089      	lsls	r1, r1, #2
 8002d44:	468c      	mov	ip, r1
 8002d46:	076d      	lsls	r5, r5, #29
 8002d48:	0b12      	lsrs	r2, r2, #12
 8002d4a:	4463      	add	r3, ip
 8002d4c:	051b      	lsls	r3, r3, #20
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	07e4      	lsls	r4, r4, #31
 8002d52:	4323      	orrs	r3, r4
 8002d54:	0028      	movs	r0, r5
 8002d56:	0019      	movs	r1, r3
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <__aeabi_f2d+0x5c>
 8002d5e:	2d00      	cmp	r5, #0
 8002d60:	d01b      	beq.n	8002d9a <__aeabi_f2d+0x6e>
 8002d62:	0028      	movs	r0, r5
 8002d64:	f000 f8ae 	bl	8002ec4 <__clzsi2>
 8002d68:	280a      	cmp	r0, #10
 8002d6a:	dc1c      	bgt.n	8002da6 <__aeabi_f2d+0x7a>
 8002d6c:	230b      	movs	r3, #11
 8002d6e:	002a      	movs	r2, r5
 8002d70:	1a1b      	subs	r3, r3, r0
 8002d72:	40da      	lsrs	r2, r3
 8002d74:	0003      	movs	r3, r0
 8002d76:	3315      	adds	r3, #21
 8002d78:	409d      	lsls	r5, r3
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <__aeabi_f2d+0x88>)
 8002d7c:	0312      	lsls	r2, r2, #12
 8002d7e:	1a1b      	subs	r3, r3, r0
 8002d80:	055b      	lsls	r3, r3, #21
 8002d82:	0b12      	lsrs	r2, r2, #12
 8002d84:	0d5b      	lsrs	r3, r3, #21
 8002d86:	e7e1      	b.n	8002d4c <__aeabi_f2d+0x20>
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	d009      	beq.n	8002da0 <__aeabi_f2d+0x74>
 8002d8c:	0b13      	lsrs	r3, r2, #12
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	0312      	lsls	r2, r2, #12
 8002d92:	431a      	orrs	r2, r3
 8002d94:	076d      	lsls	r5, r5, #29
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <__aeabi_f2d+0x8c>)
 8002d98:	e7d8      	b.n	8002d4c <__aeabi_f2d+0x20>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	e7d5      	b.n	8002d4c <__aeabi_f2d+0x20>
 8002da0:	2200      	movs	r2, #0
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <__aeabi_f2d+0x8c>)
 8002da4:	e7d2      	b.n	8002d4c <__aeabi_f2d+0x20>
 8002da6:	0003      	movs	r3, r0
 8002da8:	002a      	movs	r2, r5
 8002daa:	3b0b      	subs	r3, #11
 8002dac:	409a      	lsls	r2, r3
 8002dae:	2500      	movs	r5, #0
 8002db0:	e7e3      	b.n	8002d7a <__aeabi_f2d+0x4e>
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	00000389 	.word	0x00000389
 8002db8:	000007ff 	.word	0x000007ff

08002dbc <__aeabi_d2f>:
 8002dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dbe:	004b      	lsls	r3, r1, #1
 8002dc0:	030f      	lsls	r7, r1, #12
 8002dc2:	0d5b      	lsrs	r3, r3, #21
 8002dc4:	4c3b      	ldr	r4, [pc, #236]	@ (8002eb4 <__aeabi_d2f+0xf8>)
 8002dc6:	0f45      	lsrs	r5, r0, #29
 8002dc8:	b083      	sub	sp, #12
 8002dca:	0a7f      	lsrs	r7, r7, #9
 8002dcc:	1c5e      	adds	r6, r3, #1
 8002dce:	432f      	orrs	r7, r5
 8002dd0:	9000      	str	r0, [sp, #0]
 8002dd2:	9101      	str	r1, [sp, #4]
 8002dd4:	0fca      	lsrs	r2, r1, #31
 8002dd6:	00c5      	lsls	r5, r0, #3
 8002dd8:	4226      	tst	r6, r4
 8002dda:	d00b      	beq.n	8002df4 <__aeabi_d2f+0x38>
 8002ddc:	4936      	ldr	r1, [pc, #216]	@ (8002eb8 <__aeabi_d2f+0xfc>)
 8002dde:	185c      	adds	r4, r3, r1
 8002de0:	2cfe      	cmp	r4, #254	@ 0xfe
 8002de2:	dd13      	ble.n	8002e0c <__aeabi_d2f+0x50>
 8002de4:	20ff      	movs	r0, #255	@ 0xff
 8002de6:	2300      	movs	r3, #0
 8002de8:	05c0      	lsls	r0, r0, #23
 8002dea:	4318      	orrs	r0, r3
 8002dec:	07d2      	lsls	r2, r2, #31
 8002dee:	4310      	orrs	r0, r2
 8002df0:	b003      	add	sp, #12
 8002df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <__aeabi_d2f+0x42>
 8002df8:	2000      	movs	r0, #0
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e7f4      	b.n	8002de8 <__aeabi_d2f+0x2c>
 8002dfe:	433d      	orrs	r5, r7
 8002e00:	d0f0      	beq.n	8002de4 <__aeabi_d2f+0x28>
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	03db      	lsls	r3, r3, #15
 8002e06:	20ff      	movs	r0, #255	@ 0xff
 8002e08:	433b      	orrs	r3, r7
 8002e0a:	e7ed      	b.n	8002de8 <__aeabi_d2f+0x2c>
 8002e0c:	2c00      	cmp	r4, #0
 8002e0e:	dd14      	ble.n	8002e3a <__aeabi_d2f+0x7e>
 8002e10:	9b00      	ldr	r3, [sp, #0]
 8002e12:	00ff      	lsls	r7, r7, #3
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	1e58      	subs	r0, r3, #1
 8002e18:	4183      	sbcs	r3, r0
 8002e1a:	0f69      	lsrs	r1, r5, #29
 8002e1c:	433b      	orrs	r3, r7
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	0759      	lsls	r1, r3, #29
 8002e22:	d041      	beq.n	8002ea8 <__aeabi_d2f+0xec>
 8002e24:	210f      	movs	r1, #15
 8002e26:	4019      	ands	r1, r3
 8002e28:	2904      	cmp	r1, #4
 8002e2a:	d028      	beq.n	8002e7e <__aeabi_d2f+0xc2>
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	0159      	lsls	r1, r3, #5
 8002e30:	d525      	bpl.n	8002e7e <__aeabi_d2f+0xc2>
 8002e32:	3401      	adds	r4, #1
 8002e34:	2300      	movs	r3, #0
 8002e36:	b2e0      	uxtb	r0, r4
 8002e38:	e7d6      	b.n	8002de8 <__aeabi_d2f+0x2c>
 8002e3a:	0021      	movs	r1, r4
 8002e3c:	3117      	adds	r1, #23
 8002e3e:	dbdb      	blt.n	8002df8 <__aeabi_d2f+0x3c>
 8002e40:	2180      	movs	r1, #128	@ 0x80
 8002e42:	201e      	movs	r0, #30
 8002e44:	0409      	lsls	r1, r1, #16
 8002e46:	4339      	orrs	r1, r7
 8002e48:	1b00      	subs	r0, r0, r4
 8002e4a:	281f      	cmp	r0, #31
 8002e4c:	dd1b      	ble.n	8002e86 <__aeabi_d2f+0xca>
 8002e4e:	2602      	movs	r6, #2
 8002e50:	4276      	negs	r6, r6
 8002e52:	1b34      	subs	r4, r6, r4
 8002e54:	000e      	movs	r6, r1
 8002e56:	40e6      	lsrs	r6, r4
 8002e58:	0034      	movs	r4, r6
 8002e5a:	2820      	cmp	r0, #32
 8002e5c:	d004      	beq.n	8002e68 <__aeabi_d2f+0xac>
 8002e5e:	4817      	ldr	r0, [pc, #92]	@ (8002ebc <__aeabi_d2f+0x100>)
 8002e60:	4684      	mov	ip, r0
 8002e62:	4463      	add	r3, ip
 8002e64:	4099      	lsls	r1, r3
 8002e66:	430d      	orrs	r5, r1
 8002e68:	002b      	movs	r3, r5
 8002e6a:	1e59      	subs	r1, r3, #1
 8002e6c:	418b      	sbcs	r3, r1
 8002e6e:	4323      	orrs	r3, r4
 8002e70:	0759      	lsls	r1, r3, #29
 8002e72:	d015      	beq.n	8002ea0 <__aeabi_d2f+0xe4>
 8002e74:	210f      	movs	r1, #15
 8002e76:	2400      	movs	r4, #0
 8002e78:	4019      	ands	r1, r3
 8002e7a:	2904      	cmp	r1, #4
 8002e7c:	d117      	bne.n	8002eae <__aeabi_d2f+0xf2>
 8002e7e:	019b      	lsls	r3, r3, #6
 8002e80:	0a5b      	lsrs	r3, r3, #9
 8002e82:	b2e0      	uxtb	r0, r4
 8002e84:	e7b0      	b.n	8002de8 <__aeabi_d2f+0x2c>
 8002e86:	4c0e      	ldr	r4, [pc, #56]	@ (8002ec0 <__aeabi_d2f+0x104>)
 8002e88:	191c      	adds	r4, r3, r4
 8002e8a:	002b      	movs	r3, r5
 8002e8c:	40a5      	lsls	r5, r4
 8002e8e:	40c3      	lsrs	r3, r0
 8002e90:	40a1      	lsls	r1, r4
 8002e92:	1e68      	subs	r0, r5, #1
 8002e94:	4185      	sbcs	r5, r0
 8002e96:	4329      	orrs	r1, r5
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	0759      	lsls	r1, r3, #29
 8002e9e:	d1c1      	bne.n	8002e24 <__aeabi_d2f+0x68>
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	0a5b      	lsrs	r3, r3, #9
 8002ea6:	e79f      	b.n	8002de8 <__aeabi_d2f+0x2c>
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	b2e0      	uxtb	r0, r4
 8002eac:	e79c      	b.n	8002de8 <__aeabi_d2f+0x2c>
 8002eae:	3304      	adds	r3, #4
 8002eb0:	e7e5      	b.n	8002e7e <__aeabi_d2f+0xc2>
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	000007fe 	.word	0x000007fe
 8002eb8:	fffffc80 	.word	0xfffffc80
 8002ebc:	fffffca2 	.word	0xfffffca2
 8002ec0:	fffffc82 	.word	0xfffffc82

08002ec4 <__clzsi2>:
 8002ec4:	211c      	movs	r1, #28
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	d301      	bcc.n	8002ed2 <__clzsi2+0xe>
 8002ece:	0c00      	lsrs	r0, r0, #16
 8002ed0:	3910      	subs	r1, #16
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	4298      	cmp	r0, r3
 8002ed6:	d301      	bcc.n	8002edc <__clzsi2+0x18>
 8002ed8:	0a00      	lsrs	r0, r0, #8
 8002eda:	3908      	subs	r1, #8
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	4298      	cmp	r0, r3
 8002ee0:	d301      	bcc.n	8002ee6 <__clzsi2+0x22>
 8002ee2:	0900      	lsrs	r0, r0, #4
 8002ee4:	3904      	subs	r1, #4
 8002ee6:	a202      	add	r2, pc, #8	@ (adr r2, 8002ef0 <__clzsi2+0x2c>)
 8002ee8:	5c10      	ldrb	r0, [r2, r0]
 8002eea:	1840      	adds	r0, r0, r1
 8002eec:	4770      	bx	lr
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	02020304 	.word	0x02020304
 8002ef4:	01010101 	.word	0x01010101
	...

08002f00 <__clzdi2>:
 8002f00:	b510      	push	{r4, lr}
 8002f02:	2900      	cmp	r1, #0
 8002f04:	d103      	bne.n	8002f0e <__clzdi2+0xe>
 8002f06:	f7ff ffdd 	bl	8002ec4 <__clzsi2>
 8002f0a:	3020      	adds	r0, #32
 8002f0c:	e002      	b.n	8002f14 <__clzdi2+0x14>
 8002f0e:	0008      	movs	r0, r1
 8002f10:	f7ff ffd8 	bl	8002ec4 <__clzsi2>
 8002f14:	bd10      	pop	{r4, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)

08002f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f1c:	f002 f8d6 	bl	80050cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f20:	f000 f836 	bl	8002f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f24:	f000 fb72 	bl	800360c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f28:	f000 fb52 	bl	80035d0 <MX_DMA_Init>
  MX_ADC_Init();
 8002f2c:	f000 f8a6 	bl	800307c <MX_ADC_Init>
  MX_I2C1_Init();
 8002f30:	f000 f944 	bl	80031bc <MX_I2C1_Init>
  MX_I2C2_Init();
 8002f34:	f000 f982 	bl	800323c <MX_I2C2_Init>
  MX_TIM2_Init();
 8002f38:	f000 f9c0 	bl	80032bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002f3c:	f000 fae8 	bl	8003510 <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 8002f40:	f000 fb16 	bl	8003570 <MX_USART5_UART_Init>
  MX_TIM6_Init();
 8002f44:	f000 fa6c 	bl	8003420 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002f48:	f000 faa8 	bl	800349c <MX_TIM7_Init>
  MX_TIM3_Init();
 8002f4c:	f000 fa0a 	bl	8003364 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  user_pripheral_init();
 8002f50:	f001 fd56 	bl	8004a00 <user_pripheral_init>
  user_driver_init();
 8002f54:	f001 fd6c 	bl	8004a30 <user_driver_init>
  APP_LOGD("Interrupt timer start project");
 8002f58:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <main+0x64>)
 8002f5a:	4909      	ldr	r1, [pc, #36]	@ (8002f80 <main+0x68>)
 8002f5c:	4809      	ldr	r0, [pc, #36]	@ (8002f84 <main+0x6c>)
 8002f5e:	237e      	movs	r3, #126	@ 0x7e
 8002f60:	f001 fb2e 	bl	80045c0 <uart_debug_printf>
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <main+0x70>)
 8002f66:	0018      	movs	r0, r3
 8002f68:	f001 fb2a 	bl	80045c0 <uart_debug_printf>
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <main+0x74>)
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f001 fb26 	bl	80045c0 <uart_debug_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    user_driver_process();
 8002f74:	f001 fd7c 	bl	8004a70 <user_driver_process>
 8002f78:	e7fc      	b.n	8002f74 <main+0x5c>
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	0800a1dc 	.word	0x0800a1dc
 8002f80:	08009edc 	.word	0x08009edc
 8002f84:	08009ee0 	.word	0x08009ee0
 8002f88:	08009ef0 	.word	0x08009ef0
 8002f8c:	08009f10 	.word	0x08009f10

08002f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b09b      	sub	sp, #108	@ 0x6c
 8002f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f96:	2434      	movs	r4, #52	@ 0x34
 8002f98:	193b      	adds	r3, r7, r4
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	2334      	movs	r3, #52	@ 0x34
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	f006 fb24 	bl	80095ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	0018      	movs	r0, r3
 8002fac:	2314      	movs	r3, #20
 8002fae:	001a      	movs	r2, r3
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	f006 fb1c 	bl	80095ee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fb6:	003b      	movs	r3, r7
 8002fb8:	0018      	movs	r0, r3
 8002fba:	2320      	movs	r3, #32
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	f006 fb15 	bl	80095ee <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <SystemClock_Config+0xe4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8003078 <SystemClock_Config+0xe8>)
 8002fca:	401a      	ands	r2, r3
 8002fcc:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <SystemClock_Config+0xe4>)
 8002fce:	2180      	movs	r1, #128	@ 0x80
 8002fd0:	0109      	lsls	r1, r1, #4
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fd6:	0021      	movs	r1, r4
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2202      	movs	r2, #2
 8002fdc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	2202      	movs	r2, #2
 8002fee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	2280      	movs	r2, #128	@ 0x80
 8002ffa:	02d2      	lsls	r2, r2, #11
 8002ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	03d2      	lsls	r2, r2, #15
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003006:	187b      	adds	r3, r7, r1
 8003008:	0018      	movs	r0, r3
 800300a:	f003 fe59 	bl	8006cc0 <HAL_RCC_OscConfig>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d001      	beq.n	8003016 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003012:	f000 fbe3 	bl	80037dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003016:	2120      	movs	r1, #32
 8003018:	187b      	adds	r3, r7, r1
 800301a:	220f      	movs	r2, #15
 800301c:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800301e:	187b      	adds	r3, r7, r1
 8003020:	2203      	movs	r2, #3
 8003022:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003024:	187b      	adds	r3, r7, r1
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800302a:	187b      	adds	r3, r7, r1
 800302c:	2200      	movs	r2, #0
 800302e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003030:	187b      	adds	r3, r7, r1
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2101      	movs	r1, #1
 800303a:	0018      	movs	r0, r3
 800303c:	f004 f9bc 	bl	80073b8 <HAL_RCC_ClockConfig>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d001      	beq.n	8003048 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003044:	f000 fbca 	bl	80037dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 8003048:	003b      	movs	r3, r7
 800304a:	2209      	movs	r2, #9
 800304c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800304e:	003b      	movs	r3, r7
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003054:	003b      	movs	r3, r7
 8003056:	2200      	movs	r2, #0
 8003058:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800305a:	003b      	movs	r3, r7
 800305c:	0018      	movs	r0, r3
 800305e:	f004 fbcf 	bl	8007800 <HAL_RCCEx_PeriphCLKConfig>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d001      	beq.n	800306a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003066:	f000 fbb9 	bl	80037dc <Error_Handler>
  }
}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b01b      	add	sp, #108	@ 0x6c
 8003070:	bd90      	pop	{r4, r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	40007000 	.word	0x40007000
 8003078:	ffffe7ff 	.word	0xffffe7ff

0800307c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003082:	003b      	movs	r3, r7
 8003084:	0018      	movs	r0, r3
 8003086:	2308      	movs	r3, #8
 8003088:	001a      	movs	r2, r3
 800308a:	2100      	movs	r1, #0
 800308c:	f006 faaf 	bl	80095ee <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003090:	4b44      	ldr	r3, [pc, #272]	@ (80031a4 <MX_ADC_Init+0x128>)
 8003092:	4a45      	ldr	r2, [pc, #276]	@ (80031a8 <MX_ADC_Init+0x12c>)
 8003094:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003096:	4b43      	ldr	r3, [pc, #268]	@ (80031a4 <MX_ADC_Init+0x128>)
 8003098:	2200      	movs	r2, #0
 800309a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800309c:	4b41      	ldr	r3, [pc, #260]	@ (80031a4 <MX_ADC_Init+0x128>)
 800309e:	2280      	movs	r2, #128	@ 0x80
 80030a0:	0312      	lsls	r2, r2, #12
 80030a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80030a4:	4b3f      	ldr	r3, [pc, #252]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80030aa:	4b3e      	ldr	r3, [pc, #248]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030ac:	2202      	movs	r2, #2
 80030ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80030b0:	4b3c      	ldr	r3, [pc, #240]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030b6:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80030bc:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030be:	2220      	movs	r2, #32
 80030c0:	2100      	movs	r1, #0
 80030c2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80030c4:	4b37      	ldr	r3, [pc, #220]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030c6:	2221      	movs	r2, #33	@ 0x21
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80030cc:	4b35      	ldr	r3, [pc, #212]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030ce:	2280      	movs	r2, #128	@ 0x80
 80030d0:	00d2      	lsls	r2, r2, #3
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80030d4:	4b33      	ldr	r3, [pc, #204]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030d6:	22c0      	movs	r2, #192	@ 0xc0
 80030d8:	0052      	lsls	r2, r2, #1
 80030da:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80030dc:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030de:	222c      	movs	r2, #44	@ 0x2c
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80030e4:	4b2f      	ldr	r3, [pc, #188]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030e6:	2208      	movs	r2, #8
 80030e8:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030ea:	4b2e      	ldr	r3, [pc, #184]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80030f0:	4b2c      	ldr	r3, [pc, #176]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80030f6:	4b2b      	ldr	r3, [pc, #172]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80030fc:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <MX_ADC_Init+0x128>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003102:	4b28      	ldr	r3, [pc, #160]	@ (80031a4 <MX_ADC_Init+0x128>)
 8003104:	0018      	movs	r0, r3
 8003106:	f002 f851 	bl	80051ac <HAL_ADC_Init>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d001      	beq.n	8003112 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 800310e:	f000 fb65 	bl	80037dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003112:	003b      	movs	r3, r7
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003118:	003b      	movs	r3, r7
 800311a:	2280      	movs	r2, #128	@ 0x80
 800311c:	0152      	lsls	r2, r2, #5
 800311e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003120:	003a      	movs	r2, r7
 8003122:	4b20      	ldr	r3, [pc, #128]	@ (80031a4 <MX_ADC_Init+0x128>)
 8003124:	0011      	movs	r1, r2
 8003126:	0018      	movs	r0, r3
 8003128:	f002 fa46 	bl	80055b8 <HAL_ADC_ConfigChannel>
 800312c:	1e03      	subs	r3, r0, #0
 800312e:	d001      	beq.n	8003134 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 8003130:	f000 fb54 	bl	80037dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003134:	003b      	movs	r3, r7
 8003136:	4a1d      	ldr	r2, [pc, #116]	@ (80031ac <MX_ADC_Init+0x130>)
 8003138:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800313a:	003a      	movs	r2, r7
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <MX_ADC_Init+0x128>)
 800313e:	0011      	movs	r1, r2
 8003140:	0018      	movs	r0, r3
 8003142:	f002 fa39 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d001      	beq.n	800314e <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 800314a:	f000 fb47 	bl	80037dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800314e:	003b      	movs	r3, r7
 8003150:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <MX_ADC_Init+0x134>)
 8003152:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003154:	003a      	movs	r2, r7
 8003156:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <MX_ADC_Init+0x128>)
 8003158:	0011      	movs	r1, r2
 800315a:	0018      	movs	r0, r3
 800315c:	f002 fa2c 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d001      	beq.n	8003168 <MX_ADC_Init+0xec>
  {
    Error_Handler();
 8003164:	f000 fb3a 	bl	80037dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003168:	003b      	movs	r3, r7
 800316a:	4a12      	ldr	r2, [pc, #72]	@ (80031b4 <MX_ADC_Init+0x138>)
 800316c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800316e:	003a      	movs	r2, r7
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <MX_ADC_Init+0x128>)
 8003172:	0011      	movs	r1, r2
 8003174:	0018      	movs	r0, r3
 8003176:	f002 fa1f 	bl	80055b8 <HAL_ADC_ConfigChannel>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d001      	beq.n	8003182 <MX_ADC_Init+0x106>
  {
    Error_Handler();
 800317e:	f000 fb2d 	bl	80037dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003182:	003b      	movs	r3, r7
 8003184:	4a0c      	ldr	r2, [pc, #48]	@ (80031b8 <MX_ADC_Init+0x13c>)
 8003186:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003188:	003a      	movs	r2, r7
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <MX_ADC_Init+0x128>)
 800318c:	0011      	movs	r1, r2
 800318e:	0018      	movs	r0, r3
 8003190:	f002 fa12 	bl	80055b8 <HAL_ADC_ConfigChannel>
 8003194:	1e03      	subs	r3, r0, #0
 8003196:	d001      	beq.n	800319c <MX_ADC_Init+0x120>
  {
    Error_Handler();
 8003198:	f000 fb20 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2000007c 	.word	0x2000007c
 80031a8:	40012400 	.word	0x40012400
 80031ac:	04000002 	.word	0x04000002
 80031b0:	08000004 	.word	0x08000004
 80031b4:	0c000008 	.word	0x0c000008
 80031b8:	10000010 	.word	0x10000010

080031bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003234 <MX_I2C1_Init+0x78>)
 80031c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80031c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <MX_I2C1_Init+0x7c>)
 80031ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80031cc:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031d2:	4b17      	ldr	r3, [pc, #92]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031d8:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031e4:	4b12      	ldr	r3, [pc, #72]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031ea:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <MX_I2C1_Init+0x74>)
 80031f8:	0018      	movs	r0, r3
 80031fa:	f003 f83f 	bl	800627c <HAL_I2C_Init>
 80031fe:	1e03      	subs	r3, r0, #0
 8003200:	d001      	beq.n	8003206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003202:	f000 faeb 	bl	80037dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003206:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <MX_I2C1_Init+0x74>)
 8003208:	2100      	movs	r1, #0
 800320a:	0018      	movs	r0, r3
 800320c:	f003 fcc0 	bl	8006b90 <HAL_I2CEx_ConfigAnalogFilter>
 8003210:	1e03      	subs	r3, r0, #0
 8003212:	d001      	beq.n	8003218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003214:	f000 fae2 	bl	80037dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <MX_I2C1_Init+0x74>)
 800321a:	2100      	movs	r1, #0
 800321c:	0018      	movs	r0, r3
 800321e:	f003 fd03 	bl	8006c28 <HAL_I2CEx_ConfigDigitalFilter>
 8003222:	1e03      	subs	r3, r0, #0
 8003224:	d001      	beq.n	800322a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003226:	f000 fad9 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000120 	.word	0x20000120
 8003234:	40005400 	.word	0x40005400
 8003238:	00707cbb 	.word	0x00707cbb

0800323c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <MX_I2C2_Init+0x74>)
 8003242:	4a1c      	ldr	r2, [pc, #112]	@ (80032b4 <MX_I2C2_Init+0x78>)
 8003244:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8003246:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <MX_I2C2_Init+0x74>)
 8003248:	4a1b      	ldr	r2, [pc, #108]	@ (80032b8 <MX_I2C2_Init+0x7c>)
 800324a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800324c:	4b18      	ldr	r3, [pc, #96]	@ (80032b0 <MX_I2C2_Init+0x74>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003252:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <MX_I2C2_Init+0x74>)
 8003254:	2201      	movs	r2, #1
 8003256:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003258:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <MX_I2C2_Init+0x74>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800325e:	4b14      	ldr	r3, [pc, #80]	@ (80032b0 <MX_I2C2_Init+0x74>)
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003264:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <MX_I2C2_Init+0x74>)
 8003266:	2200      	movs	r2, #0
 8003268:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800326a:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <MX_I2C2_Init+0x74>)
 800326c:	2200      	movs	r2, #0
 800326e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003270:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <MX_I2C2_Init+0x74>)
 8003272:	2200      	movs	r2, #0
 8003274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003276:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <MX_I2C2_Init+0x74>)
 8003278:	0018      	movs	r0, r3
 800327a:	f002 ffff 	bl	800627c <HAL_I2C_Init>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d001      	beq.n	8003286 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003282:	f000 faab 	bl	80037dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <MX_I2C2_Init+0x74>)
 8003288:	2100      	movs	r1, #0
 800328a:	0018      	movs	r0, r3
 800328c:	f003 fc80 	bl	8006b90 <HAL_I2CEx_ConfigAnalogFilter>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003294:	f000 faa2 	bl	80037dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <MX_I2C2_Init+0x74>)
 800329a:	2100      	movs	r1, #0
 800329c:	0018      	movs	r0, r3
 800329e:	f003 fcc3 	bl	8006c28 <HAL_I2CEx_ConfigDigitalFilter>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d001      	beq.n	80032aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80032a6:	f000 fa99 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000016c 	.word	0x2000016c
 80032b4:	40005800 	.word	0x40005800
 80032b8:	00707cbb 	.word	0x00707cbb

080032bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c2:	2308      	movs	r3, #8
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	0018      	movs	r0, r3
 80032c8:	2310      	movs	r3, #16
 80032ca:	001a      	movs	r2, r3
 80032cc:	2100      	movs	r1, #0
 80032ce:	f006 f98e 	bl	80095ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d2:	003b      	movs	r3, r7
 80032d4:	0018      	movs	r0, r3
 80032d6:	2308      	movs	r3, #8
 80032d8:	001a      	movs	r2, r3
 80032da:	2100      	movs	r1, #0
 80032dc:	f006 f987 	bl	80095ee <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032e0:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <MX_TIM2_Init+0xa0>)
 80032e2:	2280      	movs	r2, #128	@ 0x80
 80032e4:	05d2      	lsls	r2, r2, #23
 80032e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032e8:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <MX_TIM2_Init+0xa0>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ee:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <MX_TIM2_Init+0xa0>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80032f4:	4b19      	ldr	r3, [pc, #100]	@ (800335c <MX_TIM2_Init+0xa0>)
 80032f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003360 <MX_TIM2_Init+0xa4>)
 80032f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fa:	4b18      	ldr	r3, [pc, #96]	@ (800335c <MX_TIM2_Init+0xa0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003300:	4b16      	ldr	r3, [pc, #88]	@ (800335c <MX_TIM2_Init+0xa0>)
 8003302:	2200      	movs	r2, #0
 8003304:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003306:	4b15      	ldr	r3, [pc, #84]	@ (800335c <MX_TIM2_Init+0xa0>)
 8003308:	0018      	movs	r0, r3
 800330a:	f004 fbbf 	bl	8007a8c <HAL_TIM_Base_Init>
 800330e:	1e03      	subs	r3, r0, #0
 8003310:	d001      	beq.n	8003316 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003312:	f000 fa63 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003316:	2108      	movs	r1, #8
 8003318:	187b      	adds	r3, r7, r1
 800331a:	2280      	movs	r2, #128	@ 0x80
 800331c:	0152      	lsls	r2, r2, #5
 800331e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003320:	187a      	adds	r2, r7, r1
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <MX_TIM2_Init+0xa0>)
 8003324:	0011      	movs	r1, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f004 fe20 	bl	8007f6c <HAL_TIM_ConfigClockSource>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003330:	f000 fa54 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003334:	003b      	movs	r3, r7
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333a:	003b      	movs	r3, r7
 800333c:	2200      	movs	r2, #0
 800333e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003340:	003a      	movs	r2, r7
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <MX_TIM2_Init+0xa0>)
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f005 f8fe 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003350:	f000 fa44 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b006      	add	sp, #24
 800335a:	bd80      	pop	{r7, pc}
 800335c:	200001b8 	.word	0x200001b8
 8003360:	0000ffff 	.word	0x0000ffff

08003364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800336a:	2310      	movs	r3, #16
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	0018      	movs	r0, r3
 8003370:	2308      	movs	r3, #8
 8003372:	001a      	movs	r2, r3
 8003374:	2100      	movs	r1, #0
 8003376:	f006 f93a 	bl	80095ee <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800337a:	003b      	movs	r3, r7
 800337c:	0018      	movs	r0, r3
 800337e:	2310      	movs	r3, #16
 8003380:	001a      	movs	r2, r3
 8003382:	2100      	movs	r1, #0
 8003384:	f006 f933 	bl	80095ee <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003388:	4b22      	ldr	r3, [pc, #136]	@ (8003414 <MX_TIM3_Init+0xb0>)
 800338a:	4a23      	ldr	r2, [pc, #140]	@ (8003418 <MX_TIM3_Init+0xb4>)
 800338c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 800338e:	4b21      	ldr	r3, [pc, #132]	@ (8003414 <MX_TIM3_Init+0xb0>)
 8003390:	4a22      	ldr	r2, [pc, #136]	@ (800341c <MX_TIM3_Init+0xb8>)
 8003392:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003394:	4b1f      	ldr	r3, [pc, #124]	@ (8003414 <MX_TIM3_Init+0xb0>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200 - 1;
 800339a:	4b1e      	ldr	r3, [pc, #120]	@ (8003414 <MX_TIM3_Init+0xb0>)
 800339c:	22c7      	movs	r2, #199	@ 0xc7
 800339e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003414 <MX_TIM3_Init+0xb0>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <MX_TIM3_Init+0xb0>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80033ac:	4b19      	ldr	r3, [pc, #100]	@ (8003414 <MX_TIM3_Init+0xb0>)
 80033ae:	0018      	movs	r0, r3
 80033b0:	f004 fc66 	bl	8007c80 <HAL_TIM_OC_Init>
 80033b4:	1e03      	subs	r3, r0, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80033b8:	f000 fa10 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033bc:	2110      	movs	r1, #16
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	2220      	movs	r2, #32
 80033c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	2200      	movs	r2, #0
 80033c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033ca:	187a      	adds	r2, r7, r1
 80033cc:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <MX_TIM3_Init+0xb0>)
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f005 f8b9 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 80033d6:	1e03      	subs	r3, r0, #0
 80033d8:	d001      	beq.n	80033de <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80033da:	f000 f9ff 	bl	80037dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80033de:	003b      	movs	r3, r7
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80033e4:	003b      	movs	r3, r7
 80033e6:	2200      	movs	r2, #0
 80033e8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ea:	003b      	movs	r3, r7
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033f0:	003b      	movs	r3, r7
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033f6:	0039      	movs	r1, r7
 80033f8:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <MX_TIM3_Init+0xb0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	0018      	movs	r0, r3
 80033fe:	f004 fd67 	bl	8007ed0 <HAL_TIM_OC_ConfigChannel>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d001      	beq.n	800340a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003406:	f000 f9e9 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b006      	add	sp, #24
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	200001f8 	.word	0x200001f8
 8003418:	40000400 	.word	0x40000400
 800341c:	000018ff 	.word	0x000018ff

08003420 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003426:	003b      	movs	r3, r7
 8003428:	0018      	movs	r0, r3
 800342a:	2308      	movs	r3, #8
 800342c:	001a      	movs	r2, r3
 800342e:	2100      	movs	r1, #0
 8003430:	f006 f8dd 	bl	80095ee <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003434:	4b15      	ldr	r3, [pc, #84]	@ (800348c <MX_TIM6_Init+0x6c>)
 8003436:	4a16      	ldr	r2, [pc, #88]	@ (8003490 <MX_TIM6_Init+0x70>)
 8003438:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000 - 1;
 800343a:	4b14      	ldr	r3, [pc, #80]	@ (800348c <MX_TIM6_Init+0x6c>)
 800343c:	4a15      	ldr	r2, [pc, #84]	@ (8003494 <MX_TIM6_Init+0x74>)
 800343e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003440:	4b12      	ldr	r3, [pc, #72]	@ (800348c <MX_TIM6_Init+0x6c>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8003446:	4b11      	ldr	r3, [pc, #68]	@ (800348c <MX_TIM6_Init+0x6c>)
 8003448:	4a13      	ldr	r2, [pc, #76]	@ (8003498 <MX_TIM6_Init+0x78>)
 800344a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <MX_TIM6_Init+0x6c>)
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003452:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <MX_TIM6_Init+0x6c>)
 8003454:	0018      	movs	r0, r3
 8003456:	f004 fb19 	bl	8007a8c <HAL_TIM_Base_Init>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800345e:	f000 f9bd 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003462:	003b      	movs	r3, r7
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003468:	003b      	movs	r3, r7
 800346a:	2200      	movs	r2, #0
 800346c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800346e:	003a      	movs	r2, r7
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <MX_TIM6_Init+0x6c>)
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f005 f867 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d001      	beq.n	8003482 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800347e:	f000 f9ad 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b002      	add	sp, #8
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	20000238 	.word	0x20000238
 8003490:	40001000 	.word	0x40001000
 8003494:	00007cff 	.word	0x00007cff
 8003498:	000003e7 	.word	0x000003e7

0800349c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a2:	003b      	movs	r3, r7
 80034a4:	0018      	movs	r0, r3
 80034a6:	2308      	movs	r3, #8
 80034a8:	001a      	movs	r2, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	f006 f89f 	bl	80095ee <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80034b0:	4b15      	ldr	r3, [pc, #84]	@ (8003508 <MX_TIM7_Init+0x6c>)
 80034b2:	4a16      	ldr	r2, [pc, #88]	@ (800350c <MX_TIM7_Init+0x70>)
 80034b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 320 - 1;
 80034b6:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <MX_TIM7_Init+0x6c>)
 80034b8:	2240      	movs	r2, #64	@ 0x40
 80034ba:	32ff      	adds	r2, #255	@ 0xff
 80034bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034be:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <MX_TIM7_Init+0x6c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 80034c4:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <MX_TIM7_Init+0x6c>)
 80034c6:	2263      	movs	r2, #99	@ 0x63
 80034c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <MX_TIM7_Init+0x6c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <MX_TIM7_Init+0x6c>)
 80034d2:	0018      	movs	r0, r3
 80034d4:	f004 fada 	bl	8007a8c <HAL_TIM_Base_Init>
 80034d8:	1e03      	subs	r3, r0, #0
 80034da:	d001      	beq.n	80034e0 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 80034dc:	f000 f97e 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e0:	003b      	movs	r3, r7
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e6:	003b      	movs	r3, r7
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034ec:	003a      	movs	r2, r7
 80034ee:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <MX_TIM7_Init+0x6c>)
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f005 f828 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 80034f8:	1e03      	subs	r3, r0, #0
 80034fa:	d001      	beq.n	8003500 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 80034fc:	f000 f96e 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */
}
 8003500:	46c0      	nop			@ (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000278 	.word	0x20000278
 800350c:	40001400 	.word	0x40001400

08003510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003514:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 8003516:	4a15      	ldr	r2, [pc, #84]	@ (800356c <MX_USART1_UART_Init+0x5c>)
 8003518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800351a:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 800351c:	22e1      	movs	r2, #225	@ 0xe1
 800351e:	0252      	lsls	r2, r2, #9
 8003520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003522:	4b11      	ldr	r3, [pc, #68]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003528:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800352e:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 8003536:	220c      	movs	r2, #12
 8003538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353a:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003540:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 8003548:	2200      	movs	r2, #0
 800354a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003552:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <MX_USART1_UART_Init+0x58>)
 8003554:	0018      	movs	r0, r3
 8003556:	f005 f855 	bl	8008604 <HAL_UART_Init>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d001      	beq.n	8003562 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800355e:	f000 f93d 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200002b8 	.word	0x200002b8
 800356c:	40013800 	.word	0x40013800

08003570 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8003574:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 8003576:	4a15      	ldr	r2, [pc, #84]	@ (80035cc <MX_USART5_UART_Init+0x5c>)
 8003578:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800357a:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 800357c:	22e1      	movs	r2, #225	@ 0xe1
 800357e:	0252      	lsls	r2, r2, #9
 8003580:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003582:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003588:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800358e:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 8003590:	2200      	movs	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 8003596:	220c      	movs	r2, #12
 8003598:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800359a:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80035a0:	4b09      	ldr	r3, [pc, #36]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035a6:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <MX_USART5_UART_Init+0x58>)
 80035b4:	0018      	movs	r0, r3
 80035b6:	f005 f825 	bl	8008604 <HAL_UART_Init>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80035be:	f000 f90d 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */
}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	2000033c 	.word	0x2000033c
 80035cc:	40005000 	.word	0x40005000

080035d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <MX_DMA_Init+0x38>)
 80035d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035da:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <MX_DMA_Init+0x38>)
 80035dc:	2101      	movs	r1, #1
 80035de:	430a      	orrs	r2, r1
 80035e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <MX_DMA_Init+0x38>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	2201      	movs	r2, #1
 80035e8:	4013      	ands	r3, r2
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	2100      	movs	r1, #0
 80035f2:	2009      	movs	r0, #9
 80035f4:	f002 fa16 	bl	8005a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035f8:	2009      	movs	r0, #9
 80035fa:	f002 fa28 	bl	8005a4e <HAL_NVIC_EnableIRQ>
}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	40021000 	.word	0x40021000

0800360c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b08b      	sub	sp, #44	@ 0x2c
 8003610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003612:	2414      	movs	r4, #20
 8003614:	193b      	adds	r3, r7, r4
 8003616:	0018      	movs	r0, r3
 8003618:	2314      	movs	r3, #20
 800361a:	001a      	movs	r2, r3
 800361c:	2100      	movs	r1, #0
 800361e:	f005 ffe6 	bl	80095ee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003622:	4b68      	ldr	r3, [pc, #416]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003626:	4b67      	ldr	r3, [pc, #412]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003628:	2104      	movs	r1, #4
 800362a:	430a      	orrs	r2, r1
 800362c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800362e:	4b65      	ldr	r3, [pc, #404]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	2204      	movs	r2, #4
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800363a:	4b62      	ldr	r3, [pc, #392]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 800363c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363e:	4b61      	ldr	r3, [pc, #388]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003640:	2180      	movs	r1, #128	@ 0x80
 8003642:	430a      	orrs	r2, r1
 8003644:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003646:	4b5f      	ldr	r3, [pc, #380]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	2280      	movs	r2, #128	@ 0x80
 800364c:	4013      	ands	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	4b5c      	ldr	r3, [pc, #368]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003656:	4b5b      	ldr	r3, [pc, #364]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003658:	2101      	movs	r1, #1
 800365a:	430a      	orrs	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800365e:	4b59      	ldr	r3, [pc, #356]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	2201      	movs	r2, #1
 8003664:	4013      	ands	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800366a:	4b56      	ldr	r3, [pc, #344]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 800366c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366e:	4b55      	ldr	r3, [pc, #340]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003670:	2102      	movs	r1, #2
 8003672:	430a      	orrs	r2, r1
 8003674:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003676:	4b53      	ldr	r3, [pc, #332]	@ (80037c4 <MX_GPIO_Init+0x1b8>)
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	2202      	movs	r2, #2
 800367c:	4013      	ands	r3, r2
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	4850      	ldr	r0, [pc, #320]	@ (80037c8 <MX_GPIO_Init+0x1bc>)
 8003688:	2201      	movs	r2, #1
 800368a:	0019      	movs	r1, r3
 800368c:	f002 fdd9 	bl	8006242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_GREEN_Pin | LED_BLUE_Pin, GPIO_PIN_SET);
 8003690:	4b4e      	ldr	r3, [pc, #312]	@ (80037cc <MX_GPIO_Init+0x1c0>)
 8003692:	2201      	movs	r2, #1
 8003694:	2103      	movs	r1, #3
 8003696:	0018      	movs	r0, r3
 8003698:	f002 fdd3 	bl	8006242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_CTRL_Pin | POWER_CTRL_Pin | HEATING_CTRL_Pin, GPIO_PIN_RESET);
 800369c:	2398      	movs	r3, #152	@ 0x98
 800369e:	015b      	lsls	r3, r3, #5
 80036a0:	484b      	ldr	r0, [pc, #300]	@ (80037d0 <MX_GPIO_Init+0x1c4>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	0019      	movs	r1, r3
 80036a6:	f002 fdcc 	bl	8006242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	0059      	lsls	r1, r3, #1
 80036ae:	23a0      	movs	r3, #160	@ 0xa0
 80036b0:	05db      	lsls	r3, r3, #23
 80036b2:	2200      	movs	r2, #0
 80036b4:	0018      	movs	r0, r3
 80036b6:	f002 fdc4 	bl	8006242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	0192      	lsls	r2, r2, #6
 80036c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	2201      	movs	r2, #1
 80036c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	2200      	movs	r2, #0
 80036d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	4a3c      	ldr	r2, [pc, #240]	@ (80037c8 <MX_GPIO_Init+0x1bc>)
 80036d8:	0019      	movs	r1, r3
 80036da:	0010      	movs	r0, r2
 80036dc:	f002 fc16 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin | LED_BLUE_Pin;
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	2203      	movs	r2, #3
 80036e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	2201      	movs	r2, #1
 80036ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	2200      	movs	r2, #0
 80036f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	4a34      	ldr	r2, [pc, #208]	@ (80037cc <MX_GPIO_Init+0x1c0>)
 80036fc:	0019      	movs	r1, r3
 80036fe:	0010      	movs	r0, r2
 8003700:	f002 fc04 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTARY1_P1_Pin ROTARY1_P2_Pin ROTARY1_P3_Pin CHARGE_STAT2_Pin */
  GPIO_InitStruct.Pin = ROTARY1_P1_Pin | ROTARY1_P2_Pin | ROTARY1_P3_Pin | CHARGE_STAT2_Pin;
 8003704:	193b      	adds	r3, r7, r4
 8003706:	4a33      	ldr	r2, [pc, #204]	@ (80037d4 <MX_GPIO_Init+0x1c8>)
 8003708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800370a:	193b      	adds	r3, r7, r4
 800370c:	2200      	movs	r2, #0
 800370e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	193b      	adds	r3, r7, r4
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003716:	193a      	adds	r2, r7, r4
 8003718:	23a0      	movs	r3, #160	@ 0xa0
 800371a:	05db      	lsls	r3, r3, #23
 800371c:	0011      	movs	r1, r2
 800371e:	0018      	movs	r0, r3
 8003720:	f002 fbf4 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTARY1_P4_Pin ROTARY2_P1_Pin ROTARY2_P2_Pin ROTARY2_P3_Pin
                           ROTARY2_P4_Pin CHARGE_STAT1_Pin */
  GPIO_InitStruct.Pin = ROTARY1_P4_Pin | ROTARY2_P1_Pin | ROTARY2_P2_Pin | ROTARY2_P3_Pin | ROTARY2_P4_Pin | CHARGE_STAT1_Pin;
 8003724:	193b      	adds	r3, r7, r4
 8003726:	4a2c      	ldr	r2, [pc, #176]	@ (80037d8 <MX_GPIO_Init+0x1cc>)
 8003728:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800372a:	193b      	adds	r3, r7, r4
 800372c:	2200      	movs	r2, #0
 800372e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	193b      	adds	r3, r7, r4
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003736:	193b      	adds	r3, r7, r4
 8003738:	4a25      	ldr	r2, [pc, #148]	@ (80037d0 <MX_GPIO_Init+0x1c4>)
 800373a:	0019      	movs	r1, r3
 800373c:	0010      	movs	r0, r2
 800373e:	f002 fbe5 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_CTRL_Pin POWER_CTRL_Pin HEATING_CTRL_Pin */
  GPIO_InitStruct.Pin = FAN_CTRL_Pin | POWER_CTRL_Pin | HEATING_CTRL_Pin;
 8003742:	0021      	movs	r1, r4
 8003744:	187b      	adds	r3, r7, r1
 8003746:	2298      	movs	r2, #152	@ 0x98
 8003748:	0152      	lsls	r2, r2, #5
 800374a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374c:	000c      	movs	r4, r1
 800374e:	193b      	adds	r3, r7, r4
 8003750:	2201      	movs	r2, #1
 8003752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003754:	193b      	adds	r3, r7, r4
 8003756:	2201      	movs	r2, #1
 8003758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	193b      	adds	r3, r7, r4
 800375c:	2200      	movs	r2, #0
 800375e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003760:	193b      	adds	r3, r7, r4
 8003762:	4a1b      	ldr	r2, [pc, #108]	@ (80037d0 <MX_GPIO_Init+0x1c4>)
 8003764:	0019      	movs	r1, r3
 8003766:	0010      	movs	r0, r2
 8003768:	f002 fbd0 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_BTN_Pin */
  GPIO_InitStruct.Pin = MODE_BTN_Pin;
 800376c:	0021      	movs	r1, r4
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2280      	movs	r2, #128	@ 0x80
 8003772:	0212      	lsls	r2, r2, #8
 8003774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003776:	000c      	movs	r4, r1
 8003778:	193b      	adds	r3, r7, r4
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800377e:	193b      	adds	r3, r7, r4
 8003780:	2201      	movs	r2, #1
 8003782:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_BTN_GPIO_Port, &GPIO_InitStruct);
 8003784:	193b      	adds	r3, r7, r4
 8003786:	4a12      	ldr	r2, [pc, #72]	@ (80037d0 <MX_GPIO_Init+0x1c4>)
 8003788:	0019      	movs	r1, r3
 800378a:	0010      	movs	r0, r2
 800378c:	f002 fbbe 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin;
 8003790:	0021      	movs	r1, r4
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2280      	movs	r2, #128	@ 0x80
 8003796:	0052      	lsls	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2201      	movs	r2, #1
 800379e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LORA_RST_GPIO_Port, &GPIO_InitStruct);
 80037ac:	187a      	adds	r2, r7, r1
 80037ae:	23a0      	movs	r3, #160	@ 0xa0
 80037b0:	05db      	lsls	r3, r3, #23
 80037b2:	0011      	movs	r1, r2
 80037b4:	0018      	movs	r0, r3
 80037b6:	f002 fba9 	bl	8005f0c <HAL_GPIO_Init>
}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b00b      	add	sp, #44	@ 0x2c
 80037c0:	bd90      	pop	{r4, r7, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	40021000 	.word	0x40021000
 80037c8:	50000800 	.word	0x50000800
 80037cc:	50001c00 	.word	0x50001c00
 80037d0:	50000400 	.word	0x50000400
 80037d4:	000080e0 	.word	0x000080e0
 80037d8:	00000c27 	.word	0x00000c27

080037dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037e0:	b672      	cpsid	i
}
 80037e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037e4:	46c0      	nop			@ (mov r8, r8)
 80037e6:	e7fd      	b.n	80037e4 <Error_Handler+0x8>

080037e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ec:	4b07      	ldr	r3, [pc, #28]	@ (800380c <HAL_MspInit+0x24>)
 80037ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037f0:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_MspInit+0x24>)
 80037f2:	2101      	movs	r1, #1
 80037f4:	430a      	orrs	r2, r1
 80037f6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <HAL_MspInit+0x24>)
 80037fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037fc:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_MspInit+0x24>)
 80037fe:	2180      	movs	r1, #128	@ 0x80
 8003800:	0549      	lsls	r1, r1, #21
 8003802:	430a      	orrs	r2, r1
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b089      	sub	sp, #36	@ 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	240c      	movs	r4, #12
 800381a:	193b      	adds	r3, r7, r4
 800381c:	0018      	movs	r0, r3
 800381e:	2314      	movs	r3, #20
 8003820:	001a      	movs	r2, r3
 8003822:	2100      	movs	r1, #0
 8003824:	f005 fee3 	bl	80095ee <memset>
  if(hadc->Instance==ADC1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2a      	ldr	r2, [pc, #168]	@ (80038d8 <HAL_ADC_MspInit+0xc8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d14d      	bne.n	80038ce <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003832:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <HAL_ADC_MspInit+0xcc>)
 8003834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003836:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <HAL_ADC_MspInit+0xcc>)
 8003838:	2180      	movs	r1, #128	@ 0x80
 800383a:	0089      	lsls	r1, r1, #2
 800383c:	430a      	orrs	r2, r1
 800383e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <HAL_ADC_MspInit+0xcc>)
 8003842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003844:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <HAL_ADC_MspInit+0xcc>)
 8003846:	2101      	movs	r1, #1
 8003848:	430a      	orrs	r2, r1
 800384a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800384c:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <HAL_ADC_MspInit+0xcc>)
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	2201      	movs	r2, #1
 8003852:	4013      	ands	r3, r2
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003858:	193b      	adds	r3, r7, r4
 800385a:	221f      	movs	r2, #31
 800385c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800385e:	193b      	adds	r3, r7, r4
 8003860:	2203      	movs	r2, #3
 8003862:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	193b      	adds	r3, r7, r4
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386a:	193a      	adds	r2, r7, r4
 800386c:	23a0      	movs	r3, #160	@ 0xa0
 800386e:	05db      	lsls	r3, r3, #23
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f002 fb4a 	bl	8005f0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003878:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 800387a:	4a1a      	ldr	r2, [pc, #104]	@ (80038e4 <HAL_ADC_MspInit+0xd4>)
 800387c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800387e:	4b18      	ldr	r3, [pc, #96]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 8003880:	2200      	movs	r2, #0
 8003882:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003884:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800388a:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 800388c:	2200      	movs	r2, #0
 800388e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003890:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 8003892:	2280      	movs	r2, #128	@ 0x80
 8003894:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003896:	4b12      	ldr	r3, [pc, #72]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 8003898:	2280      	movs	r2, #128	@ 0x80
 800389a:	0052      	lsls	r2, r2, #1
 800389c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 80038a0:	2280      	movs	r2, #128	@ 0x80
 80038a2:	00d2      	lsls	r2, r2, #3
 80038a4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80038ac:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80038b2:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 80038b4:	0018      	movs	r0, r3
 80038b6:	f002 f8e7 	bl	8005a88 <HAL_DMA_Init>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80038be:	f7ff ff8d 	bl	80037dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a06      	ldr	r2, [pc, #24]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 80038c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_ADC_MspInit+0xd0>)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b009      	add	sp, #36	@ 0x24
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	40012400 	.word	0x40012400
 80038dc:	40021000 	.word	0x40021000
 80038e0:	200000d8 	.word	0x200000d8
 80038e4:	40020008 	.word	0x40020008

080038e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b08b      	sub	sp, #44	@ 0x2c
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	2414      	movs	r4, #20
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	0018      	movs	r0, r3
 80038f6:	2314      	movs	r3, #20
 80038f8:	001a      	movs	r2, r3
 80038fa:	2100      	movs	r1, #0
 80038fc:	f005 fe77 	bl	80095ee <memset>
  if(hi2c->Instance==I2C1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2f      	ldr	r2, [pc, #188]	@ (80039c4 <HAL_I2C_MspInit+0xdc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d129      	bne.n	800395e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390a:	4b2f      	ldr	r3, [pc, #188]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 800390c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390e:	4b2e      	ldr	r3, [pc, #184]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 8003910:	2102      	movs	r1, #2
 8003912:	430a      	orrs	r2, r1
 8003914:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003916:	4b2c      	ldr	r3, [pc, #176]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	2202      	movs	r2, #2
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003922:	0021      	movs	r1, r4
 8003924:	187b      	adds	r3, r7, r1
 8003926:	22c0      	movs	r2, #192	@ 0xc0
 8003928:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800392a:	187b      	adds	r3, r7, r1
 800392c:	2212      	movs	r2, #18
 800392e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003930:	187b      	adds	r3, r7, r1
 8003932:	2201      	movs	r2, #1
 8003934:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003936:	187b      	adds	r3, r7, r1
 8003938:	2203      	movs	r2, #3
 800393a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800393c:	187b      	adds	r3, r7, r1
 800393e:	2201      	movs	r2, #1
 8003940:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003942:	187b      	adds	r3, r7, r1
 8003944:	4a21      	ldr	r2, [pc, #132]	@ (80039cc <HAL_I2C_MspInit+0xe4>)
 8003946:	0019      	movs	r1, r3
 8003948:	0010      	movs	r0, r2
 800394a:	f002 fadf 	bl	8005f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800394e:	4b1e      	ldr	r3, [pc, #120]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 8003950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003952:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 8003954:	2180      	movs	r1, #128	@ 0x80
 8003956:	0389      	lsls	r1, r1, #14
 8003958:	430a      	orrs	r2, r1
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800395c:	e02e      	b.n	80039bc <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1b      	ldr	r2, [pc, #108]	@ (80039d0 <HAL_I2C_MspInit+0xe8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d129      	bne.n	80039bc <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003968:	4b17      	ldr	r3, [pc, #92]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 800396a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396c:	4b16      	ldr	r3, [pc, #88]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 800396e:	2102      	movs	r1, #2
 8003970:	430a      	orrs	r2, r1
 8003972:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003974:	4b14      	ldr	r3, [pc, #80]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	2202      	movs	r2, #2
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003980:	2114      	movs	r1, #20
 8003982:	187b      	adds	r3, r7, r1
 8003984:	22c0      	movs	r2, #192	@ 0xc0
 8003986:	01d2      	lsls	r2, r2, #7
 8003988:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800398a:	187b      	adds	r3, r7, r1
 800398c:	2212      	movs	r2, #18
 800398e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2201      	movs	r2, #1
 8003994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2203      	movs	r2, #3
 800399a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800399c:	187b      	adds	r3, r7, r1
 800399e:	2205      	movs	r2, #5
 80039a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	4a09      	ldr	r2, [pc, #36]	@ (80039cc <HAL_I2C_MspInit+0xe4>)
 80039a6:	0019      	movs	r1, r3
 80039a8:	0010      	movs	r0, r2
 80039aa:	f002 faaf 	bl	8005f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 80039b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b2:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_I2C_MspInit+0xe0>)
 80039b4:	2180      	movs	r1, #128	@ 0x80
 80039b6:	03c9      	lsls	r1, r1, #15
 80039b8:	430a      	orrs	r2, r1
 80039ba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b00b      	add	sp, #44	@ 0x2c
 80039c2:	bd90      	pop	{r4, r7, pc}
 80039c4:	40005400 	.word	0x40005400
 80039c8:	40021000 	.word	0x40021000
 80039cc:	50000400 	.word	0x50000400
 80039d0:	40005800 	.word	0x40005800

080039d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2380      	movs	r3, #128	@ 0x80
 80039e2:	05db      	lsls	r3, r3, #23
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d106      	bne.n	80039f6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039e8:	4b18      	ldr	r3, [pc, #96]	@ (8003a4c <HAL_TIM_Base_MspInit+0x78>)
 80039ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ec:	4b17      	ldr	r3, [pc, #92]	@ (8003a4c <HAL_TIM_Base_MspInit+0x78>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	430a      	orrs	r2, r1
 80039f2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80039f4:	e026      	b.n	8003a44 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM6)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <HAL_TIM_Base_MspInit+0x7c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10e      	bne.n	8003a1e <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a00:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <HAL_TIM_Base_MspInit+0x78>)
 8003a02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_TIM_Base_MspInit+0x78>)
 8003a06:	2110      	movs	r1, #16
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2100      	movs	r1, #0
 8003a10:	2011      	movs	r0, #17
 8003a12:	f002 f807 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003a16:	2011      	movs	r0, #17
 8003a18:	f002 f819 	bl	8005a4e <HAL_NVIC_EnableIRQ>
}
 8003a1c:	e012      	b.n	8003a44 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM7)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a0c      	ldr	r2, [pc, #48]	@ (8003a54 <HAL_TIM_Base_MspInit+0x80>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d10d      	bne.n	8003a44 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a28:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <HAL_TIM_Base_MspInit+0x78>)
 8003a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a2c:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <HAL_TIM_Base_MspInit+0x78>)
 8003a2e:	2120      	movs	r1, #32
 8003a30:	430a      	orrs	r2, r1
 8003a32:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	2012      	movs	r0, #18
 8003a3a:	f001 fff3 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a3e:	2012      	movs	r0, #18
 8003a40:	f002 f805 	bl	8005a4e <HAL_NVIC_EnableIRQ>
}
 8003a44:	46c0      	nop			@ (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40001000 	.word	0x40001000
 8003a54:	40001400 	.word	0x40001400

08003a58 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a06      	ldr	r2, [pc, #24]	@ (8003a80 <HAL_TIM_OC_MspInit+0x28>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d105      	bne.n	8003a76 <HAL_TIM_OC_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_TIM_OC_MspInit+0x2c>)
 8003a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a6e:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_TIM_OC_MspInit+0x2c>)
 8003a70:	2102      	movs	r1, #2
 8003a72:	430a      	orrs	r2, r1
 8003a74:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b002      	add	sp, #8
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b08b      	sub	sp, #44	@ 0x2c
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	2414      	movs	r4, #20
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	0018      	movs	r0, r3
 8003a96:	2314      	movs	r3, #20
 8003a98:	001a      	movs	r2, r3
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	f005 fda7 	bl	80095ee <memset>
  if(huart->Instance==USART1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <HAL_UART_MspInit+0x100>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d133      	bne.n	8003b12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003aaa:	4b38      	ldr	r3, [pc, #224]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aae:	4b37      	ldr	r3, [pc, #220]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003ab0:	2180      	movs	r1, #128	@ 0x80
 8003ab2:	01c9      	lsls	r1, r1, #7
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab8:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abc:	4b33      	ldr	r3, [pc, #204]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003abe:	2101      	movs	r1, #1
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ac4:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	2201      	movs	r2, #1
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ad0:	193b      	adds	r3, r7, r4
 8003ad2:	22c0      	movs	r2, #192	@ 0xc0
 8003ad4:	00d2      	lsls	r2, r2, #3
 8003ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad8:	0021      	movs	r1, r4
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	2202      	movs	r2, #2
 8003ade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2203      	movs	r2, #3
 8003aea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2204      	movs	r2, #4
 8003af0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af2:	187a      	adds	r2, r7, r1
 8003af4:	23a0      	movs	r3, #160	@ 0xa0
 8003af6:	05db      	lsls	r3, r3, #23
 8003af8:	0011      	movs	r1, r2
 8003afa:	0018      	movs	r0, r3
 8003afc:	f002 fa06 	bl	8005f0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b00:	2200      	movs	r2, #0
 8003b02:	2100      	movs	r1, #0
 8003b04:	201b      	movs	r0, #27
 8003b06:	f001 ff8d 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b0a:	201b      	movs	r0, #27
 8003b0c:	f001 ff9f 	bl	8005a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003b10:	e035      	b.n	8003b7e <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART5)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1e      	ldr	r2, [pc, #120]	@ (8003b90 <HAL_UART_MspInit+0x108>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d130      	bne.n	8003b7e <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003b22:	2180      	movs	r1, #128	@ 0x80
 8003b24:	0349      	lsls	r1, r1, #13
 8003b26:	430a      	orrs	r2, r1
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2e:	4b17      	ldr	r3, [pc, #92]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003b30:	2102      	movs	r1, #2
 8003b32:	430a      	orrs	r2, r1
 8003b34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b36:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003b42:	2114      	movs	r1, #20
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	2218      	movs	r2, #24
 8003b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4a:	187b      	adds	r3, r7, r1
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	2203      	movs	r2, #3
 8003b5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	2206      	movs	r2, #6
 8003b60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	4a0b      	ldr	r2, [pc, #44]	@ (8003b94 <HAL_UART_MspInit+0x10c>)
 8003b66:	0019      	movs	r1, r3
 8003b68:	0010      	movs	r0, r2
 8003b6a:	f002 f9cf 	bl	8005f0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2100      	movs	r1, #0
 8003b72:	200e      	movs	r0, #14
 8003b74:	f001 ff56 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003b78:	200e      	movs	r0, #14
 8003b7a:	f001 ff68 	bl	8005a4e <HAL_NVIC_EnableIRQ>
}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b00b      	add	sp, #44	@ 0x2c
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40005000 	.word	0x40005000
 8003b94:	50000400 	.word	0x50000400

08003b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	e7fd      	b.n	8003b9c <NMI_Handler+0x4>

08003ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ba4:	46c0      	nop			@ (mov r8, r8)
 8003ba6:	e7fd      	b.n	8003ba4 <HardFault_Handler+0x4>

08003ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003bac:	46c0      	nop			@ (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc0:	f001 fad8 	bl	8005174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <DMA1_Channel1_IRQHandler+0x14>)
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f002 f8bd 	bl	8005d52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	200000d8 	.word	0x200000d8

08003be4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003be8:	4b03      	ldr	r3, [pc, #12]	@ (8003bf8 <USART4_5_IRQHandler+0x14>)
 8003bea:	0018      	movs	r0, r3
 8003bec:	f004 fe06 	bl	80087fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	2000033c 	.word	0x2000033c

08003bfc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <TIM6_IRQHandler+0x1c>)
 8003c02:	0018      	movs	r0, r3
 8003c04:	f004 f87c 	bl	8007d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  timer_1s_count++;
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <TIM6_IRQHandler+0x20>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	4b03      	ldr	r3, [pc, #12]	@ (8003c1c <TIM6_IRQHandler+0x20>)
 8003c10:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM6_IRQn 1 */
}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000238 	.word	0x20000238
 8003c1c:	20000420 	.word	0x20000420

08003c20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <TIM7_IRQHandler+0x1c>)
 8003c26:	0018      	movs	r0, r3
 8003c28:	f004 f86a 	bl	8007d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  timer_1ms_count++;
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <TIM7_IRQHandler+0x20>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	4b03      	ldr	r3, [pc, #12]	@ (8003c40 <TIM7_IRQHandler+0x20>)
 8003c34:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000278 	.word	0x20000278
 8003c40:	20000424 	.word	0x20000424

08003c44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <USART1_IRQHandler+0x14>)
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f004 fdd6 	bl	80087fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	200002b8 	.word	0x200002b8

08003c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <_sbrk+0x5c>)
 8003c66:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <_sbrk+0x60>)
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c70:	4b13      	ldr	r3, [pc, #76]	@ (8003cc0 <_sbrk+0x64>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c78:	4b11      	ldr	r3, [pc, #68]	@ (8003cc0 <_sbrk+0x64>)
 8003c7a:	4a12      	ldr	r2, [pc, #72]	@ (8003cc4 <_sbrk+0x68>)
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c7e:	4b10      	ldr	r3, [pc, #64]	@ (8003cc0 <_sbrk+0x64>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d207      	bcs.n	8003c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c8c:	f005 fcb8 	bl	8009600 <__errno>
 8003c90:	0003      	movs	r3, r0
 8003c92:	220c      	movs	r2, #12
 8003c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c96:	2301      	movs	r3, #1
 8003c98:	425b      	negs	r3, r3
 8003c9a:	e009      	b.n	8003cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c9c:	4b08      	ldr	r3, [pc, #32]	@ (8003cc0 <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ca2:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <_sbrk+0x64>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	18d2      	adds	r2, r2, r3
 8003caa:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <_sbrk+0x64>)
 8003cac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003cae:	68fb      	ldr	r3, [r7, #12]
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b006      	add	sp, #24
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20005000 	.word	0x20005000
 8003cbc:	00000400 	.word	0x00000400
 8003cc0:	200003dc 	.word	0x200003dc
 8003cc4:	20000598 	.word	0x20000598

08003cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003cd4:	480d      	ldr	r0, [pc, #52]	@ (8003d0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003cd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cd8:	480d      	ldr	r0, [pc, #52]	@ (8003d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cda:	490e      	ldr	r1, [pc, #56]	@ (8003d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8003d18 <LoopForever+0xe>)
  movs r3, #0
 8003cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ce0:	e002      	b.n	8003ce8 <LoopCopyDataInit>

08003ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ce6:	3304      	adds	r3, #4

08003ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cec:	d3f9      	bcc.n	8003ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cee:	4a0b      	ldr	r2, [pc, #44]	@ (8003d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8003d20 <LoopForever+0x16>)
  movs r3, #0
 8003cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf4:	e001      	b.n	8003cfa <LoopFillZerobss>

08003cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf8:	3204      	adds	r2, #4

08003cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cfc:	d3fb      	bcc.n	8003cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003cfe:	f7ff ffe3 	bl	8003cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d02:	f005 fc83 	bl	800960c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d06:	f7ff f907 	bl	8002f18 <main>

08003d0a <LoopForever>:

LoopForever:
    b LoopForever
 8003d0a:	e7fe      	b.n	8003d0a <LoopForever>
   ldr   r0, =_estack
 8003d0c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d14:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003d18:	0800a340 	.word	0x0800a340
  ldr r2, =_sbss
 8003d1c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003d20:	20000594 	.word	0x20000594

08003d24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d24:	e7fe      	b.n	8003d24 <ADC1_COMP_IRQHandler>
	...

08003d28 <driver_charger_status>:
#include "stm32l0xx_hal_gpio.h"
#include "charger_status.h"

uint8_t value_return = 0;
uint8_t driver_charger_status(void)
{
 8003d28:	b590      	push	{r4, r7, lr}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
	uint8_t STAT1 = 0;
 8003d2e:	1dfb      	adds	r3, r7, #7
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
	uint8_t STAT2 = 0;
 8003d34:	1dbb      	adds	r3, r7, #6
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]

	STAT1 = HAL_GPIO_ReadPin(CHARGE_STAT1_GPIO_Port, CHARGE_STAT1_Pin);
 8003d3a:	1dfc      	adds	r4, r7, #7
 8003d3c:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <driver_charger_status+0x5c>)
 8003d3e:	2120      	movs	r1, #32
 8003d40:	0018      	movs	r0, r3
 8003d42:	f002 fa61 	bl	8006208 <HAL_GPIO_ReadPin>
 8003d46:	0003      	movs	r3, r0
 8003d48:	7023      	strb	r3, [r4, #0]
	STAT1 = HAL_GPIO_ReadPin(CHARGE_STAT2_GPIO_Port, CHARGE_STAT2_Pin);
 8003d4a:	1dfc      	adds	r4, r7, #7
 8003d4c:	2380      	movs	r3, #128	@ 0x80
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	23a0      	movs	r3, #160	@ 0xa0
 8003d52:	05db      	lsls	r3, r3, #23
 8003d54:	0011      	movs	r1, r2
 8003d56:	0018      	movs	r0, r3
 8003d58:	f002 fa56 	bl	8006208 <HAL_GPIO_ReadPin>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	7023      	strb	r3, [r4, #0]
	value_return = ((STAT1 << 1) | STAT2 );
 8003d60:	1dfb      	adds	r3, r7, #7
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	b25a      	sxtb	r2, r3
 8003d68:	1dbb      	adds	r3, r7, #6
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	4b04      	ldr	r3, [pc, #16]	@ (8003d88 <driver_charger_status+0x60>)
 8003d76:	701a      	strb	r2, [r3, #0]
	return value_return;
 8003d78:	4b03      	ldr	r3, [pc, #12]	@ (8003d88 <driver_charger_status+0x60>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b003      	add	sp, #12
 8003d82:	bd90      	pop	{r4, r7, pc}
 8003d84:	50000400 	.word	0x50000400
 8003d88:	200003e0 	.word	0x200003e0

08003d8c <User_Power_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Power_On(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWER_CTRL_GPIO_Port, POWER_CTRL_Pin, GPIO_PIN_SET);
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4803      	ldr	r0, [pc, #12]	@ (8003da4 <User_Power_On+0x18>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	0019      	movs	r1, r3
 8003d9a:	f002 fa52 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	50000400 	.word	0x50000400

08003da8 <User_Power_Off>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Power_Off(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWER_CTRL_GPIO_Port, POWER_CTRL_Pin, GPIO_PIN_RESET);
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4803      	ldr	r0, [pc, #12]	@ (8003dc0 <User_Power_Off+0x18>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	0019      	movs	r1, r3
 8003db6:	f002 fa44 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	50000400 	.word	0x50000400

08003dc4 <User_Heating_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Heating_On(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HEATING_CTRL_GPIO_Port, HEATING_CTRL_Pin, GPIO_PIN_SET);
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4803      	ldr	r0, [pc, #12]	@ (8003ddc <User_Heating_On+0x18>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	f002 fa36 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	50000400 	.word	0x50000400

08003de0 <User_Heating_Off>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Heating_Off(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HEATING_CTRL_GPIO_Port, HEATING_CTRL_Pin, GPIO_PIN_RESET);
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4803      	ldr	r0, [pc, #12]	@ (8003df8 <User_Heating_Off+0x18>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	0019      	movs	r1, r3
 8003dee:	f002 fa28 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	50000400 	.word	0x50000400

08003dfc <User_Fan_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Fan_On(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_CTRL_GPIO_Port, FAN_CTRL_Pin, GPIO_PIN_SET);
 8003e00:	2380      	movs	r3, #128	@ 0x80
 8003e02:	015b      	lsls	r3, r3, #5
 8003e04:	4803      	ldr	r0, [pc, #12]	@ (8003e14 <User_Fan_On+0x18>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	0019      	movs	r1, r3
 8003e0a:	f002 fa1a 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	50000400 	.word	0x50000400

08003e18 <User_Fan_Off>:

void User_Fan_Off(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_CTRL_GPIO_Port, FAN_CTRL_Pin, GPIO_PIN_RESET);
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	015b      	lsls	r3, r3, #5
 8003e20:	4803      	ldr	r0, [pc, #12]	@ (8003e30 <User_Fan_Off+0x18>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	0019      	movs	r1, r3
 8003e26:	f002 fa0c 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	50000400 	.word	0x50000400

08003e34 <User_Led_Green_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Led_Green_On(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003e38:	4b04      	ldr	r3, [pc, #16]	@ (8003e4c <User_Led_Green_On+0x18>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f002 f9ff 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003e44:	46c0      	nop			@ (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	50001c00 	.word	0x50001c00

08003e50 <User_Led_Green_Off>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Led_Green_Off(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8003e54:	4b04      	ldr	r3, [pc, #16]	@ (8003e68 <User_Led_Green_Off+0x18>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	2101      	movs	r1, #1
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f002 f9f1 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	50001c00 	.word	0x50001c00

08003e6c <User_Led_Red_Off>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Led_Red_Off(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003e70:	2380      	movs	r3, #128	@ 0x80
 8003e72:	019b      	lsls	r3, r3, #6
 8003e74:	4803      	ldr	r0, [pc, #12]	@ (8003e84 <User_Led_Red_Off+0x18>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	0019      	movs	r1, r3
 8003e7a:	f002 f9e2 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	50000800 	.word	0x50000800

08003e88 <User_Led_Blue_On>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void User_Led_Blue_On(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8003e8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ea0 <User_Led_Blue_On+0x18>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2102      	movs	r1, #2
 8003e92:	0018      	movs	r0, r3
 8003e94:	f002 f9d5 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	50001c00 	.word	0x50001c00

08003ea4 <User_Led_Blue_Off>:

void User_Led_Blue_Off(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8003ea8:	4b04      	ldr	r3, [pc, #16]	@ (8003ebc <User_Led_Blue_Off+0x18>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2102      	movs	r1, #2
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f002 f9c7 	bl	8006242 <HAL_GPIO_WritePin>
}
 8003eb4:	46c0      	nop			@ (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	50001c00 	.word	0x50001c00

08003ec0 <lora_com_init>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void lora_com_init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
//	user_lora_uart_init(); // for lora communication init
}
 8003ec4:	46c0      	nop			@ (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <lora_com_send_interval>:

void lora_com_send_interval(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
	switch (step_lora_send) {
 8003ed0:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <lora_com_send_interval+0x48>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <lora_com_send_interval+0x12>
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d009      	beq.n	8003ef0 <lora_com_send_interval+0x24>
				step_lora_send = 0;
				device_send_report();
			}
			break;
		default:
			break;
 8003edc:	e017      	b.n	8003f0e <lora_com_send_interval+0x42>
			previous_tick_send = user_timer_1ms_get_tick();
 8003ede:	f000 f95b 	bl	8004198 <user_timer_1ms_get_tick>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <lora_com_send_interval+0x4c>)
 8003ee6:	601a      	str	r2, [r3, #0]
			step_lora_send = 1;
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <lora_com_send_interval+0x48>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
			break;
 8003eee:	e00e      	b.n	8003f0e <lora_com_send_interval+0x42>
			if( user_timer_1ms_get_tick() - previous_tick_send > (60*60*60)) // 60 minutes
 8003ef0:	f000 f952 	bl	8004198 <user_timer_1ms_get_tick>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	4b08      	ldr	r3, [pc, #32]	@ (8003f18 <lora_com_send_interval+0x4c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	4a07      	ldr	r2, [pc, #28]	@ (8003f1c <lora_com_send_interval+0x50>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d904      	bls.n	8003f0c <lora_com_send_interval+0x40>
				step_lora_send = 0;
 8003f02:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <lora_com_send_interval+0x48>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
				device_send_report();
 8003f08:	f000 f80a 	bl	8003f20 <device_send_report>
			break;
 8003f0c:	46c0      	nop			@ (mov r8, r8)
	}

}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200003e8 	.word	0x200003e8
 8003f18:	200003e4 	.word	0x200003e4
 8003f1c:	00034bc0 	.word	0x00034bc0

08003f20 <device_send_report>:
/***********************************************************************************************************************
* Static Functions
***********************************************************************************************************************/

static void device_send_report(void)
{
 8003f20:	b5b0      	push	{r4, r5, r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
	// message will send battery (volt), knock, oild pressuare, rpm
	uint8_t tmp_data[MESSAGE_LENGTH];
	uint16_t temp;
	temp = (device_state.temperature_pcb / 10)*10;
 8003f26:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <device_send_report+0x80>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	491e      	ldr	r1, [pc, #120]	@ (8003fa4 <device_send_report+0x84>)
 8003f2c:	1c18      	adds	r0, r3, #0
 8003f2e:	f7fc fc77 	bl	8000820 <__aeabi_fdiv>
 8003f32:	1c03      	adds	r3, r0, #0
 8003f34:	491b      	ldr	r1, [pc, #108]	@ (8003fa4 <device_send_report+0x84>)
 8003f36:	1c18      	adds	r0, r3, #0
 8003f38:	f7fc fe58 	bl	8000bec <__aeabi_fmul>
 8003f3c:	1c03      	adds	r3, r0, #0
 8003f3e:	250e      	movs	r5, #14
 8003f40:	197c      	adds	r4, r7, r5
 8003f42:	1c18      	adds	r0, r3, #0
 8003f44:	f7fc f9fe 	bl	8000344 <__aeabi_f2uiz>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	8023      	strh	r3, [r4, #0]
	tmp_data[0] = 0x00; // command id
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
	tmp_data[1] = device_state.dc_volt.dc_1_in_volt >> 8;
 8003f52:	4b13      	ldr	r3, [pc, #76]	@ (8003fa0 <device_send_report+0x80>)
 8003f54:	889b      	ldrh	r3, [r3, #4]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	1d3b      	adds	r3, r7, #4
 8003f5e:	705a      	strb	r2, [r3, #1]
	tmp_data[2] = device_state.dc_volt.dc_1_in_volt & 0x00FF;
 8003f60:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa0 <device_send_report+0x80>)
 8003f62:	889b      	ldrh	r3, [r3, #4]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	709a      	strb	r2, [r3, #2]

	tmp_data[3] = temp;
 8003f6a:	197b      	adds	r3, r7, r5
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	70da      	strb	r2, [r3, #3]

	tmp_data[4] = device_state.switching_state.power;
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <device_send_report+0x80>)
 8003f76:	7c5a      	ldrb	r2, [r3, #17]
 8003f78:	1d3b      	adds	r3, r7, #4
 8003f7a:	711a      	strb	r2, [r3, #4]
	tmp_data[5] = device_state.switching_state.heating;
 8003f7c:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <device_send_report+0x80>)
 8003f7e:	7c9a      	ldrb	r2, [r3, #18]
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	715a      	strb	r2, [r3, #5]
	tmp_data[6] = device_state.switching_state.fan;
 8003f84:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <device_send_report+0x80>)
 8003f86:	7cda      	ldrb	r2, [r3, #19]
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	719a      	strb	r2, [r3, #6]

	lora_packet_message(tmp_data, MESSAGE_LENGTH);
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	2107      	movs	r1, #7
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 f809 	bl	8003fa8 <lora_packet_message>

}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b004      	add	sp, #16
 8003f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	200003c0 	.word	0x200003c0
 8003fa4:	41200000 	.word	0x41200000

08003fa8 <lora_packet_message>:

static bool lora_packet_message(uint8_t *buf, uint8_t buf_len)
{
 8003fa8:	b5b0      	push	{r4, r5, r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	000a      	movs	r2, r1
 8003fb2:	1cfb      	adds	r3, r7, #3
 8003fb4:	701a      	strb	r2, [r3, #0]
	bool status = false;
 8003fb6:	2314      	movs	r3, #20
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
    uint8_t tmp_cksa = 0;
 8003fbe:	2117      	movs	r1, #23
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
    uint8_t tmp_cksb = 0;
 8003fc6:	2416      	movs	r4, #22
 8003fc8:	193b      	adds	r3, r7, r4
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 8003fce:	2515      	movs	r5, #21
 8003fd0:	197b      	adds	r3, r7, r5
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
    uint8_t sum_data[MESSAGE_LENGTH + 5];

    sum_data[0] = HEADER_01;
 8003fd6:	2008      	movs	r0, #8
 8003fd8:	183b      	adds	r3, r7, r0
 8003fda:	22aa      	movs	r2, #170	@ 0xaa
 8003fdc:	701a      	strb	r2, [r3, #0]
    sum_data[1] = HEADER_02;
 8003fde:	183b      	adds	r3, r7, r0
 8003fe0:	2255      	movs	r2, #85	@ 0x55
 8003fe2:	705a      	strb	r2, [r3, #1]
    sum_data[2] = buf_len;
 8003fe4:	183b      	adds	r3, r7, r0
 8003fe6:	1cfa      	adds	r2, r7, #3
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	709a      	strb	r2, [r3, #2]

    tmp_cksa += buf_len;
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	0008      	movs	r0, r1
 8003ff0:	1879      	adds	r1, r7, r1
 8003ff2:	1cfa      	adds	r2, r7, #3
 8003ff4:	7809      	ldrb	r1, [r1, #0]
 8003ff6:	7812      	ldrb	r2, [r2, #0]
 8003ff8:	188a      	adds	r2, r1, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
    tmp_cksb += tmp_cksa;
 8003ffc:	193b      	adds	r3, r7, r4
 8003ffe:	1939      	adds	r1, r7, r4
 8004000:	183a      	adds	r2, r7, r0
 8004002:	7809      	ldrb	r1, [r1, #0]
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	188a      	adds	r2, r1, r2
 8004008:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < buf_len; i++)
 800400a:	197b      	adds	r3, r7, r5
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	e023      	b.n	800405a <lora_packet_message+0xb2>
    {
        sum_data[3 + i] = buf[i];
 8004012:	2015      	movs	r0, #21
 8004014:	183b      	adds	r3, r7, r0
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	18d2      	adds	r2, r2, r3
 800401c:	183b      	adds	r3, r7, r0
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	3303      	adds	r3, #3
 8004022:	7811      	ldrb	r1, [r2, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	18ba      	adds	r2, r7, r2
 8004028:	54d1      	strb	r1, [r2, r3]
        tmp_cksa += buf[i];
 800402a:	183b      	adds	r3, r7, r0
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	7819      	ldrb	r1, [r3, #0]
 8004034:	2417      	movs	r4, #23
 8004036:	193b      	adds	r3, r7, r4
 8004038:	193a      	adds	r2, r7, r4
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	188a      	adds	r2, r1, r2
 800403e:	701a      	strb	r2, [r3, #0]
        tmp_cksb += tmp_cksa;
 8004040:	2216      	movs	r2, #22
 8004042:	18bb      	adds	r3, r7, r2
 8004044:	18b9      	adds	r1, r7, r2
 8004046:	193a      	adds	r2, r7, r4
 8004048:	7809      	ldrb	r1, [r1, #0]
 800404a:	7812      	ldrb	r2, [r2, #0]
 800404c:	188a      	adds	r2, r1, r2
 800404e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < buf_len; i++)
 8004050:	183b      	adds	r3, r7, r0
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	183b      	adds	r3, r7, r0
 8004056:	3201      	adds	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	2015      	movs	r0, #21
 800405c:	183a      	adds	r2, r7, r0
 800405e:	1cfb      	adds	r3, r7, #3
 8004060:	7812      	ldrb	r2, [r2, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d3d4      	bcc.n	8004012 <lora_packet_message+0x6a>
    }

    sum_data[3 + i] = tmp_cksa;
 8004068:	183b      	adds	r3, r7, r0
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	3303      	adds	r3, #3
 800406e:	2408      	movs	r4, #8
 8004070:	193a      	adds	r2, r7, r4
 8004072:	2117      	movs	r1, #23
 8004074:	1879      	adds	r1, r7, r1
 8004076:	7809      	ldrb	r1, [r1, #0]
 8004078:	54d1      	strb	r1, [r2, r3]
    sum_data[4 + i] = tmp_cksb;
 800407a:	183b      	adds	r3, r7, r0
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	3304      	adds	r3, #4
 8004080:	193a      	adds	r2, r7, r4
 8004082:	2116      	movs	r1, #22
 8004084:	1879      	adds	r1, r7, r1
 8004086:	7809      	ldrb	r1, [r1, #0]
 8004088:	54d1      	strb	r1, [r2, r3]

    user_lora_trasmit(sum_data, buf_len + 5);
 800408a:	1cfb      	adds	r3, r7, #3
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	1d5a      	adds	r2, r3, #5
 8004090:	193b      	adds	r3, r7, r4
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f000 f889 	bl	80041ac <user_lora_trasmit>
	return status;
 800409a:	2314      	movs	r3, #20
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	781b      	ldrb	r3, [r3, #0]
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b006      	add	sp, #24
 80040a6:	bdb0      	pop	{r4, r5, r7, pc}

080040a8 <adc_init>:
/***********************************************************************************************************************
* public Functions
***********************************************************************************************************************/

void adc_init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_IT(&hadc);
	adc_start_process();
 80040ac:	f000 f834 	bl	8004118 <adc_start_process>
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_ADC_ConvCpltCallback>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
    uint16_t i = 0, j = 0;
 80040c0:	2312      	movs	r3, #18
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2200      	movs	r2, #0
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	2310      	movs	r3, #16
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	2200      	movs	r2, #0
 80040ce:	801a      	strh	r2, [r3, #0]
    uint32_t sumTmp = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
    HAL_TIM_Base_Stop(&TIMER_TRIGGER);
 80040d4:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <HAL_ADC_ConvCpltCallback+0x54>)
 80040d6:	0018      	movs	r0, r3
 80040d8:	f003 fd62 	bl	8007ba0 <HAL_TIM_Base_Stop>
//        {
//            sumTmp += adc_buffer_sample[i * ADC_CHANNEL_COUNT + j]; // 0 3 6 9 12
//        }
//        adc_value[j] = sumTmp / ADC_SAMPLE_COUNT;
//    }
    for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	e00b      	b.n	80040fa <HAL_ADC_ConvCpltCallback+0x42>
    {
    	adc_value[i] = adc_buffer_sample[i];
 80040e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_ADC_ConvCpltCallback+0x58>)
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	0052      	lsls	r2, r2, #1
 80040e8:	5ad3      	ldrh	r3, [r2, r3]
 80040ea:	b299      	uxth	r1, r3
 80040ec:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_ADC_ConvCpltCallback+0x5c>)
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	0052      	lsls	r2, r2, #1
 80040f2:	52d1      	strh	r1, [r2, r3]
    for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3301      	adds	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	ddf0      	ble.n	80040e2 <HAL_ADC_ConvCpltCallback+0x2a>
	}
//    HAL_TIM_Base_Start(&TIMER_TRIGGER);
    adc_start_process();
 8004100:	f000 f80a 	bl	8004118 <adc_start_process>
}
 8004104:	46c0      	nop			@ (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	b006      	add	sp, #24
 800410a:	bd80      	pop	{r7, pc}
 800410c:	200001f8 	.word	0x200001f8
 8004110:	200003f8 	.word	0x200003f8
 8004114:	200003ec 	.word	0x200003ec

08004118 <adc_start_process>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void adc_start_process(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_buffer_sample, ADC_CHANNEL_COUNT * ADC_SAMPLE_COUNT);
 800411c:	4906      	ldr	r1, [pc, #24]	@ (8004138 <adc_start_process+0x20>)
 800411e:	4b07      	ldr	r3, [pc, #28]	@ (800413c <adc_start_process+0x24>)
 8004120:	2214      	movs	r2, #20
 8004122:	0018      	movs	r0, r3
 8004124:	f001 f9b6 	bl	8005494 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&TIMER_TRIGGER);
 8004128:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <adc_start_process+0x28>)
 800412a:	0018      	movs	r0, r3
 800412c:	f003 fcee 	bl	8007b0c <HAL_TIM_Base_Start>
}
 8004130:	46c0      	nop			@ (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	200003f8 	.word	0x200003f8
 800413c:	2000007c 	.word	0x2000007c
 8004140:	200001f8 	.word	0x200001f8

08004144 <adc_get_sample>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
uint16_t* adc_get_sample(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
    return (uint16_t*)adc_value;
 8004148:	4b01      	ldr	r3, [pc, #4]	@ (8004150 <adc_get_sample+0xc>)
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200003ec 	.word	0x200003ec

08004154 <user_timer_1s_start>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void user_timer_1s_start(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8004158:	4b03      	ldr	r3, [pc, #12]	@ (8004168 <user_timer_1s_start+0x14>)
 800415a:	0018      	movs	r0, r3
 800415c:	f003 fd3e 	bl	8007bdc <HAL_TIM_Base_Start_IT>
}
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	20000238 	.word	0x20000238

0800416c <user_timer_1s_get_tick>:

uint32_t user_timer_1s_get_tick(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
	return timer_1s_count;
 8004170:	4b02      	ldr	r3, [pc, #8]	@ (800417c <user_timer_1s_get_tick+0x10>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	20000420 	.word	0x20000420

08004180 <user_timer_1ms_start>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
void user_timer_1ms_start(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim7);
 8004184:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <user_timer_1ms_start+0x14>)
 8004186:	0018      	movs	r0, r3
 8004188:	f003 fd28 	bl	8007bdc <HAL_TIM_Base_Start_IT>
}
 800418c:	46c0      	nop			@ (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	20000278 	.word	0x20000278

08004198 <user_timer_1ms_get_tick>:

uint32_t user_timer_1ms_get_tick(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
	return timer_1ms_count;
 800419c:	4b02      	ldr	r3, [pc, #8]	@ (80041a8 <user_timer_1ms_get_tick+0x10>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	0018      	movs	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	20000424 	.word	0x20000424

080041ac <user_lora_trasmit>:
{
	HAL_UART_DeInit(&UART_COM);
}

bool  user_lora_trasmit(uint8_t *buffer, uint16_t Size)
{
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	000a      	movs	r2, r1
 80041b6:	1cbb      	adds	r3, r7, #2
 80041b8:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_UART_Transmit(&UART_COM, (uint8_t *)buffer, Size, 100);
 80041ba:	230f      	movs	r3, #15
 80041bc:	18fc      	adds	r4, r7, r3
 80041be:	1cbb      	adds	r3, r7, #2
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4805      	ldr	r0, [pc, #20]	@ (80041dc <user_lora_trasmit+0x30>)
 80041c6:	2364      	movs	r3, #100	@ 0x64
 80041c8:	f004 fa70 	bl	80086ac <HAL_UART_Transmit>
 80041cc:	0003      	movs	r3, r0
 80041ce:	7023      	strb	r3, [r4, #0]

	return (status ? HAL_OK : 1, 0);
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b005      	add	sp, #20
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	200002b8 	.word	0x200002b8

080041e0 <roatary_time_get_value>:
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
uint32_t time_test = 0;
void roatary_time_get_value(void) // call in loop
{
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af04      	add	r7, sp, #16
	uint8_t time_rotary_1_location = 0;
 80041e6:	1dfb      	adds	r3, r7, #7
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
	uint8_t time_rotary_2_location = 0;
 80041ec:	1dbb      	adds	r3, r7, #6
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
	if (user_timer_1s_get_tick() - time_test > 2)
 80041f2:	f7ff ffbb 	bl	800416c <user_timer_1s_get_tick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	4b95      	ldr	r3, [pc, #596]	@ (8004450 <roatary_time_get_value+0x270>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d904      	bls.n	800420c <roatary_time_get_value+0x2c>
	{
		time_test = user_timer_1s_get_tick();
 8004202:	f7ff ffb3 	bl	800416c <user_timer_1s_get_tick>
 8004206:	0002      	movs	r2, r0
 8004208:	4b91      	ldr	r3, [pc, #580]	@ (8004450 <roatary_time_get_value+0x270>)
 800420a:	601a      	str	r2, [r3, #0]
//											   ROTARY2_P3_GPIO_Port, ROTARY2_P3_Pin,
//											   ROTARY2_P2_GPIO_Port, ROTARY2_P1_Pin);
//		APP_LOGD("time_rotary_1_location = %d", time_rotary_1_location);
//		APP_LOGD("time_rotary_2_location = %d", time_rotary_2_location);
	}
	time_rotary_1_location = rotary_detect(ROTARY1_P4_GPIO_Port, ROTARY1_P4_Pin,
 800420c:	1dfc      	adds	r4, r7, #7
 800420e:	23a0      	movs	r3, #160	@ 0xa0
 8004210:	05da      	lsls	r2, r3, #23
 8004212:	4890      	ldr	r0, [pc, #576]	@ (8004454 <roatary_time_get_value+0x274>)
 8004214:	2320      	movs	r3, #32
 8004216:	9303      	str	r3, [sp, #12]
 8004218:	23a0      	movs	r3, #160	@ 0xa0
 800421a:	05db      	lsls	r3, r3, #23
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	2380      	movs	r3, #128	@ 0x80
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	23a0      	movs	r3, #160	@ 0xa0
 8004224:	05db      	lsls	r3, r3, #23
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2340      	movs	r3, #64	@ 0x40
 800422a:	2101      	movs	r1, #1
 800422c:	f000 f934 	bl	8004498 <rotary_detect>
 8004230:	0003      	movs	r3, r0
 8004232:	7023      	strb	r3, [r4, #0]
										   ROTARY1_P2_GPIO_Port, ROTARY1_P2_Pin,
										   ROTARY1_P3_GPIO_Port, ROTARY1_P3_Pin,
										   ROTARY1_P1_GPIO_Port, ROTARY1_P1_Pin);

	time_rotary_2_location = rotary_detect(ROTARY2_P4_GPIO_Port, ROTARY2_P4_Pin,
 8004234:	1dbc      	adds	r4, r7, #6
 8004236:	4a87      	ldr	r2, [pc, #540]	@ (8004454 <roatary_time_get_value+0x274>)
 8004238:	2380      	movs	r3, #128	@ 0x80
 800423a:	0119      	lsls	r1, r3, #4
 800423c:	4885      	ldr	r0, [pc, #532]	@ (8004454 <roatary_time_get_value+0x274>)
 800423e:	2302      	movs	r3, #2
 8004240:	9303      	str	r3, [sp, #12]
 8004242:	4b84      	ldr	r3, [pc, #528]	@ (8004454 <roatary_time_get_value+0x274>)
 8004244:	9302      	str	r3, [sp, #8]
 8004246:	2380      	movs	r3, #128	@ 0x80
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	4b81      	ldr	r3, [pc, #516]	@ (8004454 <roatary_time_get_value+0x274>)
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	2304      	movs	r3, #4
 8004252:	f000 f921 	bl	8004498 <rotary_detect>
 8004256:	0003      	movs	r3, r0
 8004258:	7023      	strb	r3, [r4, #0]
										   ROTARY2_P2_GPIO_Port, ROTARY2_P2_Pin,
										   ROTARY2_P3_GPIO_Port, ROTARY2_P3_Pin,
										   ROTARY2_P2_GPIO_Port, ROTARY2_P1_Pin);
	// check rotary location change will update time after 2s
	if ((time_rotary_1_location != time_rotary_1_old_location) |
 800425a:	4b7f      	ldr	r3, [pc, #508]	@ (8004458 <roatary_time_get_value+0x278>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	1dfa      	adds	r2, r7, #7
 8004260:	7812      	ldrb	r2, [r2, #0]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	1e5a      	subs	r2, r3, #1
 8004266:	4193      	sbcs	r3, r2
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b7c      	ldr	r3, [pc, #496]	@ (800445c <roatary_time_get_value+0x27c>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	1db9      	adds	r1, r7, #6
 8004270:	7809      	ldrb	r1, [r1, #0]
 8004272:	1acb      	subs	r3, r1, r3
 8004274:	1e59      	subs	r1, r3, #1
 8004276:	418b      	sbcs	r3, r1
 8004278:	b2db      	uxtb	r3, r3
 800427a:	4313      	orrs	r3, r2
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d02e      	beq.n	80042e0 <roatary_time_get_value+0x100>
		(time_rotary_2_location != time_rotary_2_old_location))
	{
		time_rotary_1_old_location = time_rotary_1_location;
 8004282:	4b75      	ldr	r3, [pc, #468]	@ (8004458 <roatary_time_get_value+0x278>)
 8004284:	1dfa      	adds	r2, r7, #7
 8004286:	7812      	ldrb	r2, [r2, #0]
 8004288:	701a      	strb	r2, [r3, #0]
		time_rotary_2_old_location = time_rotary_2_location;
 800428a:	4b74      	ldr	r3, [pc, #464]	@ (800445c <roatary_time_get_value+0x27c>)
 800428c:	1dba      	adds	r2, r7, #6
 800428e:	7812      	ldrb	r2, [r2, #0]
 8004290:	701a      	strb	r2, [r3, #0]
		rotary_state_update = 1;
 8004292:	4b73      	ldr	r3, [pc, #460]	@ (8004460 <roatary_time_get_value+0x280>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
		APP_LOGD("rotary 1  = %d", time_rotary_1_old_location);
 8004298:	4a72      	ldr	r2, [pc, #456]	@ (8004464 <roatary_time_get_value+0x284>)
 800429a:	4973      	ldr	r1, [pc, #460]	@ (8004468 <roatary_time_get_value+0x288>)
 800429c:	4873      	ldr	r0, [pc, #460]	@ (800446c <roatary_time_get_value+0x28c>)
 800429e:	235d      	movs	r3, #93	@ 0x5d
 80042a0:	f000 f98e 	bl	80045c0 <uart_debug_printf>
 80042a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004458 <roatary_time_get_value+0x278>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	001a      	movs	r2, r3
 80042aa:	4b71      	ldr	r3, [pc, #452]	@ (8004470 <roatary_time_get_value+0x290>)
 80042ac:	0011      	movs	r1, r2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 f986 	bl	80045c0 <uart_debug_printf>
 80042b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004474 <roatary_time_get_value+0x294>)
 80042b6:	0018      	movs	r0, r3
 80042b8:	f000 f982 	bl	80045c0 <uart_debug_printf>
		APP_LOGD("rotary 2  = %d", time_rotary_2_old_location);
 80042bc:	4a69      	ldr	r2, [pc, #420]	@ (8004464 <roatary_time_get_value+0x284>)
 80042be:	496a      	ldr	r1, [pc, #424]	@ (8004468 <roatary_time_get_value+0x288>)
 80042c0:	486a      	ldr	r0, [pc, #424]	@ (800446c <roatary_time_get_value+0x28c>)
 80042c2:	235e      	movs	r3, #94	@ 0x5e
 80042c4:	f000 f97c 	bl	80045c0 <uart_debug_printf>
 80042c8:	4b64      	ldr	r3, [pc, #400]	@ (800445c <roatary_time_get_value+0x27c>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	001a      	movs	r2, r3
 80042ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004478 <roatary_time_get_value+0x298>)
 80042d0:	0011      	movs	r1, r2
 80042d2:	0018      	movs	r0, r3
 80042d4:	f000 f974 	bl	80045c0 <uart_debug_printf>
 80042d8:	4b66      	ldr	r3, [pc, #408]	@ (8004474 <roatary_time_get_value+0x294>)
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 f970 	bl	80045c0 <uart_debug_printf>
	}
	switch (rotary_state_update)
 80042e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004460 <roatary_time_get_value+0x280>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d00e      	beq.n	8004306 <roatary_time_get_value+0x126>
 80042e8:	dc2c      	bgt.n	8004344 <roatary_time_get_value+0x164>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02c      	beq.n	8004348 <roatary_time_get_value+0x168>
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d000      	beq.n	80042f4 <roatary_time_get_value+0x114>
			rotary_state_update = 0;
			APP_LOGD("update new value rotary done");
		}
		break;
	default:
		break;
 80042f2:	e027      	b.n	8004344 <roatary_time_get_value+0x164>
		rotary_time_update = user_timer_1ms_get_tick();
 80042f4:	f7ff ff50 	bl	8004198 <user_timer_1ms_get_tick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	4b60      	ldr	r3, [pc, #384]	@ (800447c <roatary_time_get_value+0x29c>)
 80042fc:	601a      	str	r2, [r3, #0]
		rotary_state_update = 2;
 80042fe:	4b58      	ldr	r3, [pc, #352]	@ (8004460 <roatary_time_get_value+0x280>)
 8004300:	2202      	movs	r2, #2
 8004302:	701a      	strb	r2, [r3, #0]
		break;
 8004304:	e023      	b.n	800434e <roatary_time_get_value+0x16e>
		if (user_timer_1ms_get_tick() - rotary_time_update > 2000) // update after 2s
 8004306:	f7ff ff47 	bl	8004198 <user_timer_1ms_get_tick>
 800430a:	0002      	movs	r2, r0
 800430c:	4b5b      	ldr	r3, [pc, #364]	@ (800447c <roatary_time_get_value+0x29c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1ad2      	subs	r2, r2, r3
 8004312:	23fa      	movs	r3, #250	@ 0xfa
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	429a      	cmp	r2, r3
 8004318:	d918      	bls.n	800434c <roatary_time_get_value+0x16c>
			timer_update_value = true;
 800431a:	4b59      	ldr	r3, [pc, #356]	@ (8004480 <roatary_time_get_value+0x2a0>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
			rotary_state_update = 0;
 8004320:	4b4f      	ldr	r3, [pc, #316]	@ (8004460 <roatary_time_get_value+0x280>)
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
			APP_LOGD("update new value rotary done");
 8004326:	4a4f      	ldr	r2, [pc, #316]	@ (8004464 <roatary_time_get_value+0x284>)
 8004328:	494f      	ldr	r1, [pc, #316]	@ (8004468 <roatary_time_get_value+0x288>)
 800432a:	4850      	ldr	r0, [pc, #320]	@ (800446c <roatary_time_get_value+0x28c>)
 800432c:	236e      	movs	r3, #110	@ 0x6e
 800432e:	f000 f947 	bl	80045c0 <uart_debug_printf>
 8004332:	4b54      	ldr	r3, [pc, #336]	@ (8004484 <roatary_time_get_value+0x2a4>)
 8004334:	0018      	movs	r0, r3
 8004336:	f000 f943 	bl	80045c0 <uart_debug_printf>
 800433a:	4b4e      	ldr	r3, [pc, #312]	@ (8004474 <roatary_time_get_value+0x294>)
 800433c:	0018      	movs	r0, r3
 800433e:	f000 f93f 	bl	80045c0 <uart_debug_printf>
		break;
 8004342:	e003      	b.n	800434c <roatary_time_get_value+0x16c>
		break;
 8004344:	46c0      	nop			@ (mov r8, r8)
 8004346:	e002      	b.n	800434e <roatary_time_get_value+0x16e>
		break;
 8004348:	46c0      	nop			@ (mov r8, r8)
 800434a:	e000      	b.n	800434e <roatary_time_get_value+0x16e>
		break;
 800434c:	46c0      	nop			@ (mov r8, r8)
	}

	if (timer_update_value)
 800434e:	4b4c      	ldr	r3, [pc, #304]	@ (8004480 <roatary_time_get_value+0x2a0>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d100      	bne.n	8004358 <roatary_time_get_value+0x178>
 8004356:	e077      	b.n	8004448 <roatary_time_get_value+0x268>
	{
		timer_update_value = false; // clear update timer by rotary
 8004358:	4b49      	ldr	r3, [pc, #292]	@ (8004480 <roatary_time_get_value+0x2a0>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
		switch (time_rotary_1_location)
 800435e:	1dfb      	adds	r3, r7, #7
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d014      	beq.n	8004390 <roatary_time_get_value+0x1b0>
 8004366:	dc18      	bgt.n	800439a <roatary_time_get_value+0x1ba>
 8004368:	2b02      	cmp	r3, #2
 800436a:	d00d      	beq.n	8004388 <roatary_time_get_value+0x1a8>
 800436c:	dc15      	bgt.n	800439a <roatary_time_get_value+0x1ba>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <roatary_time_get_value+0x198>
 8004372:	2b01      	cmp	r3, #1
 8004374:	d004      	beq.n	8004380 <roatary_time_get_value+0x1a0>
 8004376:	e010      	b.n	800439a <roatary_time_get_value+0x1ba>
		{
		case 0:
			device_state.time.time_duration = E_DURATION_TIME_1_MINUTES;
 8004378:	4b43      	ldr	r3, [pc, #268]	@ (8004488 <roatary_time_get_value+0x2a8>)
 800437a:	223c      	movs	r2, #60	@ 0x3c
 800437c:	615a      	str	r2, [r3, #20]
			break;
 800437e:	e011      	b.n	80043a4 <roatary_time_get_value+0x1c4>
		case 1:
			device_state.time.time_duration = E_DURATION_TIME_2_MINUTES;
 8004380:	4b41      	ldr	r3, [pc, #260]	@ (8004488 <roatary_time_get_value+0x2a8>)
 8004382:	2278      	movs	r2, #120	@ 0x78
 8004384:	615a      	str	r2, [r3, #20]
			break;
 8004386:	e00d      	b.n	80043a4 <roatary_time_get_value+0x1c4>
		case 2:
			device_state.time.time_duration = E_DURATION_TIME_4_MINUTES;
 8004388:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <roatary_time_get_value+0x2a8>)
 800438a:	22f0      	movs	r2, #240	@ 0xf0
 800438c:	615a      	str	r2, [r3, #20]
			break;
 800438e:	e009      	b.n	80043a4 <roatary_time_get_value+0x1c4>
		case 3:
			device_state.time.time_duration = E_DURATION_TIME_5_MINUTES;
 8004390:	4b3d      	ldr	r3, [pc, #244]	@ (8004488 <roatary_time_get_value+0x2a8>)
 8004392:	2296      	movs	r2, #150	@ 0x96
 8004394:	0052      	lsls	r2, r2, #1
 8004396:	615a      	str	r2, [r3, #20]
			break;
 8004398:	e004      	b.n	80043a4 <roatary_time_get_value+0x1c4>
		default:
			device_state.time.time_duration = E_DURATION_TIME_5_MINUTES;
 800439a:	4b3b      	ldr	r3, [pc, #236]	@ (8004488 <roatary_time_get_value+0x2a8>)
 800439c:	2296      	movs	r2, #150	@ 0x96
 800439e:	0052      	lsls	r2, r2, #1
 80043a0:	615a      	str	r2, [r3, #20]
			break;
 80043a2:	46c0      	nop			@ (mov r8, r8)
		}

		switch (time_rotary_2_location)
 80043a4:	1dbb      	adds	r3, r7, #6
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b06      	cmp	r3, #6
 80043aa:	d826      	bhi.n	80043fa <roatary_time_get_value+0x21a>
 80043ac:	009a      	lsls	r2, r3, #2
 80043ae:	4b37      	ldr	r3, [pc, #220]	@ (800448c <roatary_time_get_value+0x2ac>)
 80043b0:	18d3      	adds	r3, r2, r3
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	469f      	mov	pc, r3
		{
		case 0:
			device_state.time.time_interval = E_INTERVAL_TIME_1_MINUTES;
 80043b6:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <roatary_time_get_value+0x2a8>)
 80043b8:	223c      	movs	r2, #60	@ 0x3c
 80043ba:	619a      	str	r2, [r3, #24]
			break;
 80043bc:	e022      	b.n	8004404 <roatary_time_get_value+0x224>
		case 1:
			device_state.time.time_interval = E_INTERVAL_TIME_5_MINUTES;
 80043be:	4b32      	ldr	r3, [pc, #200]	@ (8004488 <roatary_time_get_value+0x2a8>)
 80043c0:	2296      	movs	r2, #150	@ 0x96
 80043c2:	0052      	lsls	r2, r2, #1
 80043c4:	619a      	str	r2, [r3, #24]
			break;
 80043c6:	e01d      	b.n	8004404 <roatary_time_get_value+0x224>
		case 2:
			device_state.time.time_interval = E_INTERVAL_TIME_10_MINUTES;
 80043c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004488 <roatary_time_get_value+0x2a8>)
 80043ca:	2296      	movs	r2, #150	@ 0x96
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	619a      	str	r2, [r3, #24]
			break;
 80043d0:	e018      	b.n	8004404 <roatary_time_get_value+0x224>
		case 3:
			device_state.time.time_interval = E_INTERVAL_TIME_15_MINUTES;
 80043d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004488 <roatary_time_get_value+0x2a8>)
 80043d4:	22e1      	movs	r2, #225	@ 0xe1
 80043d6:	0092      	lsls	r2, r2, #2
 80043d8:	619a      	str	r2, [r3, #24]
			break;
 80043da:	e013      	b.n	8004404 <roatary_time_get_value+0x224>
		case 4:
			device_state.time.time_interval = E_INTERVAL_TIME_20_MINUTES;
 80043dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004488 <roatary_time_get_value+0x2a8>)
 80043de:	2296      	movs	r2, #150	@ 0x96
 80043e0:	00d2      	lsls	r2, r2, #3
 80043e2:	619a      	str	r2, [r3, #24]
			break;
 80043e4:	e00e      	b.n	8004404 <roatary_time_get_value+0x224>
		case 5:
			device_state.time.time_interval = E_INTERVAL_TIME_30_MINUTES;
 80043e6:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <roatary_time_get_value+0x2a8>)
 80043e8:	22e1      	movs	r2, #225	@ 0xe1
 80043ea:	00d2      	lsls	r2, r2, #3
 80043ec:	619a      	str	r2, [r3, #24]
			break;
 80043ee:	e009      	b.n	8004404 <roatary_time_get_value+0x224>
		case 6:
			device_state.time.time_interval = E_INTERVAL_TIME_60_MINUTES;
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <roatary_time_get_value+0x2a8>)
 80043f2:	22e1      	movs	r2, #225	@ 0xe1
 80043f4:	0112      	lsls	r2, r2, #4
 80043f6:	619a      	str	r2, [r3, #24]
			break;
 80043f8:	e004      	b.n	8004404 <roatary_time_get_value+0x224>
		default:
			device_state.time.time_interval = E_INTERVAL_TIME_60_MINUTES;
 80043fa:	4b23      	ldr	r3, [pc, #140]	@ (8004488 <roatary_time_get_value+0x2a8>)
 80043fc:	22e1      	movs	r2, #225	@ 0xe1
 80043fe:	0112      	lsls	r2, r2, #4
 8004400:	619a      	str	r2, [r3, #24]
			break;
 8004402:	46c0      	nop			@ (mov r8, r8)
		}
		APP_LOGD("device_state.time.time_duration = %d ", device_state.time.time_duration);
 8004404:	4a17      	ldr	r2, [pc, #92]	@ (8004464 <roatary_time_get_value+0x284>)
 8004406:	4918      	ldr	r1, [pc, #96]	@ (8004468 <roatary_time_get_value+0x288>)
 8004408:	4818      	ldr	r0, [pc, #96]	@ (800446c <roatary_time_get_value+0x28c>)
 800440a:	23a6      	movs	r3, #166	@ 0xa6
 800440c:	f000 f8d8 	bl	80045c0 <uart_debug_printf>
 8004410:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <roatary_time_get_value+0x2a8>)
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	4b1e      	ldr	r3, [pc, #120]	@ (8004490 <roatary_time_get_value+0x2b0>)
 8004416:	0011      	movs	r1, r2
 8004418:	0018      	movs	r0, r3
 800441a:	f000 f8d1 	bl	80045c0 <uart_debug_printf>
 800441e:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <roatary_time_get_value+0x294>)
 8004420:	0018      	movs	r0, r3
 8004422:	f000 f8cd 	bl	80045c0 <uart_debug_printf>
		APP_LOGD("device_state.time.time_interval = %d ", device_state.time.time_interval);
 8004426:	4a0f      	ldr	r2, [pc, #60]	@ (8004464 <roatary_time_get_value+0x284>)
 8004428:	490f      	ldr	r1, [pc, #60]	@ (8004468 <roatary_time_get_value+0x288>)
 800442a:	4810      	ldr	r0, [pc, #64]	@ (800446c <roatary_time_get_value+0x28c>)
 800442c:	23a7      	movs	r3, #167	@ 0xa7
 800442e:	f000 f8c7 	bl	80045c0 <uart_debug_printf>
 8004432:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <roatary_time_get_value+0x2a8>)
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <roatary_time_get_value+0x2b4>)
 8004438:	0011      	movs	r1, r2
 800443a:	0018      	movs	r0, r3
 800443c:	f000 f8c0 	bl	80045c0 <uart_debug_printf>
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <roatary_time_get_value+0x294>)
 8004442:	0018      	movs	r0, r3
 8004444:	f000 f8bc 	bl	80045c0 <uart_debug_printf>
	}
}
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b003      	add	sp, #12
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	20000430 	.word	0x20000430
 8004454:	50000400 	.word	0x50000400
 8004458:	20000428 	.word	0x20000428
 800445c:	20000429 	.word	0x20000429
 8004460:	2000042a 	.word	0x2000042a
 8004464:	0800a224 	.word	0x0800a224
 8004468:	08009f14 	.word	0x08009f14
 800446c:	08009f18 	.word	0x08009f18
 8004470:	08009f28 	.word	0x08009f28
 8004474:	08009f38 	.word	0x08009f38
 8004478:	08009f3c 	.word	0x08009f3c
 800447c:	2000042c 	.word	0x2000042c
 8004480:	20000004 	.word	0x20000004
 8004484:	08009f4c 	.word	0x08009f4c
 8004488:	200003c0 	.word	0x200003c0
 800448c:	0800a208 	.word	0x0800a208
 8004490:	08009f6c 	.word	0x08009f6c
 8004494:	08009f94 	.word	0x08009f94

08004498 <rotary_detect>:
***********************************************************************************************************************/
static uint8_t rotary_detect(GPIO_TypeDef *r_port_1, uint16_t pin_1,
							 GPIO_TypeDef *r_port_2, uint16_t pin_2,
							 GPIO_TypeDef *r_port_4, uint16_t pin_4,
							 GPIO_TypeDef *r_port_8, uint16_t pin_8)
{
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	0008      	movs	r0, r1
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	0019      	movs	r1, r3
 80044a6:	260a      	movs	r6, #10
 80044a8:	19bb      	adds	r3, r7, r6
 80044aa:	1c02      	adds	r2, r0, #0
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	2308      	movs	r3, #8
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	1c0a      	adds	r2, r1, #0
 80044b4:	801a      	strh	r2, [r3, #0]
	uint8_t rotary_1;
	uint8_t rotary_2;
	uint8_t rotary_3;
	uint8_t rotary_4;
	uint8_t sum_rotary;
	rotary_4 = HAL_GPIO_ReadPin(r_port_1, pin_1);
 80044b6:	2514      	movs	r5, #20
 80044b8:	197c      	adds	r4, r7, r5
 80044ba:	19bb      	adds	r3, r7, r6
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	0011      	movs	r1, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f001 fea0 	bl	8006208 <HAL_GPIO_ReadPin>
 80044c8:	0003      	movs	r3, r0
 80044ca:	7023      	strb	r3, [r4, #0]
	if (rotary_4 == 0)
 80044cc:	197b      	adds	r3, r7, r5
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <rotary_detect+0x44>
		rotary_4 = 1;
 80044d4:	197b      	adds	r3, r7, r5
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e003      	b.n	80044e4 <rotary_detect+0x4c>
	else
		rotary_4 = 0;
 80044dc:	2314      	movs	r3, #20
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
	rotary_3 = HAL_GPIO_ReadPin(r_port_2, pin_2);
 80044e4:	2515      	movs	r5, #21
 80044e6:	197c      	adds	r4, r7, r5
 80044e8:	2308      	movs	r3, #8
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0011      	movs	r1, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	f001 fe88 	bl	8006208 <HAL_GPIO_ReadPin>
 80044f8:	0003      	movs	r3, r0
 80044fa:	7023      	strb	r3, [r4, #0]
	if (rotary_3 == 0)
 80044fc:	197b      	adds	r3, r7, r5
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d103      	bne.n	800450c <rotary_detect+0x74>
		rotary_3 = 1;
 8004504:	197b      	adds	r3, r7, r5
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e003      	b.n	8004514 <rotary_detect+0x7c>
	else
		rotary_3 = 0;
 800450c:	2315      	movs	r3, #21
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
	rotary_2 = HAL_GPIO_ReadPin(r_port_4, pin_4);
 8004514:	2516      	movs	r5, #22
 8004516:	197c      	adds	r4, r7, r5
 8004518:	232c      	movs	r3, #44	@ 0x2c
 800451a:	2208      	movs	r2, #8
 800451c:	189b      	adds	r3, r3, r2
 800451e:	19db      	adds	r3, r3, r7
 8004520:	881a      	ldrh	r2, [r3, #0]
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	0011      	movs	r1, r2
 8004526:	0018      	movs	r0, r3
 8004528:	f001 fe6e 	bl	8006208 <HAL_GPIO_ReadPin>
 800452c:	0003      	movs	r3, r0
 800452e:	7023      	strb	r3, [r4, #0]
	if (rotary_2 == 0)
 8004530:	197b      	adds	r3, r7, r5
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <rotary_detect+0xa8>
		rotary_2 = 1;
 8004538:	197b      	adds	r3, r7, r5
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e003      	b.n	8004548 <rotary_detect+0xb0>
	else
		rotary_2 = 0;
 8004540:	2316      	movs	r3, #22
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
	rotary_1 = HAL_GPIO_ReadPin(r_port_8, pin_8);
 8004548:	2517      	movs	r5, #23
 800454a:	197c      	adds	r4, r7, r5
 800454c:	2334      	movs	r3, #52	@ 0x34
 800454e:	2208      	movs	r2, #8
 8004550:	189b      	adds	r3, r3, r2
 8004552:	19db      	adds	r3, r3, r7
 8004554:	881a      	ldrh	r2, [r3, #0]
 8004556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004558:	0011      	movs	r1, r2
 800455a:	0018      	movs	r0, r3
 800455c:	f001 fe54 	bl	8006208 <HAL_GPIO_ReadPin>
 8004560:	0003      	movs	r3, r0
 8004562:	7023      	strb	r3, [r4, #0]
	if (rotary_1 == 0)
 8004564:	197b      	adds	r3, r7, r5
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <rotary_detect+0xdc>
		rotary_1 = 1;
 800456c:	197b      	adds	r3, r7, r5
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e003      	b.n	800457c <rotary_detect+0xe4>
	else
		rotary_1 = 0;
 8004574:	2317      	movs	r3, #23
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
	sum_rotary = (rotary_4 << 3) | (rotary_3 << 2) | (rotary_2 << 1) | rotary_1;
 800457c:	2314      	movs	r3, #20
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	b25a      	sxtb	r2, r3
 8004586:	2315      	movs	r3, #21
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	b25b      	sxtb	r3, r3
 8004590:	4313      	orrs	r3, r2
 8004592:	b25a      	sxtb	r2, r3
 8004594:	2316      	movs	r3, #22
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	b25b      	sxtb	r3, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	b25a      	sxtb	r2, r3
 80045a2:	2317      	movs	r3, #23
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	4313      	orrs	r3, r2
 80045ac:	b25a      	sxtb	r2, r3
 80045ae:	2113      	movs	r1, #19
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	701a      	strb	r2, [r3, #0]
	// return rotary_value.sum_rotary;

	return sum_rotary;
 80045b4:	187b      	adds	r3, r7, r1
 80045b6:	781b      	ldrb	r3, [r3, #0]
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b007      	add	sp, #28
 80045be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045c0 <uart_debug_printf>:
* Return Value : none
***********************************************************************************************************************/

//debug printf
int uart_debug_printf(const char *Format, ...)
{
 80045c0:	b40f      	push	{r0, r1, r2, r3}
 80045c2:	b580      	push	{r7, lr}
 80045c4:	4f19      	ldr	r7, [pc, #100]	@ (800462c <uart_debug_printf+0x6c>)
 80045c6:	44bd      	add	sp, r7
 80045c8:	af00      	add	r7, sp, #0
    uint8_t buff[512 + 1] = {0};
 80045ca:	4b19      	ldr	r3, [pc, #100]	@ (8004630 <uart_debug_printf+0x70>)
 80045cc:	2282      	movs	r2, #130	@ 0x82
 80045ce:	0092      	lsls	r2, r2, #2
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	19db      	adds	r3, r3, r7
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	3304      	adds	r3, #4
 80045da:	22fe      	movs	r2, #254	@ 0xfe
 80045dc:	32ff      	adds	r2, #255	@ 0xff
 80045de:	2100      	movs	r1, #0
 80045e0:	0018      	movs	r0, r3
 80045e2:	f005 f804 	bl	80095ee <memset>
    va_list args;
    va_start(args, Format);
 80045e6:	2385      	movs	r3, #133	@ 0x85
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	603b      	str	r3, [r7, #0]
    uint16_t len = vsprintf((char *)buff, Format, args);
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	2384      	movs	r3, #132	@ 0x84
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	6819      	ldr	r1, [r3, #0]
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	0018      	movs	r0, r3
 80045fc:	f004 ffd8 	bl	80095b0 <vsiprintf>
 8004600:	0002      	movs	r2, r0
 8004602:	490c      	ldr	r1, [pc, #48]	@ (8004634 <uart_debug_printf+0x74>)
 8004604:	187b      	adds	r3, r7, r1
 8004606:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart5, (uint8_t *)buff, len, 100);
 8004608:	187b      	adds	r3, r7, r1
 800460a:	881a      	ldrh	r2, [r3, #0]
 800460c:	1d39      	adds	r1, r7, #4
 800460e:	480a      	ldr	r0, [pc, #40]	@ (8004638 <uart_debug_printf+0x78>)
 8004610:	2364      	movs	r3, #100	@ 0x64
 8004612:	f004 f84b 	bl	80086ac <HAL_UART_Transmit>
    va_end(args);
    return -1;
 8004616:	2301      	movs	r3, #1
 8004618:	425b      	negs	r3, r3
}
 800461a:	0018      	movs	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	2382      	movs	r3, #130	@ 0x82
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	449d      	add	sp, r3
 8004624:	bc80      	pop	{r7}
 8004626:	bc08      	pop	{r3}
 8004628:	b004      	add	sp, #16
 800462a:	4718      	bx	r3
 800462c:	fffffdf8 	.word	0xfffffdf8
 8004630:	fffffdfc 	.word	0xfffffdfc
 8004634:	00000206 	.word	0x00000206
 8004638:	2000033c 	.word	0x2000033c

0800463c <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8004644:	4b03      	ldr	r3, [pc, #12]	@ (8004654 <SHT2x_Init+0x18>)
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	46c0      	nop			@ (mov r8, r8)
 800464c:	46bd      	mov	sp, r7
 800464e:	b002      	add	sp, #8
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	20000434 	.word	0x20000434

08004658 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b085      	sub	sp, #20
 800465c:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 800465e:	1d7b      	adds	r3, r7, #5
 8004660:	22e7      	movs	r2, #231	@ 0xe7
 8004662:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800466a:	4b17      	ldr	r3, [pc, #92]	@ (80046c8 <SHT2x_ReadUserReg+0x70>)
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	1d7a      	adds	r2, r7, #5
 8004670:	23fa      	movs	r3, #250	@ 0xfa
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	2180      	movs	r1, #128	@ 0x80
 800467a:	f001 fe95 	bl	80063a8 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 800467e:	4b12      	ldr	r3, [pc, #72]	@ (80046c8 <SHT2x_ReadUserReg+0x70>)
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	1dfc      	adds	r4, r7, #7
 8004684:	1dba      	adds	r2, r7, #6
 8004686:	23fa      	movs	r3, #250	@ 0xfa
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2301      	movs	r3, #1
 800468e:	2180      	movs	r1, #128	@ 0x80
 8004690:	f001 ff92 	bl	80065b8 <HAL_I2C_Master_Receive>
 8004694:	0003      	movs	r3, r0
 8004696:	7023      	strb	r3, [r4, #0]
	if( status == HAL_ERROR)
 8004698:	1dfb      	adds	r3, r7, #7
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10d      	bne.n	80046bc <SHT2x_ReadUserReg+0x64>
		APP_LOGE("read sht sensor fail");
 80046a0:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <SHT2x_ReadUserReg+0x74>)
 80046a2:	490b      	ldr	r1, [pc, #44]	@ (80046d0 <SHT2x_ReadUserReg+0x78>)
 80046a4:	480b      	ldr	r0, [pc, #44]	@ (80046d4 <SHT2x_ReadUserReg+0x7c>)
 80046a6:	2327      	movs	r3, #39	@ 0x27
 80046a8:	f7ff ff8a 	bl	80045c0 <uart_debug_printf>
 80046ac:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <SHT2x_ReadUserReg+0x80>)
 80046ae:	0018      	movs	r0, r3
 80046b0:	f7ff ff86 	bl	80045c0 <uart_debug_printf>
 80046b4:	4b09      	ldr	r3, [pc, #36]	@ (80046dc <SHT2x_ReadUserReg+0x84>)
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7ff ff82 	bl	80045c0 <uart_debug_printf>
	return val;
 80046bc:	1dbb      	adds	r3, r7, #6
 80046be:	781b      	ldrb	r3, [r3, #0]
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b003      	add	sp, #12
 80046c6:	bd90      	pop	{r4, r7, pc}
 80046c8:	20000434 	.word	0x20000434
 80046cc:	0800a23c 	.word	0x0800a23c
 80046d0:	08009fbc 	.word	0x08009fbc
 80046d4:	08009fc0 	.word	0x08009fc0
 80046d8:	08009fd0 	.word	0x08009fd0
 80046dc:	08009fe8 	.word	0x08009fe8

080046e0 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 80046e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	0002      	movs	r2, r0
 80046e8:	1dfb      	adds	r3, r7, #7
 80046ea:	701a      	strb	r2, [r3, #0]
	uint8_t val[3] = { 0 };
 80046ec:	260c      	movs	r6, #12
 80046ee:	19bb      	adds	r3, r7, r6
 80046f0:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <SHT2x_GetRaw+0x94>)
 80046f2:	8812      	ldrh	r2, [r2, #0]
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	2202      	movs	r2, #2
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]
	HAL_StatusTypeDef status = HAL_OK;
 80046fc:	250f      	movs	r5, #15
 80046fe:	197b      	adds	r3, r7, r5
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8004704:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <SHT2x_GetRaw+0x98>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	1dfa      	adds	r2, r7, #7
 800470a:	23fa      	movs	r3, #250	@ 0xfa
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2301      	movs	r3, #1
 8004712:	2180      	movs	r1, #128	@ 0x80
 8004714:	f001 fe48 	bl	80063a8 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8004718:	4b17      	ldr	r3, [pc, #92]	@ (8004778 <SHT2x_GetRaw+0x98>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	197c      	adds	r4, r7, r5
 800471e:	19ba      	adds	r2, r7, r6
 8004720:	23fa      	movs	r3, #250	@ 0xfa
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	2303      	movs	r3, #3
 8004728:	2180      	movs	r1, #128	@ 0x80
 800472a:	f001 ff45 	bl	80065b8 <HAL_I2C_Master_Receive>
 800472e:	0003      	movs	r3, r0
 8004730:	7023      	strb	r3, [r4, #0]
	if( status == HAL_ERROR)
 8004732:	197b      	adds	r3, r7, r5
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10d      	bne.n	8004756 <SHT2x_GetRaw+0x76>
		APP_LOGE("read sht sensor fail");
 800473a:	4a10      	ldr	r2, [pc, #64]	@ (800477c <SHT2x_GetRaw+0x9c>)
 800473c:	4910      	ldr	r1, [pc, #64]	@ (8004780 <SHT2x_GetRaw+0xa0>)
 800473e:	4811      	ldr	r0, [pc, #68]	@ (8004784 <SHT2x_GetRaw+0xa4>)
 8004740:	2336      	movs	r3, #54	@ 0x36
 8004742:	f7ff ff3d 	bl	80045c0 <uart_debug_printf>
 8004746:	4b10      	ldr	r3, [pc, #64]	@ (8004788 <SHT2x_GetRaw+0xa8>)
 8004748:	0018      	movs	r0, r3
 800474a:	f7ff ff39 	bl	80045c0 <uart_debug_printf>
 800474e:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <SHT2x_GetRaw+0xac>)
 8004750:	0018      	movs	r0, r3
 8004752:	f7ff ff35 	bl	80045c0 <uart_debug_printf>
	return val[0] << 8 | val[1];
 8004756:	210c      	movs	r1, #12
 8004758:	187b      	adds	r3, r7, r1
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	b21a      	sxth	r2, r3
 8004760:	187b      	adds	r3, r7, r1
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	b21b      	sxth	r3, r3
 8004766:	4313      	orrs	r3, r2
 8004768:	b21b      	sxth	r3, r3
 800476a:	b29b      	uxth	r3, r3
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b005      	add	sp, #20
 8004772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004774:	08009fec 	.word	0x08009fec
 8004778:	20000434 	.word	0x20000434
 800477c:	0800a250 	.word	0x0800a250
 8004780:	08009fbc 	.word	0x08009fbc
 8004784:	08009fc0 	.word	0x08009fc0
 8004788:	08009fd0 	.word	0x08009fd0
 800478c:	08009fe8 	.word	0x08009fe8

08004790 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	0002      	movs	r2, r0
 8004798:	1dfb      	adds	r3, r7, #7
 800479a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 800479c:	1dfb      	adds	r3, r7, #7
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <SHT2x_GetTemperature+0x18>
 80047a4:	22e3      	movs	r2, #227	@ 0xe3
 80047a6:	e000      	b.n	80047aa <SHT2x_GetTemperature+0x1a>
 80047a8:	22f3      	movs	r2, #243	@ 0xf3
 80047aa:	210f      	movs	r1, #15
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	701a      	strb	r2, [r3, #0]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7ff ff93 	bl	80046e0 <SHT2x_GetRaw>
 80047ba:	0003      	movs	r3, r0
 80047bc:	0018      	movs	r0, r3
 80047be:	f7fe fa87 	bl	8002cd0 <__aeabi_i2d>
 80047c2:	2200      	movs	r2, #0
 80047c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <SHT2x_GetTemperature+0x70>)
 80047c6:	f7fd f905 	bl	80019d4 <__aeabi_ddiv>
 80047ca:	0002      	movs	r2, r0
 80047cc:	000b      	movs	r3, r1
 80047ce:	0010      	movs	r0, r2
 80047d0:	0019      	movs	r1, r3
 80047d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004804 <SHT2x_GetTemperature+0x74>)
 80047d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <SHT2x_GetTemperature+0x78>)
 80047d6:	f7fd fc17 	bl	8002008 <__aeabi_dmul>
 80047da:	0002      	movs	r2, r0
 80047dc:	000b      	movs	r3, r1
 80047de:	0010      	movs	r0, r2
 80047e0:	0019      	movs	r1, r3
 80047e2:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <SHT2x_GetTemperature+0x7c>)
 80047e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <SHT2x_GetTemperature+0x80>)
 80047e6:	f7fd fed7 	bl	8002598 <__aeabi_dsub>
 80047ea:	0002      	movs	r2, r0
 80047ec:	000b      	movs	r3, r1
 80047ee:	0010      	movs	r0, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	f7fe fae3 	bl	8002dbc <__aeabi_d2f>
 80047f6:	1c03      	adds	r3, r0, #0
}
 80047f8:	1c18      	adds	r0, r3, #0
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b004      	add	sp, #16
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40f00000 	.word	0x40f00000
 8004804:	3d70a3d7 	.word	0x3d70a3d7
 8004808:	4065f70a 	.word	0x4065f70a
 800480c:	cccccccd 	.word	0xcccccccd
 8004810:	40476ccc 	.word	0x40476ccc

08004814 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	0002      	movs	r2, r0
 800481c:	1dfb      	adds	r3, r7, #7
 800481e:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8004820:	1dfb      	adds	r3, r7, #7
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <SHT2x_GetRelativeHumidity+0x18>
 8004828:	22e5      	movs	r2, #229	@ 0xe5
 800482a:	e000      	b.n	800482e <SHT2x_GetRelativeHumidity+0x1a>
 800482c:	22f5      	movs	r2, #245	@ 0xf5
 800482e:	210f      	movs	r1, #15
 8004830:	187b      	adds	r3, r7, r1
 8004832:	701a      	strb	r2, [r3, #0]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8004834:	187b      	adds	r3, r7, r1
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff ff51 	bl	80046e0 <SHT2x_GetRaw>
 800483e:	0003      	movs	r3, r0
 8004840:	0018      	movs	r0, r3
 8004842:	f7fe fa45 	bl	8002cd0 <__aeabi_i2d>
 8004846:	2200      	movs	r2, #0
 8004848:	4b0e      	ldr	r3, [pc, #56]	@ (8004884 <SHT2x_GetRelativeHumidity+0x70>)
 800484a:	f7fd f8c3 	bl	80019d4 <__aeabi_ddiv>
 800484e:	0002      	movs	r2, r0
 8004850:	000b      	movs	r3, r1
 8004852:	0010      	movs	r0, r2
 8004854:	0019      	movs	r1, r3
 8004856:	2200      	movs	r2, #0
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <SHT2x_GetRelativeHumidity+0x74>)
 800485a:	f7fd fbd5 	bl	8002008 <__aeabi_dmul>
 800485e:	0002      	movs	r2, r0
 8004860:	000b      	movs	r3, r1
 8004862:	0010      	movs	r0, r2
 8004864:	0019      	movs	r1, r3
 8004866:	2200      	movs	r2, #0
 8004868:	4b08      	ldr	r3, [pc, #32]	@ (800488c <SHT2x_GetRelativeHumidity+0x78>)
 800486a:	f7fd fe95 	bl	8002598 <__aeabi_dsub>
 800486e:	0002      	movs	r2, r0
 8004870:	000b      	movs	r3, r1
 8004872:	0010      	movs	r0, r2
 8004874:	0019      	movs	r1, r3
 8004876:	f7fe faa1 	bl	8002dbc <__aeabi_d2f>
 800487a:	1c03      	adds	r3, r0, #0
}
 800487c:	1c18      	adds	r0, r3, #0
 800487e:	46bd      	mov	sp, r7
 8004880:	b004      	add	sp, #16
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40f00000 	.word	0x40f00000
 8004888:	405f4000 	.word	0x405f4000
 800488c:	40180000 	.word	0x40180000

08004890 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af02      	add	r7, sp, #8
 8004896:	0002      	movs	r2, r0
 8004898:	1dfb      	adds	r3, r7, #7
 800489a:	701a      	strb	r2, [r3, #0]
	uint8_t val = SHT2x_ReadUserReg();
 800489c:	250f      	movs	r5, #15
 800489e:	197c      	adds	r4, r7, r5
 80048a0:	f7ff feda 	bl	8004658 <SHT2x_ReadUserReg>
 80048a4:	0003      	movs	r3, r0
 80048a6:	7023      	strb	r3, [r4, #0]
	val = (val & 0x7e) | res;
 80048a8:	0029      	movs	r1, r5
 80048aa:	187b      	adds	r3, r7, r1
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b25b      	sxtb	r3, r3
 80048b0:	227e      	movs	r2, #126	@ 0x7e
 80048b2:	4013      	ands	r3, r2
 80048b4:	b25a      	sxtb	r2, r3
 80048b6:	1dfb      	adds	r3, r7, #7
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	b25b      	sxtb	r3, r3
 80048bc:	4313      	orrs	r3, r2
 80048be:	b25a      	sxtb	r2, r3
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	701a      	strb	r2, [r3, #0]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 80048c4:	240c      	movs	r4, #12
 80048c6:	193b      	adds	r3, r7, r4
 80048c8:	22e6      	movs	r2, #230	@ 0xe6
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	193b      	adds	r3, r7, r4
 80048ce:	187a      	adds	r2, r7, r1
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 80048d4:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <SHT2x_SetResolution+0x60>)
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	193a      	adds	r2, r7, r4
 80048da:	23fa      	movs	r3, #250	@ 0xfa
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2302      	movs	r3, #2
 80048e2:	2180      	movs	r1, #128	@ 0x80
 80048e4:	f001 fd60 	bl	80063a8 <HAL_I2C_Master_Transmit>
}
 80048e8:	46c0      	nop			@ (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b004      	add	sp, #16
 80048ee:	bdb0      	pop	{r4, r5, r7, pc}
 80048f0:	20000434 	.word	0x20000434

080048f4 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fe fa15 	bl	8002d2c <__aeabi_f2d>
 8004902:	4a0b      	ldr	r2, [pc, #44]	@ (8004930 <SHT2x_CelsiusToFahrenheit+0x3c>)
 8004904:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <SHT2x_CelsiusToFahrenheit+0x40>)
 8004906:	f7fd fb7f 	bl	8002008 <__aeabi_dmul>
 800490a:	0002      	movs	r2, r0
 800490c:	000b      	movs	r3, r1
 800490e:	0010      	movs	r0, r2
 8004910:	0019      	movs	r1, r3
 8004912:	2200      	movs	r2, #0
 8004914:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <SHT2x_CelsiusToFahrenheit+0x44>)
 8004916:	f7fc fcf9 	bl	800130c <__aeabi_dadd>
 800491a:	0002      	movs	r2, r0
 800491c:	000b      	movs	r3, r1
 800491e:	0010      	movs	r0, r2
 8004920:	0019      	movs	r1, r3
 8004922:	f7fe fa4b 	bl	8002dbc <__aeabi_d2f>
 8004926:	1c03      	adds	r3, r0, #0
}
 8004928:	1c18      	adds	r0, r3, #0
 800492a:	46bd      	mov	sp, r7
 800492c:	b002      	add	sp, #8
 800492e:	bd80      	pop	{r7, pc}
 8004930:	cccccccd 	.word	0xcccccccd
 8004934:	3ffccccc 	.word	0x3ffccccc
 8004938:	40400000 	.word	0x40400000

0800493c <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	return celsius + 273;
 8004944:	4904      	ldr	r1, [pc, #16]	@ (8004958 <SHT2x_CelsiusToKelvin+0x1c>)
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fb fde0 	bl	800050c <__aeabi_fadd>
 800494c:	1c03      	adds	r3, r0, #0
}
 800494e:	1c18      	adds	r0, r3, #0
 8004950:	46bd      	mov	sp, r7
 8004952:	b002      	add	sp, #8
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	43888000 	.word	0x43888000

0800495c <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	return num / 1;
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc fc23 	bl	80011b0 <__aeabi_f2iz>
 800496a:	0003      	movs	r3, r0
}
 800496c:	0018      	movs	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1c18      	adds	r0, r3, #0
 8004982:	f7ff ffeb 	bl	800495c <SHT2x_GetInteger>
 8004986:	0003      	movs	r3, r0
 8004988:	0018      	movs	r0, r3
 800498a:	f7fc fc31 	bl	80011f0 <__aeabi_i2f>
 800498e:	1c03      	adds	r3, r0, #0
 8004990:	1c19      	adds	r1, r3, #0
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fa68 	bl	8000e68 <__aeabi_fsub>
 8004998:	1c03      	adds	r3, r0, #0
 800499a:	60fb      	str	r3, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	0019      	movs	r1, r3
 80049a0:	200a      	movs	r0, #10
 80049a2:	f000 f812 	bl	80049ca <SHT2x_Ipow>
 80049a6:	0003      	movs	r3, r0
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7fc fc6d 	bl	8001288 <__aeabi_ui2f>
 80049ae:	1c03      	adds	r3, r0, #0
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	1c18      	adds	r0, r3, #0
 80049b4:	f7fc f91a 	bl	8000bec <__aeabi_fmul>
 80049b8:	1c03      	adds	r3, r0, #0
 80049ba:	1c18      	adds	r0, r3, #0
 80049bc:	f7fb fcc2 	bl	8000344 <__aeabi_f2uiz>
 80049c0:	0003      	movs	r3, r0
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b004      	add	sp, #16
 80049c8:	bd80      	pop	{r7, pc}

080049ca <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 80049d8:	2301      	movs	r3, #1
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	e006      	b.n	80049ec <SHT2x_Ipow+0x22>
		temp *= base;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	4353      	muls	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3f4      	bcc.n	80049de <SHT2x_Ipow+0x14>
	return temp;
 80049f4:	68fb      	ldr	r3, [r7, #12]
}
 80049f6:	0018      	movs	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b004      	add	sp, #16
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <user_pripheral_init>:
static e_mode old_mode;
/***********************************************************************************************************************
* public Functions
***********************************************************************************************************************/
void user_pripheral_init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
	//	user_uart_init();
	lora_com_init();
 8004a04:	f7ff fa5c 	bl	8003ec0 <lora_com_init>
	user_timer_1s_start();
 8004a08:	f7ff fba4 	bl	8004154 <user_timer_1s_start>
	user_timer_1ms_start();
 8004a0c:	f7ff fbb8 	bl	8004180 <user_timer_1ms_start>
	SHT2x_Init(&hi2c1); // internal sensor on PCB
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <user_pripheral_init+0x2c>)
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7ff fe12 	bl	800463c <SHT2x_Init>
	SHT2x_SetResolution(RES_14_12);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7ff ff39 	bl	8004890 <SHT2x_SetResolution>

	user_get_tem_pcb_start();
 8004a1e:	f000 fa3f 	bl	8004ea0 <user_get_tem_pcb_start>
	adc_init();
 8004a22:	f7ff fb41 	bl	80040a8 <adc_init>
}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000120 	.word	0x20000120

08004a30 <user_driver_init>:

void user_driver_init(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
	device_state.mode = E_NORMAL_MODE;
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <user_driver_init+0x38>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	741a      	strb	r2, [r3, #16]
	device_state.switching_state.power = E_OFF;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <user_driver_init+0x38>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	745a      	strb	r2, [r3, #17]
	device_state.switching_state.heating = E_OFF;
 8004a40:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <user_driver_init+0x38>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	749a      	strb	r2, [r3, #18]
	device_state.switching_state.fan = E_OFF;
 8004a46:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <user_driver_init+0x38>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	74da      	strb	r2, [r3, #19]

	device_state.charger_status = E_CHARGE_DONE;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <user_driver_init+0x38>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	73da      	strb	r2, [r3, #15]
	device_state.dc_volt.dc_1_in_volt = 0;
 8004a52:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <user_driver_init+0x38>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	809a      	strh	r2, [r3, #4]
	old_mode = device_state.mode;
 8004a58:	4b03      	ldr	r3, [pc, #12]	@ (8004a68 <user_driver_init+0x38>)
 8004a5a:	7c1a      	ldrb	r2, [r3, #16]
 8004a5c:	4b03      	ldr	r3, [pc, #12]	@ (8004a6c <user_driver_init+0x3c>)
 8004a5e:	701a      	strb	r2, [r3, #0]
}
 8004a60:	46c0      	nop			@ (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	200003c0 	.word	0x200003c0
 8004a6c:	20000438 	.word	0x20000438

08004a70 <user_driver_process>:

void user_driver_process(void) // call in loop
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
	user_process();
 8004a74:	f000 f804 	bl	8004a80 <user_process>
}
 8004a78:	46c0      	nop			@ (mov r8, r8)
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <user_process>:

uint32_t time_sht_read = 0;
static void user_process(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
	/*
	 * get value sensor
	 */
	device_state.dc_volt.dc_1_in_volt = DC1_In_Volt();
 8004a84:	f000 faea 	bl	800505c <DC1_In_Volt>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b84 <user_process+0x104>)
 8004a8e:	809a      	strh	r2, [r3, #4]
	roatary_time_get_value(); // get state rotary
 8004a90:	f7ff fba6 	bl	80041e0 <roatary_time_get_value>
	user_set_switch_state();  //set switch state
 8004a94:	f000 f88c 	bl	8004bb0 <user_set_switch_state>
	charger_get_state();	  // check charger state
 8004a98:	f000 fad2 	bl	8005040 <charger_get_state>
	/*
	 * action
	 * action switch control
	 *
	 */
	user_set_switch_control();
 8004a9c:	f000 f9b6 	bl	8004e0c <user_set_switch_control>
	user_set_led_status();
 8004aa0:	f000 f9e2 	bl	8004e68 <user_set_led_status>

	if (user_timer_1s_get_tick() - time_sht_read > 2)
 8004aa4:	f7ff fb62 	bl	800416c <user_timer_1s_get_tick>
 8004aa8:	0002      	movs	r2, r0
 8004aaa:	4b37      	ldr	r3, [pc, #220]	@ (8004b88 <user_process+0x108>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d962      	bls.n	8004b7a <user_process+0xfa>
	{
		time_sht_read = user_timer_1s_get_tick();
 8004ab4:	f7ff fb5a 	bl	800416c <user_timer_1s_get_tick>
 8004ab8:	0002      	movs	r2, r0
 8004aba:	4b33      	ldr	r3, [pc, #204]	@ (8004b88 <user_process+0x108>)
 8004abc:	601a      	str	r2, [r3, #0]
		user_sht20_test();
 8004abe:	f000 fa37 	bl	8004f30 <user_sht20_test>
		switch (device_state.charger_status)
 8004ac2:	4b30      	ldr	r3, [pc, #192]	@ (8004b84 <user_process+0x104>)
 8004ac4:	7bdb      	ldrb	r3, [r3, #15]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d035      	beq.n	8004b36 <user_process+0xb6>
 8004aca:	dc43      	bgt.n	8004b54 <user_process+0xd4>
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d023      	beq.n	8004b18 <user_process+0x98>
 8004ad0:	dc40      	bgt.n	8004b54 <user_process+0xd4>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <user_process+0x5c>
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d00f      	beq.n	8004afa <user_process+0x7a>
 8004ada:	e03b      	b.n	8004b54 <user_process+0xd4>
		{
		case E_CHARGE_SUSPEND:
			APP_LOGI("E_CHARGE_SUSPEND");
 8004adc:	4a2b      	ldr	r2, [pc, #172]	@ (8004b8c <user_process+0x10c>)
 8004ade:	492c      	ldr	r1, [pc, #176]	@ (8004b90 <user_process+0x110>)
 8004ae0:	482c      	ldr	r0, [pc, #176]	@ (8004b94 <user_process+0x114>)
 8004ae2:	2361      	movs	r3, #97	@ 0x61
 8004ae4:	f7ff fd6c 	bl	80045c0 <uart_debug_printf>
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b98 <user_process+0x118>)
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7ff fd68 	bl	80045c0 <uart_debug_printf>
 8004af0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b9c <user_process+0x11c>)
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7ff fd64 	bl	80045c0 <uart_debug_printf>
			break;
 8004af8:	e03f      	b.n	8004b7a <user_process+0xfa>
		case E_CHARGE_DONE:
			APP_LOGI("E_CHARGE_DONE");
 8004afa:	4a24      	ldr	r2, [pc, #144]	@ (8004b8c <user_process+0x10c>)
 8004afc:	4924      	ldr	r1, [pc, #144]	@ (8004b90 <user_process+0x110>)
 8004afe:	4825      	ldr	r0, [pc, #148]	@ (8004b94 <user_process+0x114>)
 8004b00:	2364      	movs	r3, #100	@ 0x64
 8004b02:	f7ff fd5d 	bl	80045c0 <uart_debug_printf>
 8004b06:	4b26      	ldr	r3, [pc, #152]	@ (8004ba0 <user_process+0x120>)
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7ff fd59 	bl	80045c0 <uart_debug_printf>
 8004b0e:	4b23      	ldr	r3, [pc, #140]	@ (8004b9c <user_process+0x11c>)
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7ff fd55 	bl	80045c0 <uart_debug_printf>
			break;
 8004b16:	e030      	b.n	8004b7a <user_process+0xfa>
		case E_CHARGE_FAST:
			APP_LOGI("E_CHARGE_FAST");
 8004b18:	4a1c      	ldr	r2, [pc, #112]	@ (8004b8c <user_process+0x10c>)
 8004b1a:	491d      	ldr	r1, [pc, #116]	@ (8004b90 <user_process+0x110>)
 8004b1c:	481d      	ldr	r0, [pc, #116]	@ (8004b94 <user_process+0x114>)
 8004b1e:	2367      	movs	r3, #103	@ 0x67
 8004b20:	f7ff fd4e 	bl	80045c0 <uart_debug_printf>
 8004b24:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba4 <user_process+0x124>)
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7ff fd4a 	bl	80045c0 <uart_debug_printf>
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b9c <user_process+0x11c>)
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7ff fd46 	bl	80045c0 <uart_debug_printf>
			break;
 8004b34:	e021      	b.n	8004b7a <user_process+0xfa>
		case E_CHARGER_PRE:
			APP_LOGI("E_CHARGER_PRE");
 8004b36:	4a15      	ldr	r2, [pc, #84]	@ (8004b8c <user_process+0x10c>)
 8004b38:	4915      	ldr	r1, [pc, #84]	@ (8004b90 <user_process+0x110>)
 8004b3a:	4816      	ldr	r0, [pc, #88]	@ (8004b94 <user_process+0x114>)
 8004b3c:	236a      	movs	r3, #106	@ 0x6a
 8004b3e:	f7ff fd3f 	bl	80045c0 <uart_debug_printf>
 8004b42:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <user_process+0x128>)
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7ff fd3b 	bl	80045c0 <uart_debug_printf>
 8004b4a:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <user_process+0x11c>)
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7ff fd37 	bl	80045c0 <uart_debug_printf>
			break;
 8004b52:	e012      	b.n	8004b7a <user_process+0xfa>
		default:
			APP_LOGI("E_CHARGER_ERR overfload value = %d", device_state.charger_status);
 8004b54:	4a0d      	ldr	r2, [pc, #52]	@ (8004b8c <user_process+0x10c>)
 8004b56:	490e      	ldr	r1, [pc, #56]	@ (8004b90 <user_process+0x110>)
 8004b58:	480e      	ldr	r0, [pc, #56]	@ (8004b94 <user_process+0x114>)
 8004b5a:	236d      	movs	r3, #109	@ 0x6d
 8004b5c:	f7ff fd30 	bl	80045c0 <uart_debug_printf>
 8004b60:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <user_process+0x104>)
 8004b62:	7bdb      	ldrb	r3, [r3, #15]
 8004b64:	001a      	movs	r2, r3
 8004b66:	4b11      	ldr	r3, [pc, #68]	@ (8004bac <user_process+0x12c>)
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7ff fd28 	bl	80045c0 <uart_debug_printf>
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <user_process+0x11c>)
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7ff fd24 	bl	80045c0 <uart_debug_printf>
			break;
 8004b78:	46c0      	nop			@ (mov r8, r8)
		}
	}
	/*
	 * send lora message
	 */
	lora_com_send_interval();
 8004b7a:	f7ff f9a7 	bl	8003ecc <lora_com_send_interval>
}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200003c0 	.word	0x200003c0
 8004b88:	2000043c 	.word	0x2000043c
 8004b8c:	0800a260 	.word	0x0800a260
 8004b90:	08009ff0 	.word	0x08009ff0
 8004b94:	08009ff4 	.word	0x08009ff4
 8004b98:	0800a004 	.word	0x0800a004
 8004b9c:	0800a018 	.word	0x0800a018
 8004ba0:	0800a01c 	.word	0x0800a01c
 8004ba4:	0800a02c 	.word	0x0800a02c
 8004ba8:	0800a03c 	.word	0x0800a03c
 8004bac:	0800a04c 	.word	0x0800a04c

08004bb0 <user_set_switch_state>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void user_set_switch_state(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
	// check mode process
	if (device_state.dc_volt.dc_1_in_volt < (USER_VOLT_USE * 1000 - 0.5 * 1000))
 8004bb4:	4b23      	ldr	r3, [pc, #140]	@ (8004c44 <user_set_switch_state+0x94>)
 8004bb6:	889b      	ldrh	r3, [r3, #4]
 8004bb8:	4a23      	ldr	r2, [pc, #140]	@ (8004c48 <user_set_switch_state+0x98>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d803      	bhi.n	8004bc6 <user_set_switch_state+0x16>
	{
		device_state.mode = E_SAVE_MODE;
 8004bbe:	4b21      	ldr	r3, [pc, #132]	@ (8004c44 <user_set_switch_state+0x94>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	741a      	strb	r2, [r3, #16]
 8004bc4:	e00c      	b.n	8004be0 <user_set_switch_state+0x30>
	}
	else if (device_state.dc_volt.dc_1_in_volt > (USER_VOLT_USE * 1000 + 0.5 * 1000))
 8004bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c44 <user_set_switch_state+0x94>)
 8004bc8:	889b      	ldrh	r3, [r3, #4]
 8004bca:	4a20      	ldr	r2, [pc, #128]	@ (8004c4c <user_set_switch_state+0x9c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d903      	bls.n	8004bd8 <user_set_switch_state+0x28>
	{
		device_state.mode = E_NORMAL_MODE;
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c44 <user_set_switch_state+0x94>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	741a      	strb	r2, [r3, #16]
 8004bd6:	e003      	b.n	8004be0 <user_set_switch_state+0x30>
	}
	*/
	else
	{
		// keep mode
		device_state.mode = device_state.mode;
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <user_set_switch_state+0x94>)
 8004bda:	7c1a      	ldrb	r2, [r3, #16]
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <user_set_switch_state+0x94>)
 8004bde:	741a      	strb	r2, [r3, #16]
	}

	if (old_mode != device_state.mode)
 8004be0:	4b18      	ldr	r3, [pc, #96]	@ (8004c44 <user_set_switch_state+0x94>)
 8004be2:	7c1a      	ldrb	r2, [r3, #16]
 8004be4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <user_set_switch_state+0xa0>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d005      	beq.n	8004bf8 <user_set_switch_state+0x48>
	{
		old_mode = device_state.mode;
 8004bec:	4b15      	ldr	r3, [pc, #84]	@ (8004c44 <user_set_switch_state+0x94>)
 8004bee:	7c1a      	ldrb	r2, [r3, #16]
 8004bf0:	4b17      	ldr	r3, [pc, #92]	@ (8004c50 <user_set_switch_state+0xa0>)
 8004bf2:	701a      	strb	r2, [r3, #0]
		user_clear_power_change_state();
 8004bf4:	f000 f900 	bl	8004df8 <user_clear_power_change_state>
	}
	// control heating and fan follow temperature
	if (device_state.mode == E_NORMAL_MODE)
 8004bf8:	4b12      	ldr	r3, [pc, #72]	@ (8004c44 <user_set_switch_state+0x94>)
 8004bfa:	7c1b      	ldrb	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11c      	bne.n	8004c3a <user_set_switch_state+0x8a>
	{
		if (device_state.temperature_pcb < (5.0 - 0.5)) // <5°C
 8004c00:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <user_set_switch_state+0x94>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4913      	ldr	r1, [pc, #76]	@ (8004c54 <user_set_switch_state+0xa4>)
 8004c06:	1c18      	adds	r0, r3, #0
 8004c08:	f7fb fb26 	bl	8000258 <__aeabi_fcmplt>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d006      	beq.n	8004c1e <user_set_switch_state+0x6e>
		{
			device_state.switching_state.heating = E_ON;
 8004c10:	4b0c      	ldr	r3, [pc, #48]	@ (8004c44 <user_set_switch_state+0x94>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	749a      	strb	r2, [r3, #18]
			device_state.switching_state.fan = E_ON;
 8004c16:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <user_set_switch_state+0x94>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	74da      	strb	r2, [r3, #19]
 8004c1c:	e00d      	b.n	8004c3a <user_set_switch_state+0x8a>
		}
		else if (device_state.temperature_pcb < (5.0 - 0.5)) // > 5°C
 8004c1e:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <user_set_switch_state+0x94>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	490c      	ldr	r1, [pc, #48]	@ (8004c54 <user_set_switch_state+0xa4>)
 8004c24:	1c18      	adds	r0, r3, #0
 8004c26:	f7fb fb17 	bl	8000258 <__aeabi_fcmplt>
 8004c2a:	1e03      	subs	r3, r0, #0
 8004c2c:	d005      	beq.n	8004c3a <user_set_switch_state+0x8a>
		{
			device_state.switching_state.heating = E_OFF;
 8004c2e:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <user_set_switch_state+0x94>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	749a      	strb	r2, [r3, #18]
			device_state.switching_state.fan = E_OFF;
 8004c34:	4b03      	ldr	r3, [pc, #12]	@ (8004c44 <user_set_switch_state+0x94>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	74da      	strb	r2, [r3, #19]
		{
			// keep
		}
	}
	// control power switch
	user_power_switch_set_state();
 8004c3a:	f000 f80d 	bl	8004c58 <user_power_switch_set_state>
}
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200003c0 	.word	0x200003c0
 8004c48:	00002ceb 	.word	0x00002ceb
 8004c4c:	000030d4 	.word	0x000030d4
 8004c50:	20000438 	.word	0x20000438
 8004c54:	40900000 	.word	0x40900000

08004c58 <user_power_switch_set_state>:
* Return Value : none
***********************************************************************************************************************/
uint32_t tick_power_switch = 0;
static uint8_t state_save_power_switch = 0;
static void user_power_switch_set_state(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
	if (device_state.mode == E_SAVE_MODE) // process save mode
 8004c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004c5e:	7c1b      	ldrb	r3, [r3, #16]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d166      	bne.n	8004d32 <user_power_switch_set_state+0xda>
	{
		// after 60 min will turn on according duration time
		switch (state_save_power_switch)
 8004c64:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d043      	beq.n	8004cf4 <user_power_switch_set_state+0x9c>
 8004c6c:	dd00      	ble.n	8004c70 <user_power_switch_set_state+0x18>
 8004c6e:	e0a1      	b.n	8004db4 <user_power_switch_set_state+0x15c>
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d025      	beq.n	8004cc0 <user_power_switch_set_state+0x68>
 8004c74:	dd00      	ble.n	8004c78 <user_power_switch_set_state+0x20>
 8004c76:	e09d      	b.n	8004db4 <user_power_switch_set_state+0x15c>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <user_power_switch_set_state+0x2a>
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d00c      	beq.n	8004c9a <user_power_switch_set_state+0x42>
				state_save_power_switch = 0;
				APP_LOGI("switching_state.power OFF after time_duration ");
			}
			break;
		default:
			break;
 8004c80:	e098      	b.n	8004db4 <user_power_switch_set_state+0x15c>
			tick_power_switch = user_timer_1s_get_tick();
 8004c82:	f7ff fa73 	bl	800416c <user_timer_1s_get_tick>
 8004c86:	0002      	movs	r2, r0
 8004c88:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004c8a:	601a      	str	r2, [r3, #0]
			state_save_power_switch = 1;
 8004c8c:	4b51      	ldr	r3, [pc, #324]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
			device_state.switching_state.power = E_OFF;
 8004c92:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	745a      	strb	r2, [r3, #17]
			break;
 8004c98:	e097      	b.n	8004dca <user_power_switch_set_state+0x172>
			if (user_timer_1s_get_tick() - tick_power_switch > (60 * 60 * 60)) //power ON according rotation switch duration only EVERY 60min
 8004c9a:	f7ff fa67 	bl	800416c <user_timer_1s_get_tick>
 8004c9e:	0002      	movs	r2, r0
 8004ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8004ddc <user_power_switch_set_state+0x184>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d800      	bhi.n	8004cae <user_power_switch_set_state+0x56>
 8004cac:	e084      	b.n	8004db8 <user_power_switch_set_state+0x160>
				tick_power_switch = user_timer_1s_get_tick();
 8004cae:	f7ff fa5d 	bl	800416c <user_timer_1s_get_tick>
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	4b48      	ldr	r3, [pc, #288]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004cb6:	601a      	str	r2, [r3, #0]
				state_save_power_switch = 2;
 8004cb8:	4b46      	ldr	r3, [pc, #280]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004cba:	2202      	movs	r2, #2
 8004cbc:	701a      	strb	r2, [r3, #0]
			break;
 8004cbe:	e07b      	b.n	8004db8 <user_power_switch_set_state+0x160>
			APP_LOGI("switching_state.power E_ON after 60 minutes");
 8004cc0:	4a47      	ldr	r2, [pc, #284]	@ (8004de0 <user_power_switch_set_state+0x188>)
 8004cc2:	4948      	ldr	r1, [pc, #288]	@ (8004de4 <user_power_switch_set_state+0x18c>)
 8004cc4:	4848      	ldr	r0, [pc, #288]	@ (8004de8 <user_power_switch_set_state+0x190>)
 8004cc6:	23d2      	movs	r3, #210	@ 0xd2
 8004cc8:	f7ff fc7a 	bl	80045c0 <uart_debug_printf>
 8004ccc:	4b47      	ldr	r3, [pc, #284]	@ (8004dec <user_power_switch_set_state+0x194>)
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7ff fc76 	bl	80045c0 <uart_debug_printf>
 8004cd4:	4b46      	ldr	r3, [pc, #280]	@ (8004df0 <user_power_switch_set_state+0x198>)
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f7ff fc72 	bl	80045c0 <uart_debug_printf>
			device_state.switching_state.power = E_ON;
 8004cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	745a      	strb	r2, [r3, #17]
			tick_power_switch = user_timer_1s_get_tick();
 8004ce2:	f7ff fa43 	bl	800416c <user_timer_1s_get_tick>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004cea:	601a      	str	r2, [r3, #0]
			state_save_power_switch = 3;
 8004cec:	4b39      	ldr	r3, [pc, #228]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004cee:	2203      	movs	r2, #3
 8004cf0:	701a      	strb	r2, [r3, #0]
			break;
 8004cf2:	e06a      	b.n	8004dca <user_power_switch_set_state+0x172>
			if (user_timer_1s_get_tick() - tick_power_switch > (device_state.time.time_duration))
 8004cf4:	f7ff fa3a 	bl	800416c <user_timer_1s_get_tick>
 8004cf8:	0002      	movs	r2, r0
 8004cfa:	4b37      	ldr	r3, [pc, #220]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	4b33      	ldr	r3, [pc, #204]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d959      	bls.n	8004dbc <user_power_switch_set_state+0x164>
				device_state.switching_state.power = E_OFF;
 8004d08:	4b31      	ldr	r3, [pc, #196]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	745a      	strb	r2, [r3, #17]
				state_save_power_switch = 0;
 8004d0e:	4b31      	ldr	r3, [pc, #196]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
				APP_LOGI("switching_state.power OFF after time_duration ");
 8004d14:	4a32      	ldr	r2, [pc, #200]	@ (8004de0 <user_power_switch_set_state+0x188>)
 8004d16:	4933      	ldr	r1, [pc, #204]	@ (8004de4 <user_power_switch_set_state+0x18c>)
 8004d18:	4833      	ldr	r0, [pc, #204]	@ (8004de8 <user_power_switch_set_state+0x190>)
 8004d1a:	23dc      	movs	r3, #220	@ 0xdc
 8004d1c:	f7ff fc50 	bl	80045c0 <uart_debug_printf>
 8004d20:	4b34      	ldr	r3, [pc, #208]	@ (8004df4 <user_power_switch_set_state+0x19c>)
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7ff fc4c 	bl	80045c0 <uart_debug_printf>
 8004d28:	4b31      	ldr	r3, [pc, #196]	@ (8004df0 <user_power_switch_set_state+0x198>)
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f7ff fc48 	bl	80045c0 <uart_debug_printf>
			break;
 8004d30:	e044      	b.n	8004dbc <user_power_switch_set_state+0x164>
		}
	}
	else if (device_state.mode == E_NORMAL_MODE)
 8004d32:	4b27      	ldr	r3, [pc, #156]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004d34:	7c1b      	ldrb	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d147      	bne.n	8004dca <user_power_switch_set_state+0x172>
	{
		switch (state_save_power_switch)
 8004d3a:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d027      	beq.n	8004d92 <user_power_switch_set_state+0x13a>
 8004d42:	dc3d      	bgt.n	8004dc0 <user_power_switch_set_state+0x168>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <user_power_switch_set_state+0xf6>
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d00c      	beq.n	8004d66 <user_power_switch_set_state+0x10e>
				device_state.switching_state.power = E_OFF;
				state_save_power_switch = 0;
			}
			break;
		default:
			break;
 8004d4c:	e038      	b.n	8004dc0 <user_power_switch_set_state+0x168>
			device_state.switching_state.power = E_OFF;
 8004d4e:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	745a      	strb	r2, [r3, #17]
			tick_power_switch = user_timer_1s_get_tick();
 8004d54:	f7ff fa0a 	bl	800416c <user_timer_1s_get_tick>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004d5c:	601a      	str	r2, [r3, #0]
			state_save_power_switch = 1;
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
			break;
 8004d64:	e031      	b.n	8004dca <user_power_switch_set_state+0x172>
			if (user_timer_1s_get_tick() - tick_power_switch > (device_state.time.time_interval))
 8004d66:	f7ff fa01 	bl	800416c <user_timer_1s_get_tick>
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1ad2      	subs	r2, r2, r3
 8004d72:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d924      	bls.n	8004dc4 <user_power_switch_set_state+0x16c>
				device_state.switching_state.power = E_ON;
 8004d7a:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	745a      	strb	r2, [r3, #17]
				state_save_power_switch = 2;
 8004d80:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004d82:	2202      	movs	r2, #2
 8004d84:	701a      	strb	r2, [r3, #0]
				tick_power_switch = user_timer_1s_get_tick();
 8004d86:	f7ff f9f1 	bl	800416c <user_timer_1s_get_tick>
 8004d8a:	0002      	movs	r2, r0
 8004d8c:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004d8e:	601a      	str	r2, [r3, #0]
			break;
 8004d90:	e018      	b.n	8004dc4 <user_power_switch_set_state+0x16c>
			if (user_timer_1s_get_tick() - tick_power_switch > (device_state.time.time_duration))
 8004d92:	f7ff f9eb 	bl	800416c <user_timer_1s_get_tick>
 8004d96:	0002      	movs	r2, r0
 8004d98:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <user_power_switch_set_state+0x180>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	1ad2      	subs	r2, r2, r3
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d910      	bls.n	8004dc8 <user_power_switch_set_state+0x170>
				device_state.switching_state.power = E_OFF;
 8004da6:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <user_power_switch_set_state+0x178>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	745a      	strb	r2, [r3, #17]
				state_save_power_switch = 0;
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <user_power_switch_set_state+0x17c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
			break;
 8004db2:	e009      	b.n	8004dc8 <user_power_switch_set_state+0x170>
			break;
 8004db4:	46c0      	nop			@ (mov r8, r8)
 8004db6:	e008      	b.n	8004dca <user_power_switch_set_state+0x172>
			break;
 8004db8:	46c0      	nop			@ (mov r8, r8)
 8004dba:	e006      	b.n	8004dca <user_power_switch_set_state+0x172>
			break;
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	e004      	b.n	8004dca <user_power_switch_set_state+0x172>
			break;
 8004dc0:	46c0      	nop			@ (mov r8, r8)
 8004dc2:	e002      	b.n	8004dca <user_power_switch_set_state+0x172>
			break;
 8004dc4:	46c0      	nop			@ (mov r8, r8)
 8004dc6:	e000      	b.n	8004dca <user_power_switch_set_state+0x172>
			break;
 8004dc8:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	200003c0 	.word	0x200003c0
 8004dd4:	20000444 	.word	0x20000444
 8004dd8:	20000440 	.word	0x20000440
 8004ddc:	00034bc0 	.word	0x00034bc0
 8004de0:	0800a270 	.word	0x0800a270
 8004de4:	08009ff0 	.word	0x08009ff0
 8004de8:	08009ff4 	.word	0x08009ff4
 8004dec:	0800a070 	.word	0x0800a070
 8004df0:	0800a018 	.word	0x0800a018
 8004df4:	0800a09c 	.word	0x0800a09c

08004df8 <user_clear_power_change_state>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void user_clear_power_change_state(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
	state_save_power_switch = 0;
 8004dfc:	4b02      	ldr	r3, [pc, #8]	@ (8004e08 <user_clear_power_change_state+0x10>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000444 	.word	0x20000444

08004e0c <user_set_switch_control>:
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/

static void user_set_switch_control(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
	if (device_state.switching_state.power == E_ON)
 8004e10:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <user_set_switch_control+0x58>)
 8004e12:	7c5b      	ldrb	r3, [r3, #17]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d102      	bne.n	8004e1e <user_set_switch_control+0x12>
		User_Power_On();
 8004e18:	f7fe ffb8 	bl	8003d8c <User_Power_On>
 8004e1c:	e005      	b.n	8004e2a <user_set_switch_control+0x1e>
	else if (device_state.switching_state.power == E_OFF)
 8004e1e:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <user_set_switch_control+0x58>)
 8004e20:	7c5b      	ldrb	r3, [r3, #17]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <user_set_switch_control+0x1e>
		User_Power_Off();
 8004e26:	f7fe ffbf 	bl	8003da8 <User_Power_Off>

	if (device_state.switching_state.heating == E_ON)
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e64 <user_set_switch_control+0x58>)
 8004e2c:	7c9b      	ldrb	r3, [r3, #18]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d102      	bne.n	8004e38 <user_set_switch_control+0x2c>
		User_Heating_On();
 8004e32:	f7fe ffc7 	bl	8003dc4 <User_Heating_On>
 8004e36:	e005      	b.n	8004e44 <user_set_switch_control+0x38>
	else if (device_state.switching_state.heating == E_OFF)
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <user_set_switch_control+0x58>)
 8004e3a:	7c9b      	ldrb	r3, [r3, #18]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <user_set_switch_control+0x38>
		User_Heating_Off();
 8004e40:	f7fe ffce 	bl	8003de0 <User_Heating_Off>

	if (device_state.switching_state.fan == E_ON)
 8004e44:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <user_set_switch_control+0x58>)
 8004e46:	7cdb      	ldrb	r3, [r3, #19]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d102      	bne.n	8004e52 <user_set_switch_control+0x46>
		User_Fan_On();
 8004e4c:	f7fe ffd6 	bl	8003dfc <User_Fan_On>
	else if (device_state.switching_state.fan == E_OFF)
		User_Fan_Off();
}
 8004e50:	e005      	b.n	8004e5e <user_set_switch_control+0x52>
	else if (device_state.switching_state.fan == E_OFF)
 8004e52:	4b04      	ldr	r3, [pc, #16]	@ (8004e64 <user_set_switch_control+0x58>)
 8004e54:	7cdb      	ldrb	r3, [r3, #19]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <user_set_switch_control+0x52>
		User_Fan_Off();
 8004e5a:	f7fe ffdd 	bl	8003e18 <User_Fan_Off>
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200003c0 	.word	0x200003c0

08004e68 <user_set_led_status>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void user_set_led_status(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	if (device_state.mode == E_NORMAL_MODE)
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <user_set_led_status+0x34>)
 8004e6e:	7c1b      	ldrb	r3, [r3, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <user_set_led_status+0x1a>
	{
		User_Led_Green_On();
 8004e74:	f7fe ffde 	bl	8003e34 <User_Led_Green_On>
		User_Led_Blue_Off();
 8004e78:	f7ff f814 	bl	8003ea4 <User_Led_Blue_Off>
		User_Led_Red_Off();
 8004e7c:	f7fe fff6 	bl	8003e6c <User_Led_Red_Off>
	{
		User_Led_Blue_On();
		User_Led_Red_Off();
		User_Led_Green_Off();
	}
}
 8004e80:	e009      	b.n	8004e96 <user_set_led_status+0x2e>
	else if (device_state.mode == E_SAVE_MODE)
 8004e82:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <user_set_led_status+0x34>)
 8004e84:	7c1b      	ldrb	r3, [r3, #16]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <user_set_led_status+0x2e>
		User_Led_Blue_On();
 8004e8a:	f7fe fffd 	bl	8003e88 <User_Led_Blue_On>
		User_Led_Red_Off();
 8004e8e:	f7fe ffed 	bl	8003e6c <User_Led_Red_Off>
		User_Led_Green_Off();
 8004e92:	f7fe ffdd 	bl	8003e50 <User_Led_Green_Off>
}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	200003c0 	.word	0x200003c0

08004ea0 <user_get_tem_pcb_start>:
* Description  :
* Arguments    : none
* Return Value : none
***********************************************************************************************************************/
static void user_get_tem_pcb_start(void)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
	unsigned char buffer[20] = {0};
 8004ea6:	003b      	movs	r3, r7
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2210      	movs	r2, #16
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f004 fb9b 	bl	80095ee <memset>
	float cel = SHT2x_GetTemperature(1);
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f7ff fc69 	bl	8004790 <SHT2x_GetTemperature>
 8004ebe:	1c03      	adds	r3, r0, #0
 8004ec0:	617b      	str	r3, [r7, #20]
	device_state.temperature_pcb = cel;
 8004ec2:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <user_get_tem_pcb_start+0x74>)
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "%d.%dºC", SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1));
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	1c18      	adds	r0, r3, #0
 8004ecc:	f7ff fd46 	bl	800495c <SHT2x_GetInteger>
 8004ed0:	0004      	movs	r4, r0
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	1c18      	adds	r0, r3, #0
 8004ed8:	f7ff fd4c 	bl	8004974 <SHT2x_GetDecimal>
 8004edc:	0003      	movs	r3, r0
 8004ede:	490e      	ldr	r1, [pc, #56]	@ (8004f18 <user_get_tem_pcb_start+0x78>)
 8004ee0:	0038      	movs	r0, r7
 8004ee2:	0022      	movs	r2, r4
 8004ee4:	f004 fb2e 	bl	8009544 <siprintf>
	APP_LOGD("device read temp start = %s", buffer);
 8004ee8:	23a2      	movs	r3, #162	@ 0xa2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4a0b      	ldr	r2, [pc, #44]	@ (8004f1c <user_get_tem_pcb_start+0x7c>)
 8004eee:	490c      	ldr	r1, [pc, #48]	@ (8004f20 <user_get_tem_pcb_start+0x80>)
 8004ef0:	480c      	ldr	r0, [pc, #48]	@ (8004f24 <user_get_tem_pcb_start+0x84>)
 8004ef2:	f7ff fb65 	bl	80045c0 <uart_debug_printf>
 8004ef6:	003a      	movs	r2, r7
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <user_get_tem_pcb_start+0x88>)
 8004efa:	0011      	movs	r1, r2
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7ff fb5f 	bl	80045c0 <uart_debug_printf>
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <user_get_tem_pcb_start+0x8c>)
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7ff fb5b 	bl	80045c0 <uart_debug_printf>
}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b007      	add	sp, #28
 8004f10:	bd90      	pop	{r4, r7, pc}
 8004f12:	46c0      	nop			@ (mov r8, r8)
 8004f14:	200003c0 	.word	0x200003c0
 8004f18:	0800a0cc 	.word	0x0800a0cc
 8004f1c:	0800a28c 	.word	0x0800a28c
 8004f20:	0800a0d8 	.word	0x0800a0d8
 8004f24:	08009ff4 	.word	0x08009ff4
 8004f28:	0800a0dc 	.word	0x0800a0dc
 8004f2c:	0800a018 	.word	0x0800a018

08004f30 <user_sht20_test>:
 * Arguments    : none
 * Return Value : none
 ***********************************************************************************************************************/

static void user_sht20_test(void)
{
 8004f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f32:	46de      	mov	lr, fp
 8004f34:	4657      	mov	r7, sl
 8004f36:	464e      	mov	r6, r9
 8004f38:	4645      	mov	r5, r8
 8004f3a:	b5e0      	push	{r5, r6, r7, lr}
 8004f3c:	b0a5      	sub	sp, #148	@ 0x94
 8004f3e:	af06      	add	r7, sp, #24
	unsigned char buffer[100] = {0};
 8004f40:	1d3b      	adds	r3, r7, #4
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	3304      	adds	r3, #4
 8004f48:	2260      	movs	r2, #96	@ 0x60
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f004 fb4e 	bl	80095ee <memset>
	/* Gets current temperature & relative humidity. */
	float cel = SHT2x_GetTemperature(1);
 8004f52:	2001      	movs	r0, #1
 8004f54:	f7ff fc1c 	bl	8004790 <SHT2x_GetTemperature>
 8004f58:	1c03      	adds	r3, r0, #0
 8004f5a:	677b      	str	r3, [r7, #116]	@ 0x74
	device_state.temperature_pcb = cel;
 8004f5c:	4b32      	ldr	r3, [pc, #200]	@ (8005028 <user_sht20_test+0xf8>)
 8004f5e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f60:	601a      	str	r2, [r3, #0]
	/* Converts temperature to degrees Fahrenheit and Kelvin */
	float fah = SHT2x_CelsiusToFahrenheit(cel);
 8004f62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f64:	1c18      	adds	r0, r3, #0
 8004f66:	f7ff fcc5 	bl	80048f4 <SHT2x_CelsiusToFahrenheit>
 8004f6a:	1c03      	adds	r3, r0, #0
 8004f6c:	673b      	str	r3, [r7, #112]	@ 0x70
	float kel = SHT2x_CelsiusToKelvin(cel);
 8004f6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f70:	1c18      	adds	r0, r3, #0
 8004f72:	f7ff fce3 	bl	800493c <SHT2x_CelsiusToKelvin>
 8004f76:	1c03      	adds	r3, r0, #0
 8004f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float rh = SHT2x_GetRelativeHumidity(1);
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7ff fc4a 	bl	8004814 <SHT2x_GetRelativeHumidity>
 8004f80:	1c03      	adds	r3, r0, #0
 8004f82:	66bb      	str	r3, [r7, #104]	@ 0x68
	/* May show warning below. Ignore and proceed. */
	sprintf(buffer,
 8004f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f86:	1c18      	adds	r0, r3, #0
 8004f88:	f7ff fce8 	bl	800495c <SHT2x_GetInteger>
 8004f8c:	4682      	mov	sl, r0
 8004f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f90:	2101      	movs	r1, #1
 8004f92:	1c18      	adds	r0, r3, #0
 8004f94:	f7ff fcee 	bl	8004974 <SHT2x_GetDecimal>
 8004f98:	4683      	mov	fp, r0
 8004f9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f9c:	1c18      	adds	r0, r3, #0
 8004f9e:	f7ff fcdd 	bl	800495c <SHT2x_GetInteger>
 8004fa2:	0004      	movs	r4, r0
 8004fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	1c18      	adds	r0, r3, #0
 8004faa:	f7ff fce3 	bl	8004974 <SHT2x_GetDecimal>
 8004fae:	0005      	movs	r5, r0
 8004fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fb2:	1c18      	adds	r0, r3, #0
 8004fb4:	f7ff fcd2 	bl	800495c <SHT2x_GetInteger>
 8004fb8:	0006      	movs	r6, r0
 8004fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	1c18      	adds	r0, r3, #0
 8004fc0:	f7ff fcd8 	bl	8004974 <SHT2x_GetDecimal>
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fc8:	1c18      	adds	r0, r3, #0
 8004fca:	f7ff fcc7 	bl	800495c <SHT2x_GetInteger>
 8004fce:	4681      	mov	r9, r0
 8004fd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	1c18      	adds	r0, r3, #0
 8004fd6:	f7ff fccd 	bl	8004974 <SHT2x_GetDecimal>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	4913      	ldr	r1, [pc, #76]	@ (800502c <user_sht20_test+0xfc>)
 8004fde:	1d38      	adds	r0, r7, #4
 8004fe0:	9305      	str	r3, [sp, #20]
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	4643      	mov	r3, r8
 8004fe8:	9303      	str	r3, [sp, #12]
 8004fea:	9602      	str	r6, [sp, #8]
 8004fec:	9501      	str	r5, [sp, #4]
 8004fee:	9400      	str	r4, [sp, #0]
 8004ff0:	465b      	mov	r3, fp
 8004ff2:	4652      	mov	r2, sl
 8004ff4:	f004 faa6 	bl	8009544 <siprintf>
			"%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH",
			SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
			SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
			SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
			SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
	APP_LOGD(buffer);
 8004ff8:	23af      	movs	r3, #175	@ 0xaf
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8005030 <user_sht20_test+0x100>)
 8004ffe:	490d      	ldr	r1, [pc, #52]	@ (8005034 <user_sht20_test+0x104>)
 8005000:	480d      	ldr	r0, [pc, #52]	@ (8005038 <user_sht20_test+0x108>)
 8005002:	f7ff fadd 	bl	80045c0 <uart_debug_printf>
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	0018      	movs	r0, r3
 800500a:	f7ff fad9 	bl	80045c0 <uart_debug_printf>
 800500e:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <user_sht20_test+0x10c>)
 8005010:	0018      	movs	r0, r3
 8005012:	f7ff fad5 	bl	80045c0 <uart_debug_printf>
}
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b01f      	add	sp, #124	@ 0x7c
 800501c:	bcf0      	pop	{r4, r5, r6, r7}
 800501e:	46bb      	mov	fp, r7
 8005020:	46b2      	mov	sl, r6
 8005022:	46a9      	mov	r9, r5
 8005024:	46a0      	mov	r8, r4
 8005026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005028:	200003c0 	.word	0x200003c0
 800502c:	0800a0f8 	.word	0x0800a0f8
 8005030:	0800a2a4 	.word	0x0800a2a4
 8005034:	0800a0d8 	.word	0x0800a0d8
 8005038:	08009ff4 	.word	0x08009ff4
 800503c:	0800a018 	.word	0x0800a018

08005040 <charger_get_state>:
 * Description  :
 * Arguments    : none
 * Return Value : none
 ***********************************************************************************************************************/
void charger_get_state(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	device_state.charger_status = driver_charger_status();
 8005044:	f7fe fe70 	bl	8003d28 <driver_charger_status>
 8005048:	0003      	movs	r3, r0
 800504a:	001a      	movs	r2, r3
 800504c:	4b02      	ldr	r3, [pc, #8]	@ (8005058 <charger_get_state+0x18>)
 800504e:	73da      	strb	r2, [r3, #15]
}
 8005050:	46c0      	nop			@ (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	200003c0 	.word	0x200003c0

0800505c <DC1_In_Volt>:
*/
#define kVDC1_IN_R_CONST_01    100 // kOmh
#define kVDC1_IN_R_CONST_02    10 // kOmh

uint16_t DC1_In_Volt(void)
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
	float dc1_value = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]
	uint16_t u16DC1 = 0;
 8005066:	1cbb      	adds	r3, r7, #2
 8005068:	2200      	movs	r2, #0
 800506a:	801a      	strh	r2, [r3, #0]
	dc1_value = (adc_get_sample()[0] * kADC_SENSOR_SCALE) * ((kVDC1_IN_R_CONST_01+kVDC1_IN_R_CONST_02) / kVDC1_IN_R_CONST_02);
 800506c:	f7ff f86a 	bl	8004144 <adc_get_sample>
 8005070:	0003      	movs	r3, r0
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	0018      	movs	r0, r3
 8005076:	f7fc f8bb 	bl	80011f0 <__aeabi_i2f>
 800507a:	1c03      	adds	r3, r0, #0
 800507c:	4910      	ldr	r1, [pc, #64]	@ (80050c0 <DC1_In_Volt+0x64>)
 800507e:	1c18      	adds	r0, r3, #0
 8005080:	f7fb fdb4 	bl	8000bec <__aeabi_fmul>
 8005084:	1c03      	adds	r3, r0, #0
 8005086:	490f      	ldr	r1, [pc, #60]	@ (80050c4 <DC1_In_Volt+0x68>)
 8005088:	1c18      	adds	r0, r3, #0
 800508a:	f7fb fdaf 	bl	8000bec <__aeabi_fmul>
 800508e:	1c03      	adds	r3, r0, #0
 8005090:	607b      	str	r3, [r7, #4]
	u16DC1 = (dc1_value / 10)*10;
 8005092:	490d      	ldr	r1, [pc, #52]	@ (80050c8 <DC1_In_Volt+0x6c>)
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fb fbc3 	bl	8000820 <__aeabi_fdiv>
 800509a:	1c03      	adds	r3, r0, #0
 800509c:	490a      	ldr	r1, [pc, #40]	@ (80050c8 <DC1_In_Volt+0x6c>)
 800509e:	1c18      	adds	r0, r3, #0
 80050a0:	f7fb fda4 	bl	8000bec <__aeabi_fmul>
 80050a4:	1c03      	adds	r3, r0, #0
 80050a6:	1cbc      	adds	r4, r7, #2
 80050a8:	1c18      	adds	r0, r3, #0
 80050aa:	f7fb f94b 	bl	8000344 <__aeabi_f2uiz>
 80050ae:	0003      	movs	r3, r0
 80050b0:	8023      	strh	r3, [r4, #0]
	return u16DC1;
 80050b2:	1cbb      	adds	r3, r7, #2
 80050b4:	881b      	ldrh	r3, [r3, #0]
}
 80050b6:	0018      	movs	r0, r3
 80050b8:	46bd      	mov	sp, r7
 80050ba:	b003      	add	sp, #12
 80050bc:	bd90      	pop	{r4, r7, pc}
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	3f4e4ce5 	.word	0x3f4e4ce5
 80050c4:	41300000 	.word	0x41300000
 80050c8:	41200000 	.word	0x41200000

080050cc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050d2:	1dfb      	adds	r3, r7, #7
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80050d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005108 <HAL_Init+0x3c>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <HAL_Init+0x3c>)
 80050de:	2140      	movs	r1, #64	@ 0x40
 80050e0:	430a      	orrs	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050e4:	2000      	movs	r0, #0
 80050e6:	f000 f811 	bl	800510c <HAL_InitTick>
 80050ea:	1e03      	subs	r3, r0, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80050ee:	1dfb      	adds	r3, r7, #7
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	e001      	b.n	80050fa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80050f6:	f7fe fb77 	bl	80037e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050fa:	1dfb      	adds	r3, r7, #7
 80050fc:	781b      	ldrb	r3, [r3, #0]
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b002      	add	sp, #8
 8005104:	bd80      	pop	{r7, pc}
 8005106:	46c0      	nop			@ (mov r8, r8)
 8005108:	40022000 	.word	0x40022000

0800510c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005114:	4b14      	ldr	r3, [pc, #80]	@ (8005168 <HAL_InitTick+0x5c>)
 8005116:	681c      	ldr	r4, [r3, #0]
 8005118:	4b14      	ldr	r3, [pc, #80]	@ (800516c <HAL_InitTick+0x60>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	0019      	movs	r1, r3
 800511e:	23fa      	movs	r3, #250	@ 0xfa
 8005120:	0098      	lsls	r0, r3, #2
 8005122:	f7fa fffb 	bl	800011c <__udivsi3>
 8005126:	0003      	movs	r3, r0
 8005128:	0019      	movs	r1, r3
 800512a:	0020      	movs	r0, r4
 800512c:	f7fa fff6 	bl	800011c <__udivsi3>
 8005130:	0003      	movs	r3, r0
 8005132:	0018      	movs	r0, r3
 8005134:	f000 fc9b 	bl	8005a6e <HAL_SYSTICK_Config>
 8005138:	1e03      	subs	r3, r0, #0
 800513a:	d001      	beq.n	8005140 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e00f      	b.n	8005160 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d80b      	bhi.n	800515e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	2301      	movs	r3, #1
 800514a:	425b      	negs	r3, r3
 800514c:	2200      	movs	r2, #0
 800514e:	0018      	movs	r0, r3
 8005150:	f000 fc68 	bl	8005a24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <HAL_InitTick+0x64>)
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e000      	b.n	8005160 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b003      	add	sp, #12
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	20000000 	.word	0x20000000
 800516c:	2000000c 	.word	0x2000000c
 8005170:	20000008 	.word	0x20000008

08005174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005178:	4b05      	ldr	r3, [pc, #20]	@ (8005190 <HAL_IncTick+0x1c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	001a      	movs	r2, r3
 800517e:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <HAL_IncTick+0x20>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	18d2      	adds	r2, r2, r3
 8005184:	4b03      	ldr	r3, [pc, #12]	@ (8005194 <HAL_IncTick+0x20>)
 8005186:	601a      	str	r2, [r3, #0]
}
 8005188:	46c0      	nop			@ (mov r8, r8)
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	2000000c 	.word	0x2000000c
 8005194:	20000448 	.word	0x20000448

08005198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  return uwTick;
 800519c:	4b02      	ldr	r3, [pc, #8]	@ (80051a8 <HAL_GetTick+0x10>)
 800519e:	681b      	ldr	r3, [r3, #0]
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			@ (mov r8, r8)
 80051a8:	20000448 	.word	0x20000448

080051ac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e159      	b.n	8005472 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	659a      	str	r2, [r3, #88]	@ 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2250      	movs	r2, #80	@ 0x50
 80051d0:	2100      	movs	r1, #0
 80051d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	0018      	movs	r0, r3
 80051d8:	f7fe fb1a 	bl	8003810 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e0:	2210      	movs	r2, #16
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d005      	beq.n	80051f4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2204      	movs	r2, #4
 80051f0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80051f2:	d00b      	beq.n	800520c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f8:	2210      	movs	r2, #16
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2250      	movs	r2, #80	@ 0x50
 8005204:	2100      	movs	r1, #0
 8005206:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e132      	b.n	8005472 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005210:	4a9a      	ldr	r2, [pc, #616]	@ (800547c <HAL_ADC_Init+0x2d0>)
 8005212:	4013      	ands	r3, r2
 8005214:	2202      	movs	r2, #2
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2203      	movs	r2, #3
 8005224:	4013      	ands	r3, r2
 8005226:	2b01      	cmp	r3, #1
 8005228:	d108      	bne.n	800523c <HAL_ADC_Init+0x90>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2201      	movs	r2, #1
 8005232:	4013      	ands	r3, r2
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_ADC_Init+0x90>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_ADC_Init+0x92>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d149      	bne.n	80052d6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	23c0      	movs	r3, #192	@ 0xc0
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	429a      	cmp	r2, r3
 800524c:	d00b      	beq.n	8005266 <HAL_ADC_Init+0xba>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	05db      	lsls	r3, r3, #23
 8005256:	429a      	cmp	r2, r3
 8005258:	d005      	beq.n	8005266 <HAL_ADC_Init+0xba>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	2380      	movs	r3, #128	@ 0x80
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	429a      	cmp	r2, r3
 8005264:	d111      	bne.n	800528a <HAL_ADC_Init+0xde>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	0092      	lsls	r2, r2, #2
 8005272:	0892      	lsrs	r2, r2, #2
 8005274:	611a      	str	r2, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6919      	ldr	r1, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	611a      	str	r2, [r3, #16]
 8005288:	e014      	b.n	80052b4 <HAL_ADC_Init+0x108>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	0092      	lsls	r2, r2, #2
 8005296:	0892      	lsrs	r2, r2, #2
 8005298:	611a      	str	r2, [r3, #16]
 800529a:	4b79      	ldr	r3, [pc, #484]	@ (8005480 <HAL_ADC_Init+0x2d4>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b78      	ldr	r3, [pc, #480]	@ (8005480 <HAL_ADC_Init+0x2d4>)
 80052a0:	4978      	ldr	r1, [pc, #480]	@ (8005484 <HAL_ADC_Init+0x2d8>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	4b76      	ldr	r3, [pc, #472]	@ (8005480 <HAL_ADC_Init+0x2d4>)
 80052a8:	6819      	ldr	r1, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4b74      	ldr	r3, [pc, #464]	@ (8005480 <HAL_ADC_Init+0x2d4>)
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2118      	movs	r1, #24
 80052c0:	438a      	bics	r2, r1
 80052c2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68d9      	ldr	r1, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80052d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005480 <HAL_ADC_Init+0x2d4>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b69      	ldr	r3, [pc, #420]	@ (8005480 <HAL_ADC_Init+0x2d4>)
 80052dc:	496a      	ldr	r1, [pc, #424]	@ (8005488 <HAL_ADC_Init+0x2dc>)
 80052de:	400a      	ands	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80052e2:	4b67      	ldr	r3, [pc, #412]	@ (8005480 <HAL_ADC_Init+0x2d4>)
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	065a      	lsls	r2, r3, #25
 80052ec:	4b64      	ldr	r3, [pc, #400]	@ (8005480 <HAL_ADC_Init+0x2d4>)
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	2380      	movs	r3, #128	@ 0x80
 80052fa:	055b      	lsls	r3, r3, #21
 80052fc:	4013      	ands	r3, r2
 80052fe:	d108      	bne.n	8005312 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2180      	movs	r1, #128	@ 0x80
 800530c:	0549      	lsls	r1, r1, #21
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	495b      	ldr	r1, [pc, #364]	@ (800548c <HAL_ADC_Init+0x2e0>)
 800531e:	400a      	ands	r2, r1
 8005320:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68d9      	ldr	r1, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d101      	bne.n	8005338 <HAL_ADC_Init+0x18c>
 8005334:	2304      	movs	r3, #4
 8005336:	e000      	b.n	800533a <HAL_ADC_Init+0x18e>
 8005338:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800533a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2020      	movs	r0, #32
 8005340:	5c1b      	ldrb	r3, [r3, r0]
 8005342:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005344:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	202c      	movs	r0, #44	@ 0x2c
 800534a:	5c1b      	ldrb	r3, [r3, r0]
 800534c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800534e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005354:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800535c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005364:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005372:	23c2      	movs	r3, #194	@ 0xc2
 8005374:	33ff      	adds	r3, #255	@ 0xff
 8005376:	429a      	cmp	r2, r3
 8005378:	d00b      	beq.n	8005392 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68d9      	ldr	r1, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2221      	movs	r2, #33	@ 0x21
 8005396:	5c9b      	ldrb	r3, [r3, r2]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d11a      	bne.n	80053d2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	5c9b      	ldrb	r3, [r3, r2]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2180      	movs	r1, #128	@ 0x80
 80053b2:	0249      	lsls	r1, r1, #9
 80053b4:	430a      	orrs	r2, r1
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	e00b      	b.n	80053d2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	2220      	movs	r2, #32
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ca:	2201      	movs	r2, #1
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d11f      	bne.n	800541a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	492a      	ldr	r1, [pc, #168]	@ (8005490 <HAL_ADC_Init+0x2e4>)
 80053e6:	400a      	ands	r2, r1
 80053e8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6919      	ldr	r1, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80053f8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80053fe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2101      	movs	r1, #1
 8005414:	430a      	orrs	r2, r1
 8005416:	611a      	str	r2, [r3, #16]
 8005418:	e00e      	b.n	8005438 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2201      	movs	r2, #1
 8005422:	4013      	ands	r3, r2
 8005424:	2b01      	cmp	r3, #1
 8005426:	d107      	bne.n	8005438 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2101      	movs	r1, #1
 8005434:	438a      	bics	r2, r1
 8005436:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2107      	movs	r1, #7
 8005444:	438a      	bics	r2, r1
 8005446:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6959      	ldr	r1, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005464:	2203      	movs	r2, #3
 8005466:	4393      	bics	r3, r2
 8005468:	2201      	movs	r2, #1
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	0018      	movs	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	b002      	add	sp, #8
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	fffffefd 	.word	0xfffffefd
 8005480:	40012708 	.word	0x40012708
 8005484:	ffc3ffff 	.word	0xffc3ffff
 8005488:	fdffffff 	.word	0xfdffffff
 800548c:	fffe0219 	.word	0xfffe0219
 8005490:	fffffc03 	.word	0xfffffc03

08005494 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a0:	2317      	movs	r3, #23
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2204      	movs	r2, #4
 80054b0:	4013      	ands	r3, r2
 80054b2:	d15e      	bne.n	8005572 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2250      	movs	r2, #80	@ 0x50
 80054b8:	5c9b      	ldrb	r3, [r3, r2]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_ADC_Start_DMA+0x2e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e05e      	b.n	8005580 <HAL_ADC_Start_DMA+0xec>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2250      	movs	r2, #80	@ 0x50
 80054c6:	2101      	movs	r1, #1
 80054c8:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2101      	movs	r1, #1
 80054d6:	430a      	orrs	r2, r1
 80054d8:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d007      	beq.n	80054f2 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80054e2:	2317      	movs	r3, #23
 80054e4:	18fc      	adds	r4, r7, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 f8eb 	bl	80056c4 <ADC_Enable>
 80054ee:	0003      	movs	r3, r0
 80054f0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80054f2:	2317      	movs	r3, #23
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d13e      	bne.n	800557a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005500:	4a21      	ldr	r2, [pc, #132]	@ (8005588 <HAL_ADC_Start_DMA+0xf4>)
 8005502:	4013      	ands	r3, r2
 8005504:	2280      	movs	r2, #128	@ 0x80
 8005506:	0052      	lsls	r2, r2, #1
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	659a      	str	r2, [r3, #88]	@ 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2250      	movs	r2, #80	@ 0x50
 8005518:	2100      	movs	r1, #0
 800551a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005520:	4a1a      	ldr	r2, [pc, #104]	@ (800558c <HAL_ADC_Start_DMA+0xf8>)
 8005522:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005528:	4a19      	ldr	r2, [pc, #100]	@ (8005590 <HAL_ADC_Start_DMA+0xfc>)
 800552a:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005530:	4a18      	ldr	r2, [pc, #96]	@ (8005594 <HAL_ADC_Start_DMA+0x100>)
 8005532:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	221c      	movs	r2, #28
 800553a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2110      	movs	r1, #16
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3340      	adds	r3, #64	@ 0x40
 8005556:	0019      	movs	r1, r3
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f000 fb0c 	bl	8005b78 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2104      	movs	r1, #4
 800556c:	430a      	orrs	r2, r1
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	e003      	b.n	800557a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005572:	2317      	movs	r3, #23
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	2202      	movs	r2, #2
 8005578:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800557a:	2317      	movs	r3, #23
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	781b      	ldrb	r3, [r3, #0]
}
 8005580:	0018      	movs	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	b007      	add	sp, #28
 8005586:	bd90      	pop	{r4, r7, pc}
 8005588:	fffff0fe 	.word	0xfffff0fe
 800558c:	08005785 	.word	0x08005785
 8005590:	08005839 	.word	0x08005839
 8005594:	08005857 	.word	0x08005857

08005598 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055a0:	46c0      	nop			@ (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055b0:	46c0      	nop			@ (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2250      	movs	r2, #80	@ 0x50
 80055c6:	5c9b      	ldrb	r3, [r3, r2]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e06c      	b.n	80056aa <HAL_ADC_ConfigChannel+0xf2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2250      	movs	r2, #80	@ 0x50
 80055d4:	2101      	movs	r1, #1
 80055d6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2204      	movs	r2, #4
 80055e0:	4013      	ands	r3, r2
 80055e2:	d00b      	beq.n	80055fc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e8:	2220      	movs	r2, #32
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2250      	movs	r2, #80	@ 0x50
 80055f4:	2100      	movs	r1, #0
 80055f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e056      	b.n	80056aa <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a2c      	ldr	r2, [pc, #176]	@ (80056b4 <HAL_ADC_ConfigChannel+0xfc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d028      	beq.n	8005658 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	035b      	lsls	r3, r3, #13
 8005612:	0b5a      	lsrs	r2, r3, #13
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2380      	movs	r3, #128	@ 0x80
 8005622:	02db      	lsls	r3, r3, #11
 8005624:	4013      	ands	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8005628:	4b23      	ldr	r3, [pc, #140]	@ (80056b8 <HAL_ADC_ConfigChannel+0x100>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b22      	ldr	r3, [pc, #136]	@ (80056b8 <HAL_ADC_ConfigChannel+0x100>)
 800562e:	2180      	movs	r1, #128	@ 0x80
 8005630:	0409      	lsls	r1, r1, #16
 8005632:	430a      	orrs	r2, r1
 8005634:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005636:	200a      	movs	r0, #10
 8005638:	f000 f928 	bl	800588c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	2380      	movs	r3, #128	@ 0x80
 8005642:	029b      	lsls	r3, r3, #10
 8005644:	4013      	ands	r3, r2
 8005646:	d02b      	beq.n	80056a0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005648:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <HAL_ADC_ConfigChannel+0x100>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b1a      	ldr	r3, [pc, #104]	@ (80056b8 <HAL_ADC_ConfigChannel+0x100>)
 800564e:	2180      	movs	r1, #128	@ 0x80
 8005650:	03c9      	lsls	r1, r1, #15
 8005652:	430a      	orrs	r2, r1
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e023      	b.n	80056a0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	035b      	lsls	r3, r3, #13
 8005664:	0b5b      	lsrs	r3, r3, #13
 8005666:	43d9      	mvns	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	400a      	ands	r2, r1
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	2380      	movs	r3, #128	@ 0x80
 8005676:	02db      	lsls	r3, r3, #11
 8005678:	4013      	ands	r3, r2
 800567a:	d005      	beq.n	8005688 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800567c:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <HAL_ADC_ConfigChannel+0x100>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <HAL_ADC_ConfigChannel+0x100>)
 8005682:	490e      	ldr	r1, [pc, #56]	@ (80056bc <HAL_ADC_ConfigChannel+0x104>)
 8005684:	400a      	ands	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	2380      	movs	r3, #128	@ 0x80
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	4013      	ands	r3, r2
 8005692:	d005      	beq.n	80056a0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005694:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <HAL_ADC_ConfigChannel+0x100>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <HAL_ADC_ConfigChannel+0x100>)
 800569a:	4909      	ldr	r1, [pc, #36]	@ (80056c0 <HAL_ADC_ConfigChannel+0x108>)
 800569c:	400a      	ands	r2, r1
 800569e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2250      	movs	r2, #80	@ 0x50
 80056a4:	2100      	movs	r1, #0
 80056a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b002      	add	sp, #8
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	00001001 	.word	0x00001001
 80056b8:	40012708 	.word	0x40012708
 80056bc:	ff7fffff 	.word	0xff7fffff
 80056c0:	ffbfffff 	.word	0xffbfffff

080056c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2203      	movs	r2, #3
 80056d8:	4013      	ands	r3, r2
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d108      	bne.n	80056f0 <ADC_Enable+0x2c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <ADC_Enable+0x2c>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <ADC_Enable+0x2e>
 80056f0:	2300      	movs	r3, #0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d13f      	bne.n	8005776 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a20      	ldr	r2, [pc, #128]	@ (8005780 <ADC_Enable+0xbc>)
 80056fe:	4013      	ands	r3, r2
 8005700:	d00d      	beq.n	800571e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005706:	2210      	movs	r2, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005712:	2201      	movs	r2, #1
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	659a      	str	r2, [r3, #88]	@ 0x58
      
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e02c      	b.n	8005778 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	430a      	orrs	r2, r1
 800572c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800572e:	2001      	movs	r0, #1
 8005730:	f000 f8ac 	bl	800588c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005734:	f7ff fd30 	bl	8005198 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800573c:	e014      	b.n	8005768 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800573e:	f7ff fd2b 	bl	8005198 <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b0a      	cmp	r3, #10
 800574a:	d90d      	bls.n	8005768 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005750:	2210      	movs	r2, #16
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575c:	2201      	movs	r2, #1
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	659a      	str	r2, [r3, #88]	@ 0x58
        
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e007      	b.n	8005778 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	4013      	ands	r3, r2
 8005772:	2b01      	cmp	r3, #1
 8005774:	d1e3      	bne.n	800573e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b004      	add	sp, #16
 800577e:	bd80      	pop	{r7, pc}
 8005780:	80000017 	.word	0x80000017

08005784 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005796:	2250      	movs	r2, #80	@ 0x50
 8005798:	4013      	ands	r3, r2
 800579a:	d141      	bne.n	8005820 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a0:	2280      	movs	r2, #128	@ 0x80
 80057a2:	0092      	lsls	r2, r2, #2
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	23c0      	movs	r3, #192	@ 0xc0
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	4013      	ands	r3, r2
 80057b6:	d12e      	bne.n	8005816 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d129      	bne.n	8005816 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2208      	movs	r2, #8
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d122      	bne.n	8005816 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2204      	movs	r2, #4
 80057d8:	4013      	ands	r3, r2
 80057da:	d110      	bne.n	80057fe <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	210c      	movs	r1, #12
 80057e8:	438a      	bics	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f0:	4a10      	ldr	r2, [pc, #64]	@ (8005834 <ADC_DMAConvCplt+0xb0>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	2201      	movs	r2, #1
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80057fc:	e00b      	b.n	8005816 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	2220      	movs	r2, #32
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580e:	2201      	movs	r2, #1
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	0018      	movs	r0, r3
 800581a:	f7fe fc4d 	bl	80040b8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800581e:	e005      	b.n	800582c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	0010      	movs	r0, r2
 800582a:	4798      	blx	r3
}
 800582c:	46c0      	nop			@ (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b004      	add	sp, #16
 8005832:	bd80      	pop	{r7, pc}
 8005834:	fffffefe 	.word	0xfffffefe

08005838 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005844:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	0018      	movs	r0, r3
 800584a:	f7ff fea5 	bl	8005598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	46bd      	mov	sp, r7
 8005852:	b004      	add	sp, #16
 8005854:	bd80      	pop	{r7, pc}

08005856 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005868:	2240      	movs	r2, #64	@ 0x40
 800586a:	431a      	orrs	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005874:	2204      	movs	r2, #4
 8005876:	431a      	orrs	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	659a      	str	r2, [r3, #88]	@ 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	0018      	movs	r0, r3
 8005880:	f7ff fe92 	bl	80055a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005884:	46c0      	nop			@ (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b004      	add	sp, #16
 800588a:	bd80      	pop	{r7, pc}

0800588c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005894:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <ADC_DelayMicroSecond+0x38>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	490b      	ldr	r1, [pc, #44]	@ (80058c8 <ADC_DelayMicroSecond+0x3c>)
 800589a:	0018      	movs	r0, r3
 800589c:	f7fa fc3e 	bl	800011c <__udivsi3>
 80058a0:	0003      	movs	r3, r0
 80058a2:	001a      	movs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4353      	muls	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80058aa:	e002      	b.n	80058b2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f9      	bne.n	80058ac <ADC_DelayMicroSecond+0x20>
  } 
}
 80058b8:	46c0      	nop			@ (mov r8, r8)
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b004      	add	sp, #16
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	20000000 	.word	0x20000000
 80058c8:	000f4240 	.word	0x000f4240

080058cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	0002      	movs	r2, r0
 80058d4:	1dfb      	adds	r3, r7, #7
 80058d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80058d8:	1dfb      	adds	r3, r7, #7
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80058de:	d809      	bhi.n	80058f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058e0:	1dfb      	adds	r3, r7, #7
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	001a      	movs	r2, r3
 80058e6:	231f      	movs	r3, #31
 80058e8:	401a      	ands	r2, r3
 80058ea:	4b04      	ldr	r3, [pc, #16]	@ (80058fc <__NVIC_EnableIRQ+0x30>)
 80058ec:	2101      	movs	r1, #1
 80058ee:	4091      	lsls	r1, r2
 80058f0:	000a      	movs	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
  }
}
 80058f4:	46c0      	nop			@ (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	e000e100 	.word	0xe000e100

08005900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	0002      	movs	r2, r0
 8005908:	6039      	str	r1, [r7, #0]
 800590a:	1dfb      	adds	r3, r7, #7
 800590c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800590e:	1dfb      	adds	r3, r7, #7
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b7f      	cmp	r3, #127	@ 0x7f
 8005914:	d828      	bhi.n	8005968 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005916:	4a2f      	ldr	r2, [pc, #188]	@ (80059d4 <__NVIC_SetPriority+0xd4>)
 8005918:	1dfb      	adds	r3, r7, #7
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	b25b      	sxtb	r3, r3
 800591e:	089b      	lsrs	r3, r3, #2
 8005920:	33c0      	adds	r3, #192	@ 0xc0
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	589b      	ldr	r3, [r3, r2]
 8005926:	1dfa      	adds	r2, r7, #7
 8005928:	7812      	ldrb	r2, [r2, #0]
 800592a:	0011      	movs	r1, r2
 800592c:	2203      	movs	r2, #3
 800592e:	400a      	ands	r2, r1
 8005930:	00d2      	lsls	r2, r2, #3
 8005932:	21ff      	movs	r1, #255	@ 0xff
 8005934:	4091      	lsls	r1, r2
 8005936:	000a      	movs	r2, r1
 8005938:	43d2      	mvns	r2, r2
 800593a:	401a      	ands	r2, r3
 800593c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	019b      	lsls	r3, r3, #6
 8005942:	22ff      	movs	r2, #255	@ 0xff
 8005944:	401a      	ands	r2, r3
 8005946:	1dfb      	adds	r3, r7, #7
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	0018      	movs	r0, r3
 800594c:	2303      	movs	r3, #3
 800594e:	4003      	ands	r3, r0
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005954:	481f      	ldr	r0, [pc, #124]	@ (80059d4 <__NVIC_SetPriority+0xd4>)
 8005956:	1dfb      	adds	r3, r7, #7
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b25b      	sxtb	r3, r3
 800595c:	089b      	lsrs	r3, r3, #2
 800595e:	430a      	orrs	r2, r1
 8005960:	33c0      	adds	r3, #192	@ 0xc0
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005966:	e031      	b.n	80059cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005968:	4a1b      	ldr	r2, [pc, #108]	@ (80059d8 <__NVIC_SetPriority+0xd8>)
 800596a:	1dfb      	adds	r3, r7, #7
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	0019      	movs	r1, r3
 8005970:	230f      	movs	r3, #15
 8005972:	400b      	ands	r3, r1
 8005974:	3b08      	subs	r3, #8
 8005976:	089b      	lsrs	r3, r3, #2
 8005978:	3306      	adds	r3, #6
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	18d3      	adds	r3, r2, r3
 800597e:	3304      	adds	r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	1dfa      	adds	r2, r7, #7
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	0011      	movs	r1, r2
 8005988:	2203      	movs	r2, #3
 800598a:	400a      	ands	r2, r1
 800598c:	00d2      	lsls	r2, r2, #3
 800598e:	21ff      	movs	r1, #255	@ 0xff
 8005990:	4091      	lsls	r1, r2
 8005992:	000a      	movs	r2, r1
 8005994:	43d2      	mvns	r2, r2
 8005996:	401a      	ands	r2, r3
 8005998:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	22ff      	movs	r2, #255	@ 0xff
 80059a0:	401a      	ands	r2, r3
 80059a2:	1dfb      	adds	r3, r7, #7
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	0018      	movs	r0, r3
 80059a8:	2303      	movs	r3, #3
 80059aa:	4003      	ands	r3, r0
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059b0:	4809      	ldr	r0, [pc, #36]	@ (80059d8 <__NVIC_SetPriority+0xd8>)
 80059b2:	1dfb      	adds	r3, r7, #7
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	001c      	movs	r4, r3
 80059b8:	230f      	movs	r3, #15
 80059ba:	4023      	ands	r3, r4
 80059bc:	3b08      	subs	r3, #8
 80059be:	089b      	lsrs	r3, r3, #2
 80059c0:	430a      	orrs	r2, r1
 80059c2:	3306      	adds	r3, #6
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	18c3      	adds	r3, r0, r3
 80059c8:	3304      	adds	r3, #4
 80059ca:	601a      	str	r2, [r3, #0]
}
 80059cc:	46c0      	nop			@ (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b003      	add	sp, #12
 80059d2:	bd90      	pop	{r4, r7, pc}
 80059d4:	e000e100 	.word	0xe000e100
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	2380      	movs	r3, #128	@ 0x80
 80059ea:	045b      	lsls	r3, r3, #17
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d301      	bcc.n	80059f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059f0:	2301      	movs	r3, #1
 80059f2:	e010      	b.n	8005a16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <SysTick_Config+0x44>)
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	3a01      	subs	r2, #1
 80059fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059fc:	2301      	movs	r3, #1
 80059fe:	425b      	negs	r3, r3
 8005a00:	2103      	movs	r1, #3
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7ff ff7c 	bl	8005900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a08:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <SysTick_Config+0x44>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a0e:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <SysTick_Config+0x44>)
 8005a10:	2207      	movs	r2, #7
 8005a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	0018      	movs	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	e000e010 	.word	0xe000e010

08005a24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	210f      	movs	r1, #15
 8005a30:	187b      	adds	r3, r7, r1
 8005a32:	1c02      	adds	r2, r0, #0
 8005a34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	0011      	movs	r1, r2
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7ff ff5d 	bl	8005900 <__NVIC_SetPriority>
}
 8005a46:	46c0      	nop			@ (mov r8, r8)
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b004      	add	sp, #16
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	0002      	movs	r2, r0
 8005a56:	1dfb      	adds	r3, r7, #7
 8005a58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a5a:	1dfb      	adds	r3, r7, #7
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7ff ff33 	bl	80058cc <__NVIC_EnableIRQ>
}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7ff ffaf 	bl	80059dc <SysTick_Config>
 8005a7e:	0003      	movs	r3, r0
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b002      	add	sp, #8
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e061      	b.n	8005b5e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a32      	ldr	r2, [pc, #200]	@ (8005b68 <HAL_DMA_Init+0xe0>)
 8005aa0:	4694      	mov	ip, r2
 8005aa2:	4463      	add	r3, ip
 8005aa4:	2114      	movs	r1, #20
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7fa fb38 	bl	800011c <__udivsi3>
 8005aac:	0003      	movs	r3, r0
 8005aae:	009a      	lsls	r2, r3, #2
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8005b6c <HAL_DMA_Init+0xe4>)
 8005ab8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2225      	movs	r2, #37	@ 0x25
 8005abe:	2102      	movs	r1, #2
 8005ac0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a28      	ldr	r2, [pc, #160]	@ (8005b70 <HAL_DMA_Init+0xe8>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	2380      	movs	r3, #128	@ 0x80
 8005b0e:	01db      	lsls	r3, r3, #7
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d018      	beq.n	8005b46 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b14:	4b17      	ldr	r3, [pc, #92]	@ (8005b74 <HAL_DMA_Init+0xec>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	211c      	movs	r1, #28
 8005b1e:	400b      	ands	r3, r1
 8005b20:	210f      	movs	r1, #15
 8005b22:	4099      	lsls	r1, r3
 8005b24:	000b      	movs	r3, r1
 8005b26:	43d9      	mvns	r1, r3
 8005b28:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <HAL_DMA_Init+0xec>)
 8005b2a:	400a      	ands	r2, r1
 8005b2c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b2e:	4b11      	ldr	r3, [pc, #68]	@ (8005b74 <HAL_DMA_Init+0xec>)
 8005b30:	6819      	ldr	r1, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	201c      	movs	r0, #28
 8005b3c:	4003      	ands	r3, r0
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <HAL_DMA_Init+0xec>)
 8005b42:	430a      	orrs	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2225      	movs	r2, #37	@ 0x25
 8005b50:	2101      	movs	r1, #1
 8005b52:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2224      	movs	r2, #36	@ 0x24
 8005b58:	2100      	movs	r1, #0
 8005b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b004      	add	sp, #16
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	bffdfff8 	.word	0xbffdfff8
 8005b6c:	40020000 	.word	0x40020000
 8005b70:	ffff800f 	.word	0xffff800f
 8005b74:	400200a8 	.word	0x400200a8

08005b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b86:	2317      	movs	r3, #23
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2224      	movs	r2, #36	@ 0x24
 8005b92:	5c9b      	ldrb	r3, [r3, r2]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_DMA_Start_IT+0x24>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e04f      	b.n	8005c3c <HAL_DMA_Start_IT+0xc4>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2224      	movs	r2, #36	@ 0x24
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2225      	movs	r2, #37	@ 0x25
 8005ba8:	5c9b      	ldrb	r3, [r3, r2]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d13a      	bne.n	8005c26 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2225      	movs	r2, #37	@ 0x25
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2101      	movs	r1, #1
 8005bca:	438a      	bics	r2, r1
 8005bcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f96a 	bl	8005eae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	210e      	movs	r1, #14
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e00f      	b.n	8005c14 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2104      	movs	r1, #4
 8005c00:	438a      	bics	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	210a      	movs	r1, #10
 8005c10:	430a      	orrs	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2101      	movs	r1, #1
 8005c20:	430a      	orrs	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	e007      	b.n	8005c36 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2224      	movs	r2, #36	@ 0x24
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c2e:	2317      	movs	r3, #23
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	2202      	movs	r2, #2
 8005c34:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005c36:	2317      	movs	r3, #23
 8005c38:	18fb      	adds	r3, r7, r3
 8005c3a:	781b      	ldrb	r3, [r3, #0]
}
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b006      	add	sp, #24
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4c:	230f      	movs	r3, #15
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2225      	movs	r2, #37	@ 0x25
 8005c58:	5c9b      	ldrb	r3, [r3, r2]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d008      	beq.n	8005c72 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2224      	movs	r2, #36	@ 0x24
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e024      	b.n	8005cbc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	210e      	movs	r1, #14
 8005c7e:	438a      	bics	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	438a      	bics	r2, r1
 8005c90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c96:	221c      	movs	r2, #28
 8005c98:	401a      	ands	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4091      	lsls	r1, r2
 8005ca2:	000a      	movs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2225      	movs	r2, #37	@ 0x25
 8005caa:	2101      	movs	r1, #1
 8005cac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2224      	movs	r2, #36	@ 0x24
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	5499      	strb	r1, [r3, r2]

    return status;
 8005cb6:	230f      	movs	r3, #15
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b004      	add	sp, #16
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ccc:	210f      	movs	r1, #15
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2225      	movs	r2, #37	@ 0x25
 8005cd8:	5c9b      	ldrb	r3, [r3, r2]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d006      	beq.n	8005cee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005ce6:	187b      	adds	r3, r7, r1
 8005ce8:	2201      	movs	r2, #1
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e02a      	b.n	8005d44 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	210e      	movs	r1, #14
 8005cfa:	438a      	bics	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	438a      	bics	r2, r1
 8005d0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d12:	221c      	movs	r2, #28
 8005d14:	401a      	ands	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	4091      	lsls	r1, r2
 8005d1e:	000a      	movs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2225      	movs	r2, #37	@ 0x25
 8005d26:	2101      	movs	r1, #1
 8005d28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2224      	movs	r2, #36	@ 0x24
 8005d2e:	2100      	movs	r1, #0
 8005d30:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	0010      	movs	r0, r2
 8005d42:	4798      	blx	r3
    }
  }
  return status;
 8005d44:	230f      	movs	r3, #15
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	781b      	ldrb	r3, [r3, #0]
}
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b004      	add	sp, #16
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6e:	221c      	movs	r2, #28
 8005d70:	4013      	ands	r3, r2
 8005d72:	2204      	movs	r2, #4
 8005d74:	409a      	lsls	r2, r3
 8005d76:	0013      	movs	r3, r2
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d026      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x7a>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2204      	movs	r2, #4
 8005d82:	4013      	ands	r3, r2
 8005d84:	d022      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d107      	bne.n	8005da2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	438a      	bics	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da6:	221c      	movs	r2, #28
 8005da8:	401a      	ands	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	2104      	movs	r1, #4
 8005db0:	4091      	lsls	r1, r2
 8005db2:	000a      	movs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d100      	bne.n	8005dc0 <HAL_DMA_IRQHandler+0x6e>
 8005dbe:	e071      	b.n	8005ea4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	0010      	movs	r0, r2
 8005dc8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8005dca:	e06b      	b.n	8005ea4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd0:	221c      	movs	r2, #28
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	0013      	movs	r3, r2
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d02d      	beq.n	8005e3c <HAL_DMA_IRQHandler+0xea>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2202      	movs	r2, #2
 8005de4:	4013      	ands	r3, r2
 8005de6:	d029      	beq.n	8005e3c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2220      	movs	r2, #32
 8005df0:	4013      	ands	r3, r2
 8005df2:	d10b      	bne.n	8005e0c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	210a      	movs	r1, #10
 8005e00:	438a      	bics	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2225      	movs	r2, #37	@ 0x25
 8005e08:	2101      	movs	r1, #1
 8005e0a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	221c      	movs	r2, #28
 8005e12:	401a      	ands	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e18:	2102      	movs	r1, #2
 8005e1a:	4091      	lsls	r1, r2
 8005e1c:	000a      	movs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2224      	movs	r2, #36	@ 0x24
 8005e24:	2100      	movs	r1, #0
 8005e26:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d039      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	0010      	movs	r0, r2
 8005e38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e3a:	e033      	b.n	8005ea4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e40:	221c      	movs	r2, #28
 8005e42:	4013      	ands	r3, r2
 8005e44:	2208      	movs	r2, #8
 8005e46:	409a      	lsls	r2, r3
 8005e48:	0013      	movs	r3, r2
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d02a      	beq.n	8005ea6 <HAL_DMA_IRQHandler+0x154>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2208      	movs	r2, #8
 8005e54:	4013      	ands	r3, r2
 8005e56:	d026      	beq.n	8005ea6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	210e      	movs	r1, #14
 8005e64:	438a      	bics	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6c:	221c      	movs	r2, #28
 8005e6e:	401a      	ands	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e74:	2101      	movs	r1, #1
 8005e76:	4091      	lsls	r1, r2
 8005e78:	000a      	movs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2225      	movs	r2, #37	@ 0x25
 8005e86:	2101      	movs	r1, #1
 8005e88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2224      	movs	r2, #36	@ 0x24
 8005e8e:	2100      	movs	r1, #0
 8005e90:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	0010      	movs	r0, r2
 8005ea2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ea4:	46c0      	nop			@ (mov r8, r8)
 8005ea6:	46c0      	nop			@ (mov r8, r8)
}
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b004      	add	sp, #16
 8005eac:	bd80      	pop	{r7, pc}

08005eae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
 8005eba:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec0:	221c      	movs	r2, #28
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	2101      	movs	r1, #1
 8005eca:	4091      	lsls	r1, r2
 8005ecc:	000a      	movs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d108      	bne.n	8005ef2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ef0:	e007      	b.n	8005f02 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	60da      	str	r2, [r3, #12]
}
 8005f02:	46c0      	nop			@ (mov r8, r8)
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b004      	add	sp, #16
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005f22:	e155      	b.n	80061d0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4091      	lsls	r1, r2
 8005f2e:	000a      	movs	r2, r1
 8005f30:	4013      	ands	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d100      	bne.n	8005f3c <HAL_GPIO_Init+0x30>
 8005f3a:	e146      	b.n	80061ca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d00b      	beq.n	8005f5c <HAL_GPIO_Init+0x50>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d007      	beq.n	8005f5c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f50:	2b11      	cmp	r3, #17
 8005f52:	d003      	beq.n	8005f5c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b12      	cmp	r3, #18
 8005f5a:	d130      	bne.n	8005fbe <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	2203      	movs	r2, #3
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	0013      	movs	r3, r2
 8005f6c:	43da      	mvns	r2, r3
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4013      	ands	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	0013      	movs	r3, r2
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f92:	2201      	movs	r2, #1
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	409a      	lsls	r2, r3
 8005f98:	0013      	movs	r3, r2
 8005f9a:	43da      	mvns	r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	091b      	lsrs	r3, r3, #4
 8005fa8:	2201      	movs	r2, #1
 8005faa:	401a      	ands	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	0013      	movs	r3, r2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	2203      	movs	r2, #3
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	0013      	movs	r3, r2
 8005fce:	43da      	mvns	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	409a      	lsls	r2, r3
 8005fe0:	0013      	movs	r3, r2
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d003      	beq.n	8005ffe <HAL_GPIO_Init+0xf2>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b12      	cmp	r3, #18
 8005ffc:	d123      	bne.n	8006046 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	08da      	lsrs	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3208      	adds	r2, #8
 8006006:	0092      	lsls	r2, r2, #2
 8006008:	58d3      	ldr	r3, [r2, r3]
 800600a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2207      	movs	r2, #7
 8006010:	4013      	ands	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	220f      	movs	r2, #15
 8006016:	409a      	lsls	r2, r3
 8006018:	0013      	movs	r3, r2
 800601a:	43da      	mvns	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4013      	ands	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2107      	movs	r1, #7
 800602a:	400b      	ands	r3, r1
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	409a      	lsls	r2, r3
 8006030:	0013      	movs	r3, r2
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	08da      	lsrs	r2, r3, #3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3208      	adds	r2, #8
 8006040:	0092      	lsls	r2, r2, #2
 8006042:	6939      	ldr	r1, [r7, #16]
 8006044:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	2203      	movs	r2, #3
 8006052:	409a      	lsls	r2, r3
 8006054:	0013      	movs	r3, r2
 8006056:	43da      	mvns	r2, r3
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4013      	ands	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2203      	movs	r2, #3
 8006064:	401a      	ands	r2, r3
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	409a      	lsls	r2, r3
 800606c:	0013      	movs	r3, r2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	2380      	movs	r3, #128	@ 0x80
 8006080:	055b      	lsls	r3, r3, #21
 8006082:	4013      	ands	r3, r2
 8006084:	d100      	bne.n	8006088 <HAL_GPIO_Init+0x17c>
 8006086:	e0a0      	b.n	80061ca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006088:	4b57      	ldr	r3, [pc, #348]	@ (80061e8 <HAL_GPIO_Init+0x2dc>)
 800608a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800608c:	4b56      	ldr	r3, [pc, #344]	@ (80061e8 <HAL_GPIO_Init+0x2dc>)
 800608e:	2101      	movs	r1, #1
 8006090:	430a      	orrs	r2, r1
 8006092:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006094:	4a55      	ldr	r2, [pc, #340]	@ (80061ec <HAL_GPIO_Init+0x2e0>)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	089b      	lsrs	r3, r3, #2
 800609a:	3302      	adds	r3, #2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	589b      	ldr	r3, [r3, r2]
 80060a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2203      	movs	r2, #3
 80060a6:	4013      	ands	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	220f      	movs	r2, #15
 80060ac:	409a      	lsls	r2, r3
 80060ae:	0013      	movs	r3, r2
 80060b0:	43da      	mvns	r2, r3
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4013      	ands	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	23a0      	movs	r3, #160	@ 0xa0
 80060bc:	05db      	lsls	r3, r3, #23
 80060be:	429a      	cmp	r2, r3
 80060c0:	d01f      	beq.n	8006102 <HAL_GPIO_Init+0x1f6>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a4a      	ldr	r2, [pc, #296]	@ (80061f0 <HAL_GPIO_Init+0x2e4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d019      	beq.n	80060fe <HAL_GPIO_Init+0x1f2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a49      	ldr	r2, [pc, #292]	@ (80061f4 <HAL_GPIO_Init+0x2e8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_GPIO_Init+0x1ee>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a48      	ldr	r2, [pc, #288]	@ (80061f8 <HAL_GPIO_Init+0x2ec>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00d      	beq.n	80060f6 <HAL_GPIO_Init+0x1ea>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a47      	ldr	r2, [pc, #284]	@ (80061fc <HAL_GPIO_Init+0x2f0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <HAL_GPIO_Init+0x1e6>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a46      	ldr	r2, [pc, #280]	@ (8006200 <HAL_GPIO_Init+0x2f4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <HAL_GPIO_Init+0x1e2>
 80060ea:	2305      	movs	r3, #5
 80060ec:	e00a      	b.n	8006104 <HAL_GPIO_Init+0x1f8>
 80060ee:	2306      	movs	r3, #6
 80060f0:	e008      	b.n	8006104 <HAL_GPIO_Init+0x1f8>
 80060f2:	2304      	movs	r3, #4
 80060f4:	e006      	b.n	8006104 <HAL_GPIO_Init+0x1f8>
 80060f6:	2303      	movs	r3, #3
 80060f8:	e004      	b.n	8006104 <HAL_GPIO_Init+0x1f8>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e002      	b.n	8006104 <HAL_GPIO_Init+0x1f8>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_GPIO_Init+0x1f8>
 8006102:	2300      	movs	r3, #0
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	2103      	movs	r1, #3
 8006108:	400a      	ands	r2, r1
 800610a:	0092      	lsls	r2, r2, #2
 800610c:	4093      	lsls	r3, r2
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006114:	4935      	ldr	r1, [pc, #212]	@ (80061ec <HAL_GPIO_Init+0x2e0>)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	089b      	lsrs	r3, r3, #2
 800611a:	3302      	adds	r3, #2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006122:	4b38      	ldr	r3, [pc, #224]	@ (8006204 <HAL_GPIO_Init+0x2f8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	43da      	mvns	r2, r3
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4013      	ands	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	2380      	movs	r3, #128	@ 0x80
 8006138:	025b      	lsls	r3, r3, #9
 800613a:	4013      	ands	r3, r2
 800613c:	d003      	beq.n	8006146 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006146:	4b2f      	ldr	r3, [pc, #188]	@ (8006204 <HAL_GPIO_Init+0x2f8>)
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800614c:	4b2d      	ldr	r3, [pc, #180]	@ (8006204 <HAL_GPIO_Init+0x2f8>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	43da      	mvns	r2, r3
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4013      	ands	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	029b      	lsls	r3, r3, #10
 8006164:	4013      	ands	r3, r2
 8006166:	d003      	beq.n	8006170 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006170:	4b24      	ldr	r3, [pc, #144]	@ (8006204 <HAL_GPIO_Init+0x2f8>)
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006176:	4b23      	ldr	r3, [pc, #140]	@ (8006204 <HAL_GPIO_Init+0x2f8>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	43da      	mvns	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4013      	ands	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	2380      	movs	r3, #128	@ 0x80
 800618c:	035b      	lsls	r3, r3, #13
 800618e:	4013      	ands	r3, r2
 8006190:	d003      	beq.n	800619a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800619a:	4b1a      	ldr	r3, [pc, #104]	@ (8006204 <HAL_GPIO_Init+0x2f8>)
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80061a0:	4b18      	ldr	r3, [pc, #96]	@ (8006204 <HAL_GPIO_Init+0x2f8>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	43da      	mvns	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4013      	ands	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	039b      	lsls	r3, r3, #14
 80061b8:	4013      	ands	r3, r2
 80061ba:	d003      	beq.n	80061c4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80061c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006204 <HAL_GPIO_Init+0x2f8>)
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	3301      	adds	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	40da      	lsrs	r2, r3
 80061d8:	1e13      	subs	r3, r2, #0
 80061da:	d000      	beq.n	80061de <HAL_GPIO_Init+0x2d2>
 80061dc:	e6a2      	b.n	8005f24 <HAL_GPIO_Init+0x18>
  }
}
 80061de:	46c0      	nop			@ (mov r8, r8)
 80061e0:	46c0      	nop			@ (mov r8, r8)
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b006      	add	sp, #24
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40021000 	.word	0x40021000
 80061ec:	40010000 	.word	0x40010000
 80061f0:	50000400 	.word	0x50000400
 80061f4:	50000800 	.word	0x50000800
 80061f8:	50000c00 	.word	0x50000c00
 80061fc:	50001000 	.word	0x50001000
 8006200:	50001c00 	.word	0x50001c00
 8006204:	40010400 	.word	0x40010400

08006208 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	000a      	movs	r2, r1
 8006212:	1cbb      	adds	r3, r7, #2
 8006214:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	1cba      	adds	r2, r7, #2
 800621c:	8812      	ldrh	r2, [r2, #0]
 800621e:	4013      	ands	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006222:	230f      	movs	r3, #15
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e003      	b.n	8006234 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800622c:	230f      	movs	r3, #15
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006234:	230f      	movs	r3, #15
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	781b      	ldrb	r3, [r3, #0]
}
 800623a:	0018      	movs	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	b004      	add	sp, #16
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	0008      	movs	r0, r1
 800624c:	0011      	movs	r1, r2
 800624e:	1cbb      	adds	r3, r7, #2
 8006250:	1c02      	adds	r2, r0, #0
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	1c7b      	adds	r3, r7, #1
 8006256:	1c0a      	adds	r2, r1, #0
 8006258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800625a:	1c7b      	adds	r3, r7, #1
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006262:	1cbb      	adds	r3, r7, #2
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800626a:	e003      	b.n	8006274 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800626c:	1cbb      	adds	r3, r7, #2
 800626e:	881a      	ldrh	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006274:	46c0      	nop			@ (mov r8, r8)
 8006276:	46bd      	mov	sp, r7
 8006278:	b002      	add	sp, #8
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e082      	b.n	8006394 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2241      	movs	r2, #65	@ 0x41
 8006292:	5c9b      	ldrb	r3, [r3, r2]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d107      	bne.n	80062aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2240      	movs	r2, #64	@ 0x40
 800629e:	2100      	movs	r1, #0
 80062a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7fd fb1f 	bl	80038e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2241      	movs	r2, #65	@ 0x41
 80062ae:	2124      	movs	r1, #36	@ 0x24
 80062b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2101      	movs	r1, #1
 80062be:	438a      	bics	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4934      	ldr	r1, [pc, #208]	@ (800639c <HAL_I2C_Init+0x120>)
 80062cc:	400a      	ands	r2, r1
 80062ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4931      	ldr	r1, [pc, #196]	@ (80063a0 <HAL_I2C_Init+0x124>)
 80062dc:	400a      	ands	r2, r1
 80062de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d108      	bne.n	80062fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2180      	movs	r1, #128	@ 0x80
 80062f2:	0209      	lsls	r1, r1, #8
 80062f4:	430a      	orrs	r2, r1
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	e007      	b.n	800630a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2184      	movs	r1, #132	@ 0x84
 8006304:	0209      	lsls	r1, r1, #8
 8006306:	430a      	orrs	r2, r1
 8006308:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d104      	bne.n	800631c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2280      	movs	r2, #128	@ 0x80
 8006318:	0112      	lsls	r2, r2, #4
 800631a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	491f      	ldr	r1, [pc, #124]	@ (80063a4 <HAL_I2C_Init+0x128>)
 8006328:	430a      	orrs	r2, r1
 800632a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	491a      	ldr	r1, [pc, #104]	@ (80063a0 <HAL_I2C_Init+0x124>)
 8006338:	400a      	ands	r2, r1
 800633a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	431a      	orrs	r2, r3
 8006346:	0011      	movs	r1, r2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	021a      	lsls	r2, r3, #8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69d9      	ldr	r1, [r3, #28]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1a      	ldr	r2, [r3, #32]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2101      	movs	r1, #1
 8006372:	430a      	orrs	r2, r1
 8006374:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2241      	movs	r2, #65	@ 0x41
 8006380:	2120      	movs	r1, #32
 8006382:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2242      	movs	r2, #66	@ 0x42
 800638e:	2100      	movs	r1, #0
 8006390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	b002      	add	sp, #8
 800639a:	bd80      	pop	{r7, pc}
 800639c:	f0ffffff 	.word	0xf0ffffff
 80063a0:	ffff7fff 	.word	0xffff7fff
 80063a4:	02008000 	.word	0x02008000

080063a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b089      	sub	sp, #36	@ 0x24
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	0008      	movs	r0, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	0019      	movs	r1, r3
 80063b6:	230a      	movs	r3, #10
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	1c02      	adds	r2, r0, #0
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	2308      	movs	r3, #8
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	1c0a      	adds	r2, r1, #0
 80063c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2241      	movs	r2, #65	@ 0x41
 80063ca:	5c9b      	ldrb	r3, [r3, r2]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d000      	beq.n	80063d4 <HAL_I2C_Master_Transmit+0x2c>
 80063d2:	e0e7      	b.n	80065a4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2240      	movs	r2, #64	@ 0x40
 80063d8:	5c9b      	ldrb	r3, [r3, r2]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_I2C_Master_Transmit+0x3a>
 80063de:	2302      	movs	r3, #2
 80063e0:	e0e1      	b.n	80065a6 <HAL_I2C_Master_Transmit+0x1fe>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2240      	movs	r2, #64	@ 0x40
 80063e6:	2101      	movs	r1, #1
 80063e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063ea:	f7fe fed5 	bl	8005198 <HAL_GetTick>
 80063ee:	0003      	movs	r3, r0
 80063f0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063f2:	2380      	movs	r3, #128	@ 0x80
 80063f4:	0219      	lsls	r1, r3, #8
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2319      	movs	r3, #25
 80063fe:	2201      	movs	r2, #1
 8006400:	f000 fa04 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0cc      	b.n	80065a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2241      	movs	r2, #65	@ 0x41
 8006410:	2121      	movs	r1, #33	@ 0x21
 8006412:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2242      	movs	r2, #66	@ 0x42
 8006418:	2110      	movs	r1, #16
 800641a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2208      	movs	r2, #8
 800642c:	18ba      	adds	r2, r7, r2
 800642e:	8812      	ldrh	r2, [r2, #0]
 8006430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2bff      	cmp	r3, #255	@ 0xff
 8006440:	d911      	bls.n	8006466 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	22ff      	movs	r2, #255	@ 0xff
 8006446:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800644c:	b2da      	uxtb	r2, r3
 800644e:	2380      	movs	r3, #128	@ 0x80
 8006450:	045c      	lsls	r4, r3, #17
 8006452:	230a      	movs	r3, #10
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	8819      	ldrh	r1, [r3, #0]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	4b55      	ldr	r3, [pc, #340]	@ (80065b0 <HAL_I2C_Master_Transmit+0x208>)
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	0023      	movs	r3, r4
 8006460:	f000 fb60 	bl	8006b24 <I2C_TransferConfig>
 8006464:	e075      	b.n	8006552 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006474:	b2da      	uxtb	r2, r3
 8006476:	2380      	movs	r3, #128	@ 0x80
 8006478:	049c      	lsls	r4, r3, #18
 800647a:	230a      	movs	r3, #10
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	8819      	ldrh	r1, [r3, #0]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	4b4b      	ldr	r3, [pc, #300]	@ (80065b0 <HAL_I2C_Master_Transmit+0x208>)
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	0023      	movs	r3, r4
 8006488:	f000 fb4c 	bl	8006b24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800648c:	e061      	b.n	8006552 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	0018      	movs	r0, r3
 8006496:	f000 f9f8 	bl	800688a <I2C_WaitOnTXISFlagUntilTimeout>
 800649a:	1e03      	subs	r3, r0, #0
 800649c:	d001      	beq.n	80064a2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e081      	b.n	80065a6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d03a      	beq.n	8006552 <HAL_I2C_Master_Transmit+0x1aa>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d136      	bne.n	8006552 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	0013      	movs	r3, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	2180      	movs	r1, #128	@ 0x80
 80064f2:	f000 f98b 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80064f6:	1e03      	subs	r3, r0, #0
 80064f8:	d001      	beq.n	80064fe <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e053      	b.n	80065a6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006502:	b29b      	uxth	r3, r3
 8006504:	2bff      	cmp	r3, #255	@ 0xff
 8006506:	d911      	bls.n	800652c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	22ff      	movs	r2, #255	@ 0xff
 800650c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006512:	b2da      	uxtb	r2, r3
 8006514:	2380      	movs	r3, #128	@ 0x80
 8006516:	045c      	lsls	r4, r3, #17
 8006518:	230a      	movs	r3, #10
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	8819      	ldrh	r1, [r3, #0]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	2300      	movs	r3, #0
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	0023      	movs	r3, r4
 8006526:	f000 fafd 	bl	8006b24 <I2C_TransferConfig>
 800652a:	e012      	b.n	8006552 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800653a:	b2da      	uxtb	r2, r3
 800653c:	2380      	movs	r3, #128	@ 0x80
 800653e:	049c      	lsls	r4, r3, #18
 8006540:	230a      	movs	r3, #10
 8006542:	18fb      	adds	r3, r7, r3
 8006544:	8819      	ldrh	r1, [r3, #0]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	2300      	movs	r3, #0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	0023      	movs	r3, r4
 800654e:	f000 fae9 	bl	8006b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d198      	bne.n	800648e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	0018      	movs	r0, r3
 8006564:	f000 f9d0 	bl	8006908 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006568:	1e03      	subs	r3, r0, #0
 800656a:	d001      	beq.n	8006570 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e01a      	b.n	80065a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2220      	movs	r2, #32
 8006576:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	490c      	ldr	r1, [pc, #48]	@ (80065b4 <HAL_I2C_Master_Transmit+0x20c>)
 8006584:	400a      	ands	r2, r1
 8006586:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2241      	movs	r2, #65	@ 0x41
 800658c:	2120      	movs	r1, #32
 800658e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2242      	movs	r2, #66	@ 0x42
 8006594:	2100      	movs	r1, #0
 8006596:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2240      	movs	r2, #64	@ 0x40
 800659c:	2100      	movs	r1, #0
 800659e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e000      	b.n	80065a6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	0018      	movs	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b007      	add	sp, #28
 80065ac:	bd90      	pop	{r4, r7, pc}
 80065ae:	46c0      	nop			@ (mov r8, r8)
 80065b0:	80002000 	.word	0x80002000
 80065b4:	fe00e800 	.word	0xfe00e800

080065b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b089      	sub	sp, #36	@ 0x24
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	0008      	movs	r0, r1
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	0019      	movs	r1, r3
 80065c6:	230a      	movs	r3, #10
 80065c8:	18fb      	adds	r3, r7, r3
 80065ca:	1c02      	adds	r2, r0, #0
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	2308      	movs	r3, #8
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	1c0a      	adds	r2, r1, #0
 80065d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2241      	movs	r2, #65	@ 0x41
 80065da:	5c9b      	ldrb	r3, [r3, r2]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d000      	beq.n	80065e4 <HAL_I2C_Master_Receive+0x2c>
 80065e2:	e0e8      	b.n	80067b6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2240      	movs	r2, #64	@ 0x40
 80065e8:	5c9b      	ldrb	r3, [r3, r2]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_I2C_Master_Receive+0x3a>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e0e2      	b.n	80067b8 <HAL_I2C_Master_Receive+0x200>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2240      	movs	r2, #64	@ 0x40
 80065f6:	2101      	movs	r1, #1
 80065f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065fa:	f7fe fdcd 	bl	8005198 <HAL_GetTick>
 80065fe:	0003      	movs	r3, r0
 8006600:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	0219      	lsls	r1, r3, #8
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	2319      	movs	r3, #25
 800660e:	2201      	movs	r2, #1
 8006610:	f000 f8fc 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006614:	1e03      	subs	r3, r0, #0
 8006616:	d001      	beq.n	800661c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e0cd      	b.n	80067b8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2241      	movs	r2, #65	@ 0x41
 8006620:	2122      	movs	r1, #34	@ 0x22
 8006622:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2242      	movs	r2, #66	@ 0x42
 8006628:	2110      	movs	r1, #16
 800662a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2208      	movs	r2, #8
 800663c:	18ba      	adds	r2, r7, r2
 800663e:	8812      	ldrh	r2, [r2, #0]
 8006640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2bff      	cmp	r3, #255	@ 0xff
 8006650:	d911      	bls.n	8006676 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	22ff      	movs	r2, #255	@ 0xff
 8006656:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665c:	b2da      	uxtb	r2, r3
 800665e:	2380      	movs	r3, #128	@ 0x80
 8006660:	045c      	lsls	r4, r3, #17
 8006662:	230a      	movs	r3, #10
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	8819      	ldrh	r1, [r3, #0]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	4b55      	ldr	r3, [pc, #340]	@ (80067c0 <HAL_I2C_Master_Receive+0x208>)
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	0023      	movs	r3, r4
 8006670:	f000 fa58 	bl	8006b24 <I2C_TransferConfig>
 8006674:	e076      	b.n	8006764 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006684:	b2da      	uxtb	r2, r3
 8006686:	2380      	movs	r3, #128	@ 0x80
 8006688:	049c      	lsls	r4, r3, #18
 800668a:	230a      	movs	r3, #10
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	8819      	ldrh	r1, [r3, #0]
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	4b4b      	ldr	r3, [pc, #300]	@ (80067c0 <HAL_I2C_Master_Receive+0x208>)
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	0023      	movs	r3, r4
 8006698:	f000 fa44 	bl	8006b24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800669c:	e062      	b.n	8006764 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	0018      	movs	r0, r3
 80066a6:	f000 f96b 	bl	8006980 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e082      	b.n	80067b8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d03a      	beq.n	8006764 <HAL_I2C_Master_Receive+0x1ac>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d136      	bne.n	8006764 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	0013      	movs	r3, r2
 8006700:	2200      	movs	r2, #0
 8006702:	2180      	movs	r1, #128	@ 0x80
 8006704:	f000 f882 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006708:	1e03      	subs	r3, r0, #0
 800670a:	d001      	beq.n	8006710 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e053      	b.n	80067b8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	2bff      	cmp	r3, #255	@ 0xff
 8006718:	d911      	bls.n	800673e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	22ff      	movs	r2, #255	@ 0xff
 800671e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006724:	b2da      	uxtb	r2, r3
 8006726:	2380      	movs	r3, #128	@ 0x80
 8006728:	045c      	lsls	r4, r3, #17
 800672a:	230a      	movs	r3, #10
 800672c:	18fb      	adds	r3, r7, r3
 800672e:	8819      	ldrh	r1, [r3, #0]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	2300      	movs	r3, #0
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	0023      	movs	r3, r4
 8006738:	f000 f9f4 	bl	8006b24 <I2C_TransferConfig>
 800673c:	e012      	b.n	8006764 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674c:	b2da      	uxtb	r2, r3
 800674e:	2380      	movs	r3, #128	@ 0x80
 8006750:	049c      	lsls	r4, r3, #18
 8006752:	230a      	movs	r3, #10
 8006754:	18fb      	adds	r3, r7, r3
 8006756:	8819      	ldrh	r1, [r3, #0]
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	2300      	movs	r3, #0
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	0023      	movs	r3, r4
 8006760:	f000 f9e0 	bl	8006b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d197      	bne.n	800669e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	0018      	movs	r0, r3
 8006776:	f000 f8c7 	bl	8006908 <I2C_WaitOnSTOPFlagUntilTimeout>
 800677a:	1e03      	subs	r3, r0, #0
 800677c:	d001      	beq.n	8006782 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e01a      	b.n	80067b8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2220      	movs	r2, #32
 8006788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	490b      	ldr	r1, [pc, #44]	@ (80067c4 <HAL_I2C_Master_Receive+0x20c>)
 8006796:	400a      	ands	r2, r1
 8006798:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2241      	movs	r2, #65	@ 0x41
 800679e:	2120      	movs	r1, #32
 80067a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2242      	movs	r2, #66	@ 0x42
 80067a6:	2100      	movs	r1, #0
 80067a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2240      	movs	r2, #64	@ 0x40
 80067ae:	2100      	movs	r1, #0
 80067b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	0018      	movs	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b007      	add	sp, #28
 80067be:	bd90      	pop	{r4, r7, pc}
 80067c0:	80002400 	.word	0x80002400
 80067c4:	fe00e800 	.word	0xfe00e800

080067c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	2202      	movs	r2, #2
 80067d8:	4013      	ands	r3, r2
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d103      	bne.n	80067e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2200      	movs	r2, #0
 80067e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2201      	movs	r2, #1
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d007      	beq.n	8006804 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2101      	movs	r1, #1
 8006800:	430a      	orrs	r2, r1
 8006802:	619a      	str	r2, [r3, #24]
  }
}
 8006804:	46c0      	nop			@ (mov r8, r8)
 8006806:	46bd      	mov	sp, r7
 8006808:	b002      	add	sp, #8
 800680a:	bd80      	pop	{r7, pc}

0800680c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	1dfb      	adds	r3, r7, #7
 800681a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681c:	e021      	b.n	8006862 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	d01e      	beq.n	8006862 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006824:	f7fe fcb8 	bl	8005198 <HAL_GetTick>
 8006828:	0002      	movs	r2, r0
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d302      	bcc.n	800683a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d113      	bne.n	8006862 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683e:	2220      	movs	r2, #32
 8006840:	431a      	orrs	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2241      	movs	r2, #65	@ 0x41
 800684a:	2120      	movs	r1, #32
 800684c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2242      	movs	r2, #66	@ 0x42
 8006852:	2100      	movs	r1, #0
 8006854:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2240      	movs	r2, #64	@ 0x40
 800685a:	2100      	movs	r1, #0
 800685c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e00f      	b.n	8006882 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	425a      	negs	r2, r3
 8006872:	4153      	adcs	r3, r2
 8006874:	b2db      	uxtb	r3, r3
 8006876:	001a      	movs	r2, r3
 8006878:	1dfb      	adds	r3, r7, #7
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d0ce      	beq.n	800681e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	0018      	movs	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	b004      	add	sp, #16
 8006888:	bd80      	pop	{r7, pc}

0800688a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006896:	e02b      	b.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	0018      	movs	r0, r3
 80068a0:	f000 f8da 	bl	8006a58 <I2C_IsAcknowledgeFailed>
 80068a4:	1e03      	subs	r3, r0, #0
 80068a6:	d001      	beq.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e029      	b.n	8006900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3301      	adds	r3, #1
 80068b0:	d01e      	beq.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b2:	f7fe fc71 	bl	8005198 <HAL_GetTick>
 80068b6:	0002      	movs	r2, r0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d113      	bne.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068cc:	2220      	movs	r2, #32
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2241      	movs	r2, #65	@ 0x41
 80068d8:	2120      	movs	r1, #32
 80068da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2242      	movs	r2, #66	@ 0x42
 80068e0:	2100      	movs	r1, #0
 80068e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2240      	movs	r2, #64	@ 0x40
 80068e8:	2100      	movs	r1, #0
 80068ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e007      	b.n	8006900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	2202      	movs	r2, #2
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d1cc      	bne.n	8006898 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	0018      	movs	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	b004      	add	sp, #16
 8006906:	bd80      	pop	{r7, pc}

08006908 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006914:	e028      	b.n	8006968 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	0018      	movs	r0, r3
 800691e:	f000 f89b 	bl	8006a58 <I2C_IsAcknowledgeFailed>
 8006922:	1e03      	subs	r3, r0, #0
 8006924:	d001      	beq.n	800692a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e026      	b.n	8006978 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fe fc35 	bl	8005198 <HAL_GetTick>
 800692e:	0002      	movs	r2, r0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d113      	bne.n	8006968 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006944:	2220      	movs	r2, #32
 8006946:	431a      	orrs	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2241      	movs	r2, #65	@ 0x41
 8006950:	2120      	movs	r1, #32
 8006952:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2242      	movs	r2, #66	@ 0x42
 8006958:	2100      	movs	r1, #0
 800695a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2240      	movs	r2, #64	@ 0x40
 8006960:	2100      	movs	r1, #0
 8006962:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e007      	b.n	8006978 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2220      	movs	r2, #32
 8006970:	4013      	ands	r3, r2
 8006972:	2b20      	cmp	r3, #32
 8006974:	d1cf      	bne.n	8006916 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	0018      	movs	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	b004      	add	sp, #16
 800697e:	bd80      	pop	{r7, pc}

08006980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800698c:	e055      	b.n	8006a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	0018      	movs	r0, r3
 8006996:	f000 f85f 	bl	8006a58 <I2C_IsAcknowledgeFailed>
 800699a:	1e03      	subs	r3, r0, #0
 800699c:	d001      	beq.n	80069a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e053      	b.n	8006a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2220      	movs	r2, #32
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d129      	bne.n	8006a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	2204      	movs	r2, #4
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d105      	bne.n	80069ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e03f      	b.n	8006a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2220      	movs	r2, #32
 80069d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	491d      	ldr	r1, [pc, #116]	@ (8006a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80069de:	400a      	ands	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2241      	movs	r2, #65	@ 0x41
 80069ec:	2120      	movs	r1, #32
 80069ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2242      	movs	r2, #66	@ 0x42
 80069f4:	2100      	movs	r1, #0
 80069f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2240      	movs	r2, #64	@ 0x40
 80069fc:	2100      	movs	r1, #0
 80069fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e022      	b.n	8006a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a04:	f7fe fbc8 	bl	8005198 <HAL_GetTick>
 8006a08:	0002      	movs	r2, r0
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10f      	bne.n	8006a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1e:	2220      	movs	r2, #32
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2241      	movs	r2, #65	@ 0x41
 8006a2a:	2120      	movs	r1, #32
 8006a2c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2240      	movs	r2, #64	@ 0x40
 8006a32:	2100      	movs	r1, #0
 8006a34:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e007      	b.n	8006a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	2204      	movs	r2, #4
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d1a2      	bne.n	800698e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	b004      	add	sp, #16
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	46c0      	nop			@ (mov r8, r8)
 8006a54:	fe00e800 	.word	0xfe00e800

08006a58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2210      	movs	r2, #16
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b10      	cmp	r3, #16
 8006a70:	d151      	bne.n	8006b16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a72:	e021      	b.n	8006ab8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	3301      	adds	r3, #1
 8006a78:	d01e      	beq.n	8006ab8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fe fb8d 	bl	8005198 <HAL_GetTick>
 8006a7e:	0002      	movs	r2, r0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <I2C_IsAcknowledgeFailed+0x38>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d113      	bne.n	8006ab8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a94:	2220      	movs	r2, #32
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2241      	movs	r2, #65	@ 0x41
 8006aa0:	2120      	movs	r1, #32
 8006aa2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2242      	movs	r2, #66	@ 0x42
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2240      	movs	r2, #64	@ 0x40
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e02f      	b.n	8006b18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d1d6      	bne.n	8006a74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2210      	movs	r2, #16
 8006acc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7ff fe75 	bl	80067c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	490d      	ldr	r1, [pc, #52]	@ (8006b20 <I2C_IsAcknowledgeFailed+0xc8>)
 8006aea:	400a      	ands	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af2:	2204      	movs	r2, #4
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2241      	movs	r2, #65	@ 0x41
 8006afe:	2120      	movs	r1, #32
 8006b00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2242      	movs	r2, #66	@ 0x42
 8006b06:	2100      	movs	r1, #0
 8006b08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2240      	movs	r2, #64	@ 0x40
 8006b0e:	2100      	movs	r1, #0
 8006b10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b004      	add	sp, #16
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	fe00e800 	.word	0xfe00e800

08006b24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b24:	b590      	push	{r4, r7, lr}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	0008      	movs	r0, r1
 8006b2e:	0011      	movs	r1, r2
 8006b30:	607b      	str	r3, [r7, #4]
 8006b32:	240a      	movs	r4, #10
 8006b34:	193b      	adds	r3, r7, r4
 8006b36:	1c02      	adds	r2, r0, #0
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	2009      	movs	r0, #9
 8006b3c:	183b      	adds	r3, r7, r0
 8006b3e:	1c0a      	adds	r2, r1, #0
 8006b40:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	6a3a      	ldr	r2, [r7, #32]
 8006b4a:	0d51      	lsrs	r1, r2, #21
 8006b4c:	2280      	movs	r2, #128	@ 0x80
 8006b4e:	00d2      	lsls	r2, r2, #3
 8006b50:	400a      	ands	r2, r1
 8006b52:	490e      	ldr	r1, [pc, #56]	@ (8006b8c <I2C_TransferConfig+0x68>)
 8006b54:	430a      	orrs	r2, r1
 8006b56:	43d2      	mvns	r2, r2
 8006b58:	401a      	ands	r2, r3
 8006b5a:	0011      	movs	r1, r2
 8006b5c:	193b      	adds	r3, r7, r4
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	059b      	lsls	r3, r3, #22
 8006b62:	0d9a      	lsrs	r2, r3, #22
 8006b64:	183b      	adds	r3, r7, r0
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	0418      	lsls	r0, r3, #16
 8006b6a:	23ff      	movs	r3, #255	@ 0xff
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	4003      	ands	r3, r0
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	431a      	orrs	r2, r3
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006b82:	46c0      	nop			@ (mov r8, r8)
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b005      	add	sp, #20
 8006b88:	bd90      	pop	{r4, r7, pc}
 8006b8a:	46c0      	nop			@ (mov r8, r8)
 8006b8c:	03ff63ff 	.word	0x03ff63ff

08006b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2241      	movs	r2, #65	@ 0x41
 8006b9e:	5c9b      	ldrb	r3, [r3, r2]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d138      	bne.n	8006c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2240      	movs	r2, #64	@ 0x40
 8006baa:	5c9b      	ldrb	r3, [r3, r2]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e032      	b.n	8006c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2240      	movs	r2, #64	@ 0x40
 8006bb8:	2101      	movs	r1, #1
 8006bba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2241      	movs	r2, #65	@ 0x41
 8006bc0:	2124      	movs	r1, #36	@ 0x24
 8006bc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2101      	movs	r1, #1
 8006bd0:	438a      	bics	r2, r1
 8006bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4911      	ldr	r1, [pc, #68]	@ (8006c24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006be0:	400a      	ands	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6819      	ldr	r1, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2101      	movs	r1, #1
 8006c00:	430a      	orrs	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2241      	movs	r2, #65	@ 0x41
 8006c08:	2120      	movs	r1, #32
 8006c0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2240      	movs	r2, #64	@ 0x40
 8006c10:	2100      	movs	r1, #0
 8006c12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e000      	b.n	8006c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c18:	2302      	movs	r3, #2
  }
}
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b002      	add	sp, #8
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	ffffefff 	.word	0xffffefff

08006c28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2241      	movs	r2, #65	@ 0x41
 8006c36:	5c9b      	ldrb	r3, [r3, r2]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d139      	bne.n	8006cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2240      	movs	r2, #64	@ 0x40
 8006c42:	5c9b      	ldrb	r3, [r3, r2]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e033      	b.n	8006cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2240      	movs	r2, #64	@ 0x40
 8006c50:	2101      	movs	r1, #1
 8006c52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2241      	movs	r2, #65	@ 0x41
 8006c58:	2124      	movs	r1, #36	@ 0x24
 8006c5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2101      	movs	r1, #1
 8006c68:	438a      	bics	r2, r1
 8006c6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a11      	ldr	r2, [pc, #68]	@ (8006cbc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2101      	movs	r1, #1
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2241      	movs	r2, #65	@ 0x41
 8006ca2:	2120      	movs	r1, #32
 8006ca4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2240      	movs	r2, #64	@ 0x40
 8006caa:	2100      	movs	r1, #0
 8006cac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e000      	b.n	8006cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cb2:	2302      	movs	r3, #2
  }
}
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	b004      	add	sp, #16
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	fffff0ff 	.word	0xfffff0ff

08006cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cc0:	b5b0      	push	{r4, r5, r7, lr}
 8006cc2:	b08a      	sub	sp, #40	@ 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f000 fb6c 	bl	80073ac <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cd4:	4bc8      	ldr	r3, [pc, #800]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	220c      	movs	r2, #12
 8006cda:	4013      	ands	r3, r2
 8006cdc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cde:	4bc6      	ldr	r3, [pc, #792]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	2380      	movs	r3, #128	@ 0x80
 8006ce4:	025b      	lsls	r3, r3, #9
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d100      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x36>
 8006cf4:	e07d      	b.n	8006df2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d007      	beq.n	8006d0c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	2b0c      	cmp	r3, #12
 8006d00:	d112      	bne.n	8006d28 <HAL_RCC_OscConfig+0x68>
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	2380      	movs	r3, #128	@ 0x80
 8006d06:	025b      	lsls	r3, r3, #9
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d10d      	bne.n	8006d28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d0c:	4bba      	ldr	r3, [pc, #744]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	2380      	movs	r3, #128	@ 0x80
 8006d12:	029b      	lsls	r3, r3, #10
 8006d14:	4013      	ands	r3, r2
 8006d16:	d100      	bne.n	8006d1a <HAL_RCC_OscConfig+0x5a>
 8006d18:	e06a      	b.n	8006df0 <HAL_RCC_OscConfig+0x130>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d166      	bne.n	8006df0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f000 fb42 	bl	80073ac <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	2380      	movs	r3, #128	@ 0x80
 8006d2e:	025b      	lsls	r3, r3, #9
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d107      	bne.n	8006d44 <HAL_RCC_OscConfig+0x84>
 8006d34:	4bb0      	ldr	r3, [pc, #704]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	4baf      	ldr	r3, [pc, #700]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d3a:	2180      	movs	r1, #128	@ 0x80
 8006d3c:	0249      	lsls	r1, r1, #9
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e027      	b.n	8006d94 <HAL_RCC_OscConfig+0xd4>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	23a0      	movs	r3, #160	@ 0xa0
 8006d4a:	02db      	lsls	r3, r3, #11
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d10e      	bne.n	8006d6e <HAL_RCC_OscConfig+0xae>
 8006d50:	4ba9      	ldr	r3, [pc, #676]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4ba8      	ldr	r3, [pc, #672]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d56:	2180      	movs	r1, #128	@ 0x80
 8006d58:	02c9      	lsls	r1, r1, #11
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	4ba6      	ldr	r3, [pc, #664]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4ba5      	ldr	r3, [pc, #660]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d64:	2180      	movs	r1, #128	@ 0x80
 8006d66:	0249      	lsls	r1, r1, #9
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e012      	b.n	8006d94 <HAL_RCC_OscConfig+0xd4>
 8006d6e:	4ba2      	ldr	r3, [pc, #648]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4ba1      	ldr	r3, [pc, #644]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d74:	49a1      	ldr	r1, [pc, #644]	@ (8006ffc <HAL_RCC_OscConfig+0x33c>)
 8006d76:	400a      	ands	r2, r1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	2380      	movs	r3, #128	@ 0x80
 8006d80:	025b      	lsls	r3, r3, #9
 8006d82:	4013      	ands	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4b9b      	ldr	r3, [pc, #620]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b9a      	ldr	r3, [pc, #616]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006d8e:	499c      	ldr	r1, [pc, #624]	@ (8007000 <HAL_RCC_OscConfig+0x340>)
 8006d90:	400a      	ands	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d014      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d9c:	f7fe f9fc 	bl	8005198 <HAL_GetTick>
 8006da0:	0003      	movs	r3, r0
 8006da2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006da4:	e008      	b.n	8006db8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006da6:	f7fe f9f7 	bl	8005198 <HAL_GetTick>
 8006daa:	0002      	movs	r2, r0
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b64      	cmp	r3, #100	@ 0x64
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e2f9      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006db8:	4b8f      	ldr	r3, [pc, #572]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d0f0      	beq.n	8006da6 <HAL_RCC_OscConfig+0xe6>
 8006dc4:	e015      	b.n	8006df2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc6:	f7fe f9e7 	bl	8005198 <HAL_GetTick>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd0:	f7fe f9e2 	bl	8005198 <HAL_GetTick>
 8006dd4:	0002      	movs	r2, r0
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b64      	cmp	r3, #100	@ 0x64
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e2e4      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006de2:	4b85      	ldr	r3, [pc, #532]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	2380      	movs	r3, #128	@ 0x80
 8006de8:	029b      	lsls	r3, r3, #10
 8006dea:	4013      	ands	r3, r2
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x110>
 8006dee:	e000      	b.n	8006df2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2202      	movs	r2, #2
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d100      	bne.n	8006dfe <HAL_RCC_OscConfig+0x13e>
 8006dfc:	e099      	b.n	8006f32 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	2220      	movs	r2, #32
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006e0c:	4b7a      	ldr	r3, [pc, #488]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	4b79      	ldr	r3, [pc, #484]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006e12:	2120      	movs	r1, #32
 8006e14:	430a      	orrs	r2, r1
 8006e16:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	4393      	bics	r3, r2
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d005      	beq.n	8006e32 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	2b0c      	cmp	r3, #12
 8006e2a:	d13e      	bne.n	8006eaa <HAL_RCC_OscConfig+0x1ea>
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d13b      	bne.n	8006eaa <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006e32:	4b71      	ldr	r3, [pc, #452]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2204      	movs	r2, #4
 8006e38:	4013      	ands	r3, r2
 8006e3a:	d004      	beq.n	8006e46 <HAL_RCC_OscConfig+0x186>
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e2b2      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e46:	4b6c      	ldr	r3, [pc, #432]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4a6e      	ldr	r2, [pc, #440]	@ (8007004 <HAL_RCC_OscConfig+0x344>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	0019      	movs	r1, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	021a      	lsls	r2, r3, #8
 8006e56:	4b68      	ldr	r3, [pc, #416]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006e5c:	4b66      	ldr	r3, [pc, #408]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2209      	movs	r2, #9
 8006e62:	4393      	bics	r3, r2
 8006e64:	0019      	movs	r1, r3
 8006e66:	4b64      	ldr	r3, [pc, #400]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e6e:	f000 fbeb 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 8006e72:	0001      	movs	r1, r0
 8006e74:	4b60      	ldr	r3, [pc, #384]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	091b      	lsrs	r3, r3, #4
 8006e7a:	220f      	movs	r2, #15
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	4a62      	ldr	r2, [pc, #392]	@ (8007008 <HAL_RCC_OscConfig+0x348>)
 8006e80:	5cd3      	ldrb	r3, [r2, r3]
 8006e82:	000a      	movs	r2, r1
 8006e84:	40da      	lsrs	r2, r3
 8006e86:	4b61      	ldr	r3, [pc, #388]	@ (800700c <HAL_RCC_OscConfig+0x34c>)
 8006e88:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006e8a:	4b61      	ldr	r3, [pc, #388]	@ (8007010 <HAL_RCC_OscConfig+0x350>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2513      	movs	r5, #19
 8006e90:	197c      	adds	r4, r7, r5
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7fe f93a 	bl	800510c <HAL_InitTick>
 8006e98:	0003      	movs	r3, r0
 8006e9a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006e9c:	197b      	adds	r3, r7, r5
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d046      	beq.n	8006f32 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006ea4:	197b      	adds	r3, r7, r5
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	e280      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d027      	beq.n	8006f00 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006eb0:	4b51      	ldr	r3, [pc, #324]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2209      	movs	r2, #9
 8006eb6:	4393      	bics	r3, r2
 8006eb8:	0019      	movs	r1, r3
 8006eba:	4b4f      	ldr	r3, [pc, #316]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec2:	f7fe f969 	bl	8005198 <HAL_GetTick>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ecc:	f7fe f964 	bl	8005198 <HAL_GetTick>
 8006ed0:	0002      	movs	r2, r0
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e266      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ede:	4b46      	ldr	r3, [pc, #280]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d0f1      	beq.n	8006ecc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee8:	4b43      	ldr	r3, [pc, #268]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4a45      	ldr	r2, [pc, #276]	@ (8007004 <HAL_RCC_OscConfig+0x344>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	021a      	lsls	r2, r3, #8
 8006ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
 8006efe:	e018      	b.n	8006f32 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f00:	4b3d      	ldr	r3, [pc, #244]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f06:	2101      	movs	r1, #1
 8006f08:	438a      	bics	r2, r1
 8006f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7fe f944 	bl	8005198 <HAL_GetTick>
 8006f10:	0003      	movs	r3, r0
 8006f12:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f14:	e008      	b.n	8006f28 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f16:	f7fe f93f 	bl	8005198 <HAL_GetTick>
 8006f1a:	0002      	movs	r2, r0
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e241      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f28:	4b33      	ldr	r3, [pc, #204]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d1f1      	bne.n	8006f16 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2210      	movs	r2, #16
 8006f38:	4013      	ands	r3, r2
 8006f3a:	d100      	bne.n	8006f3e <HAL_RCC_OscConfig+0x27e>
 8006f3c:	e0a1      	b.n	8007082 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d140      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f44:	4b2c      	ldr	r3, [pc, #176]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	2380      	movs	r3, #128	@ 0x80
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d005      	beq.n	8006f5c <HAL_RCC_OscConfig+0x29c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e227      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f5c:	4b26      	ldr	r3, [pc, #152]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4a2c      	ldr	r2, [pc, #176]	@ (8007014 <HAL_RCC_OscConfig+0x354>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	0019      	movs	r1, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1a      	ldr	r2, [r3, #32]
 8006f6a:	4b23      	ldr	r3, [pc, #140]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f70:	4b21      	ldr	r3, [pc, #132]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	0a19      	lsrs	r1, r3, #8
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	061a      	lsls	r2, r3, #24
 8006f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	0b5b      	lsrs	r3, r3, #13
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	2280      	movs	r2, #128	@ 0x80
 8006f8e:	0212      	lsls	r2, r2, #8
 8006f90:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006f92:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	210f      	movs	r1, #15
 8006f9a:	400b      	ands	r3, r1
 8006f9c:	491a      	ldr	r1, [pc, #104]	@ (8007008 <HAL_RCC_OscConfig+0x348>)
 8006f9e:	5ccb      	ldrb	r3, [r1, r3]
 8006fa0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800700c <HAL_RCC_OscConfig+0x34c>)
 8006fa4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8007010 <HAL_RCC_OscConfig+0x350>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2513      	movs	r5, #19
 8006fac:	197c      	adds	r4, r7, r5
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7fe f8ac 	bl	800510c <HAL_InitTick>
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006fb8:	197b      	adds	r3, r7, r5
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d060      	beq.n	8007082 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8006fc0:	197b      	adds	r3, r7, r5
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	e1f2      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d03f      	beq.n	800704e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fce:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <HAL_RCC_OscConfig+0x338>)
 8006fd4:	2180      	movs	r1, #128	@ 0x80
 8006fd6:	0049      	lsls	r1, r1, #1
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fdc:	f7fe f8dc 	bl	8005198 <HAL_GetTick>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006fe4:	e018      	b.n	8007018 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fe6:	f7fe f8d7 	bl	8005198 <HAL_GetTick>
 8006fea:	0002      	movs	r2, r0
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d911      	bls.n	8007018 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e1d9      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	fffeffff 	.word	0xfffeffff
 8007000:	fffbffff 	.word	0xfffbffff
 8007004:	ffffe0ff 	.word	0xffffe0ff
 8007008:	0800a1e4 	.word	0x0800a1e4
 800700c:	20000000 	.word	0x20000000
 8007010:	20000008 	.word	0x20000008
 8007014:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007018:	4bc9      	ldr	r3, [pc, #804]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	2380      	movs	r3, #128	@ 0x80
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4013      	ands	r3, r2
 8007022:	d0e0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007024:	4bc6      	ldr	r3, [pc, #792]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	4ac6      	ldr	r2, [pc, #792]	@ (8007344 <HAL_RCC_OscConfig+0x684>)
 800702a:	4013      	ands	r3, r2
 800702c:	0019      	movs	r1, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1a      	ldr	r2, [r3, #32]
 8007032:	4bc3      	ldr	r3, [pc, #780]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007038:	4bc1      	ldr	r3, [pc, #772]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	0a19      	lsrs	r1, r3, #8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	061a      	lsls	r2, r3, #24
 8007046:	4bbe      	ldr	r3, [pc, #760]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007048:	430a      	orrs	r2, r1
 800704a:	605a      	str	r2, [r3, #4]
 800704c:	e019      	b.n	8007082 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800704e:	4bbc      	ldr	r3, [pc, #752]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4bbb      	ldr	r3, [pc, #748]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007054:	49bc      	ldr	r1, [pc, #752]	@ (8007348 <HAL_RCC_OscConfig+0x688>)
 8007056:	400a      	ands	r2, r1
 8007058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705a:	f7fe f89d 	bl	8005198 <HAL_GetTick>
 800705e:	0003      	movs	r3, r0
 8007060:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007064:	f7fe f898 	bl	8005198 <HAL_GetTick>
 8007068:	0002      	movs	r2, r0
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e19a      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007076:	4bb2      	ldr	r3, [pc, #712]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	2380      	movs	r3, #128	@ 0x80
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4013      	ands	r3, r2
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2208      	movs	r2, #8
 8007088:	4013      	ands	r3, r2
 800708a:	d036      	beq.n	80070fa <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d019      	beq.n	80070c8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007094:	4baa      	ldr	r3, [pc, #680]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007096:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007098:	4ba9      	ldr	r3, [pc, #676]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800709a:	2101      	movs	r1, #1
 800709c:	430a      	orrs	r2, r1
 800709e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a0:	f7fe f87a 	bl	8005198 <HAL_GetTick>
 80070a4:	0003      	movs	r3, r0
 80070a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070aa:	f7fe f875 	bl	8005198 <HAL_GetTick>
 80070ae:	0002      	movs	r2, r0
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e177      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070bc:	4ba0      	ldr	r3, [pc, #640]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80070be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c0:	2202      	movs	r2, #2
 80070c2:	4013      	ands	r3, r2
 80070c4:	d0f1      	beq.n	80070aa <HAL_RCC_OscConfig+0x3ea>
 80070c6:	e018      	b.n	80070fa <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070c8:	4b9d      	ldr	r3, [pc, #628]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80070ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070cc:	4b9c      	ldr	r3, [pc, #624]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80070ce:	2101      	movs	r1, #1
 80070d0:	438a      	bics	r2, r1
 80070d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d4:	f7fe f860 	bl	8005198 <HAL_GetTick>
 80070d8:	0003      	movs	r3, r0
 80070da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070de:	f7fe f85b 	bl	8005198 <HAL_GetTick>
 80070e2:	0002      	movs	r2, r0
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e15d      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070f0:	4b93      	ldr	r3, [pc, #588]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80070f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f4:	2202      	movs	r2, #2
 80070f6:	4013      	ands	r3, r2
 80070f8:	d1f1      	bne.n	80070de <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2204      	movs	r2, #4
 8007100:	4013      	ands	r3, r2
 8007102:	d100      	bne.n	8007106 <HAL_RCC_OscConfig+0x446>
 8007104:	e0ae      	b.n	8007264 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007106:	2023      	movs	r0, #35	@ 0x23
 8007108:	183b      	adds	r3, r7, r0
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800710e:	4b8c      	ldr	r3, [pc, #560]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007112:	2380      	movs	r3, #128	@ 0x80
 8007114:	055b      	lsls	r3, r3, #21
 8007116:	4013      	ands	r3, r2
 8007118:	d109      	bne.n	800712e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800711a:	4b89      	ldr	r3, [pc, #548]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800711c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800711e:	4b88      	ldr	r3, [pc, #544]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007120:	2180      	movs	r1, #128	@ 0x80
 8007122:	0549      	lsls	r1, r1, #21
 8007124:	430a      	orrs	r2, r1
 8007126:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8007128:	183b      	adds	r3, r7, r0
 800712a:	2201      	movs	r2, #1
 800712c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800712e:	4b87      	ldr	r3, [pc, #540]	@ (800734c <HAL_RCC_OscConfig+0x68c>)
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4013      	ands	r3, r2
 8007138:	d11a      	bne.n	8007170 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800713a:	4b84      	ldr	r3, [pc, #528]	@ (800734c <HAL_RCC_OscConfig+0x68c>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4b83      	ldr	r3, [pc, #524]	@ (800734c <HAL_RCC_OscConfig+0x68c>)
 8007140:	2180      	movs	r1, #128	@ 0x80
 8007142:	0049      	lsls	r1, r1, #1
 8007144:	430a      	orrs	r2, r1
 8007146:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007148:	f7fe f826 	bl	8005198 <HAL_GetTick>
 800714c:	0003      	movs	r3, r0
 800714e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007152:	f7fe f821 	bl	8005198 <HAL_GetTick>
 8007156:	0002      	movs	r2, r0
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b64      	cmp	r3, #100	@ 0x64
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e123      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007164:	4b79      	ldr	r3, [pc, #484]	@ (800734c <HAL_RCC_OscConfig+0x68c>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	2380      	movs	r3, #128	@ 0x80
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	4013      	ands	r3, r2
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	2380      	movs	r3, #128	@ 0x80
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	429a      	cmp	r2, r3
 800717a:	d107      	bne.n	800718c <HAL_RCC_OscConfig+0x4cc>
 800717c:	4b70      	ldr	r3, [pc, #448]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800717e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007180:	4b6f      	ldr	r3, [pc, #444]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007182:	2180      	movs	r1, #128	@ 0x80
 8007184:	0049      	lsls	r1, r1, #1
 8007186:	430a      	orrs	r2, r1
 8007188:	651a      	str	r2, [r3, #80]	@ 0x50
 800718a:	e031      	b.n	80071f0 <HAL_RCC_OscConfig+0x530>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10c      	bne.n	80071ae <HAL_RCC_OscConfig+0x4ee>
 8007194:	4b6a      	ldr	r3, [pc, #424]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007198:	4b69      	ldr	r3, [pc, #420]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800719a:	496b      	ldr	r1, [pc, #428]	@ (8007348 <HAL_RCC_OscConfig+0x688>)
 800719c:	400a      	ands	r2, r1
 800719e:	651a      	str	r2, [r3, #80]	@ 0x50
 80071a0:	4b67      	ldr	r3, [pc, #412]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071a4:	4b66      	ldr	r3, [pc, #408]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071a6:	496a      	ldr	r1, [pc, #424]	@ (8007350 <HAL_RCC_OscConfig+0x690>)
 80071a8:	400a      	ands	r2, r1
 80071aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80071ac:	e020      	b.n	80071f0 <HAL_RCC_OscConfig+0x530>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	23a0      	movs	r3, #160	@ 0xa0
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d10e      	bne.n	80071d8 <HAL_RCC_OscConfig+0x518>
 80071ba:	4b61      	ldr	r3, [pc, #388]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071be:	4b60      	ldr	r3, [pc, #384]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071c0:	2180      	movs	r1, #128	@ 0x80
 80071c2:	00c9      	lsls	r1, r1, #3
 80071c4:	430a      	orrs	r2, r1
 80071c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80071c8:	4b5d      	ldr	r3, [pc, #372]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071cc:	4b5c      	ldr	r3, [pc, #368]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071ce:	2180      	movs	r1, #128	@ 0x80
 80071d0:	0049      	lsls	r1, r1, #1
 80071d2:	430a      	orrs	r2, r1
 80071d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80071d6:	e00b      	b.n	80071f0 <HAL_RCC_OscConfig+0x530>
 80071d8:	4b59      	ldr	r3, [pc, #356]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071dc:	4b58      	ldr	r3, [pc, #352]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071de:	495a      	ldr	r1, [pc, #360]	@ (8007348 <HAL_RCC_OscConfig+0x688>)
 80071e0:	400a      	ands	r2, r1
 80071e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80071e4:	4b56      	ldr	r3, [pc, #344]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071e8:	4b55      	ldr	r3, [pc, #340]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80071ea:	4959      	ldr	r1, [pc, #356]	@ (8007350 <HAL_RCC_OscConfig+0x690>)
 80071ec:	400a      	ands	r2, r1
 80071ee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d015      	beq.n	8007224 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071f8:	f7fd ffce 	bl	8005198 <HAL_GetTick>
 80071fc:	0003      	movs	r3, r0
 80071fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007200:	e009      	b.n	8007216 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007202:	f7fd ffc9 	bl	8005198 <HAL_GetTick>
 8007206:	0002      	movs	r2, r0
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	4a51      	ldr	r2, [pc, #324]	@ (8007354 <HAL_RCC_OscConfig+0x694>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e0ca      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007216:	4b4a      	ldr	r3, [pc, #296]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800721a:	2380      	movs	r3, #128	@ 0x80
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4013      	ands	r3, r2
 8007220:	d0ef      	beq.n	8007202 <HAL_RCC_OscConfig+0x542>
 8007222:	e014      	b.n	800724e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007224:	f7fd ffb8 	bl	8005198 <HAL_GetTick>
 8007228:	0003      	movs	r3, r0
 800722a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800722c:	e009      	b.n	8007242 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800722e:	f7fd ffb3 	bl	8005198 <HAL_GetTick>
 8007232:	0002      	movs	r2, r0
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	4a46      	ldr	r2, [pc, #280]	@ (8007354 <HAL_RCC_OscConfig+0x694>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e0b4      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007242:	4b3f      	ldr	r3, [pc, #252]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007246:	2380      	movs	r3, #128	@ 0x80
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4013      	ands	r3, r2
 800724c:	d1ef      	bne.n	800722e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800724e:	2323      	movs	r3, #35	@ 0x23
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d105      	bne.n	8007264 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007258:	4b39      	ldr	r3, [pc, #228]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800725a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800725c:	4b38      	ldr	r3, [pc, #224]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800725e:	493e      	ldr	r1, [pc, #248]	@ (8007358 <HAL_RCC_OscConfig+0x698>)
 8007260:	400a      	ands	r2, r1
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d100      	bne.n	800726e <HAL_RCC_OscConfig+0x5ae>
 800726c:	e09d      	b.n	80073aa <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	d100      	bne.n	8007276 <HAL_RCC_OscConfig+0x5b6>
 8007274:	e076      	b.n	8007364 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	2b02      	cmp	r3, #2
 800727c:	d145      	bne.n	800730a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800727e:	4b30      	ldr	r3, [pc, #192]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b2f      	ldr	r3, [pc, #188]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007284:	4935      	ldr	r1, [pc, #212]	@ (800735c <HAL_RCC_OscConfig+0x69c>)
 8007286:	400a      	ands	r2, r1
 8007288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800728a:	f7fd ff85 	bl	8005198 <HAL_GetTick>
 800728e:	0003      	movs	r3, r0
 8007290:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007294:	f7fd ff80 	bl	8005198 <HAL_GetTick>
 8007298:	0002      	movs	r2, r0
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e082      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80072a6:	4b26      	ldr	r3, [pc, #152]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	2380      	movs	r3, #128	@ 0x80
 80072ac:	049b      	lsls	r3, r3, #18
 80072ae:	4013      	ands	r3, r2
 80072b0:	d1f0      	bne.n	8007294 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072b2:	4b23      	ldr	r3, [pc, #140]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007360 <HAL_RCC_OscConfig+0x6a0>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	0019      	movs	r1, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ca:	431a      	orrs	r2, r3
 80072cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80072ce:	430a      	orrs	r2, r1
 80072d0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80072d8:	2180      	movs	r1, #128	@ 0x80
 80072da:	0449      	lsls	r1, r1, #17
 80072dc:	430a      	orrs	r2, r1
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e0:	f7fd ff5a 	bl	8005198 <HAL_GetTick>
 80072e4:	0003      	movs	r3, r0
 80072e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80072e8:	e008      	b.n	80072fc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ea:	f7fd ff55 	bl	8005198 <HAL_GetTick>
 80072ee:	0002      	movs	r2, r0
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e057      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80072fc:	4b10      	ldr	r3, [pc, #64]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	2380      	movs	r3, #128	@ 0x80
 8007302:	049b      	lsls	r3, r3, #18
 8007304:	4013      	ands	r3, r2
 8007306:	d0f0      	beq.n	80072ea <HAL_RCC_OscConfig+0x62a>
 8007308:	e04f      	b.n	80073aa <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4b0c      	ldr	r3, [pc, #48]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007310:	4912      	ldr	r1, [pc, #72]	@ (800735c <HAL_RCC_OscConfig+0x69c>)
 8007312:	400a      	ands	r2, r1
 8007314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007316:	f7fd ff3f 	bl	8005198 <HAL_GetTick>
 800731a:	0003      	movs	r3, r0
 800731c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007320:	f7fd ff3a 	bl	8005198 <HAL_GetTick>
 8007324:	0002      	movs	r2, r0
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e03c      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007332:	4b03      	ldr	r3, [pc, #12]	@ (8007340 <HAL_RCC_OscConfig+0x680>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	2380      	movs	r3, #128	@ 0x80
 8007338:	049b      	lsls	r3, r3, #18
 800733a:	4013      	ands	r3, r2
 800733c:	d1f0      	bne.n	8007320 <HAL_RCC_OscConfig+0x660>
 800733e:	e034      	b.n	80073aa <HAL_RCC_OscConfig+0x6ea>
 8007340:	40021000 	.word	0x40021000
 8007344:	ffff1fff 	.word	0xffff1fff
 8007348:	fffffeff 	.word	0xfffffeff
 800734c:	40007000 	.word	0x40007000
 8007350:	fffffbff 	.word	0xfffffbff
 8007354:	00001388 	.word	0x00001388
 8007358:	efffffff 	.word	0xefffffff
 800735c:	feffffff 	.word	0xfeffffff
 8007360:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e01d      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007370:	4b10      	ldr	r3, [pc, #64]	@ (80073b4 <HAL_RCC_OscConfig+0x6f4>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	2380      	movs	r3, #128	@ 0x80
 800737a:	025b      	lsls	r3, r3, #9
 800737c:	401a      	ands	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	429a      	cmp	r2, r3
 8007384:	d10f      	bne.n	80073a6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	23f0      	movs	r3, #240	@ 0xf0
 800738a:	039b      	lsls	r3, r3, #14
 800738c:	401a      	ands	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007392:	429a      	cmp	r2, r3
 8007394:	d107      	bne.n	80073a6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	23c0      	movs	r3, #192	@ 0xc0
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	401a      	ands	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d001      	beq.n	80073aa <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	0018      	movs	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b00a      	add	sp, #40	@ 0x28
 80073b2:	bdb0      	pop	{r4, r5, r7, pc}
 80073b4:	40021000 	.word	0x40021000

080073b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073b8:	b5b0      	push	{r4, r5, r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e128      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073cc:	4b96      	ldr	r3, [pc, #600]	@ (8007628 <HAL_RCC_ClockConfig+0x270>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2201      	movs	r2, #1
 80073d2:	4013      	ands	r3, r2
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d91e      	bls.n	8007418 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073da:	4b93      	ldr	r3, [pc, #588]	@ (8007628 <HAL_RCC_ClockConfig+0x270>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2201      	movs	r2, #1
 80073e0:	4393      	bics	r3, r2
 80073e2:	0019      	movs	r1, r3
 80073e4:	4b90      	ldr	r3, [pc, #576]	@ (8007628 <HAL_RCC_ClockConfig+0x270>)
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80073ec:	f7fd fed4 	bl	8005198 <HAL_GetTick>
 80073f0:	0003      	movs	r3, r0
 80073f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f4:	e009      	b.n	800740a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073f6:	f7fd fecf 	bl	8005198 <HAL_GetTick>
 80073fa:	0002      	movs	r2, r0
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	4a8a      	ldr	r2, [pc, #552]	@ (800762c <HAL_RCC_ClockConfig+0x274>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d901      	bls.n	800740a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e109      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800740a:	4b87      	ldr	r3, [pc, #540]	@ (8007628 <HAL_RCC_ClockConfig+0x270>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2201      	movs	r2, #1
 8007410:	4013      	ands	r3, r2
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d1ee      	bne.n	80073f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2202      	movs	r2, #2
 800741e:	4013      	ands	r3, r2
 8007420:	d009      	beq.n	8007436 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007422:	4b83      	ldr	r3, [pc, #524]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	22f0      	movs	r2, #240	@ 0xf0
 8007428:	4393      	bics	r3, r2
 800742a:	0019      	movs	r1, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	4b7f      	ldr	r3, [pc, #508]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 8007432:	430a      	orrs	r2, r1
 8007434:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2201      	movs	r2, #1
 800743c:	4013      	ands	r3, r2
 800743e:	d100      	bne.n	8007442 <HAL_RCC_ClockConfig+0x8a>
 8007440:	e089      	b.n	8007556 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d107      	bne.n	800745a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800744a:	4b79      	ldr	r3, [pc, #484]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	2380      	movs	r3, #128	@ 0x80
 8007450:	029b      	lsls	r3, r3, #10
 8007452:	4013      	ands	r3, r2
 8007454:	d120      	bne.n	8007498 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e0e1      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b03      	cmp	r3, #3
 8007460:	d107      	bne.n	8007472 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007462:	4b73      	ldr	r3, [pc, #460]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	2380      	movs	r3, #128	@ 0x80
 8007468:	049b      	lsls	r3, r3, #18
 800746a:	4013      	ands	r3, r2
 800746c:	d114      	bne.n	8007498 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e0d5      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d106      	bne.n	8007488 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800747a:	4b6d      	ldr	r3, [pc, #436]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2204      	movs	r2, #4
 8007480:	4013      	ands	r3, r2
 8007482:	d109      	bne.n	8007498 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e0ca      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007488:	4b69      	ldr	r3, [pc, #420]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	2380      	movs	r3, #128	@ 0x80
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4013      	ands	r3, r2
 8007492:	d101      	bne.n	8007498 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0c2      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007498:	4b65      	ldr	r3, [pc, #404]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2203      	movs	r2, #3
 800749e:	4393      	bics	r3, r2
 80074a0:	0019      	movs	r1, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	4b62      	ldr	r3, [pc, #392]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 80074a8:	430a      	orrs	r2, r1
 80074aa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074ac:	f7fd fe74 	bl	8005198 <HAL_GetTick>
 80074b0:	0003      	movs	r3, r0
 80074b2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d111      	bne.n	80074e0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80074bc:	e009      	b.n	80074d2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074be:	f7fd fe6b 	bl	8005198 <HAL_GetTick>
 80074c2:	0002      	movs	r2, r0
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	4a58      	ldr	r2, [pc, #352]	@ (800762c <HAL_RCC_ClockConfig+0x274>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e0a5      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80074d2:	4b57      	ldr	r3, [pc, #348]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	220c      	movs	r2, #12
 80074d8:	4013      	ands	r3, r2
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d1ef      	bne.n	80074be <HAL_RCC_ClockConfig+0x106>
 80074de:	e03a      	b.n	8007556 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d111      	bne.n	800750c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074e8:	e009      	b.n	80074fe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ea:	f7fd fe55 	bl	8005198 <HAL_GetTick>
 80074ee:	0002      	movs	r2, r0
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	4a4d      	ldr	r2, [pc, #308]	@ (800762c <HAL_RCC_ClockConfig+0x274>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e08f      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074fe:	4b4c      	ldr	r3, [pc, #304]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	220c      	movs	r2, #12
 8007504:	4013      	ands	r3, r2
 8007506:	2b0c      	cmp	r3, #12
 8007508:	d1ef      	bne.n	80074ea <HAL_RCC_ClockConfig+0x132>
 800750a:	e024      	b.n	8007556 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d11b      	bne.n	800754c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007514:	e009      	b.n	800752a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007516:	f7fd fe3f 	bl	8005198 <HAL_GetTick>
 800751a:	0002      	movs	r2, r0
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	4a42      	ldr	r2, [pc, #264]	@ (800762c <HAL_RCC_ClockConfig+0x274>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d901      	bls.n	800752a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e079      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800752a:	4b41      	ldr	r3, [pc, #260]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	220c      	movs	r2, #12
 8007530:	4013      	ands	r3, r2
 8007532:	2b04      	cmp	r3, #4
 8007534:	d1ef      	bne.n	8007516 <HAL_RCC_ClockConfig+0x15e>
 8007536:	e00e      	b.n	8007556 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007538:	f7fd fe2e 	bl	8005198 <HAL_GetTick>
 800753c:	0002      	movs	r2, r0
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	4a3a      	ldr	r2, [pc, #232]	@ (800762c <HAL_RCC_ClockConfig+0x274>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d901      	bls.n	800754c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e068      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800754c:	4b38      	ldr	r3, [pc, #224]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	220c      	movs	r2, #12
 8007552:	4013      	ands	r3, r2
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007556:	4b34      	ldr	r3, [pc, #208]	@ (8007628 <HAL_RCC_ClockConfig+0x270>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2201      	movs	r2, #1
 800755c:	4013      	ands	r3, r2
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d21e      	bcs.n	80075a2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007564:	4b30      	ldr	r3, [pc, #192]	@ (8007628 <HAL_RCC_ClockConfig+0x270>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2201      	movs	r2, #1
 800756a:	4393      	bics	r3, r2
 800756c:	0019      	movs	r1, r3
 800756e:	4b2e      	ldr	r3, [pc, #184]	@ (8007628 <HAL_RCC_ClockConfig+0x270>)
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007576:	f7fd fe0f 	bl	8005198 <HAL_GetTick>
 800757a:	0003      	movs	r3, r0
 800757c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800757e:	e009      	b.n	8007594 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007580:	f7fd fe0a 	bl	8005198 <HAL_GetTick>
 8007584:	0002      	movs	r2, r0
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	4a28      	ldr	r2, [pc, #160]	@ (800762c <HAL_RCC_ClockConfig+0x274>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e044      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007594:	4b24      	ldr	r3, [pc, #144]	@ (8007628 <HAL_RCC_ClockConfig+0x270>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2201      	movs	r2, #1
 800759a:	4013      	ands	r3, r2
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d1ee      	bne.n	8007580 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2204      	movs	r2, #4
 80075a8:	4013      	ands	r3, r2
 80075aa:	d009      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ac:	4b20      	ldr	r3, [pc, #128]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	4a20      	ldr	r2, [pc, #128]	@ (8007634 <HAL_RCC_ClockConfig+0x27c>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	0019      	movs	r1, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 80075bc:	430a      	orrs	r2, r1
 80075be:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2208      	movs	r2, #8
 80075c6:	4013      	ands	r3, r2
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075ca:	4b19      	ldr	r3, [pc, #100]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007638 <HAL_RCC_ClockConfig+0x280>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	0019      	movs	r1, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	00da      	lsls	r2, r3, #3
 80075da:	4b15      	ldr	r3, [pc, #84]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 80075dc:	430a      	orrs	r2, r1
 80075de:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075e0:	f000 f832 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 80075e4:	0001      	movs	r1, r0
 80075e6:	4b12      	ldr	r3, [pc, #72]	@ (8007630 <HAL_RCC_ClockConfig+0x278>)
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	091b      	lsrs	r3, r3, #4
 80075ec:	220f      	movs	r2, #15
 80075ee:	4013      	ands	r3, r2
 80075f0:	4a12      	ldr	r2, [pc, #72]	@ (800763c <HAL_RCC_ClockConfig+0x284>)
 80075f2:	5cd3      	ldrb	r3, [r2, r3]
 80075f4:	000a      	movs	r2, r1
 80075f6:	40da      	lsrs	r2, r3
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <HAL_RCC_ClockConfig+0x288>)
 80075fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80075fc:	4b11      	ldr	r3, [pc, #68]	@ (8007644 <HAL_RCC_ClockConfig+0x28c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	250b      	movs	r5, #11
 8007602:	197c      	adds	r4, r7, r5
 8007604:	0018      	movs	r0, r3
 8007606:	f7fd fd81 	bl	800510c <HAL_InitTick>
 800760a:	0003      	movs	r3, r0
 800760c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800760e:	197b      	adds	r3, r7, r5
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8007616:	197b      	adds	r3, r7, r5
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	e000      	b.n	800761e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	0018      	movs	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	b004      	add	sp, #16
 8007624:	bdb0      	pop	{r4, r5, r7, pc}
 8007626:	46c0      	nop			@ (mov r8, r8)
 8007628:	40022000 	.word	0x40022000
 800762c:	00001388 	.word	0x00001388
 8007630:	40021000 	.word	0x40021000
 8007634:	fffff8ff 	.word	0xfffff8ff
 8007638:	ffffc7ff 	.word	0xffffc7ff
 800763c:	0800a1e4 	.word	0x0800a1e4
 8007640:	20000000 	.word	0x20000000
 8007644:	20000008 	.word	0x20000008

08007648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007648:	b5b0      	push	{r4, r5, r7, lr}
 800764a:	b08e      	sub	sp, #56	@ 0x38
 800764c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800764e:	4b4c      	ldr	r3, [pc, #304]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x138>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007656:	230c      	movs	r3, #12
 8007658:	4013      	ands	r3, r2
 800765a:	2b0c      	cmp	r3, #12
 800765c:	d014      	beq.n	8007688 <HAL_RCC_GetSysClockFreq+0x40>
 800765e:	d900      	bls.n	8007662 <HAL_RCC_GetSysClockFreq+0x1a>
 8007660:	e07b      	b.n	800775a <HAL_RCC_GetSysClockFreq+0x112>
 8007662:	2b04      	cmp	r3, #4
 8007664:	d002      	beq.n	800766c <HAL_RCC_GetSysClockFreq+0x24>
 8007666:	2b08      	cmp	r3, #8
 8007668:	d00b      	beq.n	8007682 <HAL_RCC_GetSysClockFreq+0x3a>
 800766a:	e076      	b.n	800775a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800766c:	4b44      	ldr	r3, [pc, #272]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x138>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2210      	movs	r2, #16
 8007672:	4013      	ands	r3, r2
 8007674:	d002      	beq.n	800767c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007676:	4b43      	ldr	r3, [pc, #268]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007678:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800767a:	e07c      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800767c:	4b42      	ldr	r3, [pc, #264]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x140>)
 800767e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007680:	e079      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007682:	4b42      	ldr	r3, [pc, #264]	@ (800778c <HAL_RCC_GetSysClockFreq+0x144>)
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007686:	e076      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768a:	0c9a      	lsrs	r2, r3, #18
 800768c:	230f      	movs	r3, #15
 800768e:	401a      	ands	r2, r3
 8007690:	4b3f      	ldr	r3, [pc, #252]	@ (8007790 <HAL_RCC_GetSysClockFreq+0x148>)
 8007692:	5c9b      	ldrb	r3, [r3, r2]
 8007694:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007698:	0d9a      	lsrs	r2, r3, #22
 800769a:	2303      	movs	r3, #3
 800769c:	4013      	ands	r3, r2
 800769e:	3301      	adds	r3, #1
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076a2:	4b37      	ldr	r3, [pc, #220]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x138>)
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	2380      	movs	r3, #128	@ 0x80
 80076a8:	025b      	lsls	r3, r3, #9
 80076aa:	4013      	ands	r3, r2
 80076ac:	d01a      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80076ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	4a35      	ldr	r2, [pc, #212]	@ (800778c <HAL_RCC_GetSysClockFreq+0x144>)
 80076b8:	2300      	movs	r3, #0
 80076ba:	69b8      	ldr	r0, [r7, #24]
 80076bc:	69f9      	ldr	r1, [r7, #28]
 80076be:	f7f8 fe13 	bl	80002e8 <__aeabi_lmul>
 80076c2:	0002      	movs	r2, r0
 80076c4:	000b      	movs	r3, r1
 80076c6:	0010      	movs	r0, r2
 80076c8:	0019      	movs	r1, r3
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f7f8 fde7 	bl	80002a8 <__aeabi_uldivmod>
 80076da:	0002      	movs	r2, r0
 80076dc:	000b      	movs	r3, r1
 80076de:	0013      	movs	r3, r2
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e2:	e037      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80076e4:	4b26      	ldr	r3, [pc, #152]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x138>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2210      	movs	r2, #16
 80076ea:	4013      	ands	r3, r2
 80076ec:	d01a      	beq.n	8007724 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	4a23      	ldr	r2, [pc, #140]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x13c>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	68b8      	ldr	r0, [r7, #8]
 80076fc:	68f9      	ldr	r1, [r7, #12]
 80076fe:	f7f8 fdf3 	bl	80002e8 <__aeabi_lmul>
 8007702:	0002      	movs	r2, r0
 8007704:	000b      	movs	r3, r1
 8007706:	0010      	movs	r0, r2
 8007708:	0019      	movs	r1, r3
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	2300      	movs	r3, #0
 8007710:	607b      	str	r3, [r7, #4]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f7f8 fdc7 	bl	80002a8 <__aeabi_uldivmod>
 800771a:	0002      	movs	r2, r0
 800771c:	000b      	movs	r3, r1
 800771e:	0013      	movs	r3, r2
 8007720:	637b      	str	r3, [r7, #52]	@ 0x34
 8007722:	e017      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007726:	0018      	movs	r0, r3
 8007728:	2300      	movs	r3, #0
 800772a:	0019      	movs	r1, r3
 800772c:	4a16      	ldr	r2, [pc, #88]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x140>)
 800772e:	2300      	movs	r3, #0
 8007730:	f7f8 fdda 	bl	80002e8 <__aeabi_lmul>
 8007734:	0002      	movs	r2, r0
 8007736:	000b      	movs	r3, r1
 8007738:	0010      	movs	r0, r2
 800773a:	0019      	movs	r1, r3
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	001c      	movs	r4, r3
 8007740:	2300      	movs	r3, #0
 8007742:	001d      	movs	r5, r3
 8007744:	0022      	movs	r2, r4
 8007746:	002b      	movs	r3, r5
 8007748:	f7f8 fdae 	bl	80002a8 <__aeabi_uldivmod>
 800774c:	0002      	movs	r2, r0
 800774e:	000b      	movs	r3, r1
 8007750:	0013      	movs	r3, r2
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8007754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007756:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007758:	e00d      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800775a:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x138>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	0b5b      	lsrs	r3, r3, #13
 8007760:	2207      	movs	r2, #7
 8007762:	4013      	ands	r3, r2
 8007764:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	3301      	adds	r3, #1
 800776a:	2280      	movs	r2, #128	@ 0x80
 800776c:	0212      	lsls	r2, r2, #8
 800776e:	409a      	lsls	r2, r3
 8007770:	0013      	movs	r3, r2
 8007772:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007774:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8007778:	0018      	movs	r0, r3
 800777a:	46bd      	mov	sp, r7
 800777c:	b00e      	add	sp, #56	@ 0x38
 800777e:	bdb0      	pop	{r4, r5, r7, pc}
 8007780:	40021000 	.word	0x40021000
 8007784:	003d0900 	.word	0x003d0900
 8007788:	00f42400 	.word	0x00f42400
 800778c:	007a1200 	.word	0x007a1200
 8007790:	0800a1fc 	.word	0x0800a1fc

08007794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007798:	4b02      	ldr	r3, [pc, #8]	@ (80077a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800779a:	681b      	ldr	r3, [r3, #0]
}
 800779c:	0018      	movs	r0, r3
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	20000000 	.word	0x20000000

080077a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077ac:	f7ff fff2 	bl	8007794 <HAL_RCC_GetHCLKFreq>
 80077b0:	0001      	movs	r1, r0
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	0a1b      	lsrs	r3, r3, #8
 80077b8:	2207      	movs	r2, #7
 80077ba:	4013      	ands	r3, r2
 80077bc:	4a04      	ldr	r2, [pc, #16]	@ (80077d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077be:	5cd3      	ldrb	r3, [r2, r3]
 80077c0:	40d9      	lsrs	r1, r3
 80077c2:	000b      	movs	r3, r1
}
 80077c4:	0018      	movs	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	46c0      	nop			@ (mov r8, r8)
 80077cc:	40021000 	.word	0x40021000
 80077d0:	0800a1f4 	.word	0x0800a1f4

080077d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077d8:	f7ff ffdc 	bl	8007794 <HAL_RCC_GetHCLKFreq>
 80077dc:	0001      	movs	r1, r0
 80077de:	4b06      	ldr	r3, [pc, #24]	@ (80077f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	0adb      	lsrs	r3, r3, #11
 80077e4:	2207      	movs	r2, #7
 80077e6:	4013      	ands	r3, r2
 80077e8:	4a04      	ldr	r2, [pc, #16]	@ (80077fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80077ea:	5cd3      	ldrb	r3, [r2, r3]
 80077ec:	40d9      	lsrs	r1, r3
 80077ee:	000b      	movs	r3, r1
}
 80077f0:	0018      	movs	r0, r3
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	46c0      	nop			@ (mov r8, r8)
 80077f8:	40021000 	.word	0x40021000
 80077fc:	0800a1f4 	.word	0x0800a1f4

08007800 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007808:	2017      	movs	r0, #23
 800780a:	183b      	adds	r3, r7, r0
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2220      	movs	r2, #32
 8007816:	4013      	ands	r3, r2
 8007818:	d100      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800781a:	e0c2      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800781c:	4b91      	ldr	r3, [pc, #580]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800781e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007820:	2380      	movs	r3, #128	@ 0x80
 8007822:	055b      	lsls	r3, r3, #21
 8007824:	4013      	ands	r3, r2
 8007826:	d109      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007828:	4b8e      	ldr	r3, [pc, #568]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800782a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800782c:	4b8d      	ldr	r3, [pc, #564]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800782e:	2180      	movs	r1, #128	@ 0x80
 8007830:	0549      	lsls	r1, r1, #21
 8007832:	430a      	orrs	r2, r1
 8007834:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8007836:	183b      	adds	r3, r7, r0
 8007838:	2201      	movs	r2, #1
 800783a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800783c:	4b8a      	ldr	r3, [pc, #552]	@ (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	2380      	movs	r3, #128	@ 0x80
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	4013      	ands	r3, r2
 8007846:	d11a      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007848:	4b87      	ldr	r3, [pc, #540]	@ (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b86      	ldr	r3, [pc, #536]	@ (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800784e:	2180      	movs	r1, #128	@ 0x80
 8007850:	0049      	lsls	r1, r1, #1
 8007852:	430a      	orrs	r2, r1
 8007854:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007856:	f7fd fc9f 	bl	8005198 <HAL_GetTick>
 800785a:	0003      	movs	r3, r0
 800785c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800785e:	e008      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007860:	f7fd fc9a 	bl	8005198 <HAL_GetTick>
 8007864:	0002      	movs	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b64      	cmp	r3, #100	@ 0x64
 800786c:	d901      	bls.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e0f3      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007872:	4b7d      	ldr	r3, [pc, #500]	@ (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	2380      	movs	r3, #128	@ 0x80
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	4013      	ands	r3, r2
 800787c:	d0f0      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800787e:	4b79      	ldr	r3, [pc, #484]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	23c0      	movs	r3, #192	@ 0xc0
 8007884:	039b      	lsls	r3, r3, #14
 8007886:	4013      	ands	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	23c0      	movs	r3, #192	@ 0xc0
 8007890:	039b      	lsls	r3, r3, #14
 8007892:	4013      	ands	r3, r2
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	429a      	cmp	r2, r3
 8007898:	d013      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	23c0      	movs	r3, #192	@ 0xc0
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	401a      	ands	r2, r3
 80078a4:	23c0      	movs	r3, #192	@ 0xc0
 80078a6:	029b      	lsls	r3, r3, #10
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d10a      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078ac:	4b6d      	ldr	r3, [pc, #436]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	2380      	movs	r3, #128	@ 0x80
 80078b2:	029b      	lsls	r3, r3, #10
 80078b4:	401a      	ands	r2, r3
 80078b6:	2380      	movs	r3, #128	@ 0x80
 80078b8:	029b      	lsls	r3, r3, #10
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d101      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e0cb      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80078c2:	4b68      	ldr	r3, [pc, #416]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078c6:	23c0      	movs	r3, #192	@ 0xc0
 80078c8:	029b      	lsls	r3, r3, #10
 80078ca:	4013      	ands	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d03b      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	23c0      	movs	r3, #192	@ 0xc0
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	4013      	ands	r3, r2
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d033      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2220      	movs	r2, #32
 80078ea:	4013      	ands	r3, r2
 80078ec:	d02e      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80078ee:	4b5d      	ldr	r3, [pc, #372]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f2:	4a5e      	ldr	r2, [pc, #376]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078fc:	4b59      	ldr	r3, [pc, #356]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078fe:	2180      	movs	r1, #128	@ 0x80
 8007900:	0309      	lsls	r1, r1, #12
 8007902:	430a      	orrs	r2, r1
 8007904:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007906:	4b57      	ldr	r3, [pc, #348]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007908:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800790a:	4b56      	ldr	r3, [pc, #344]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800790c:	4958      	ldr	r1, [pc, #352]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800790e:	400a      	ands	r2, r1
 8007910:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007912:	4b54      	ldr	r3, [pc, #336]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	2380      	movs	r3, #128	@ 0x80
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4013      	ands	r3, r2
 8007920:	d014      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007922:	f7fd fc39 	bl	8005198 <HAL_GetTick>
 8007926:	0003      	movs	r3, r0
 8007928:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800792a:	e009      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800792c:	f7fd fc34 	bl	8005198 <HAL_GetTick>
 8007930:	0002      	movs	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	4a4f      	ldr	r2, [pc, #316]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e08c      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007940:	4b48      	ldr	r3, [pc, #288]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007944:	2380      	movs	r3, #128	@ 0x80
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4013      	ands	r3, r2
 800794a:	d0ef      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	23c0      	movs	r3, #192	@ 0xc0
 8007952:	029b      	lsls	r3, r3, #10
 8007954:	401a      	ands	r2, r3
 8007956:	23c0      	movs	r3, #192	@ 0xc0
 8007958:	029b      	lsls	r3, r3, #10
 800795a:	429a      	cmp	r2, r3
 800795c:	d10c      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800795e:	4b41      	ldr	r3, [pc, #260]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a45      	ldr	r2, [pc, #276]	@ (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8007964:	4013      	ands	r3, r2
 8007966:	0019      	movs	r1, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	23c0      	movs	r3, #192	@ 0xc0
 800796e:	039b      	lsls	r3, r3, #14
 8007970:	401a      	ands	r2, r3
 8007972:	4b3c      	ldr	r3, [pc, #240]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007974:	430a      	orrs	r2, r1
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	4b3a      	ldr	r3, [pc, #232]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800797a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	23c0      	movs	r3, #192	@ 0xc0
 8007982:	029b      	lsls	r3, r3, #10
 8007984:	401a      	ands	r2, r3
 8007986:	4b37      	ldr	r3, [pc, #220]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007988:	430a      	orrs	r2, r1
 800798a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800798c:	2317      	movs	r3, #23
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d105      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007996:	4b33      	ldr	r3, [pc, #204]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800799a:	4b32      	ldr	r3, [pc, #200]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800799c:	4937      	ldr	r1, [pc, #220]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800799e:	400a      	ands	r2, r1
 80079a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	4013      	ands	r3, r2
 80079aa:	d009      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079ac:	4b2d      	ldr	r3, [pc, #180]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b0:	2203      	movs	r2, #3
 80079b2:	4393      	bics	r3, r2
 80079b4:	0019      	movs	r1, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079bc:	430a      	orrs	r2, r1
 80079be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2202      	movs	r2, #2
 80079c6:	4013      	ands	r3, r2
 80079c8:	d009      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079ca:	4b26      	ldr	r3, [pc, #152]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ce:	220c      	movs	r2, #12
 80079d0:	4393      	bics	r3, r2
 80079d2:	0019      	movs	r1, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	4b22      	ldr	r3, [pc, #136]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079da:	430a      	orrs	r2, r1
 80079dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2204      	movs	r2, #4
 80079e4:	4013      	ands	r3, r2
 80079e6:	d009      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ec:	4a24      	ldr	r2, [pc, #144]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	0019      	movs	r1, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691a      	ldr	r2, [r3, #16]
 80079f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079f8:	430a      	orrs	r2, r1
 80079fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2208      	movs	r2, #8
 8007a02:	4013      	ands	r3, r2
 8007a04:	d009      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a06:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	0019      	movs	r1, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695a      	ldr	r2, [r3, #20]
 8007a14:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a16:	430a      	orrs	r2, r1
 8007a18:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	2380      	movs	r3, #128	@ 0x80
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4013      	ands	r3, r2
 8007a24:	d009      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a26:	4b0f      	ldr	r3, [pc, #60]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2a:	4a10      	ldr	r2, [pc, #64]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	0019      	movs	r1, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699a      	ldr	r2, [r3, #24]
 8007a34:	4b0b      	ldr	r3, [pc, #44]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a36:	430a      	orrs	r2, r1
 8007a38:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2280      	movs	r2, #128	@ 0x80
 8007a40:	4013      	ands	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007a44:	4b07      	ldr	r3, [pc, #28]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a48:	4a0f      	ldr	r2, [pc, #60]	@ (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	0019      	movs	r1, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69da      	ldr	r2, [r3, #28]
 8007a52:	4b04      	ldr	r3, [pc, #16]	@ (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a54:	430a      	orrs	r2, r1
 8007a56:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	b006      	add	sp, #24
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	46c0      	nop			@ (mov r8, r8)
 8007a64:	40021000 	.word	0x40021000
 8007a68:	40007000 	.word	0x40007000
 8007a6c:	fffcffff 	.word	0xfffcffff
 8007a70:	fff7ffff 	.word	0xfff7ffff
 8007a74:	00001388 	.word	0x00001388
 8007a78:	ffcfffff 	.word	0xffcfffff
 8007a7c:	efffffff 	.word	0xefffffff
 8007a80:	fffff3ff 	.word	0xfffff3ff
 8007a84:	ffffcfff 	.word	0xffffcfff
 8007a88:	fff3ffff 	.word	0xfff3ffff

08007a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e032      	b.n	8007b04 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2239      	movs	r2, #57	@ 0x39
 8007aa2:	5c9b      	ldrb	r3, [r3, r2]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d107      	bne.n	8007aba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2238      	movs	r2, #56	@ 0x38
 8007aae:	2100      	movs	r1, #0
 8007ab0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f7fb ff8d 	bl	80039d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2239      	movs	r2, #57	@ 0x39
 8007abe:	2102      	movs	r1, #2
 8007ac0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	0019      	movs	r1, r3
 8007acc:	0010      	movs	r0, r2
 8007ace:	f000 fb3f 	bl	8008150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	223e      	movs	r2, #62	@ 0x3e
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	223a      	movs	r2, #58	@ 0x3a
 8007ade:	2101      	movs	r1, #1
 8007ae0:	5499      	strb	r1, [r3, r2]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	223b      	movs	r2, #59	@ 0x3b
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	5499      	strb	r1, [r3, r2]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	223c      	movs	r2, #60	@ 0x3c
 8007aee:	2101      	movs	r1, #1
 8007af0:	5499      	strb	r1, [r3, r2]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	223d      	movs	r2, #61	@ 0x3d
 8007af6:	2101      	movs	r1, #1
 8007af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2239      	movs	r2, #57	@ 0x39
 8007afe:	2101      	movs	r1, #1
 8007b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	0018      	movs	r0, r3
 8007b06:	46bd      	mov	sp, r7
 8007b08:	b002      	add	sp, #8
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2239      	movs	r2, #57	@ 0x39
 8007b18:	5c9b      	ldrb	r3, [r3, r2]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d001      	beq.n	8007b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e033      	b.n	8007b8c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2239      	movs	r2, #57	@ 0x39
 8007b28:	2102      	movs	r1, #2
 8007b2a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	2380      	movs	r3, #128	@ 0x80
 8007b32:	05db      	lsls	r3, r3, #23
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d00e      	beq.n	8007b56 <HAL_TIM_Base_Start+0x4a>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a15      	ldr	r2, [pc, #84]	@ (8007b94 <HAL_TIM_Base_Start+0x88>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d009      	beq.n	8007b56 <HAL_TIM_Base_Start+0x4a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a14      	ldr	r2, [pc, #80]	@ (8007b98 <HAL_TIM_Base_Start+0x8c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d004      	beq.n	8007b56 <HAL_TIM_Base_Start+0x4a>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a12      	ldr	r2, [pc, #72]	@ (8007b9c <HAL_TIM_Base_Start+0x90>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d111      	bne.n	8007b7a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2207      	movs	r2, #7
 8007b5e:	4013      	ands	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d010      	beq.n	8007b8a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2101      	movs	r1, #1
 8007b74:	430a      	orrs	r2, r1
 8007b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b78:	e007      	b.n	8007b8a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2101      	movs	r1, #1
 8007b86:	430a      	orrs	r2, r1
 8007b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b004      	add	sp, #16
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40010800 	.word	0x40010800
 8007b9c:	40011400 	.word	0x40011400

08007ba0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd8 <HAL_TIM_Base_Stop+0x38>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	d107      	bne.n	8007bc4 <HAL_TIM_Base_Stop+0x24>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	438a      	bics	r2, r1
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2239      	movs	r2, #57	@ 0x39
 8007bc8:	2101      	movs	r1, #1
 8007bca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	0018      	movs	r0, r3
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	b002      	add	sp, #8
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	46c0      	nop			@ (mov r8, r8)
 8007bd8:	00001111 	.word	0x00001111

08007bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2239      	movs	r2, #57	@ 0x39
 8007be8:	5c9b      	ldrb	r3, [r3, r2]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d001      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e03b      	b.n	8007c6c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2239      	movs	r2, #57	@ 0x39
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2101      	movs	r1, #1
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	2380      	movs	r3, #128	@ 0x80
 8007c12:	05db      	lsls	r3, r3, #23
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d00e      	beq.n	8007c36 <HAL_TIM_Base_Start_IT+0x5a>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a15      	ldr	r2, [pc, #84]	@ (8007c74 <HAL_TIM_Base_Start_IT+0x98>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d009      	beq.n	8007c36 <HAL_TIM_Base_Start_IT+0x5a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a14      	ldr	r2, [pc, #80]	@ (8007c78 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <HAL_TIM_Base_Start_IT+0x5a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a12      	ldr	r2, [pc, #72]	@ (8007c7c <HAL_TIM_Base_Start_IT+0xa0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d111      	bne.n	8007c5a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	4013      	ands	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b06      	cmp	r3, #6
 8007c46:	d010      	beq.n	8007c6a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2101      	movs	r1, #1
 8007c54:	430a      	orrs	r2, r1
 8007c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c58:	e007      	b.n	8007c6a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2101      	movs	r1, #1
 8007c66:	430a      	orrs	r2, r1
 8007c68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b004      	add	sp, #16
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	40000400 	.word	0x40000400
 8007c78:	40010800 	.word	0x40010800
 8007c7c:	40011400 	.word	0x40011400

08007c80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e032      	b.n	8007cf8 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2239      	movs	r2, #57	@ 0x39
 8007c96:	5c9b      	ldrb	r3, [r3, r2]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d107      	bne.n	8007cae <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2238      	movs	r2, #56	@ 0x38
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7fb fed5 	bl	8003a58 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2239      	movs	r2, #57	@ 0x39
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	0019      	movs	r1, r3
 8007cc0:	0010      	movs	r0, r2
 8007cc2:	f000 fa45 	bl	8008150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	223e      	movs	r2, #62	@ 0x3e
 8007cca:	2101      	movs	r1, #1
 8007ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	223a      	movs	r2, #58	@ 0x3a
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	5499      	strb	r1, [r3, r2]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	223b      	movs	r2, #59	@ 0x3b
 8007cda:	2101      	movs	r1, #1
 8007cdc:	5499      	strb	r1, [r3, r2]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	223c      	movs	r2, #60	@ 0x3c
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	5499      	strb	r1, [r3, r2]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	223d      	movs	r2, #61	@ 0x3d
 8007cea:	2101      	movs	r1, #1
 8007cec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2239      	movs	r2, #57	@ 0x39
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	b002      	add	sp, #8
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d124      	bne.n	8007d60 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d11d      	bne.n	8007d60 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2203      	movs	r2, #3
 8007d2a:	4252      	negs	r2, r2
 8007d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d004      	beq.n	8007d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	0018      	movs	r0, r3
 8007d44:	f000 f9ec 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 8007d48:	e007      	b.n	8007d5a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f000 f9df 	bl	8008110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	0018      	movs	r0, r3
 8007d56:	f000 f9eb 	bl	8008130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2204      	movs	r2, #4
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d125      	bne.n	8007dba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	2204      	movs	r2, #4
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d11e      	bne.n	8007dba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2205      	movs	r2, #5
 8007d82:	4252      	negs	r2, r2
 8007d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	23c0      	movs	r3, #192	@ 0xc0
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4013      	ands	r3, r2
 8007d98:	d004      	beq.n	8007da4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	f000 f9bf 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 8007da2:	e007      	b.n	8007db4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	0018      	movs	r0, r3
 8007da8:	f000 f9b2 	bl	8008110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	0018      	movs	r0, r3
 8007db0:	f000 f9be 	bl	8008130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d124      	bne.n	8007e12 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	2208      	movs	r2, #8
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d11d      	bne.n	8007e12 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2209      	movs	r2, #9
 8007ddc:	4252      	negs	r2, r2
 8007dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2204      	movs	r2, #4
 8007de4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	2203      	movs	r2, #3
 8007dee:	4013      	ands	r3, r2
 8007df0:	d004      	beq.n	8007dfc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	0018      	movs	r0, r3
 8007df6:	f000 f993 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 8007dfa:	e007      	b.n	8007e0c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f000 f986 	bl	8008110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	0018      	movs	r0, r3
 8007e08:	f000 f992 	bl	8008130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2210      	movs	r2, #16
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	d125      	bne.n	8007e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	2210      	movs	r2, #16
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b10      	cmp	r3, #16
 8007e2c:	d11e      	bne.n	8007e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2211      	movs	r2, #17
 8007e34:	4252      	negs	r2, r2
 8007e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69da      	ldr	r2, [r3, #28]
 8007e44:	23c0      	movs	r3, #192	@ 0xc0
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f000 f966 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 8007e54:	e007      	b.n	8007e66 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f000 f959 	bl	8008110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	0018      	movs	r0, r3
 8007e62:	f000 f965 	bl	8008130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2201      	movs	r2, #1
 8007e74:	4013      	ands	r3, r2
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d10f      	bne.n	8007e9a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d108      	bne.n	8007e9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	4252      	negs	r2, r2
 8007e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	0018      	movs	r0, r3
 8007e96:	f000 f933 	bl	8008100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2240      	movs	r2, #64	@ 0x40
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b40      	cmp	r3, #64	@ 0x40
 8007ea6:	d10f      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	2240      	movs	r2, #64	@ 0x40
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	2b40      	cmp	r3, #64	@ 0x40
 8007eb4:	d108      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2241      	movs	r2, #65	@ 0x41
 8007ebc:	4252      	negs	r2, r2
 8007ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f000 f93c 	bl	8008140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ec8:	46c0      	nop			@ (mov r8, r8)
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	b002      	add	sp, #8
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2238      	movs	r2, #56	@ 0x38
 8007ee0:	5c9b      	ldrb	r3, [r3, r2]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_TIM_OC_ConfigChannel+0x1a>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e03c      	b.n	8007f64 <HAL_TIM_OC_ConfigChannel+0x94>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2238      	movs	r2, #56	@ 0x38
 8007eee:	2101      	movs	r1, #1
 8007ef0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b0c      	cmp	r3, #12
 8007ef6:	d027      	beq.n	8007f48 <HAL_TIM_OC_ConfigChannel+0x78>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b0c      	cmp	r3, #12
 8007efc:	d82c      	bhi.n	8007f58 <HAL_TIM_OC_ConfigChannel+0x88>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d019      	beq.n	8007f38 <HAL_TIM_OC_ConfigChannel+0x68>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d826      	bhi.n	8007f58 <HAL_TIM_OC_ConfigChannel+0x88>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_TIM_OC_ConfigChannel+0x48>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	d008      	beq.n	8007f28 <HAL_TIM_OC_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8007f16:	e01f      	b.n	8007f58 <HAL_TIM_OC_ConfigChannel+0x88>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	0011      	movs	r1, r2
 8007f20:	0018      	movs	r0, r3
 8007f22:	f000 f973 	bl	800820c <TIM_OC1_SetConfig>
      break;
 8007f26:	e018      	b.n	8007f5a <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	0011      	movs	r1, r2
 8007f30:	0018      	movs	r0, r3
 8007f32:	f000 f9a7 	bl	8008284 <TIM_OC2_SetConfig>
      break;
 8007f36:	e010      	b.n	8007f5a <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	0011      	movs	r1, r2
 8007f40:	0018      	movs	r0, r3
 8007f42:	f000 f9e1 	bl	8008308 <TIM_OC3_SetConfig>
      break;
 8007f46:	e008      	b.n	8007f5a <HAL_TIM_OC_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	0011      	movs	r1, r2
 8007f50:	0018      	movs	r0, r3
 8007f52:	f000 fa19 	bl	8008388 <TIM_OC4_SetConfig>
      break;
 8007f56:	e000      	b.n	8007f5a <HAL_TIM_OC_ConfigChannel+0x8a>
      break;
 8007f58:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2238      	movs	r2, #56	@ 0x38
 8007f5e:	2100      	movs	r1, #0
 8007f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	0018      	movs	r0, r3
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b004      	add	sp, #16
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2238      	movs	r2, #56	@ 0x38
 8007f7a:	5c9b      	ldrb	r3, [r3, r2]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_TIM_ConfigClockSource+0x18>
 8007f80:	2302      	movs	r3, #2
 8007f82:	e0b7      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x188>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2238      	movs	r2, #56	@ 0x38
 8007f88:	2101      	movs	r1, #1
 8007f8a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2239      	movs	r2, #57	@ 0x39
 8007f90:	2102      	movs	r1, #2
 8007f92:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2277      	movs	r2, #119	@ 0x77
 8007fa0:	4393      	bics	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4a55      	ldr	r2, [pc, #340]	@ (80080fc <HAL_TIM_ConfigClockSource+0x190>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2280      	movs	r2, #128	@ 0x80
 8007fba:	0192      	lsls	r2, r2, #6
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d040      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0xd6>
 8007fc0:	2280      	movs	r2, #128	@ 0x80
 8007fc2:	0192      	lsls	r2, r2, #6
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d900      	bls.n	8007fca <HAL_TIM_ConfigClockSource+0x5e>
 8007fc8:	e088      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
 8007fca:	2280      	movs	r2, #128	@ 0x80
 8007fcc:	0152      	lsls	r2, r2, #5
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d100      	bne.n	8007fd4 <HAL_TIM_ConfigClockSource+0x68>
 8007fd2:	e085      	b.n	80080e0 <HAL_TIM_ConfigClockSource+0x174>
 8007fd4:	2280      	movs	r2, #128	@ 0x80
 8007fd6:	0152      	lsls	r2, r2, #5
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d900      	bls.n	8007fde <HAL_TIM_ConfigClockSource+0x72>
 8007fdc:	e07e      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
 8007fde:	2b70      	cmp	r3, #112	@ 0x70
 8007fe0:	d018      	beq.n	8008014 <HAL_TIM_ConfigClockSource+0xa8>
 8007fe2:	d900      	bls.n	8007fe6 <HAL_TIM_ConfigClockSource+0x7a>
 8007fe4:	e07a      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
 8007fe6:	2b60      	cmp	r3, #96	@ 0x60
 8007fe8:	d04f      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x11e>
 8007fea:	d900      	bls.n	8007fee <HAL_TIM_ConfigClockSource+0x82>
 8007fec:	e076      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
 8007fee:	2b50      	cmp	r3, #80	@ 0x50
 8007ff0:	d03b      	beq.n	800806a <HAL_TIM_ConfigClockSource+0xfe>
 8007ff2:	d900      	bls.n	8007ff6 <HAL_TIM_ConfigClockSource+0x8a>
 8007ff4:	e072      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
 8007ff6:	2b40      	cmp	r3, #64	@ 0x40
 8007ff8:	d057      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x13e>
 8007ffa:	d900      	bls.n	8007ffe <HAL_TIM_ConfigClockSource+0x92>
 8007ffc:	e06e      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
 8007ffe:	2b30      	cmp	r3, #48	@ 0x30
 8008000:	d063      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x15e>
 8008002:	d86b      	bhi.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
 8008004:	2b20      	cmp	r3, #32
 8008006:	d060      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x15e>
 8008008:	d868      	bhi.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d05d      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x15e>
 800800e:	2b10      	cmp	r3, #16
 8008010:	d05b      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008012:	e063      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6899      	ldr	r1, [r3, #8]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f000 fa70 	bl	8008508 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2277      	movs	r2, #119	@ 0x77
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	609a      	str	r2, [r3, #8]
      break;
 8008040:	e04f      	b.n	80080e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	6899      	ldr	r1, [r3, #8]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f000 fa59 	bl	8008508 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2180      	movs	r1, #128	@ 0x80
 8008062:	01c9      	lsls	r1, r1, #7
 8008064:	430a      	orrs	r2, r1
 8008066:	609a      	str	r2, [r3, #8]
      break;
 8008068:	e03b      	b.n	80080e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6859      	ldr	r1, [r3, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	001a      	movs	r2, r3
 8008078:	f000 f9cc 	bl	8008414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2150      	movs	r1, #80	@ 0x50
 8008082:	0018      	movs	r0, r3
 8008084:	f000 fa26 	bl	80084d4 <TIM_ITRx_SetConfig>
      break;
 8008088:	e02b      	b.n	80080e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	6859      	ldr	r1, [r3, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	001a      	movs	r2, r3
 8008098:	f000 f9ea 	bl	8008470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2160      	movs	r1, #96	@ 0x60
 80080a2:	0018      	movs	r0, r3
 80080a4:	f000 fa16 	bl	80084d4 <TIM_ITRx_SetConfig>
      break;
 80080a8:	e01b      	b.n	80080e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6859      	ldr	r1, [r3, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	001a      	movs	r2, r3
 80080b8:	f000 f9ac 	bl	8008414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2140      	movs	r1, #64	@ 0x40
 80080c2:	0018      	movs	r0, r3
 80080c4:	f000 fa06 	bl	80084d4 <TIM_ITRx_SetConfig>
      break;
 80080c8:	e00b      	b.n	80080e2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	0019      	movs	r1, r3
 80080d4:	0010      	movs	r0, r2
 80080d6:	f000 f9fd 	bl	80084d4 <TIM_ITRx_SetConfig>
        break;
 80080da:	e002      	b.n	80080e2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80080dc:	46c0      	nop			@ (mov r8, r8)
 80080de:	e000      	b.n	80080e2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80080e0:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2239      	movs	r2, #57	@ 0x39
 80080e6:	2101      	movs	r1, #1
 80080e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2238      	movs	r2, #56	@ 0x38
 80080ee:	2100      	movs	r1, #0
 80080f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	0018      	movs	r0, r3
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b004      	add	sp, #16
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	ffff00ff 	.word	0xffff00ff

08008100 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008108:	46c0      	nop			@ (mov r8, r8)
 800810a:	46bd      	mov	sp, r7
 800810c:	b002      	add	sp, #8
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008118:	46c0      	nop			@ (mov r8, r8)
 800811a:	46bd      	mov	sp, r7
 800811c:	b002      	add	sp, #8
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008128:	46c0      	nop			@ (mov r8, r8)
 800812a:	46bd      	mov	sp, r7
 800812c:	b002      	add	sp, #8
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008138:	46c0      	nop			@ (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b002      	add	sp, #8
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008148:	46c0      	nop			@ (mov r8, r8)
 800814a:	46bd      	mov	sp, r7
 800814c:	b002      	add	sp, #8
 800814e:	bd80      	pop	{r7, pc}

08008150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	2380      	movs	r3, #128	@ 0x80
 8008164:	05db      	lsls	r3, r3, #23
 8008166:	429a      	cmp	r2, r3
 8008168:	d00b      	beq.n	8008182 <TIM_Base_SetConfig+0x32>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a23      	ldr	r2, [pc, #140]	@ (80081fc <TIM_Base_SetConfig+0xac>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <TIM_Base_SetConfig+0x32>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a22      	ldr	r2, [pc, #136]	@ (8008200 <TIM_Base_SetConfig+0xb0>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <TIM_Base_SetConfig+0x32>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a21      	ldr	r2, [pc, #132]	@ (8008204 <TIM_Base_SetConfig+0xb4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d108      	bne.n	8008194 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2270      	movs	r2, #112	@ 0x70
 8008186:	4393      	bics	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	2380      	movs	r3, #128	@ 0x80
 8008198:	05db      	lsls	r3, r3, #23
 800819a:	429a      	cmp	r2, r3
 800819c:	d00b      	beq.n	80081b6 <TIM_Base_SetConfig+0x66>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a16      	ldr	r2, [pc, #88]	@ (80081fc <TIM_Base_SetConfig+0xac>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d007      	beq.n	80081b6 <TIM_Base_SetConfig+0x66>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a15      	ldr	r2, [pc, #84]	@ (8008200 <TIM_Base_SetConfig+0xb0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d003      	beq.n	80081b6 <TIM_Base_SetConfig+0x66>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a14      	ldr	r2, [pc, #80]	@ (8008204 <TIM_Base_SetConfig+0xb4>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d108      	bne.n	80081c8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a13      	ldr	r2, [pc, #76]	@ (8008208 <TIM_Base_SetConfig+0xb8>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2280      	movs	r2, #128	@ 0x80
 80081cc:	4393      	bics	r3, r2
 80081ce:	001a      	movs	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	615a      	str	r2, [r3, #20]
}
 80081f4:	46c0      	nop			@ (mov r8, r8)
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b004      	add	sp, #16
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	40000400 	.word	0x40000400
 8008200:	40010800 	.word	0x40010800
 8008204:	40011400 	.word	0x40011400
 8008208:	fffffcff 	.word	0xfffffcff

0800820c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	2201      	movs	r2, #1
 800821c:	4393      	bics	r3, r2
 800821e:	001a      	movs	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2270      	movs	r2, #112	@ 0x70
 800823a:	4393      	bics	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2203      	movs	r2, #3
 8008242:	4393      	bics	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4313      	orrs	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2202      	movs	r2, #2
 8008254:	4393      	bics	r3, r2
 8008256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	4313      	orrs	r3, r2
 8008260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	621a      	str	r2, [r3, #32]
}
 800827c:	46c0      	nop			@ (mov r8, r8)
 800827e:	46bd      	mov	sp, r7
 8008280:	b006      	add	sp, #24
 8008282:	bd80      	pop	{r7, pc}

08008284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	2210      	movs	r2, #16
 8008294:	4393      	bics	r3, r2
 8008296:	001a      	movs	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4a13      	ldr	r2, [pc, #76]	@ (8008300 <TIM_OC2_SetConfig+0x7c>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4a12      	ldr	r2, [pc, #72]	@ (8008304 <TIM_OC2_SetConfig+0x80>)
 80082ba:	4013      	ands	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2220      	movs	r2, #32
 80082ce:	4393      	bics	r3, r2
 80082d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	621a      	str	r2, [r3, #32]
}
 80082f8:	46c0      	nop			@ (mov r8, r8)
 80082fa:	46bd      	mov	sp, r7
 80082fc:	b006      	add	sp, #24
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	ffff8fff 	.word	0xffff8fff
 8008304:	fffffcff 	.word	0xfffffcff

08008308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	4a1a      	ldr	r2, [pc, #104]	@ (8008380 <TIM_OC3_SetConfig+0x78>)
 8008318:	401a      	ands	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2270      	movs	r2, #112	@ 0x70
 8008334:	4393      	bics	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2203      	movs	r2, #3
 800833c:	4393      	bics	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	4a0d      	ldr	r2, [pc, #52]	@ (8008384 <TIM_OC3_SetConfig+0x7c>)
 800834e:	4013      	ands	r3, r2
 8008350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	621a      	str	r2, [r3, #32]
}
 8008378:	46c0      	nop			@ (mov r8, r8)
 800837a:	46bd      	mov	sp, r7
 800837c:	b006      	add	sp, #24
 800837e:	bd80      	pop	{r7, pc}
 8008380:	fffffeff 	.word	0xfffffeff
 8008384:	fffffdff 	.word	0xfffffdff

08008388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	4a1b      	ldr	r2, [pc, #108]	@ (8008404 <TIM_OC4_SetConfig+0x7c>)
 8008398:	401a      	ands	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a15      	ldr	r2, [pc, #84]	@ (8008408 <TIM_OC4_SetConfig+0x80>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4a14      	ldr	r2, [pc, #80]	@ (800840c <TIM_OC4_SetConfig+0x84>)
 80083bc:	4013      	ands	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	4a10      	ldr	r2, [pc, #64]	@ (8008410 <TIM_OC4_SetConfig+0x88>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	031b      	lsls	r3, r3, #12
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	621a      	str	r2, [r3, #32]
}
 80083fa:	46c0      	nop			@ (mov r8, r8)
 80083fc:	46bd      	mov	sp, r7
 80083fe:	b006      	add	sp, #24
 8008400:	bd80      	pop	{r7, pc}
 8008402:	46c0      	nop			@ (mov r8, r8)
 8008404:	ffffefff 	.word	0xffffefff
 8008408:	ffff8fff 	.word	0xffff8fff
 800840c:	fffffcff 	.word	0xfffffcff
 8008410:	ffffdfff 	.word	0xffffdfff

08008414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	2201      	movs	r2, #1
 800842c:	4393      	bics	r3, r2
 800842e:	001a      	movs	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	22f0      	movs	r2, #240	@ 0xf0
 800843e:	4393      	bics	r3, r2
 8008440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	220a      	movs	r2, #10
 8008450:	4393      	bics	r3, r2
 8008452:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	621a      	str	r2, [r3, #32]
}
 8008468:	46c0      	nop			@ (mov r8, r8)
 800846a:	46bd      	mov	sp, r7
 800846c:	b006      	add	sp, #24
 800846e:	bd80      	pop	{r7, pc}

08008470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	2210      	movs	r2, #16
 8008482:	4393      	bics	r3, r2
 8008484:	001a      	movs	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	4a0d      	ldr	r2, [pc, #52]	@ (80084d0 <TIM_TI2_ConfigInputStage+0x60>)
 800849a:	4013      	ands	r3, r2
 800849c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	031b      	lsls	r3, r3, #12
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	22a0      	movs	r2, #160	@ 0xa0
 80084ac:	4393      	bics	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	621a      	str	r2, [r3, #32]
}
 80084c6:	46c0      	nop			@ (mov r8, r8)
 80084c8:	46bd      	mov	sp, r7
 80084ca:	b006      	add	sp, #24
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	46c0      	nop			@ (mov r8, r8)
 80084d0:	ffff0fff 	.word	0xffff0fff

080084d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2270      	movs	r2, #112	@ 0x70
 80084e8:	4393      	bics	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	2207      	movs	r2, #7
 80084f4:	4313      	orrs	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	609a      	str	r2, [r3, #8]
}
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b004      	add	sp, #16
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	4a09      	ldr	r2, [pc, #36]	@ (8008544 <TIM_ETR_SetConfig+0x3c>)
 8008520:	4013      	ands	r3, r2
 8008522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	021a      	lsls	r2, r3, #8
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	431a      	orrs	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4313      	orrs	r3, r2
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	609a      	str	r2, [r3, #8]
}
 800853c:	46c0      	nop			@ (mov r8, r8)
 800853e:	46bd      	mov	sp, r7
 8008540:	b006      	add	sp, #24
 8008542:	bd80      	pop	{r7, pc}
 8008544:	ffff00ff 	.word	0xffff00ff

08008548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2238      	movs	r2, #56	@ 0x38
 8008556:	5c9b      	ldrb	r3, [r3, r2]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800855c:	2302      	movs	r3, #2
 800855e:	e047      	b.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2238      	movs	r2, #56	@ 0x38
 8008564:	2101      	movs	r1, #1
 8008566:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2239      	movs	r2, #57	@ 0x39
 800856c:	2102      	movs	r1, #2
 800856e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2270      	movs	r2, #112	@ 0x70
 8008584:	4393      	bics	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	2380      	movs	r3, #128	@ 0x80
 80085a0:	05db      	lsls	r3, r3, #23
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d00e      	beq.n	80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a13      	ldr	r2, [pc, #76]	@ (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d009      	beq.n	80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a11      	ldr	r2, [pc, #68]	@ (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d004      	beq.n	80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a10      	ldr	r2, [pc, #64]	@ (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d10c      	bne.n	80085de <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2280      	movs	r2, #128	@ 0x80
 80085c8:	4393      	bics	r3, r2
 80085ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2239      	movs	r2, #57	@ 0x39
 80085e2:	2101      	movs	r1, #1
 80085e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2238      	movs	r2, #56	@ 0x38
 80085ea:	2100      	movs	r1, #0
 80085ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	0018      	movs	r0, r3
 80085f2:	46bd      	mov	sp, r7
 80085f4:	b004      	add	sp, #16
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40010800 	.word	0x40010800
 8008600:	40011400 	.word	0x40011400

08008604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e044      	b.n	80086a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800861a:	2b00      	cmp	r3, #0
 800861c:	d107      	bne.n	800862e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2274      	movs	r2, #116	@ 0x74
 8008622:	2100      	movs	r1, #0
 8008624:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	0018      	movs	r0, r3
 800862a:	f7fb fa2d 	bl	8003a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2224      	movs	r2, #36	@ 0x24
 8008632:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2101      	movs	r1, #1
 8008640:	438a      	bics	r2, r1
 8008642:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	0018      	movs	r0, r3
 8008648:	f000 faf8 	bl	8008c3c <UART_SetConfig>
 800864c:	0003      	movs	r3, r0
 800864e:	2b01      	cmp	r3, #1
 8008650:	d101      	bne.n	8008656 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e024      	b.n	80086a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	0018      	movs	r0, r3
 8008662:	f000 fd8b 	bl	800917c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	490d      	ldr	r1, [pc, #52]	@ (80086a8 <HAL_UART_Init+0xa4>)
 8008672:	400a      	ands	r2, r1
 8008674:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	212a      	movs	r1, #42	@ 0x2a
 8008682:	438a      	bics	r2, r1
 8008684:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2101      	movs	r1, #1
 8008692:	430a      	orrs	r2, r1
 8008694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	0018      	movs	r0, r3
 800869a:	f000 fe23 	bl	80092e4 <UART_CheckIdleState>
 800869e:	0003      	movs	r3, r0
}
 80086a0:	0018      	movs	r0, r3
 80086a2:	46bd      	mov	sp, r7
 80086a4:	b002      	add	sp, #8
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	ffffb7ff 	.word	0xffffb7ff

080086ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08a      	sub	sp, #40	@ 0x28
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	1dbb      	adds	r3, r7, #6
 80086ba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d000      	beq.n	80086c6 <HAL_UART_Transmit+0x1a>
 80086c4:	e095      	b.n	80087f2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <HAL_UART_Transmit+0x28>
 80086cc:	1dbb      	adds	r3, r7, #6
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e08d      	b.n	80087f4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	2380      	movs	r3, #128	@ 0x80
 80086de:	015b      	lsls	r3, r3, #5
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d109      	bne.n	80086f8 <HAL_UART_Transmit+0x4c>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d105      	bne.n	80086f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2201      	movs	r2, #1
 80086f0:	4013      	ands	r3, r2
 80086f2:	d001      	beq.n	80086f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e07d      	b.n	80087f4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2274      	movs	r2, #116	@ 0x74
 80086fc:	5c9b      	ldrb	r3, [r3, r2]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d101      	bne.n	8008706 <HAL_UART_Transmit+0x5a>
 8008702:	2302      	movs	r3, #2
 8008704:	e076      	b.n	80087f4 <HAL_UART_Transmit+0x148>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2274      	movs	r2, #116	@ 0x74
 800870a:	2101      	movs	r1, #1
 800870c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2280      	movs	r2, #128	@ 0x80
 8008712:	2100      	movs	r1, #0
 8008714:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2221      	movs	r2, #33	@ 0x21
 800871a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800871c:	f7fc fd3c 	bl	8005198 <HAL_GetTick>
 8008720:	0003      	movs	r3, r0
 8008722:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	1dba      	adds	r2, r7, #6
 8008728:	2150      	movs	r1, #80	@ 0x50
 800872a:	8812      	ldrh	r2, [r2, #0]
 800872c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1dba      	adds	r2, r7, #6
 8008732:	2152      	movs	r1, #82	@ 0x52
 8008734:	8812      	ldrh	r2, [r2, #0]
 8008736:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	2380      	movs	r3, #128	@ 0x80
 800873e:	015b      	lsls	r3, r3, #5
 8008740:	429a      	cmp	r2, r3
 8008742:	d108      	bne.n	8008756 <HAL_UART_Transmit+0xaa>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800874c:	2300      	movs	r3, #0
 800874e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	e003      	b.n	800875e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800875a:	2300      	movs	r3, #0
 800875c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2274      	movs	r2, #116	@ 0x74
 8008762:	2100      	movs	r1, #0
 8008764:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8008766:	e02c      	b.n	80087c2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	0013      	movs	r3, r2
 8008772:	2200      	movs	r2, #0
 8008774:	2180      	movs	r1, #128	@ 0x80
 8008776:	f000 fdfd 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 800877a:	1e03      	subs	r3, r0, #0
 800877c:	d001      	beq.n	8008782 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e038      	b.n	80087f4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	001a      	movs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	05d2      	lsls	r2, r2, #23
 8008794:	0dd2      	lsrs	r2, r2, #23
 8008796:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	3302      	adds	r3, #2
 800879c:	61bb      	str	r3, [r7, #24]
 800879e:	e007      	b.n	80087b0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	781a      	ldrb	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	3301      	adds	r3, #1
 80087ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2252      	movs	r2, #82	@ 0x52
 80087b4:	5a9b      	ldrh	r3, [r3, r2]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b299      	uxth	r1, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2252      	movs	r2, #82	@ 0x52
 80087c0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2252      	movs	r2, #82	@ 0x52
 80087c6:	5a9b      	ldrh	r3, [r3, r2]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1cc      	bne.n	8008768 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	0013      	movs	r3, r2
 80087d8:	2200      	movs	r2, #0
 80087da:	2140      	movs	r1, #64	@ 0x40
 80087dc:	f000 fdca 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 80087e0:	1e03      	subs	r3, r0, #0
 80087e2:	d001      	beq.n	80087e8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e005      	b.n	80087f4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2220      	movs	r2, #32
 80087ec:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e000      	b.n	80087f4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80087f2:	2302      	movs	r3, #2
  }
}
 80087f4:	0018      	movs	r0, r3
 80087f6:	46bd      	mov	sp, r7
 80087f8:	b008      	add	sp, #32
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	4ab5      	ldr	r2, [pc, #724]	@ (8008af4 <HAL_UART_IRQHandler+0x2f8>)
 8008820:	4013      	ands	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d112      	bne.n	8008850 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	2220      	movs	r2, #32
 800882e:	4013      	ands	r3, r2
 8008830:	d00e      	beq.n	8008850 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	2220      	movs	r2, #32
 8008836:	4013      	ands	r3, r2
 8008838:	d00a      	beq.n	8008850 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800883e:	2b00      	cmp	r3, #0
 8008840:	d100      	bne.n	8008844 <HAL_UART_IRQHandler+0x48>
 8008842:	e1d1      	b.n	8008be8 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	0010      	movs	r0, r2
 800884c:	4798      	blx	r3
      }
      return;
 800884e:	e1cb      	b.n	8008be8 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d100      	bne.n	8008858 <HAL_UART_IRQHandler+0x5c>
 8008856:	e0d9      	b.n	8008a0c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2201      	movs	r2, #1
 800885c:	4013      	ands	r3, r2
 800885e:	d104      	bne.n	800886a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	4aa5      	ldr	r2, [pc, #660]	@ (8008af8 <HAL_UART_IRQHandler+0x2fc>)
 8008864:	4013      	ands	r3, r2
 8008866:	d100      	bne.n	800886a <HAL_UART_IRQHandler+0x6e>
 8008868:	e0d0      	b.n	8008a0c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	2201      	movs	r2, #1
 800886e:	4013      	ands	r3, r2
 8008870:	d010      	beq.n	8008894 <HAL_UART_IRQHandler+0x98>
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	2380      	movs	r3, #128	@ 0x80
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	4013      	ands	r3, r2
 800887a:	d00b      	beq.n	8008894 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2201      	movs	r2, #1
 8008882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2280      	movs	r2, #128	@ 0x80
 8008888:	589b      	ldr	r3, [r3, r2]
 800888a:	2201      	movs	r2, #1
 800888c:	431a      	orrs	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2180      	movs	r1, #128	@ 0x80
 8008892:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2202      	movs	r2, #2
 8008898:	4013      	ands	r3, r2
 800889a:	d00f      	beq.n	80088bc <HAL_UART_IRQHandler+0xc0>
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2201      	movs	r2, #1
 80088a0:	4013      	ands	r3, r2
 80088a2:	d00b      	beq.n	80088bc <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2202      	movs	r2, #2
 80088aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2280      	movs	r2, #128	@ 0x80
 80088b0:	589b      	ldr	r3, [r3, r2]
 80088b2:	2204      	movs	r2, #4
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2180      	movs	r1, #128	@ 0x80
 80088ba:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	2204      	movs	r2, #4
 80088c0:	4013      	ands	r3, r2
 80088c2:	d00f      	beq.n	80088e4 <HAL_UART_IRQHandler+0xe8>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2201      	movs	r2, #1
 80088c8:	4013      	ands	r3, r2
 80088ca:	d00b      	beq.n	80088e4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2204      	movs	r2, #4
 80088d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2280      	movs	r2, #128	@ 0x80
 80088d8:	589b      	ldr	r3, [r3, r2]
 80088da:	2202      	movs	r2, #2
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2180      	movs	r1, #128	@ 0x80
 80088e2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2208      	movs	r2, #8
 80088e8:	4013      	ands	r3, r2
 80088ea:	d013      	beq.n	8008914 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	2220      	movs	r2, #32
 80088f0:	4013      	ands	r3, r2
 80088f2:	d103      	bne.n	80088fc <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2201      	movs	r2, #1
 80088f8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088fa:	d00b      	beq.n	8008914 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2208      	movs	r2, #8
 8008902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2280      	movs	r2, #128	@ 0x80
 8008908:	589b      	ldr	r3, [r3, r2]
 800890a:	2208      	movs	r2, #8
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2180      	movs	r1, #128	@ 0x80
 8008912:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	2380      	movs	r3, #128	@ 0x80
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	4013      	ands	r3, r2
 800891c:	d011      	beq.n	8008942 <HAL_UART_IRQHandler+0x146>
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	2380      	movs	r3, #128	@ 0x80
 8008922:	04db      	lsls	r3, r3, #19
 8008924:	4013      	ands	r3, r2
 8008926:	d00c      	beq.n	8008942 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2280      	movs	r2, #128	@ 0x80
 800892e:	0112      	lsls	r2, r2, #4
 8008930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2280      	movs	r2, #128	@ 0x80
 8008936:	589b      	ldr	r3, [r3, r2]
 8008938:	2220      	movs	r2, #32
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2180      	movs	r1, #128	@ 0x80
 8008940:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2280      	movs	r2, #128	@ 0x80
 8008946:	589b      	ldr	r3, [r3, r2]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d100      	bne.n	800894e <HAL_UART_IRQHandler+0x152>
 800894c:	e14e      	b.n	8008bec <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	2220      	movs	r2, #32
 8008952:	4013      	ands	r3, r2
 8008954:	d00c      	beq.n	8008970 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2220      	movs	r2, #32
 800895a:	4013      	ands	r3, r2
 800895c:	d008      	beq.n	8008970 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	0010      	movs	r0, r2
 800896e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2280      	movs	r2, #128	@ 0x80
 8008974:	589b      	ldr	r3, [r3, r2]
 8008976:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2240      	movs	r2, #64	@ 0x40
 8008980:	4013      	ands	r3, r2
 8008982:	2b40      	cmp	r3, #64	@ 0x40
 8008984:	d003      	beq.n	800898e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2228      	movs	r2, #40	@ 0x28
 800898a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800898c:	d033      	beq.n	80089f6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	0018      	movs	r0, r3
 8008992:	f000 fd6d 	bl	8009470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	2240      	movs	r2, #64	@ 0x40
 800899e:	4013      	ands	r3, r2
 80089a0:	2b40      	cmp	r3, #64	@ 0x40
 80089a2:	d123      	bne.n	80089ec <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2140      	movs	r1, #64	@ 0x40
 80089b0:	438a      	bics	r2, r1
 80089b2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d012      	beq.n	80089e2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c0:	4a4e      	ldr	r2, [pc, #312]	@ (8008afc <HAL_UART_IRQHandler+0x300>)
 80089c2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c8:	0018      	movs	r0, r3
 80089ca:	f7fd f97b 	bl	8005cc4 <HAL_DMA_Abort_IT>
 80089ce:	1e03      	subs	r3, r0, #0
 80089d0:	d01a      	beq.n	8008a08 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089dc:	0018      	movs	r0, r3
 80089de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e0:	e012      	b.n	8008a08 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	0018      	movs	r0, r3
 80089e6:	f000 f915 	bl	8008c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ea:	e00d      	b.n	8008a08 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	0018      	movs	r0, r3
 80089f0:	f000 f910 	bl	8008c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f4:	e008      	b.n	8008a08 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	0018      	movs	r0, r3
 80089fa:	f000 f90b 	bl	8008c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2280      	movs	r2, #128	@ 0x80
 8008a02:	2100      	movs	r1, #0
 8008a04:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008a06:	e0f1      	b.n	8008bec <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a08:	46c0      	nop			@ (mov r8, r8)
    return;
 8008a0a:	e0ef      	b.n	8008bec <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d000      	beq.n	8008a16 <HAL_UART_IRQHandler+0x21a>
 8008a14:	e0b5      	b.n	8008b82 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	2210      	movs	r2, #16
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	d100      	bne.n	8008a20 <HAL_UART_IRQHandler+0x224>
 8008a1e:	e0b0      	b.n	8008b82 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	2210      	movs	r2, #16
 8008a24:	4013      	ands	r3, r2
 8008a26:	d100      	bne.n	8008a2a <HAL_UART_IRQHandler+0x22e>
 8008a28:	e0ab      	b.n	8008b82 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2210      	movs	r2, #16
 8008a30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	2240      	movs	r2, #64	@ 0x40
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b40      	cmp	r3, #64	@ 0x40
 8008a3e:	d161      	bne.n	8008b04 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	2108      	movs	r1, #8
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d100      	bne.n	8008a58 <HAL_UART_IRQHandler+0x25c>
 8008a56:	e0cb      	b.n	8008bf0 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2258      	movs	r2, #88	@ 0x58
 8008a5c:	5a9b      	ldrh	r3, [r3, r2]
 8008a5e:	187a      	adds	r2, r7, r1
 8008a60:	8812      	ldrh	r2, [r2, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d300      	bcc.n	8008a68 <HAL_UART_IRQHandler+0x26c>
 8008a66:	e0c3      	b.n	8008bf0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	187a      	adds	r2, r7, r1
 8008a6c:	215a      	movs	r1, #90	@ 0x5a
 8008a6e:	8812      	ldrh	r2, [r2, #0]
 8008a70:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d12a      	bne.n	8008ad6 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	491d      	ldr	r1, [pc, #116]	@ (8008b00 <HAL_UART_IRQHandler+0x304>)
 8008a8c:	400a      	ands	r2, r1
 8008a8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689a      	ldr	r2, [r3, #8]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	438a      	bics	r2, r1
 8008a9e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2140      	movs	r1, #64	@ 0x40
 8008aac:	438a      	bics	r2, r1
 8008aae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	661a      	str	r2, [r3, #96]	@ 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2110      	movs	r1, #16
 8008ac8:	438a      	bics	r2, r1
 8008aca:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f7fd f8b7 	bl	8005c44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2258      	movs	r2, #88	@ 0x58
 8008ada:	5a9a      	ldrh	r2, [r3, r2]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	215a      	movs	r1, #90	@ 0x5a
 8008ae0:	5a5b      	ldrh	r3, [r3, r1]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	0011      	movs	r1, r2
 8008aec:	0018      	movs	r0, r3
 8008aee:	f000 f899 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008af2:	e07d      	b.n	8008bf0 <HAL_UART_IRQHandler+0x3f4>
 8008af4:	0000080f 	.word	0x0000080f
 8008af8:	04000120 	.word	0x04000120
 8008afc:	080094d1 	.word	0x080094d1
 8008b00:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2258      	movs	r2, #88	@ 0x58
 8008b08:	5a99      	ldrh	r1, [r3, r2]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	225a      	movs	r2, #90	@ 0x5a
 8008b0e:	5a9b      	ldrh	r3, [r3, r2]
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	200a      	movs	r0, #10
 8008b14:	183b      	adds	r3, r7, r0
 8008b16:	1a8a      	subs	r2, r1, r2
 8008b18:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	225a      	movs	r2, #90	@ 0x5a
 8008b1e:	5a9b      	ldrh	r3, [r3, r2]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d100      	bne.n	8008b28 <HAL_UART_IRQHandler+0x32c>
 8008b26:	e065      	b.n	8008bf4 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8008b28:	183b      	adds	r3, r7, r0
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d061      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4931      	ldr	r1, [pc, #196]	@ (8008c00 <HAL_UART_IRQHandler+0x404>)
 8008b3c:	400a      	ands	r2, r1
 8008b3e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	438a      	bics	r2, r1
 8008b4e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2220      	movs	r2, #32
 8008b54:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	665a      	str	r2, [r3, #100]	@ 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2110      	movs	r1, #16
 8008b6e:	438a      	bics	r2, r1
 8008b70:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b72:	183b      	adds	r3, r7, r0
 8008b74:	881a      	ldrh	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	0011      	movs	r1, r2
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f000 f852 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008b80:	e038      	b.n	8008bf4 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b82:	69fa      	ldr	r2, [r7, #28]
 8008b84:	2380      	movs	r3, #128	@ 0x80
 8008b86:	035b      	lsls	r3, r3, #13
 8008b88:	4013      	ands	r3, r2
 8008b8a:	d00e      	beq.n	8008baa <HAL_UART_IRQHandler+0x3ae>
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	2380      	movs	r3, #128	@ 0x80
 8008b90:	03db      	lsls	r3, r3, #15
 8008b92:	4013      	ands	r3, r2
 8008b94:	d009      	beq.n	8008baa <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2280      	movs	r2, #128	@ 0x80
 8008b9c:	0352      	lsls	r2, r2, #13
 8008b9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f000 fcc5 	bl	8009532 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ba8:	e027      	b.n	8008bfa <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	2280      	movs	r2, #128	@ 0x80
 8008bae:	4013      	ands	r3, r2
 8008bb0:	d00d      	beq.n	8008bce <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2280      	movs	r2, #128	@ 0x80
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	d009      	beq.n	8008bce <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d01a      	beq.n	8008bf8 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	0010      	movs	r0, r2
 8008bca:	4798      	blx	r3
    }
    return;
 8008bcc:	e014      	b.n	8008bf8 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	2240      	movs	r2, #64	@ 0x40
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	d011      	beq.n	8008bfa <HAL_UART_IRQHandler+0x3fe>
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2240      	movs	r2, #64	@ 0x40
 8008bda:	4013      	ands	r3, r2
 8008bdc:	d00d      	beq.n	8008bfa <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	0018      	movs	r0, r3
 8008be2:	f000 fc8c 	bl	80094fe <UART_EndTransmit_IT>
    return;
 8008be6:	e008      	b.n	8008bfa <HAL_UART_IRQHandler+0x3fe>
      return;
 8008be8:	46c0      	nop			@ (mov r8, r8)
 8008bea:	e006      	b.n	8008bfa <HAL_UART_IRQHandler+0x3fe>
    return;
 8008bec:	46c0      	nop			@ (mov r8, r8)
 8008bee:	e004      	b.n	8008bfa <HAL_UART_IRQHandler+0x3fe>
      return;
 8008bf0:	46c0      	nop			@ (mov r8, r8)
 8008bf2:	e002      	b.n	8008bfa <HAL_UART_IRQHandler+0x3fe>
      return;
 8008bf4:	46c0      	nop			@ (mov r8, r8)
 8008bf6:	e000      	b.n	8008bfa <HAL_UART_IRQHandler+0x3fe>
    return;
 8008bf8:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	b008      	add	sp, #32
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	fffffedf 	.word	0xfffffedf

08008c04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c0c:	46c0      	nop			@ (mov r8, r8)
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	b002      	add	sp, #8
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c1c:	46c0      	nop			@ (mov r8, r8)
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	b002      	add	sp, #8
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	000a      	movs	r2, r1
 8008c2e:	1cbb      	adds	r3, r7, #2
 8008c30:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c32:	46c0      	nop			@ (mov r8, r8)
 8008c34:	46bd      	mov	sp, r7
 8008c36:	b002      	add	sp, #8
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c3c:	b5b0      	push	{r4, r5, r7, lr}
 8008c3e:	b08e      	sub	sp, #56	@ 0x38
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c44:	231a      	movs	r3, #26
 8008c46:	2218      	movs	r2, #24
 8008c48:	189b      	adds	r3, r3, r2
 8008c4a:	19db      	adds	r3, r3, r7
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4ac3      	ldr	r2, [pc, #780]	@ (8008f7c <UART_SetConfig+0x340>)
 8008c70:	4013      	ands	r3, r2
 8008c72:	0019      	movs	r1, r3
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	4abe      	ldr	r2, [pc, #760]	@ (8008f80 <UART_SetConfig+0x344>)
 8008c86:	4013      	ands	r3, r2
 8008c88:	0019      	movs	r1, r3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4ab8      	ldr	r2, [pc, #736]	@ (8008f84 <UART_SetConfig+0x348>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d004      	beq.n	8008cb0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cac:	4313      	orrs	r3, r2
 8008cae:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	4ab4      	ldr	r2, [pc, #720]	@ (8008f88 <UART_SetConfig+0x34c>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	0019      	movs	r1, r3
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4ab0      	ldr	r2, [pc, #704]	@ (8008f8c <UART_SetConfig+0x350>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d131      	bne.n	8008d34 <UART_SetConfig+0xf8>
 8008cd0:	4baf      	ldr	r3, [pc, #700]	@ (8008f90 <UART_SetConfig+0x354>)
 8008cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cd4:	2203      	movs	r2, #3
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d01d      	beq.n	8008d18 <UART_SetConfig+0xdc>
 8008cdc:	d823      	bhi.n	8008d26 <UART_SetConfig+0xea>
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d00c      	beq.n	8008cfc <UART_SetConfig+0xc0>
 8008ce2:	d820      	bhi.n	8008d26 <UART_SetConfig+0xea>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <UART_SetConfig+0xb2>
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d00e      	beq.n	8008d0a <UART_SetConfig+0xce>
 8008cec:	e01b      	b.n	8008d26 <UART_SetConfig+0xea>
 8008cee:	231b      	movs	r3, #27
 8008cf0:	2218      	movs	r2, #24
 8008cf2:	189b      	adds	r3, r3, r2
 8008cf4:	19db      	adds	r3, r3, r7
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e0b4      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008cfc:	231b      	movs	r3, #27
 8008cfe:	2218      	movs	r2, #24
 8008d00:	189b      	adds	r3, r3, r2
 8008d02:	19db      	adds	r3, r3, r7
 8008d04:	2202      	movs	r2, #2
 8008d06:	701a      	strb	r2, [r3, #0]
 8008d08:	e0ad      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008d0a:	231b      	movs	r3, #27
 8008d0c:	2218      	movs	r2, #24
 8008d0e:	189b      	adds	r3, r3, r2
 8008d10:	19db      	adds	r3, r3, r7
 8008d12:	2204      	movs	r2, #4
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	e0a6      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008d18:	231b      	movs	r3, #27
 8008d1a:	2218      	movs	r2, #24
 8008d1c:	189b      	adds	r3, r3, r2
 8008d1e:	19db      	adds	r3, r3, r7
 8008d20:	2208      	movs	r2, #8
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	e09f      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008d26:	231b      	movs	r3, #27
 8008d28:	2218      	movs	r2, #24
 8008d2a:	189b      	adds	r3, r3, r2
 8008d2c:	19db      	adds	r3, r3, r7
 8008d2e:	2210      	movs	r2, #16
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e098      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a96      	ldr	r2, [pc, #600]	@ (8008f94 <UART_SetConfig+0x358>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d131      	bne.n	8008da2 <UART_SetConfig+0x166>
 8008d3e:	4b94      	ldr	r3, [pc, #592]	@ (8008f90 <UART_SetConfig+0x354>)
 8008d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d42:	220c      	movs	r2, #12
 8008d44:	4013      	ands	r3, r2
 8008d46:	2b0c      	cmp	r3, #12
 8008d48:	d01d      	beq.n	8008d86 <UART_SetConfig+0x14a>
 8008d4a:	d823      	bhi.n	8008d94 <UART_SetConfig+0x158>
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d00c      	beq.n	8008d6a <UART_SetConfig+0x12e>
 8008d50:	d820      	bhi.n	8008d94 <UART_SetConfig+0x158>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <UART_SetConfig+0x120>
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d00e      	beq.n	8008d78 <UART_SetConfig+0x13c>
 8008d5a:	e01b      	b.n	8008d94 <UART_SetConfig+0x158>
 8008d5c:	231b      	movs	r3, #27
 8008d5e:	2218      	movs	r2, #24
 8008d60:	189b      	adds	r3, r3, r2
 8008d62:	19db      	adds	r3, r3, r7
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]
 8008d68:	e07d      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008d6a:	231b      	movs	r3, #27
 8008d6c:	2218      	movs	r2, #24
 8008d6e:	189b      	adds	r3, r3, r2
 8008d70:	19db      	adds	r3, r3, r7
 8008d72:	2202      	movs	r2, #2
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	e076      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008d78:	231b      	movs	r3, #27
 8008d7a:	2218      	movs	r2, #24
 8008d7c:	189b      	adds	r3, r3, r2
 8008d7e:	19db      	adds	r3, r3, r7
 8008d80:	2204      	movs	r2, #4
 8008d82:	701a      	strb	r2, [r3, #0]
 8008d84:	e06f      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008d86:	231b      	movs	r3, #27
 8008d88:	2218      	movs	r2, #24
 8008d8a:	189b      	adds	r3, r3, r2
 8008d8c:	19db      	adds	r3, r3, r7
 8008d8e:	2208      	movs	r2, #8
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e068      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008d94:	231b      	movs	r3, #27
 8008d96:	2218      	movs	r2, #24
 8008d98:	189b      	adds	r3, r3, r2
 8008d9a:	19db      	adds	r3, r3, r7
 8008d9c:	2210      	movs	r2, #16
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	e061      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a7c      	ldr	r2, [pc, #496]	@ (8008f98 <UART_SetConfig+0x35c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d106      	bne.n	8008dba <UART_SetConfig+0x17e>
 8008dac:	231b      	movs	r3, #27
 8008dae:	2218      	movs	r2, #24
 8008db0:	189b      	adds	r3, r3, r2
 8008db2:	19db      	adds	r3, r3, r7
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	e055      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a77      	ldr	r2, [pc, #476]	@ (8008f9c <UART_SetConfig+0x360>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d106      	bne.n	8008dd2 <UART_SetConfig+0x196>
 8008dc4:	231b      	movs	r3, #27
 8008dc6:	2218      	movs	r2, #24
 8008dc8:	189b      	adds	r3, r3, r2
 8008dca:	19db      	adds	r3, r3, r7
 8008dcc:	2200      	movs	r2, #0
 8008dce:	701a      	strb	r2, [r3, #0]
 8008dd0:	e049      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a6b      	ldr	r2, [pc, #428]	@ (8008f84 <UART_SetConfig+0x348>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d13e      	bne.n	8008e5a <UART_SetConfig+0x21e>
 8008ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8008f90 <UART_SetConfig+0x354>)
 8008dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008de0:	23c0      	movs	r3, #192	@ 0xc0
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	4013      	ands	r3, r2
 8008de6:	22c0      	movs	r2, #192	@ 0xc0
 8008de8:	0112      	lsls	r2, r2, #4
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d027      	beq.n	8008e3e <UART_SetConfig+0x202>
 8008dee:	22c0      	movs	r2, #192	@ 0xc0
 8008df0:	0112      	lsls	r2, r2, #4
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d82a      	bhi.n	8008e4c <UART_SetConfig+0x210>
 8008df6:	2280      	movs	r2, #128	@ 0x80
 8008df8:	0112      	lsls	r2, r2, #4
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d011      	beq.n	8008e22 <UART_SetConfig+0x1e6>
 8008dfe:	2280      	movs	r2, #128	@ 0x80
 8008e00:	0112      	lsls	r2, r2, #4
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d822      	bhi.n	8008e4c <UART_SetConfig+0x210>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d004      	beq.n	8008e14 <UART_SetConfig+0x1d8>
 8008e0a:	2280      	movs	r2, #128	@ 0x80
 8008e0c:	00d2      	lsls	r2, r2, #3
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00e      	beq.n	8008e30 <UART_SetConfig+0x1f4>
 8008e12:	e01b      	b.n	8008e4c <UART_SetConfig+0x210>
 8008e14:	231b      	movs	r3, #27
 8008e16:	2218      	movs	r2, #24
 8008e18:	189b      	adds	r3, r3, r2
 8008e1a:	19db      	adds	r3, r3, r7
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	e021      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008e22:	231b      	movs	r3, #27
 8008e24:	2218      	movs	r2, #24
 8008e26:	189b      	adds	r3, r3, r2
 8008e28:	19db      	adds	r3, r3, r7
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e01a      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008e30:	231b      	movs	r3, #27
 8008e32:	2218      	movs	r2, #24
 8008e34:	189b      	adds	r3, r3, r2
 8008e36:	19db      	adds	r3, r3, r7
 8008e38:	2204      	movs	r2, #4
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	e013      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008e3e:	231b      	movs	r3, #27
 8008e40:	2218      	movs	r2, #24
 8008e42:	189b      	adds	r3, r3, r2
 8008e44:	19db      	adds	r3, r3, r7
 8008e46:	2208      	movs	r2, #8
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	e00c      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008e4c:	231b      	movs	r3, #27
 8008e4e:	2218      	movs	r2, #24
 8008e50:	189b      	adds	r3, r3, r2
 8008e52:	19db      	adds	r3, r3, r7
 8008e54:	2210      	movs	r2, #16
 8008e56:	701a      	strb	r2, [r3, #0]
 8008e58:	e005      	b.n	8008e66 <UART_SetConfig+0x22a>
 8008e5a:	231b      	movs	r3, #27
 8008e5c:	2218      	movs	r2, #24
 8008e5e:	189b      	adds	r3, r3, r2
 8008e60:	19db      	adds	r3, r3, r7
 8008e62:	2210      	movs	r2, #16
 8008e64:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a46      	ldr	r2, [pc, #280]	@ (8008f84 <UART_SetConfig+0x348>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d000      	beq.n	8008e72 <UART_SetConfig+0x236>
 8008e70:	e09a      	b.n	8008fa8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e72:	231b      	movs	r3, #27
 8008e74:	2218      	movs	r2, #24
 8008e76:	189b      	adds	r3, r3, r2
 8008e78:	19db      	adds	r3, r3, r7
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	d01d      	beq.n	8008ebc <UART_SetConfig+0x280>
 8008e80:	dc20      	bgt.n	8008ec4 <UART_SetConfig+0x288>
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d015      	beq.n	8008eb2 <UART_SetConfig+0x276>
 8008e86:	dc1d      	bgt.n	8008ec4 <UART_SetConfig+0x288>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <UART_SetConfig+0x256>
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d005      	beq.n	8008e9c <UART_SetConfig+0x260>
 8008e90:	e018      	b.n	8008ec4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e92:	f7fe fc89 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 8008e96:	0003      	movs	r3, r0
 8008e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008e9a:	e01c      	b.n	8008ed6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8008f90 <UART_SetConfig+0x354>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2210      	movs	r2, #16
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	d002      	beq.n	8008eac <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa0 <UART_SetConfig+0x364>)
 8008ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008eaa:	e014      	b.n	8008ed6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8008eac:	4b3d      	ldr	r3, [pc, #244]	@ (8008fa4 <UART_SetConfig+0x368>)
 8008eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008eb0:	e011      	b.n	8008ed6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eb2:	f7fe fbc9 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 8008eb6:	0003      	movs	r3, r0
 8008eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008eba:	e00c      	b.n	8008ed6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ebc:	2380      	movs	r3, #128	@ 0x80
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ec2:	e008      	b.n	8008ed6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8008ec8:	231a      	movs	r3, #26
 8008eca:	2218      	movs	r2, #24
 8008ecc:	189b      	adds	r3, r3, r2
 8008ece:	19db      	adds	r3, r3, r7
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	701a      	strb	r2, [r3, #0]
        break;
 8008ed4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d100      	bne.n	8008ede <UART_SetConfig+0x2a2>
 8008edc:	e134      	b.n	8009148 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	0013      	movs	r3, r2
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	189b      	adds	r3, r3, r2
 8008ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d305      	bcc.n	8008efa <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d906      	bls.n	8008f08 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8008efa:	231a      	movs	r3, #26
 8008efc:	2218      	movs	r2, #24
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	19db      	adds	r3, r3, r7
 8008f02:	2201      	movs	r2, #1
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e11f      	b.n	8009148 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0a:	613b      	str	r3, [r7, #16]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	6939      	ldr	r1, [r7, #16]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	000b      	movs	r3, r1
 8008f16:	0e1b      	lsrs	r3, r3, #24
 8008f18:	0010      	movs	r0, r2
 8008f1a:	0205      	lsls	r5, r0, #8
 8008f1c:	431d      	orrs	r5, r3
 8008f1e:	000b      	movs	r3, r1
 8008f20:	021c      	lsls	r4, r3, #8
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	085b      	lsrs	r3, r3, #1
 8008f28:	60bb      	str	r3, [r7, #8]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	68b8      	ldr	r0, [r7, #8]
 8008f30:	68f9      	ldr	r1, [r7, #12]
 8008f32:	1900      	adds	r0, r0, r4
 8008f34:	4169      	adcs	r1, r5
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	607b      	str	r3, [r7, #4]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f7f7 f9b0 	bl	80002a8 <__aeabi_uldivmod>
 8008f48:	0002      	movs	r2, r0
 8008f4a:	000b      	movs	r3, r1
 8008f4c:	0013      	movs	r3, r2
 8008f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f52:	23c0      	movs	r3, #192	@ 0xc0
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d309      	bcc.n	8008f6e <UART_SetConfig+0x332>
 8008f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f5c:	2380      	movs	r3, #128	@ 0x80
 8008f5e:	035b      	lsls	r3, r3, #13
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d204      	bcs.n	8008f6e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f6a:	60da      	str	r2, [r3, #12]
 8008f6c:	e0ec      	b.n	8009148 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f6e:	231a      	movs	r3, #26
 8008f70:	2218      	movs	r2, #24
 8008f72:	189b      	adds	r3, r3, r2
 8008f74:	19db      	adds	r3, r3, r7
 8008f76:	2201      	movs	r2, #1
 8008f78:	701a      	strb	r2, [r3, #0]
 8008f7a:	e0e5      	b.n	8009148 <UART_SetConfig+0x50c>
 8008f7c:	efff69f3 	.word	0xefff69f3
 8008f80:	ffffcfff 	.word	0xffffcfff
 8008f84:	40004800 	.word	0x40004800
 8008f88:	fffff4ff 	.word	0xfffff4ff
 8008f8c:	40013800 	.word	0x40013800
 8008f90:	40021000 	.word	0x40021000
 8008f94:	40004400 	.word	0x40004400
 8008f98:	40004c00 	.word	0x40004c00
 8008f9c:	40005000 	.word	0x40005000
 8008fa0:	003d0900 	.word	0x003d0900
 8008fa4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	2380      	movs	r3, #128	@ 0x80
 8008fae:	021b      	lsls	r3, r3, #8
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d000      	beq.n	8008fb6 <UART_SetConfig+0x37a>
 8008fb4:	e071      	b.n	800909a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008fb6:	231b      	movs	r3, #27
 8008fb8:	2218      	movs	r2, #24
 8008fba:	189b      	adds	r3, r3, r2
 8008fbc:	19db      	adds	r3, r3, r7
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d822      	bhi.n	800900a <UART_SetConfig+0x3ce>
 8008fc4:	009a      	lsls	r2, r3, #2
 8008fc6:	4b68      	ldr	r3, [pc, #416]	@ (8009168 <UART_SetConfig+0x52c>)
 8008fc8:	18d3      	adds	r3, r2, r3
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fce:	f7fe fbeb 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 8008fd2:	0003      	movs	r3, r0
 8008fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008fd6:	e021      	b.n	800901c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fd8:	f7fe fbfc 	bl	80077d4 <HAL_RCC_GetPCLK2Freq>
 8008fdc:	0003      	movs	r3, r0
 8008fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008fe0:	e01c      	b.n	800901c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fe2:	4b62      	ldr	r3, [pc, #392]	@ (800916c <UART_SetConfig+0x530>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2210      	movs	r2, #16
 8008fe8:	4013      	ands	r3, r2
 8008fea:	d002      	beq.n	8008ff2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008fec:	4b60      	ldr	r3, [pc, #384]	@ (8009170 <UART_SetConfig+0x534>)
 8008fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ff0:	e014      	b.n	800901c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8008ff2:	4b60      	ldr	r3, [pc, #384]	@ (8009174 <UART_SetConfig+0x538>)
 8008ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ff6:	e011      	b.n	800901c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ff8:	f7fe fb26 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 8008ffc:	0003      	movs	r3, r0
 8008ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009000:	e00c      	b.n	800901c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009002:	2380      	movs	r3, #128	@ 0x80
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009008:	e008      	b.n	800901c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800900e:	231a      	movs	r3, #26
 8009010:	2218      	movs	r2, #24
 8009012:	189b      	adds	r3, r3, r2
 8009014:	19db      	adds	r3, r3, r7
 8009016:	2201      	movs	r2, #1
 8009018:	701a      	strb	r2, [r3, #0]
        break;
 800901a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800901c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d100      	bne.n	8009024 <UART_SetConfig+0x3e8>
 8009022:	e091      	b.n	8009148 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009026:	005a      	lsls	r2, r3, #1
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	085b      	lsrs	r3, r3, #1
 800902e:	18d2      	adds	r2, r2, r3
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	0019      	movs	r1, r3
 8009036:	0010      	movs	r0, r2
 8009038:	f7f7 f870 	bl	800011c <__udivsi3>
 800903c:	0003      	movs	r3, r0
 800903e:	b29b      	uxth	r3, r3
 8009040:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	2b0f      	cmp	r3, #15
 8009046:	d921      	bls.n	800908c <UART_SetConfig+0x450>
 8009048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800904a:	2380      	movs	r3, #128	@ 0x80
 800904c:	025b      	lsls	r3, r3, #9
 800904e:	429a      	cmp	r2, r3
 8009050:	d21c      	bcs.n	800908c <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009054:	b29a      	uxth	r2, r3
 8009056:	200e      	movs	r0, #14
 8009058:	2418      	movs	r4, #24
 800905a:	1903      	adds	r3, r0, r4
 800905c:	19db      	adds	r3, r3, r7
 800905e:	210f      	movs	r1, #15
 8009060:	438a      	bics	r2, r1
 8009062:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	b29b      	uxth	r3, r3
 800906a:	2207      	movs	r2, #7
 800906c:	4013      	ands	r3, r2
 800906e:	b299      	uxth	r1, r3
 8009070:	1903      	adds	r3, r0, r4
 8009072:	19db      	adds	r3, r3, r7
 8009074:	1902      	adds	r2, r0, r4
 8009076:	19d2      	adds	r2, r2, r7
 8009078:	8812      	ldrh	r2, [r2, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	1902      	adds	r2, r0, r4
 8009084:	19d2      	adds	r2, r2, r7
 8009086:	8812      	ldrh	r2, [r2, #0]
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	e05d      	b.n	8009148 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800908c:	231a      	movs	r3, #26
 800908e:	2218      	movs	r2, #24
 8009090:	189b      	adds	r3, r3, r2
 8009092:	19db      	adds	r3, r3, r7
 8009094:	2201      	movs	r2, #1
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	e056      	b.n	8009148 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800909a:	231b      	movs	r3, #27
 800909c:	2218      	movs	r2, #24
 800909e:	189b      	adds	r3, r3, r2
 80090a0:	19db      	adds	r3, r3, r7
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d822      	bhi.n	80090ee <UART_SetConfig+0x4b2>
 80090a8:	009a      	lsls	r2, r3, #2
 80090aa:	4b33      	ldr	r3, [pc, #204]	@ (8009178 <UART_SetConfig+0x53c>)
 80090ac:	18d3      	adds	r3, r2, r3
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090b2:	f7fe fb79 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 80090b6:	0003      	movs	r3, r0
 80090b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80090ba:	e021      	b.n	8009100 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090bc:	f7fe fb8a 	bl	80077d4 <HAL_RCC_GetPCLK2Freq>
 80090c0:	0003      	movs	r3, r0
 80090c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80090c4:	e01c      	b.n	8009100 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090c6:	4b29      	ldr	r3, [pc, #164]	@ (800916c <UART_SetConfig+0x530>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2210      	movs	r2, #16
 80090cc:	4013      	ands	r3, r2
 80090ce:	d002      	beq.n	80090d6 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80090d0:	4b27      	ldr	r3, [pc, #156]	@ (8009170 <UART_SetConfig+0x534>)
 80090d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090d4:	e014      	b.n	8009100 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80090d6:	4b27      	ldr	r3, [pc, #156]	@ (8009174 <UART_SetConfig+0x538>)
 80090d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80090da:	e011      	b.n	8009100 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090dc:	f7fe fab4 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 80090e0:	0003      	movs	r3, r0
 80090e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80090e4:	e00c      	b.n	8009100 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090e6:	2380      	movs	r3, #128	@ 0x80
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80090ec:	e008      	b.n	8009100 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80090f2:	231a      	movs	r3, #26
 80090f4:	2218      	movs	r2, #24
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	19db      	adds	r3, r3, r7
 80090fa:	2201      	movs	r2, #1
 80090fc:	701a      	strb	r2, [r3, #0]
        break;
 80090fe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d020      	beq.n	8009148 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	085a      	lsrs	r2, r3, #1
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	18d2      	adds	r2, r2, r3
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	0019      	movs	r1, r3
 8009116:	0010      	movs	r0, r2
 8009118:	f7f7 f800 	bl	800011c <__udivsi3>
 800911c:	0003      	movs	r3, r0
 800911e:	b29b      	uxth	r3, r3
 8009120:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009124:	2b0f      	cmp	r3, #15
 8009126:	d909      	bls.n	800913c <UART_SetConfig+0x500>
 8009128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800912a:	2380      	movs	r3, #128	@ 0x80
 800912c:	025b      	lsls	r3, r3, #9
 800912e:	429a      	cmp	r2, r3
 8009130:	d204      	bcs.n	800913c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009138:	60da      	str	r2, [r3, #12]
 800913a:	e005      	b.n	8009148 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800913c:	231a      	movs	r3, #26
 800913e:	2218      	movs	r2, #24
 8009140:	189b      	adds	r3, r3, r2
 8009142:	19db      	adds	r3, r3, r7
 8009144:	2201      	movs	r2, #1
 8009146:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	2200      	movs	r2, #0
 800914c:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	2200      	movs	r2, #0
 8009152:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8009154:	231a      	movs	r3, #26
 8009156:	2218      	movs	r2, #24
 8009158:	189b      	adds	r3, r3, r2
 800915a:	19db      	adds	r3, r3, r7
 800915c:	781b      	ldrb	r3, [r3, #0]
}
 800915e:	0018      	movs	r0, r3
 8009160:	46bd      	mov	sp, r7
 8009162:	b00e      	add	sp, #56	@ 0x38
 8009164:	bdb0      	pop	{r4, r5, r7, pc}
 8009166:	46c0      	nop			@ (mov r8, r8)
 8009168:	0800a2b4 	.word	0x0800a2b4
 800916c:	40021000 	.word	0x40021000
 8009170:	003d0900 	.word	0x003d0900
 8009174:	00f42400 	.word	0x00f42400
 8009178:	0800a2d8 	.word	0x0800a2d8

0800917c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009188:	2201      	movs	r2, #1
 800918a:	4013      	ands	r3, r2
 800918c:	d00b      	beq.n	80091a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	4a4a      	ldr	r2, [pc, #296]	@ (80092c0 <UART_AdvFeatureConfig+0x144>)
 8009196:	4013      	ands	r3, r2
 8009198:	0019      	movs	r1, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091aa:	2202      	movs	r2, #2
 80091ac:	4013      	ands	r3, r2
 80091ae:	d00b      	beq.n	80091c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	4a43      	ldr	r2, [pc, #268]	@ (80092c4 <UART_AdvFeatureConfig+0x148>)
 80091b8:	4013      	ands	r3, r2
 80091ba:	0019      	movs	r1, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	430a      	orrs	r2, r1
 80091c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091cc:	2204      	movs	r2, #4
 80091ce:	4013      	ands	r3, r2
 80091d0:	d00b      	beq.n	80091ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	4a3b      	ldr	r2, [pc, #236]	@ (80092c8 <UART_AdvFeatureConfig+0x14c>)
 80091da:	4013      	ands	r3, r2
 80091dc:	0019      	movs	r1, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ee:	2208      	movs	r2, #8
 80091f0:	4013      	ands	r3, r2
 80091f2:	d00b      	beq.n	800920c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	4a34      	ldr	r2, [pc, #208]	@ (80092cc <UART_AdvFeatureConfig+0x150>)
 80091fc:	4013      	ands	r3, r2
 80091fe:	0019      	movs	r1, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009210:	2210      	movs	r2, #16
 8009212:	4013      	ands	r3, r2
 8009214:	d00b      	beq.n	800922e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	4a2c      	ldr	r2, [pc, #176]	@ (80092d0 <UART_AdvFeatureConfig+0x154>)
 800921e:	4013      	ands	r3, r2
 8009220:	0019      	movs	r1, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	2220      	movs	r2, #32
 8009234:	4013      	ands	r3, r2
 8009236:	d00b      	beq.n	8009250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	4a25      	ldr	r2, [pc, #148]	@ (80092d4 <UART_AdvFeatureConfig+0x158>)
 8009240:	4013      	ands	r3, r2
 8009242:	0019      	movs	r1, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	2240      	movs	r2, #64	@ 0x40
 8009256:	4013      	ands	r3, r2
 8009258:	d01d      	beq.n	8009296 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4a1d      	ldr	r2, [pc, #116]	@ (80092d8 <UART_AdvFeatureConfig+0x15c>)
 8009262:	4013      	ands	r3, r2
 8009264:	0019      	movs	r1, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009276:	2380      	movs	r3, #128	@ 0x80
 8009278:	035b      	lsls	r3, r3, #13
 800927a:	429a      	cmp	r2, r3
 800927c:	d10b      	bne.n	8009296 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	4a15      	ldr	r2, [pc, #84]	@ (80092dc <UART_AdvFeatureConfig+0x160>)
 8009286:	4013      	ands	r3, r2
 8009288:	0019      	movs	r1, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929a:	2280      	movs	r2, #128	@ 0x80
 800929c:	4013      	ands	r3, r2
 800929e:	d00b      	beq.n	80092b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	4a0e      	ldr	r2, [pc, #56]	@ (80092e0 <UART_AdvFeatureConfig+0x164>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	0019      	movs	r1, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	605a      	str	r2, [r3, #4]
  }
}
 80092b8:	46c0      	nop			@ (mov r8, r8)
 80092ba:	46bd      	mov	sp, r7
 80092bc:	b002      	add	sp, #8
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	fffdffff 	.word	0xfffdffff
 80092c4:	fffeffff 	.word	0xfffeffff
 80092c8:	fffbffff 	.word	0xfffbffff
 80092cc:	ffff7fff 	.word	0xffff7fff
 80092d0:	ffffefff 	.word	0xffffefff
 80092d4:	ffffdfff 	.word	0xffffdfff
 80092d8:	ffefffff 	.word	0xffefffff
 80092dc:	ff9fffff 	.word	0xff9fffff
 80092e0:	fff7ffff 	.word	0xfff7ffff

080092e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2280      	movs	r2, #128	@ 0x80
 80092f0:	2100      	movs	r1, #0
 80092f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092f4:	f7fb ff50 	bl	8005198 <HAL_GetTick>
 80092f8:	0003      	movs	r3, r0
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2208      	movs	r2, #8
 8009304:	4013      	ands	r3, r2
 8009306:	2b08      	cmp	r3, #8
 8009308:	d10c      	bne.n	8009324 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2280      	movs	r2, #128	@ 0x80
 800930e:	0391      	lsls	r1, r2, #14
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	4a17      	ldr	r2, [pc, #92]	@ (8009370 <UART_CheckIdleState+0x8c>)
 8009314:	9200      	str	r2, [sp, #0]
 8009316:	2200      	movs	r2, #0
 8009318:	f000 f82c 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 800931c:	1e03      	subs	r3, r0, #0
 800931e:	d001      	beq.n	8009324 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e021      	b.n	8009368 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2204      	movs	r2, #4
 800932c:	4013      	ands	r3, r2
 800932e:	2b04      	cmp	r3, #4
 8009330:	d10c      	bne.n	800934c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2280      	movs	r2, #128	@ 0x80
 8009336:	03d1      	lsls	r1, r2, #15
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4a0d      	ldr	r2, [pc, #52]	@ (8009370 <UART_CheckIdleState+0x8c>)
 800933c:	9200      	str	r2, [sp, #0]
 800933e:	2200      	movs	r2, #0
 8009340:	f000 f818 	bl	8009374 <UART_WaitOnFlagUntilTimeout>
 8009344:	1e03      	subs	r3, r0, #0
 8009346:	d001      	beq.n	800934c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e00d      	b.n	8009368 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2220      	movs	r2, #32
 8009350:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2274      	movs	r2, #116	@ 0x74
 8009362:	2100      	movs	r1, #0
 8009364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	0018      	movs	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	b004      	add	sp, #16
 800936e:	bd80      	pop	{r7, pc}
 8009370:	01ffffff 	.word	0x01ffffff

08009374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	1dfb      	adds	r3, r7, #7
 8009382:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009384:	e05e      	b.n	8009444 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	3301      	adds	r3, #1
 800938a:	d05b      	beq.n	8009444 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800938c:	f7fb ff04 	bl	8005198 <HAL_GetTick>
 8009390:	0002      	movs	r2, r0
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	429a      	cmp	r2, r3
 800939a:	d302      	bcc.n	80093a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d11b      	bne.n	80093da <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	492f      	ldr	r1, [pc, #188]	@ (800946c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80093ae:	400a      	ands	r2, r1
 80093b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2101      	movs	r1, #1
 80093be:	438a      	bics	r2, r1
 80093c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2220      	movs	r2, #32
 80093c6:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2220      	movs	r2, #32
 80093cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2274      	movs	r2, #116	@ 0x74
 80093d2:	2100      	movs	r1, #0
 80093d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e044      	b.n	8009464 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2204      	movs	r2, #4
 80093e2:	4013      	ands	r3, r2
 80093e4:	d02e      	beq.n	8009444 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69da      	ldr	r2, [r3, #28]
 80093ec:	2380      	movs	r3, #128	@ 0x80
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	401a      	ands	r2, r3
 80093f2:	2380      	movs	r3, #128	@ 0x80
 80093f4:	011b      	lsls	r3, r3, #4
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d124      	bne.n	8009444 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2280      	movs	r2, #128	@ 0x80
 8009400:	0112      	lsls	r2, r2, #4
 8009402:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4917      	ldr	r1, [pc, #92]	@ (800946c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8009410:	400a      	ands	r2, r1
 8009412:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689a      	ldr	r2, [r3, #8]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2101      	movs	r1, #1
 8009420:	438a      	bics	r2, r1
 8009422:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2220      	movs	r2, #32
 8009428:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2220      	movs	r2, #32
 800942e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2280      	movs	r2, #128	@ 0x80
 8009434:	2120      	movs	r1, #32
 8009436:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2274      	movs	r2, #116	@ 0x74
 800943c:	2100      	movs	r1, #0
 800943e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e00f      	b.n	8009464 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4013      	ands	r3, r2
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	425a      	negs	r2, r3
 8009454:	4153      	adcs	r3, r2
 8009456:	b2db      	uxtb	r3, r3
 8009458:	001a      	movs	r2, r3
 800945a:	1dfb      	adds	r3, r7, #7
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d091      	beq.n	8009386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	0018      	movs	r0, r3
 8009466:	46bd      	mov	sp, r7
 8009468:	b004      	add	sp, #16
 800946a:	bd80      	pop	{r7, pc}
 800946c:	fffffe5f 	.word	0xfffffe5f

08009470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4912      	ldr	r1, [pc, #72]	@ (80094cc <UART_EndRxTransfer+0x5c>)
 8009484:	400a      	ands	r2, r1
 8009486:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2101      	movs	r1, #1
 8009494:	438a      	bics	r2, r1
 8009496:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800949c:	2b01      	cmp	r3, #1
 800949e:	d107      	bne.n	80094b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2110      	movs	r1, #16
 80094ac:	438a      	bics	r2, r1
 80094ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	665a      	str	r2, [r3, #100]	@ 0x64
}
 80094c2:	46c0      	nop			@ (mov r8, r8)
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b002      	add	sp, #8
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	46c0      	nop			@ (mov r8, r8)
 80094cc:	fffffedf 	.word	0xfffffedf

080094d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	225a      	movs	r2, #90	@ 0x5a
 80094e2:	2100      	movs	r1, #0
 80094e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2252      	movs	r2, #82	@ 0x52
 80094ea:	2100      	movs	r1, #0
 80094ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	0018      	movs	r0, r3
 80094f2:	f7ff fb8f 	bl	8008c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	46bd      	mov	sp, r7
 80094fa:	b004      	add	sp, #16
 80094fc:	bd80      	pop	{r7, pc}

080094fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b082      	sub	sp, #8
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2140      	movs	r1, #64	@ 0x40
 8009512:	438a      	bics	r2, r1
 8009514:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2220      	movs	r2, #32
 800951a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	0018      	movs	r0, r3
 8009526:	f7ff fb6d 	bl	8008c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952a:	46c0      	nop			@ (mov r8, r8)
 800952c:	46bd      	mov	sp, r7
 800952e:	b002      	add	sp, #8
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800953a:	46c0      	nop			@ (mov r8, r8)
 800953c:	46bd      	mov	sp, r7
 800953e:	b002      	add	sp, #8
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <siprintf>:
 8009544:	b40e      	push	{r1, r2, r3}
 8009546:	b500      	push	{lr}
 8009548:	490b      	ldr	r1, [pc, #44]	@ (8009578 <siprintf+0x34>)
 800954a:	b09c      	sub	sp, #112	@ 0x70
 800954c:	ab1d      	add	r3, sp, #116	@ 0x74
 800954e:	9002      	str	r0, [sp, #8]
 8009550:	9006      	str	r0, [sp, #24]
 8009552:	9107      	str	r1, [sp, #28]
 8009554:	9104      	str	r1, [sp, #16]
 8009556:	4809      	ldr	r0, [pc, #36]	@ (800957c <siprintf+0x38>)
 8009558:	4909      	ldr	r1, [pc, #36]	@ (8009580 <siprintf+0x3c>)
 800955a:	cb04      	ldmia	r3!, {r2}
 800955c:	9105      	str	r1, [sp, #20]
 800955e:	6800      	ldr	r0, [r0, #0]
 8009560:	a902      	add	r1, sp, #8
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	f000 f9de 	bl	8009924 <_svfiprintf_r>
 8009568:	2200      	movs	r2, #0
 800956a:	9b02      	ldr	r3, [sp, #8]
 800956c:	701a      	strb	r2, [r3, #0]
 800956e:	b01c      	add	sp, #112	@ 0x70
 8009570:	bc08      	pop	{r3}
 8009572:	b003      	add	sp, #12
 8009574:	4718      	bx	r3
 8009576:	46c0      	nop			@ (mov r8, r8)
 8009578:	7fffffff 	.word	0x7fffffff
 800957c:	20000010 	.word	0x20000010
 8009580:	ffff0208 	.word	0xffff0208

08009584 <_vsiprintf_r>:
 8009584:	b500      	push	{lr}
 8009586:	b09b      	sub	sp, #108	@ 0x6c
 8009588:	9100      	str	r1, [sp, #0]
 800958a:	9104      	str	r1, [sp, #16]
 800958c:	4906      	ldr	r1, [pc, #24]	@ (80095a8 <_vsiprintf_r+0x24>)
 800958e:	9105      	str	r1, [sp, #20]
 8009590:	9102      	str	r1, [sp, #8]
 8009592:	4906      	ldr	r1, [pc, #24]	@ (80095ac <_vsiprintf_r+0x28>)
 8009594:	9103      	str	r1, [sp, #12]
 8009596:	4669      	mov	r1, sp
 8009598:	f000 f9c4 	bl	8009924 <_svfiprintf_r>
 800959c:	2200      	movs	r2, #0
 800959e:	9b00      	ldr	r3, [sp, #0]
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	b01b      	add	sp, #108	@ 0x6c
 80095a4:	bd00      	pop	{pc}
 80095a6:	46c0      	nop			@ (mov r8, r8)
 80095a8:	7fffffff 	.word	0x7fffffff
 80095ac:	ffff0208 	.word	0xffff0208

080095b0 <vsiprintf>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	4c04      	ldr	r4, [pc, #16]	@ (80095c4 <vsiprintf+0x14>)
 80095b4:	0013      	movs	r3, r2
 80095b6:	000a      	movs	r2, r1
 80095b8:	0001      	movs	r1, r0
 80095ba:	6820      	ldr	r0, [r4, #0]
 80095bc:	f7ff ffe2 	bl	8009584 <_vsiprintf_r>
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	46c0      	nop			@ (mov r8, r8)
 80095c4:	20000010 	.word	0x20000010

080095c8 <memmove>:
 80095c8:	b510      	push	{r4, lr}
 80095ca:	4288      	cmp	r0, r1
 80095cc:	d806      	bhi.n	80095dc <memmove+0x14>
 80095ce:	2300      	movs	r3, #0
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d008      	beq.n	80095e6 <memmove+0x1e>
 80095d4:	5ccc      	ldrb	r4, [r1, r3]
 80095d6:	54c4      	strb	r4, [r0, r3]
 80095d8:	3301      	adds	r3, #1
 80095da:	e7f9      	b.n	80095d0 <memmove+0x8>
 80095dc:	188b      	adds	r3, r1, r2
 80095de:	4298      	cmp	r0, r3
 80095e0:	d2f5      	bcs.n	80095ce <memmove+0x6>
 80095e2:	3a01      	subs	r2, #1
 80095e4:	d200      	bcs.n	80095e8 <memmove+0x20>
 80095e6:	bd10      	pop	{r4, pc}
 80095e8:	5c8b      	ldrb	r3, [r1, r2]
 80095ea:	5483      	strb	r3, [r0, r2]
 80095ec:	e7f9      	b.n	80095e2 <memmove+0x1a>

080095ee <memset>:
 80095ee:	0003      	movs	r3, r0
 80095f0:	1882      	adds	r2, r0, r2
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d100      	bne.n	80095f8 <memset+0xa>
 80095f6:	4770      	bx	lr
 80095f8:	7019      	strb	r1, [r3, #0]
 80095fa:	3301      	adds	r3, #1
 80095fc:	e7f9      	b.n	80095f2 <memset+0x4>
	...

08009600 <__errno>:
 8009600:	4b01      	ldr	r3, [pc, #4]	@ (8009608 <__errno+0x8>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	4770      	bx	lr
 8009606:	46c0      	nop			@ (mov r8, r8)
 8009608:	20000010 	.word	0x20000010

0800960c <__libc_init_array>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	2600      	movs	r6, #0
 8009610:	4c0c      	ldr	r4, [pc, #48]	@ (8009644 <__libc_init_array+0x38>)
 8009612:	4d0d      	ldr	r5, [pc, #52]	@ (8009648 <__libc_init_array+0x3c>)
 8009614:	1b64      	subs	r4, r4, r5
 8009616:	10a4      	asrs	r4, r4, #2
 8009618:	42a6      	cmp	r6, r4
 800961a:	d109      	bne.n	8009630 <__libc_init_array+0x24>
 800961c:	2600      	movs	r6, #0
 800961e:	f000 fc51 	bl	8009ec4 <_init>
 8009622:	4c0a      	ldr	r4, [pc, #40]	@ (800964c <__libc_init_array+0x40>)
 8009624:	4d0a      	ldr	r5, [pc, #40]	@ (8009650 <__libc_init_array+0x44>)
 8009626:	1b64      	subs	r4, r4, r5
 8009628:	10a4      	asrs	r4, r4, #2
 800962a:	42a6      	cmp	r6, r4
 800962c:	d105      	bne.n	800963a <__libc_init_array+0x2e>
 800962e:	bd70      	pop	{r4, r5, r6, pc}
 8009630:	00b3      	lsls	r3, r6, #2
 8009632:	58eb      	ldr	r3, [r5, r3]
 8009634:	4798      	blx	r3
 8009636:	3601      	adds	r6, #1
 8009638:	e7ee      	b.n	8009618 <__libc_init_array+0xc>
 800963a:	00b3      	lsls	r3, r6, #2
 800963c:	58eb      	ldr	r3, [r5, r3]
 800963e:	4798      	blx	r3
 8009640:	3601      	adds	r6, #1
 8009642:	e7f2      	b.n	800962a <__libc_init_array+0x1e>
 8009644:	0800a338 	.word	0x0800a338
 8009648:	0800a338 	.word	0x0800a338
 800964c:	0800a33c 	.word	0x0800a33c
 8009650:	0800a338 	.word	0x0800a338

08009654 <__retarget_lock_acquire_recursive>:
 8009654:	4770      	bx	lr

08009656 <__retarget_lock_release_recursive>:
 8009656:	4770      	bx	lr

08009658 <memcpy>:
 8009658:	2300      	movs	r3, #0
 800965a:	b510      	push	{r4, lr}
 800965c:	429a      	cmp	r2, r3
 800965e:	d100      	bne.n	8009662 <memcpy+0xa>
 8009660:	bd10      	pop	{r4, pc}
 8009662:	5ccc      	ldrb	r4, [r1, r3]
 8009664:	54c4      	strb	r4, [r0, r3]
 8009666:	3301      	adds	r3, #1
 8009668:	e7f8      	b.n	800965c <memcpy+0x4>
	...

0800966c <_free_r>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	0005      	movs	r5, r0
 8009670:	1e0c      	subs	r4, r1, #0
 8009672:	d010      	beq.n	8009696 <_free_r+0x2a>
 8009674:	3c04      	subs	r4, #4
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	da00      	bge.n	800967e <_free_r+0x12>
 800967c:	18e4      	adds	r4, r4, r3
 800967e:	0028      	movs	r0, r5
 8009680:	f000 f8e0 	bl	8009844 <__malloc_lock>
 8009684:	4a1d      	ldr	r2, [pc, #116]	@ (80096fc <_free_r+0x90>)
 8009686:	6813      	ldr	r3, [r2, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d105      	bne.n	8009698 <_free_r+0x2c>
 800968c:	6063      	str	r3, [r4, #4]
 800968e:	6014      	str	r4, [r2, #0]
 8009690:	0028      	movs	r0, r5
 8009692:	f000 f8df 	bl	8009854 <__malloc_unlock>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	42a3      	cmp	r3, r4
 800969a:	d908      	bls.n	80096ae <_free_r+0x42>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	1821      	adds	r1, r4, r0
 80096a0:	428b      	cmp	r3, r1
 80096a2:	d1f3      	bne.n	800968c <_free_r+0x20>
 80096a4:	6819      	ldr	r1, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	1809      	adds	r1, r1, r0
 80096aa:	6021      	str	r1, [r4, #0]
 80096ac:	e7ee      	b.n	800968c <_free_r+0x20>
 80096ae:	001a      	movs	r2, r3
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <_free_r+0x4e>
 80096b6:	42a3      	cmp	r3, r4
 80096b8:	d9f9      	bls.n	80096ae <_free_r+0x42>
 80096ba:	6811      	ldr	r1, [r2, #0]
 80096bc:	1850      	adds	r0, r2, r1
 80096be:	42a0      	cmp	r0, r4
 80096c0:	d10b      	bne.n	80096da <_free_r+0x6e>
 80096c2:	6820      	ldr	r0, [r4, #0]
 80096c4:	1809      	adds	r1, r1, r0
 80096c6:	1850      	adds	r0, r2, r1
 80096c8:	6011      	str	r1, [r2, #0]
 80096ca:	4283      	cmp	r3, r0
 80096cc:	d1e0      	bne.n	8009690 <_free_r+0x24>
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	1841      	adds	r1, r0, r1
 80096d4:	6011      	str	r1, [r2, #0]
 80096d6:	6053      	str	r3, [r2, #4]
 80096d8:	e7da      	b.n	8009690 <_free_r+0x24>
 80096da:	42a0      	cmp	r0, r4
 80096dc:	d902      	bls.n	80096e4 <_free_r+0x78>
 80096de:	230c      	movs	r3, #12
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	e7d5      	b.n	8009690 <_free_r+0x24>
 80096e4:	6820      	ldr	r0, [r4, #0]
 80096e6:	1821      	adds	r1, r4, r0
 80096e8:	428b      	cmp	r3, r1
 80096ea:	d103      	bne.n	80096f4 <_free_r+0x88>
 80096ec:	6819      	ldr	r1, [r3, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	1809      	adds	r1, r1, r0
 80096f2:	6021      	str	r1, [r4, #0]
 80096f4:	6063      	str	r3, [r4, #4]
 80096f6:	6054      	str	r4, [r2, #4]
 80096f8:	e7ca      	b.n	8009690 <_free_r+0x24>
 80096fa:	46c0      	nop			@ (mov r8, r8)
 80096fc:	20000590 	.word	0x20000590

08009700 <sbrk_aligned>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	4e0f      	ldr	r6, [pc, #60]	@ (8009740 <sbrk_aligned+0x40>)
 8009704:	000d      	movs	r5, r1
 8009706:	6831      	ldr	r1, [r6, #0]
 8009708:	0004      	movs	r4, r0
 800970a:	2900      	cmp	r1, #0
 800970c:	d102      	bne.n	8009714 <sbrk_aligned+0x14>
 800970e:	f000 fb85 	bl	8009e1c <_sbrk_r>
 8009712:	6030      	str	r0, [r6, #0]
 8009714:	0029      	movs	r1, r5
 8009716:	0020      	movs	r0, r4
 8009718:	f000 fb80 	bl	8009e1c <_sbrk_r>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d103      	bne.n	8009728 <sbrk_aligned+0x28>
 8009720:	2501      	movs	r5, #1
 8009722:	426d      	negs	r5, r5
 8009724:	0028      	movs	r0, r5
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	2303      	movs	r3, #3
 800972a:	1cc5      	adds	r5, r0, #3
 800972c:	439d      	bics	r5, r3
 800972e:	42a8      	cmp	r0, r5
 8009730:	d0f8      	beq.n	8009724 <sbrk_aligned+0x24>
 8009732:	1a29      	subs	r1, r5, r0
 8009734:	0020      	movs	r0, r4
 8009736:	f000 fb71 	bl	8009e1c <_sbrk_r>
 800973a:	3001      	adds	r0, #1
 800973c:	d1f2      	bne.n	8009724 <sbrk_aligned+0x24>
 800973e:	e7ef      	b.n	8009720 <sbrk_aligned+0x20>
 8009740:	2000058c 	.word	0x2000058c

08009744 <_malloc_r>:
 8009744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009746:	2203      	movs	r2, #3
 8009748:	1ccb      	adds	r3, r1, #3
 800974a:	4393      	bics	r3, r2
 800974c:	3308      	adds	r3, #8
 800974e:	0005      	movs	r5, r0
 8009750:	001f      	movs	r7, r3
 8009752:	2b0c      	cmp	r3, #12
 8009754:	d234      	bcs.n	80097c0 <_malloc_r+0x7c>
 8009756:	270c      	movs	r7, #12
 8009758:	42b9      	cmp	r1, r7
 800975a:	d833      	bhi.n	80097c4 <_malloc_r+0x80>
 800975c:	0028      	movs	r0, r5
 800975e:	f000 f871 	bl	8009844 <__malloc_lock>
 8009762:	4e37      	ldr	r6, [pc, #220]	@ (8009840 <_malloc_r+0xfc>)
 8009764:	6833      	ldr	r3, [r6, #0]
 8009766:	001c      	movs	r4, r3
 8009768:	2c00      	cmp	r4, #0
 800976a:	d12f      	bne.n	80097cc <_malloc_r+0x88>
 800976c:	0039      	movs	r1, r7
 800976e:	0028      	movs	r0, r5
 8009770:	f7ff ffc6 	bl	8009700 <sbrk_aligned>
 8009774:	0004      	movs	r4, r0
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d15f      	bne.n	800983a <_malloc_r+0xf6>
 800977a:	6834      	ldr	r4, [r6, #0]
 800977c:	9400      	str	r4, [sp, #0]
 800977e:	9b00      	ldr	r3, [sp, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d14a      	bne.n	800981a <_malloc_r+0xd6>
 8009784:	2c00      	cmp	r4, #0
 8009786:	d052      	beq.n	800982e <_malloc_r+0xea>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	0028      	movs	r0, r5
 800978c:	18e3      	adds	r3, r4, r3
 800978e:	9900      	ldr	r1, [sp, #0]
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	f000 fb43 	bl	8009e1c <_sbrk_r>
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	4283      	cmp	r3, r0
 800979a:	d148      	bne.n	800982e <_malloc_r+0xea>
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	0028      	movs	r0, r5
 80097a0:	1aff      	subs	r7, r7, r3
 80097a2:	0039      	movs	r1, r7
 80097a4:	f7ff ffac 	bl	8009700 <sbrk_aligned>
 80097a8:	3001      	adds	r0, #1
 80097aa:	d040      	beq.n	800982e <_malloc_r+0xea>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	19db      	adds	r3, r3, r7
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	6833      	ldr	r3, [r6, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	d133      	bne.n	8009822 <_malloc_r+0xde>
 80097ba:	9b00      	ldr	r3, [sp, #0]
 80097bc:	6033      	str	r3, [r6, #0]
 80097be:	e019      	b.n	80097f4 <_malloc_r+0xb0>
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	dac9      	bge.n	8009758 <_malloc_r+0x14>
 80097c4:	230c      	movs	r3, #12
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	2000      	movs	r0, #0
 80097ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097cc:	6821      	ldr	r1, [r4, #0]
 80097ce:	1bc9      	subs	r1, r1, r7
 80097d0:	d420      	bmi.n	8009814 <_malloc_r+0xd0>
 80097d2:	290b      	cmp	r1, #11
 80097d4:	d90a      	bls.n	80097ec <_malloc_r+0xa8>
 80097d6:	19e2      	adds	r2, r4, r7
 80097d8:	6027      	str	r7, [r4, #0]
 80097da:	42a3      	cmp	r3, r4
 80097dc:	d104      	bne.n	80097e8 <_malloc_r+0xa4>
 80097de:	6032      	str	r2, [r6, #0]
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	6011      	str	r1, [r2, #0]
 80097e4:	6053      	str	r3, [r2, #4]
 80097e6:	e005      	b.n	80097f4 <_malloc_r+0xb0>
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	e7f9      	b.n	80097e0 <_malloc_r+0x9c>
 80097ec:	6862      	ldr	r2, [r4, #4]
 80097ee:	42a3      	cmp	r3, r4
 80097f0:	d10e      	bne.n	8009810 <_malloc_r+0xcc>
 80097f2:	6032      	str	r2, [r6, #0]
 80097f4:	0028      	movs	r0, r5
 80097f6:	f000 f82d 	bl	8009854 <__malloc_unlock>
 80097fa:	0020      	movs	r0, r4
 80097fc:	2207      	movs	r2, #7
 80097fe:	300b      	adds	r0, #11
 8009800:	1d23      	adds	r3, r4, #4
 8009802:	4390      	bics	r0, r2
 8009804:	1ac2      	subs	r2, r0, r3
 8009806:	4298      	cmp	r0, r3
 8009808:	d0df      	beq.n	80097ca <_malloc_r+0x86>
 800980a:	1a1b      	subs	r3, r3, r0
 800980c:	50a3      	str	r3, [r4, r2]
 800980e:	e7dc      	b.n	80097ca <_malloc_r+0x86>
 8009810:	605a      	str	r2, [r3, #4]
 8009812:	e7ef      	b.n	80097f4 <_malloc_r+0xb0>
 8009814:	0023      	movs	r3, r4
 8009816:	6864      	ldr	r4, [r4, #4]
 8009818:	e7a6      	b.n	8009768 <_malloc_r+0x24>
 800981a:	9c00      	ldr	r4, [sp, #0]
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	e7ad      	b.n	800977e <_malloc_r+0x3a>
 8009822:	001a      	movs	r2, r3
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	42a3      	cmp	r3, r4
 8009828:	d1fb      	bne.n	8009822 <_malloc_r+0xde>
 800982a:	2300      	movs	r3, #0
 800982c:	e7da      	b.n	80097e4 <_malloc_r+0xa0>
 800982e:	230c      	movs	r3, #12
 8009830:	0028      	movs	r0, r5
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	f000 f80e 	bl	8009854 <__malloc_unlock>
 8009838:	e7c6      	b.n	80097c8 <_malloc_r+0x84>
 800983a:	6007      	str	r7, [r0, #0]
 800983c:	e7da      	b.n	80097f4 <_malloc_r+0xb0>
 800983e:	46c0      	nop			@ (mov r8, r8)
 8009840:	20000590 	.word	0x20000590

08009844 <__malloc_lock>:
 8009844:	b510      	push	{r4, lr}
 8009846:	4802      	ldr	r0, [pc, #8]	@ (8009850 <__malloc_lock+0xc>)
 8009848:	f7ff ff04 	bl	8009654 <__retarget_lock_acquire_recursive>
 800984c:	bd10      	pop	{r4, pc}
 800984e:	46c0      	nop			@ (mov r8, r8)
 8009850:	20000588 	.word	0x20000588

08009854 <__malloc_unlock>:
 8009854:	b510      	push	{r4, lr}
 8009856:	4802      	ldr	r0, [pc, #8]	@ (8009860 <__malloc_unlock+0xc>)
 8009858:	f7ff fefd 	bl	8009656 <__retarget_lock_release_recursive>
 800985c:	bd10      	pop	{r4, pc}
 800985e:	46c0      	nop			@ (mov r8, r8)
 8009860:	20000588 	.word	0x20000588

08009864 <__ssputs_r>:
 8009864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009866:	688e      	ldr	r6, [r1, #8]
 8009868:	b085      	sub	sp, #20
 800986a:	001f      	movs	r7, r3
 800986c:	000c      	movs	r4, r1
 800986e:	680b      	ldr	r3, [r1, #0]
 8009870:	9002      	str	r0, [sp, #8]
 8009872:	9203      	str	r2, [sp, #12]
 8009874:	42be      	cmp	r6, r7
 8009876:	d830      	bhi.n	80098da <__ssputs_r+0x76>
 8009878:	210c      	movs	r1, #12
 800987a:	5e62      	ldrsh	r2, [r4, r1]
 800987c:	2190      	movs	r1, #144	@ 0x90
 800987e:	00c9      	lsls	r1, r1, #3
 8009880:	420a      	tst	r2, r1
 8009882:	d028      	beq.n	80098d6 <__ssputs_r+0x72>
 8009884:	2003      	movs	r0, #3
 8009886:	6921      	ldr	r1, [r4, #16]
 8009888:	1a5b      	subs	r3, r3, r1
 800988a:	9301      	str	r3, [sp, #4]
 800988c:	6963      	ldr	r3, [r4, #20]
 800988e:	4343      	muls	r3, r0
 8009890:	9801      	ldr	r0, [sp, #4]
 8009892:	0fdd      	lsrs	r5, r3, #31
 8009894:	18ed      	adds	r5, r5, r3
 8009896:	1c7b      	adds	r3, r7, #1
 8009898:	181b      	adds	r3, r3, r0
 800989a:	106d      	asrs	r5, r5, #1
 800989c:	42ab      	cmp	r3, r5
 800989e:	d900      	bls.n	80098a2 <__ssputs_r+0x3e>
 80098a0:	001d      	movs	r5, r3
 80098a2:	0552      	lsls	r2, r2, #21
 80098a4:	d528      	bpl.n	80098f8 <__ssputs_r+0x94>
 80098a6:	0029      	movs	r1, r5
 80098a8:	9802      	ldr	r0, [sp, #8]
 80098aa:	f7ff ff4b 	bl	8009744 <_malloc_r>
 80098ae:	1e06      	subs	r6, r0, #0
 80098b0:	d02c      	beq.n	800990c <__ssputs_r+0xa8>
 80098b2:	9a01      	ldr	r2, [sp, #4]
 80098b4:	6921      	ldr	r1, [r4, #16]
 80098b6:	f7ff fecf 	bl	8009658 <memcpy>
 80098ba:	89a2      	ldrh	r2, [r4, #12]
 80098bc:	4b18      	ldr	r3, [pc, #96]	@ (8009920 <__ssputs_r+0xbc>)
 80098be:	401a      	ands	r2, r3
 80098c0:	2380      	movs	r3, #128	@ 0x80
 80098c2:	4313      	orrs	r3, r2
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	9b01      	ldr	r3, [sp, #4]
 80098c8:	6126      	str	r6, [r4, #16]
 80098ca:	18f6      	adds	r6, r6, r3
 80098cc:	6026      	str	r6, [r4, #0]
 80098ce:	003e      	movs	r6, r7
 80098d0:	6165      	str	r5, [r4, #20]
 80098d2:	1aed      	subs	r5, r5, r3
 80098d4:	60a5      	str	r5, [r4, #8]
 80098d6:	42be      	cmp	r6, r7
 80098d8:	d900      	bls.n	80098dc <__ssputs_r+0x78>
 80098da:	003e      	movs	r6, r7
 80098dc:	0032      	movs	r2, r6
 80098de:	9903      	ldr	r1, [sp, #12]
 80098e0:	6820      	ldr	r0, [r4, #0]
 80098e2:	f7ff fe71 	bl	80095c8 <memmove>
 80098e6:	2000      	movs	r0, #0
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	1b9b      	subs	r3, r3, r6
 80098ec:	60a3      	str	r3, [r4, #8]
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	199b      	adds	r3, r3, r6
 80098f2:	6023      	str	r3, [r4, #0]
 80098f4:	b005      	add	sp, #20
 80098f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f8:	002a      	movs	r2, r5
 80098fa:	9802      	ldr	r0, [sp, #8]
 80098fc:	f000 faab 	bl	8009e56 <_realloc_r>
 8009900:	1e06      	subs	r6, r0, #0
 8009902:	d1e0      	bne.n	80098c6 <__ssputs_r+0x62>
 8009904:	6921      	ldr	r1, [r4, #16]
 8009906:	9802      	ldr	r0, [sp, #8]
 8009908:	f7ff feb0 	bl	800966c <_free_r>
 800990c:	230c      	movs	r3, #12
 800990e:	2001      	movs	r0, #1
 8009910:	9a02      	ldr	r2, [sp, #8]
 8009912:	4240      	negs	r0, r0
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	89a2      	ldrh	r2, [r4, #12]
 8009918:	3334      	adds	r3, #52	@ 0x34
 800991a:	4313      	orrs	r3, r2
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	e7e9      	b.n	80098f4 <__ssputs_r+0x90>
 8009920:	fffffb7f 	.word	0xfffffb7f

08009924 <_svfiprintf_r>:
 8009924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009926:	b0a1      	sub	sp, #132	@ 0x84
 8009928:	9003      	str	r0, [sp, #12]
 800992a:	001d      	movs	r5, r3
 800992c:	898b      	ldrh	r3, [r1, #12]
 800992e:	000f      	movs	r7, r1
 8009930:	0016      	movs	r6, r2
 8009932:	061b      	lsls	r3, r3, #24
 8009934:	d511      	bpl.n	800995a <_svfiprintf_r+0x36>
 8009936:	690b      	ldr	r3, [r1, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10e      	bne.n	800995a <_svfiprintf_r+0x36>
 800993c:	2140      	movs	r1, #64	@ 0x40
 800993e:	f7ff ff01 	bl	8009744 <_malloc_r>
 8009942:	6038      	str	r0, [r7, #0]
 8009944:	6138      	str	r0, [r7, #16]
 8009946:	2800      	cmp	r0, #0
 8009948:	d105      	bne.n	8009956 <_svfiprintf_r+0x32>
 800994a:	230c      	movs	r3, #12
 800994c:	9a03      	ldr	r2, [sp, #12]
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	2001      	movs	r0, #1
 8009952:	4240      	negs	r0, r0
 8009954:	e0cf      	b.n	8009af6 <_svfiprintf_r+0x1d2>
 8009956:	2340      	movs	r3, #64	@ 0x40
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	2300      	movs	r3, #0
 800995c:	ac08      	add	r4, sp, #32
 800995e:	6163      	str	r3, [r4, #20]
 8009960:	3320      	adds	r3, #32
 8009962:	7663      	strb	r3, [r4, #25]
 8009964:	3310      	adds	r3, #16
 8009966:	76a3      	strb	r3, [r4, #26]
 8009968:	9507      	str	r5, [sp, #28]
 800996a:	0035      	movs	r5, r6
 800996c:	782b      	ldrb	r3, [r5, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <_svfiprintf_r+0x52>
 8009972:	2b25      	cmp	r3, #37	@ 0x25
 8009974:	d148      	bne.n	8009a08 <_svfiprintf_r+0xe4>
 8009976:	1bab      	subs	r3, r5, r6
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	42b5      	cmp	r5, r6
 800997c:	d00b      	beq.n	8009996 <_svfiprintf_r+0x72>
 800997e:	0032      	movs	r2, r6
 8009980:	0039      	movs	r1, r7
 8009982:	9803      	ldr	r0, [sp, #12]
 8009984:	f7ff ff6e 	bl	8009864 <__ssputs_r>
 8009988:	3001      	adds	r0, #1
 800998a:	d100      	bne.n	800998e <_svfiprintf_r+0x6a>
 800998c:	e0ae      	b.n	8009aec <_svfiprintf_r+0x1c8>
 800998e:	6963      	ldr	r3, [r4, #20]
 8009990:	9a05      	ldr	r2, [sp, #20]
 8009992:	189b      	adds	r3, r3, r2
 8009994:	6163      	str	r3, [r4, #20]
 8009996:	782b      	ldrb	r3, [r5, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d100      	bne.n	800999e <_svfiprintf_r+0x7a>
 800999c:	e0a6      	b.n	8009aec <_svfiprintf_r+0x1c8>
 800999e:	2201      	movs	r2, #1
 80099a0:	2300      	movs	r3, #0
 80099a2:	4252      	negs	r2, r2
 80099a4:	6062      	str	r2, [r4, #4]
 80099a6:	a904      	add	r1, sp, #16
 80099a8:	3254      	adds	r2, #84	@ 0x54
 80099aa:	1852      	adds	r2, r2, r1
 80099ac:	1c6e      	adds	r6, r5, #1
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	60e3      	str	r3, [r4, #12]
 80099b2:	60a3      	str	r3, [r4, #8]
 80099b4:	7013      	strb	r3, [r2, #0]
 80099b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80099b8:	4b54      	ldr	r3, [pc, #336]	@ (8009b0c <_svfiprintf_r+0x1e8>)
 80099ba:	2205      	movs	r2, #5
 80099bc:	0018      	movs	r0, r3
 80099be:	7831      	ldrb	r1, [r6, #0]
 80099c0:	9305      	str	r3, [sp, #20]
 80099c2:	f000 fa3d 	bl	8009e40 <memchr>
 80099c6:	1c75      	adds	r5, r6, #1
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d11f      	bne.n	8009a0c <_svfiprintf_r+0xe8>
 80099cc:	6822      	ldr	r2, [r4, #0]
 80099ce:	06d3      	lsls	r3, r2, #27
 80099d0:	d504      	bpl.n	80099dc <_svfiprintf_r+0xb8>
 80099d2:	2353      	movs	r3, #83	@ 0x53
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	185b      	adds	r3, r3, r1
 80099d8:	2120      	movs	r1, #32
 80099da:	7019      	strb	r1, [r3, #0]
 80099dc:	0713      	lsls	r3, r2, #28
 80099de:	d504      	bpl.n	80099ea <_svfiprintf_r+0xc6>
 80099e0:	2353      	movs	r3, #83	@ 0x53
 80099e2:	a904      	add	r1, sp, #16
 80099e4:	185b      	adds	r3, r3, r1
 80099e6:	212b      	movs	r1, #43	@ 0x2b
 80099e8:	7019      	strb	r1, [r3, #0]
 80099ea:	7833      	ldrb	r3, [r6, #0]
 80099ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ee:	d016      	beq.n	8009a1e <_svfiprintf_r+0xfa>
 80099f0:	0035      	movs	r5, r6
 80099f2:	2100      	movs	r1, #0
 80099f4:	200a      	movs	r0, #10
 80099f6:	68e3      	ldr	r3, [r4, #12]
 80099f8:	782a      	ldrb	r2, [r5, #0]
 80099fa:	1c6e      	adds	r6, r5, #1
 80099fc:	3a30      	subs	r2, #48	@ 0x30
 80099fe:	2a09      	cmp	r2, #9
 8009a00:	d950      	bls.n	8009aa4 <_svfiprintf_r+0x180>
 8009a02:	2900      	cmp	r1, #0
 8009a04:	d111      	bne.n	8009a2a <_svfiprintf_r+0x106>
 8009a06:	e017      	b.n	8009a38 <_svfiprintf_r+0x114>
 8009a08:	3501      	adds	r5, #1
 8009a0a:	e7af      	b.n	800996c <_svfiprintf_r+0x48>
 8009a0c:	9b05      	ldr	r3, [sp, #20]
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	1ac0      	subs	r0, r0, r3
 8009a12:	2301      	movs	r3, #1
 8009a14:	4083      	lsls	r3, r0
 8009a16:	4313      	orrs	r3, r2
 8009a18:	002e      	movs	r6, r5
 8009a1a:	6023      	str	r3, [r4, #0]
 8009a1c:	e7cc      	b.n	80099b8 <_svfiprintf_r+0x94>
 8009a1e:	9b07      	ldr	r3, [sp, #28]
 8009a20:	1d19      	adds	r1, r3, #4
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	9107      	str	r1, [sp, #28]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	db01      	blt.n	8009a2e <_svfiprintf_r+0x10a>
 8009a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a2c:	e004      	b.n	8009a38 <_svfiprintf_r+0x114>
 8009a2e:	425b      	negs	r3, r3
 8009a30:	60e3      	str	r3, [r4, #12]
 8009a32:	2302      	movs	r3, #2
 8009a34:	4313      	orrs	r3, r2
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	782b      	ldrb	r3, [r5, #0]
 8009a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a3c:	d10c      	bne.n	8009a58 <_svfiprintf_r+0x134>
 8009a3e:	786b      	ldrb	r3, [r5, #1]
 8009a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a42:	d134      	bne.n	8009aae <_svfiprintf_r+0x18a>
 8009a44:	9b07      	ldr	r3, [sp, #28]
 8009a46:	3502      	adds	r5, #2
 8009a48:	1d1a      	adds	r2, r3, #4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	9207      	str	r2, [sp, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	da01      	bge.n	8009a56 <_svfiprintf_r+0x132>
 8009a52:	2301      	movs	r3, #1
 8009a54:	425b      	negs	r3, r3
 8009a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a58:	4e2d      	ldr	r6, [pc, #180]	@ (8009b10 <_svfiprintf_r+0x1ec>)
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	0030      	movs	r0, r6
 8009a5e:	7829      	ldrb	r1, [r5, #0]
 8009a60:	f000 f9ee 	bl	8009e40 <memchr>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d006      	beq.n	8009a76 <_svfiprintf_r+0x152>
 8009a68:	2340      	movs	r3, #64	@ 0x40
 8009a6a:	1b80      	subs	r0, r0, r6
 8009a6c:	4083      	lsls	r3, r0
 8009a6e:	6822      	ldr	r2, [r4, #0]
 8009a70:	3501      	adds	r5, #1
 8009a72:	4313      	orrs	r3, r2
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	7829      	ldrb	r1, [r5, #0]
 8009a78:	2206      	movs	r2, #6
 8009a7a:	4826      	ldr	r0, [pc, #152]	@ (8009b14 <_svfiprintf_r+0x1f0>)
 8009a7c:	1c6e      	adds	r6, r5, #1
 8009a7e:	7621      	strb	r1, [r4, #24]
 8009a80:	f000 f9de 	bl	8009e40 <memchr>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d038      	beq.n	8009afa <_svfiprintf_r+0x1d6>
 8009a88:	4b23      	ldr	r3, [pc, #140]	@ (8009b18 <_svfiprintf_r+0x1f4>)
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d122      	bne.n	8009ad4 <_svfiprintf_r+0x1b0>
 8009a8e:	2207      	movs	r2, #7
 8009a90:	9b07      	ldr	r3, [sp, #28]
 8009a92:	3307      	adds	r3, #7
 8009a94:	4393      	bics	r3, r2
 8009a96:	3308      	adds	r3, #8
 8009a98:	9307      	str	r3, [sp, #28]
 8009a9a:	6963      	ldr	r3, [r4, #20]
 8009a9c:	9a04      	ldr	r2, [sp, #16]
 8009a9e:	189b      	adds	r3, r3, r2
 8009aa0:	6163      	str	r3, [r4, #20]
 8009aa2:	e762      	b.n	800996a <_svfiprintf_r+0x46>
 8009aa4:	4343      	muls	r3, r0
 8009aa6:	0035      	movs	r5, r6
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	189b      	adds	r3, r3, r2
 8009aac:	e7a4      	b.n	80099f8 <_svfiprintf_r+0xd4>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	200a      	movs	r0, #10
 8009ab2:	0019      	movs	r1, r3
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	6063      	str	r3, [r4, #4]
 8009ab8:	782a      	ldrb	r2, [r5, #0]
 8009aba:	1c6e      	adds	r6, r5, #1
 8009abc:	3a30      	subs	r2, #48	@ 0x30
 8009abe:	2a09      	cmp	r2, #9
 8009ac0:	d903      	bls.n	8009aca <_svfiprintf_r+0x1a6>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0c8      	beq.n	8009a58 <_svfiprintf_r+0x134>
 8009ac6:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ac8:	e7c6      	b.n	8009a58 <_svfiprintf_r+0x134>
 8009aca:	4341      	muls	r1, r0
 8009acc:	0035      	movs	r5, r6
 8009ace:	2301      	movs	r3, #1
 8009ad0:	1889      	adds	r1, r1, r2
 8009ad2:	e7f1      	b.n	8009ab8 <_svfiprintf_r+0x194>
 8009ad4:	aa07      	add	r2, sp, #28
 8009ad6:	9200      	str	r2, [sp, #0]
 8009ad8:	0021      	movs	r1, r4
 8009ada:	003a      	movs	r2, r7
 8009adc:	4b0f      	ldr	r3, [pc, #60]	@ (8009b1c <_svfiprintf_r+0x1f8>)
 8009ade:	9803      	ldr	r0, [sp, #12]
 8009ae0:	e000      	b.n	8009ae4 <_svfiprintf_r+0x1c0>
 8009ae2:	bf00      	nop
 8009ae4:	9004      	str	r0, [sp, #16]
 8009ae6:	9b04      	ldr	r3, [sp, #16]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	d1d6      	bne.n	8009a9a <_svfiprintf_r+0x176>
 8009aec:	89bb      	ldrh	r3, [r7, #12]
 8009aee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009af0:	065b      	lsls	r3, r3, #25
 8009af2:	d500      	bpl.n	8009af6 <_svfiprintf_r+0x1d2>
 8009af4:	e72c      	b.n	8009950 <_svfiprintf_r+0x2c>
 8009af6:	b021      	add	sp, #132	@ 0x84
 8009af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afa:	aa07      	add	r2, sp, #28
 8009afc:	9200      	str	r2, [sp, #0]
 8009afe:	0021      	movs	r1, r4
 8009b00:	003a      	movs	r2, r7
 8009b02:	4b06      	ldr	r3, [pc, #24]	@ (8009b1c <_svfiprintf_r+0x1f8>)
 8009b04:	9803      	ldr	r0, [sp, #12]
 8009b06:	f000 f87b 	bl	8009c00 <_printf_i>
 8009b0a:	e7eb      	b.n	8009ae4 <_svfiprintf_r+0x1c0>
 8009b0c:	0800a2fc 	.word	0x0800a2fc
 8009b10:	0800a302 	.word	0x0800a302
 8009b14:	0800a306 	.word	0x0800a306
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	08009865 	.word	0x08009865

08009b20 <_printf_common>:
 8009b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b22:	0016      	movs	r6, r2
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	688a      	ldr	r2, [r1, #8]
 8009b28:	690b      	ldr	r3, [r1, #16]
 8009b2a:	000c      	movs	r4, r1
 8009b2c:	9000      	str	r0, [sp, #0]
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	da00      	bge.n	8009b34 <_printf_common+0x14>
 8009b32:	0013      	movs	r3, r2
 8009b34:	0022      	movs	r2, r4
 8009b36:	6033      	str	r3, [r6, #0]
 8009b38:	3243      	adds	r2, #67	@ 0x43
 8009b3a:	7812      	ldrb	r2, [r2, #0]
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	d001      	beq.n	8009b44 <_printf_common+0x24>
 8009b40:	3301      	adds	r3, #1
 8009b42:	6033      	str	r3, [r6, #0]
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	069b      	lsls	r3, r3, #26
 8009b48:	d502      	bpl.n	8009b50 <_printf_common+0x30>
 8009b4a:	6833      	ldr	r3, [r6, #0]
 8009b4c:	3302      	adds	r3, #2
 8009b4e:	6033      	str	r3, [r6, #0]
 8009b50:	6822      	ldr	r2, [r4, #0]
 8009b52:	2306      	movs	r3, #6
 8009b54:	0015      	movs	r5, r2
 8009b56:	401d      	ands	r5, r3
 8009b58:	421a      	tst	r2, r3
 8009b5a:	d027      	beq.n	8009bac <_printf_common+0x8c>
 8009b5c:	0023      	movs	r3, r4
 8009b5e:	3343      	adds	r3, #67	@ 0x43
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	1e5a      	subs	r2, r3, #1
 8009b64:	4193      	sbcs	r3, r2
 8009b66:	6822      	ldr	r2, [r4, #0]
 8009b68:	0692      	lsls	r2, r2, #26
 8009b6a:	d430      	bmi.n	8009bce <_printf_common+0xae>
 8009b6c:	0022      	movs	r2, r4
 8009b6e:	9901      	ldr	r1, [sp, #4]
 8009b70:	9800      	ldr	r0, [sp, #0]
 8009b72:	9d08      	ldr	r5, [sp, #32]
 8009b74:	3243      	adds	r2, #67	@ 0x43
 8009b76:	47a8      	blx	r5
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d025      	beq.n	8009bc8 <_printf_common+0xa8>
 8009b7c:	2206      	movs	r2, #6
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	2500      	movs	r5, #0
 8009b82:	4013      	ands	r3, r2
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d105      	bne.n	8009b94 <_printf_common+0x74>
 8009b88:	6833      	ldr	r3, [r6, #0]
 8009b8a:	68e5      	ldr	r5, [r4, #12]
 8009b8c:	1aed      	subs	r5, r5, r3
 8009b8e:	43eb      	mvns	r3, r5
 8009b90:	17db      	asrs	r3, r3, #31
 8009b92:	401d      	ands	r5, r3
 8009b94:	68a3      	ldr	r3, [r4, #8]
 8009b96:	6922      	ldr	r2, [r4, #16]
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	dd01      	ble.n	8009ba0 <_printf_common+0x80>
 8009b9c:	1a9b      	subs	r3, r3, r2
 8009b9e:	18ed      	adds	r5, r5, r3
 8009ba0:	2600      	movs	r6, #0
 8009ba2:	42b5      	cmp	r5, r6
 8009ba4:	d120      	bne.n	8009be8 <_printf_common+0xc8>
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	e010      	b.n	8009bcc <_printf_common+0xac>
 8009baa:	3501      	adds	r5, #1
 8009bac:	68e3      	ldr	r3, [r4, #12]
 8009bae:	6832      	ldr	r2, [r6, #0]
 8009bb0:	1a9b      	subs	r3, r3, r2
 8009bb2:	42ab      	cmp	r3, r5
 8009bb4:	ddd2      	ble.n	8009b5c <_printf_common+0x3c>
 8009bb6:	0022      	movs	r2, r4
 8009bb8:	2301      	movs	r3, #1
 8009bba:	9901      	ldr	r1, [sp, #4]
 8009bbc:	9800      	ldr	r0, [sp, #0]
 8009bbe:	9f08      	ldr	r7, [sp, #32]
 8009bc0:	3219      	adds	r2, #25
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d1f0      	bne.n	8009baa <_printf_common+0x8a>
 8009bc8:	2001      	movs	r0, #1
 8009bca:	4240      	negs	r0, r0
 8009bcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bce:	2030      	movs	r0, #48	@ 0x30
 8009bd0:	18e1      	adds	r1, r4, r3
 8009bd2:	3143      	adds	r1, #67	@ 0x43
 8009bd4:	7008      	strb	r0, [r1, #0]
 8009bd6:	0021      	movs	r1, r4
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	3145      	adds	r1, #69	@ 0x45
 8009bdc:	7809      	ldrb	r1, [r1, #0]
 8009bde:	18a2      	adds	r2, r4, r2
 8009be0:	3243      	adds	r2, #67	@ 0x43
 8009be2:	3302      	adds	r3, #2
 8009be4:	7011      	strb	r1, [r2, #0]
 8009be6:	e7c1      	b.n	8009b6c <_printf_common+0x4c>
 8009be8:	0022      	movs	r2, r4
 8009bea:	2301      	movs	r3, #1
 8009bec:	9901      	ldr	r1, [sp, #4]
 8009bee:	9800      	ldr	r0, [sp, #0]
 8009bf0:	9f08      	ldr	r7, [sp, #32]
 8009bf2:	321a      	adds	r2, #26
 8009bf4:	47b8      	blx	r7
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	d0e6      	beq.n	8009bc8 <_printf_common+0xa8>
 8009bfa:	3601      	adds	r6, #1
 8009bfc:	e7d1      	b.n	8009ba2 <_printf_common+0x82>
	...

08009c00 <_printf_i>:
 8009c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c02:	b08b      	sub	sp, #44	@ 0x2c
 8009c04:	9206      	str	r2, [sp, #24]
 8009c06:	000a      	movs	r2, r1
 8009c08:	3243      	adds	r2, #67	@ 0x43
 8009c0a:	9307      	str	r3, [sp, #28]
 8009c0c:	9005      	str	r0, [sp, #20]
 8009c0e:	9203      	str	r2, [sp, #12]
 8009c10:	7e0a      	ldrb	r2, [r1, #24]
 8009c12:	000c      	movs	r4, r1
 8009c14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c16:	2a78      	cmp	r2, #120	@ 0x78
 8009c18:	d809      	bhi.n	8009c2e <_printf_i+0x2e>
 8009c1a:	2a62      	cmp	r2, #98	@ 0x62
 8009c1c:	d80b      	bhi.n	8009c36 <_printf_i+0x36>
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	d100      	bne.n	8009c24 <_printf_i+0x24>
 8009c22:	e0bc      	b.n	8009d9e <_printf_i+0x19e>
 8009c24:	497b      	ldr	r1, [pc, #492]	@ (8009e14 <_printf_i+0x214>)
 8009c26:	9104      	str	r1, [sp, #16]
 8009c28:	2a58      	cmp	r2, #88	@ 0x58
 8009c2a:	d100      	bne.n	8009c2e <_printf_i+0x2e>
 8009c2c:	e090      	b.n	8009d50 <_printf_i+0x150>
 8009c2e:	0025      	movs	r5, r4
 8009c30:	3542      	adds	r5, #66	@ 0x42
 8009c32:	702a      	strb	r2, [r5, #0]
 8009c34:	e022      	b.n	8009c7c <_printf_i+0x7c>
 8009c36:	0010      	movs	r0, r2
 8009c38:	3863      	subs	r0, #99	@ 0x63
 8009c3a:	2815      	cmp	r0, #21
 8009c3c:	d8f7      	bhi.n	8009c2e <_printf_i+0x2e>
 8009c3e:	f7f6 fa63 	bl	8000108 <__gnu_thumb1_case_shi>
 8009c42:	0016      	.short	0x0016
 8009c44:	fff6001f 	.word	0xfff6001f
 8009c48:	fff6fff6 	.word	0xfff6fff6
 8009c4c:	001ffff6 	.word	0x001ffff6
 8009c50:	fff6fff6 	.word	0xfff6fff6
 8009c54:	fff6fff6 	.word	0xfff6fff6
 8009c58:	003600a1 	.word	0x003600a1
 8009c5c:	fff60080 	.word	0xfff60080
 8009c60:	00b2fff6 	.word	0x00b2fff6
 8009c64:	0036fff6 	.word	0x0036fff6
 8009c68:	fff6fff6 	.word	0xfff6fff6
 8009c6c:	0084      	.short	0x0084
 8009c6e:	0025      	movs	r5, r4
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	3542      	adds	r5, #66	@ 0x42
 8009c74:	1d11      	adds	r1, r2, #4
 8009c76:	6019      	str	r1, [r3, #0]
 8009c78:	6813      	ldr	r3, [r2, #0]
 8009c7a:	702b      	strb	r3, [r5, #0]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0a0      	b.n	8009dc2 <_printf_i+0x1c2>
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	6809      	ldr	r1, [r1, #0]
 8009c84:	1d02      	adds	r2, r0, #4
 8009c86:	060d      	lsls	r5, r1, #24
 8009c88:	d50b      	bpl.n	8009ca2 <_printf_i+0xa2>
 8009c8a:	6806      	ldr	r6, [r0, #0]
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	da03      	bge.n	8009c9a <_printf_i+0x9a>
 8009c92:	232d      	movs	r3, #45	@ 0x2d
 8009c94:	9a03      	ldr	r2, [sp, #12]
 8009c96:	4276      	negs	r6, r6
 8009c98:	7013      	strb	r3, [r2, #0]
 8009c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8009e14 <_printf_i+0x214>)
 8009c9c:	270a      	movs	r7, #10
 8009c9e:	9304      	str	r3, [sp, #16]
 8009ca0:	e018      	b.n	8009cd4 <_printf_i+0xd4>
 8009ca2:	6806      	ldr	r6, [r0, #0]
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	0649      	lsls	r1, r1, #25
 8009ca8:	d5f1      	bpl.n	8009c8e <_printf_i+0x8e>
 8009caa:	b236      	sxth	r6, r6
 8009cac:	e7ef      	b.n	8009c8e <_printf_i+0x8e>
 8009cae:	6808      	ldr	r0, [r1, #0]
 8009cb0:	6819      	ldr	r1, [r3, #0]
 8009cb2:	c940      	ldmia	r1!, {r6}
 8009cb4:	0605      	lsls	r5, r0, #24
 8009cb6:	d402      	bmi.n	8009cbe <_printf_i+0xbe>
 8009cb8:	0640      	lsls	r0, r0, #25
 8009cba:	d500      	bpl.n	8009cbe <_printf_i+0xbe>
 8009cbc:	b2b6      	uxth	r6, r6
 8009cbe:	6019      	str	r1, [r3, #0]
 8009cc0:	4b54      	ldr	r3, [pc, #336]	@ (8009e14 <_printf_i+0x214>)
 8009cc2:	270a      	movs	r7, #10
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	2a6f      	cmp	r2, #111	@ 0x6f
 8009cc8:	d100      	bne.n	8009ccc <_printf_i+0xcc>
 8009cca:	3f02      	subs	r7, #2
 8009ccc:	0023      	movs	r3, r4
 8009cce:	2200      	movs	r2, #0
 8009cd0:	3343      	adds	r3, #67	@ 0x43
 8009cd2:	701a      	strb	r2, [r3, #0]
 8009cd4:	6863      	ldr	r3, [r4, #4]
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	db03      	blt.n	8009ce4 <_printf_i+0xe4>
 8009cdc:	2104      	movs	r1, #4
 8009cde:	6822      	ldr	r2, [r4, #0]
 8009ce0:	438a      	bics	r2, r1
 8009ce2:	6022      	str	r2, [r4, #0]
 8009ce4:	2e00      	cmp	r6, #0
 8009ce6:	d102      	bne.n	8009cee <_printf_i+0xee>
 8009ce8:	9d03      	ldr	r5, [sp, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00c      	beq.n	8009d08 <_printf_i+0x108>
 8009cee:	9d03      	ldr	r5, [sp, #12]
 8009cf0:	0030      	movs	r0, r6
 8009cf2:	0039      	movs	r1, r7
 8009cf4:	f7f6 fa98 	bl	8000228 <__aeabi_uidivmod>
 8009cf8:	9b04      	ldr	r3, [sp, #16]
 8009cfa:	3d01      	subs	r5, #1
 8009cfc:	5c5b      	ldrb	r3, [r3, r1]
 8009cfe:	702b      	strb	r3, [r5, #0]
 8009d00:	0033      	movs	r3, r6
 8009d02:	0006      	movs	r6, r0
 8009d04:	429f      	cmp	r7, r3
 8009d06:	d9f3      	bls.n	8009cf0 <_printf_i+0xf0>
 8009d08:	2f08      	cmp	r7, #8
 8009d0a:	d109      	bne.n	8009d20 <_printf_i+0x120>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	07db      	lsls	r3, r3, #31
 8009d10:	d506      	bpl.n	8009d20 <_printf_i+0x120>
 8009d12:	6862      	ldr	r2, [r4, #4]
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	dc02      	bgt.n	8009d20 <_printf_i+0x120>
 8009d1a:	2330      	movs	r3, #48	@ 0x30
 8009d1c:	3d01      	subs	r5, #1
 8009d1e:	702b      	strb	r3, [r5, #0]
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	1b5b      	subs	r3, r3, r5
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	9b07      	ldr	r3, [sp, #28]
 8009d28:	0021      	movs	r1, r4
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	9805      	ldr	r0, [sp, #20]
 8009d2e:	9b06      	ldr	r3, [sp, #24]
 8009d30:	aa09      	add	r2, sp, #36	@ 0x24
 8009d32:	f7ff fef5 	bl	8009b20 <_printf_common>
 8009d36:	3001      	adds	r0, #1
 8009d38:	d148      	bne.n	8009dcc <_printf_i+0x1cc>
 8009d3a:	2001      	movs	r0, #1
 8009d3c:	4240      	negs	r0, r0
 8009d3e:	b00b      	add	sp, #44	@ 0x2c
 8009d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d42:	2220      	movs	r2, #32
 8009d44:	6809      	ldr	r1, [r1, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	6022      	str	r2, [r4, #0]
 8009d4a:	2278      	movs	r2, #120	@ 0x78
 8009d4c:	4932      	ldr	r1, [pc, #200]	@ (8009e18 <_printf_i+0x218>)
 8009d4e:	9104      	str	r1, [sp, #16]
 8009d50:	0021      	movs	r1, r4
 8009d52:	3145      	adds	r1, #69	@ 0x45
 8009d54:	700a      	strb	r2, [r1, #0]
 8009d56:	6819      	ldr	r1, [r3, #0]
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	c940      	ldmia	r1!, {r6}
 8009d5c:	0610      	lsls	r0, r2, #24
 8009d5e:	d402      	bmi.n	8009d66 <_printf_i+0x166>
 8009d60:	0650      	lsls	r0, r2, #25
 8009d62:	d500      	bpl.n	8009d66 <_printf_i+0x166>
 8009d64:	b2b6      	uxth	r6, r6
 8009d66:	6019      	str	r1, [r3, #0]
 8009d68:	07d3      	lsls	r3, r2, #31
 8009d6a:	d502      	bpl.n	8009d72 <_printf_i+0x172>
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	2e00      	cmp	r6, #0
 8009d74:	d001      	beq.n	8009d7a <_printf_i+0x17a>
 8009d76:	2710      	movs	r7, #16
 8009d78:	e7a8      	b.n	8009ccc <_printf_i+0xcc>
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	4393      	bics	r3, r2
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	e7f8      	b.n	8009d76 <_printf_i+0x176>
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	680d      	ldr	r5, [r1, #0]
 8009d88:	1d10      	adds	r0, r2, #4
 8009d8a:	6949      	ldr	r1, [r1, #20]
 8009d8c:	6018      	str	r0, [r3, #0]
 8009d8e:	6813      	ldr	r3, [r2, #0]
 8009d90:	062e      	lsls	r6, r5, #24
 8009d92:	d501      	bpl.n	8009d98 <_printf_i+0x198>
 8009d94:	6019      	str	r1, [r3, #0]
 8009d96:	e002      	b.n	8009d9e <_printf_i+0x19e>
 8009d98:	066d      	lsls	r5, r5, #25
 8009d9a:	d5fb      	bpl.n	8009d94 <_printf_i+0x194>
 8009d9c:	8019      	strh	r1, [r3, #0]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9d03      	ldr	r5, [sp, #12]
 8009da2:	6123      	str	r3, [r4, #16]
 8009da4:	e7bf      	b.n	8009d26 <_printf_i+0x126>
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	1d11      	adds	r1, r2, #4
 8009daa:	6019      	str	r1, [r3, #0]
 8009dac:	6815      	ldr	r5, [r2, #0]
 8009dae:	2100      	movs	r1, #0
 8009db0:	0028      	movs	r0, r5
 8009db2:	6862      	ldr	r2, [r4, #4]
 8009db4:	f000 f844 	bl	8009e40 <memchr>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d001      	beq.n	8009dc0 <_printf_i+0x1c0>
 8009dbc:	1b40      	subs	r0, r0, r5
 8009dbe:	6060      	str	r0, [r4, #4]
 8009dc0:	6863      	ldr	r3, [r4, #4]
 8009dc2:	6123      	str	r3, [r4, #16]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9a03      	ldr	r2, [sp, #12]
 8009dc8:	7013      	strb	r3, [r2, #0]
 8009dca:	e7ac      	b.n	8009d26 <_printf_i+0x126>
 8009dcc:	002a      	movs	r2, r5
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	9906      	ldr	r1, [sp, #24]
 8009dd2:	9805      	ldr	r0, [sp, #20]
 8009dd4:	9d07      	ldr	r5, [sp, #28]
 8009dd6:	47a8      	blx	r5
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d0ae      	beq.n	8009d3a <_printf_i+0x13a>
 8009ddc:	6823      	ldr	r3, [r4, #0]
 8009dde:	079b      	lsls	r3, r3, #30
 8009de0:	d415      	bmi.n	8009e0e <_printf_i+0x20e>
 8009de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de4:	68e0      	ldr	r0, [r4, #12]
 8009de6:	4298      	cmp	r0, r3
 8009de8:	daa9      	bge.n	8009d3e <_printf_i+0x13e>
 8009dea:	0018      	movs	r0, r3
 8009dec:	e7a7      	b.n	8009d3e <_printf_i+0x13e>
 8009dee:	0022      	movs	r2, r4
 8009df0:	2301      	movs	r3, #1
 8009df2:	9906      	ldr	r1, [sp, #24]
 8009df4:	9805      	ldr	r0, [sp, #20]
 8009df6:	9e07      	ldr	r6, [sp, #28]
 8009df8:	3219      	adds	r2, #25
 8009dfa:	47b0      	blx	r6
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d09c      	beq.n	8009d3a <_printf_i+0x13a>
 8009e00:	3501      	adds	r5, #1
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e06:	1a9b      	subs	r3, r3, r2
 8009e08:	42ab      	cmp	r3, r5
 8009e0a:	dcf0      	bgt.n	8009dee <_printf_i+0x1ee>
 8009e0c:	e7e9      	b.n	8009de2 <_printf_i+0x1e2>
 8009e0e:	2500      	movs	r5, #0
 8009e10:	e7f7      	b.n	8009e02 <_printf_i+0x202>
 8009e12:	46c0      	nop			@ (mov r8, r8)
 8009e14:	0800a30d 	.word	0x0800a30d
 8009e18:	0800a31e 	.word	0x0800a31e

08009e1c <_sbrk_r>:
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	b570      	push	{r4, r5, r6, lr}
 8009e20:	4d06      	ldr	r5, [pc, #24]	@ (8009e3c <_sbrk_r+0x20>)
 8009e22:	0004      	movs	r4, r0
 8009e24:	0008      	movs	r0, r1
 8009e26:	602b      	str	r3, [r5, #0]
 8009e28:	f7f9 ff18 	bl	8003c5c <_sbrk>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d103      	bne.n	8009e38 <_sbrk_r+0x1c>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d000      	beq.n	8009e38 <_sbrk_r+0x1c>
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	bd70      	pop	{r4, r5, r6, pc}
 8009e3a:	46c0      	nop			@ (mov r8, r8)
 8009e3c:	20000584 	.word	0x20000584

08009e40 <memchr>:
 8009e40:	b2c9      	uxtb	r1, r1
 8009e42:	1882      	adds	r2, r0, r2
 8009e44:	4290      	cmp	r0, r2
 8009e46:	d101      	bne.n	8009e4c <memchr+0xc>
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4770      	bx	lr
 8009e4c:	7803      	ldrb	r3, [r0, #0]
 8009e4e:	428b      	cmp	r3, r1
 8009e50:	d0fb      	beq.n	8009e4a <memchr+0xa>
 8009e52:	3001      	adds	r0, #1
 8009e54:	e7f6      	b.n	8009e44 <memchr+0x4>

08009e56 <_realloc_r>:
 8009e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e58:	0006      	movs	r6, r0
 8009e5a:	000c      	movs	r4, r1
 8009e5c:	0015      	movs	r5, r2
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	d105      	bne.n	8009e6e <_realloc_r+0x18>
 8009e62:	0011      	movs	r1, r2
 8009e64:	f7ff fc6e 	bl	8009744 <_malloc_r>
 8009e68:	0004      	movs	r4, r0
 8009e6a:	0020      	movs	r0, r4
 8009e6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	d103      	bne.n	8009e7a <_realloc_r+0x24>
 8009e72:	f7ff fbfb 	bl	800966c <_free_r>
 8009e76:	2400      	movs	r4, #0
 8009e78:	e7f7      	b.n	8009e6a <_realloc_r+0x14>
 8009e7a:	f000 f81b 	bl	8009eb4 <_malloc_usable_size_r>
 8009e7e:	0007      	movs	r7, r0
 8009e80:	4285      	cmp	r5, r0
 8009e82:	d802      	bhi.n	8009e8a <_realloc_r+0x34>
 8009e84:	0843      	lsrs	r3, r0, #1
 8009e86:	42ab      	cmp	r3, r5
 8009e88:	d3ef      	bcc.n	8009e6a <_realloc_r+0x14>
 8009e8a:	0029      	movs	r1, r5
 8009e8c:	0030      	movs	r0, r6
 8009e8e:	f7ff fc59 	bl	8009744 <_malloc_r>
 8009e92:	9001      	str	r0, [sp, #4]
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d0ee      	beq.n	8009e76 <_realloc_r+0x20>
 8009e98:	002a      	movs	r2, r5
 8009e9a:	42bd      	cmp	r5, r7
 8009e9c:	d900      	bls.n	8009ea0 <_realloc_r+0x4a>
 8009e9e:	003a      	movs	r2, r7
 8009ea0:	0021      	movs	r1, r4
 8009ea2:	9801      	ldr	r0, [sp, #4]
 8009ea4:	f7ff fbd8 	bl	8009658 <memcpy>
 8009ea8:	0021      	movs	r1, r4
 8009eaa:	0030      	movs	r0, r6
 8009eac:	f7ff fbde 	bl	800966c <_free_r>
 8009eb0:	9c01      	ldr	r4, [sp, #4]
 8009eb2:	e7da      	b.n	8009e6a <_realloc_r+0x14>

08009eb4 <_malloc_usable_size_r>:
 8009eb4:	1f0b      	subs	r3, r1, #4
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	1f18      	subs	r0, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da01      	bge.n	8009ec2 <_malloc_usable_size_r+0xe>
 8009ebe:	580b      	ldr	r3, [r1, r0]
 8009ec0:	18c0      	adds	r0, r0, r3
 8009ec2:	4770      	bx	lr

08009ec4 <_init>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	46c0      	nop			@ (mov r8, r8)
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr

08009ed0 <_fini>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	46c0      	nop			@ (mov r8, r8)
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr
